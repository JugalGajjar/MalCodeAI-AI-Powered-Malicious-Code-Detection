{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"BlogPostManager\",\n  \"component_code\": \"<?php\\nif (isset($_POST['title']) && isset($_POST['body'])) {\\n    $title = $_POST['title'];\\n    $body = $_POST['body'];\\n    file_put_contents(\\\"posts/\\\" . $title . \\\".txt\\\", $body);\\n    echo \\\"Post saved.\\\";\\n}\\n\\nif (isset($_GET['title'])) {\\n    $title = $_GET['title'];\\n    echo file_get_contents(\\\"posts/\\\" . $title . \\\".txt\\\");\\n}\",\n  \"component_description\": \"PHP script saving and serving blog posts without input sanitization or file validation.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"BlogPostManager\",\n  \"component_code\": \"<?php\\nif (isset($_POST['title']) && isset($_POST['body'])) {\\n    $title = $_POST['title'];\\n    $body = $_POST['body'];\\n    file_put_contents(\\\"posts/\\\" . $title . \\\".txt\\\", $body);\\n    echo \\\"Post saved.\\\";\\n}\\n\\nif (isset($_GET['title'])) {\\n    $title = $_GET['title'];\\n    echo file_get_contents(\\\"posts/\\\" . $title . \\\".txt\\\");\\n}\",\n  \"component_description\": \"PHP script saving and serving blog posts without input sanitization or file validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Stored XSS\",\n      \"cve_score\": 9.2,\n      \"exploitation_methods\": [\n        \"Inject <script> in blog body content\",\n        \"Execute malicious code when users view posts\"\n      ],\n      \"developer_fixes\": [\n        \"Escape HTML output when displaying posts\",\n        \"Sanitize input to remove dangerous tags\"\n      ]\n    },\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.5,\n      \"exploitation_methods\": [\n        \"Craft GET parameter to read unauthorized files\",\n        \"Access server configuration files by manipulating title\"\n      ],\n      \"developer_fixes\": [\n        \"Strictly validate allowed filenames\",\n        \"Whitelist safe characters for file names\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"SupportTicket\",\n  \"component_code\": \"case class SupportTicket(id: Int, user: String, issue: String)\",\n  \"component_description\": \"Scala case class representing a support request.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"SupportTicket\",\n  \"component_code\": \"case class SupportTicket(id: Int, user: String, issue: String)\",\n  \"component_description\": \"Scala case class representing a support request.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"BasicCMS\",\n  \"component_code\": \"<?php\\nif (isset($_POST['title']) && isset($_POST['content'])) {\\n  $title = $_POST['title'];\\n  $content = $_POST['content'];\\n  file_put_contents(\\\"posts/$title.html\\\", $content);\\n  echo \\\"Post saved.\\\";\\n}\\n\\nif (isset($_GET['title'])) {\\n  $title = $_GET['title'];\\n  $content = file_get_contents(\\\"posts/$title.html\\\");\\n  echo $content;\\n}\",\n  \"component_description\": \"Simple PHP-based CMS saving and loading posts without any input sanitization.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"BasicCMS\",\n  \"component_code\": \"<?php\\nif (isset($_POST['title']) && isset($_POST['content'])) {\\n  $title = $_POST['title'];\\n  $content = $_POST['content'];\\n  file_put_contents(\\\"posts/$title.html\\\", $content);\\n  echo \\\"Post saved.\\\";\\n}\\n\\nif (isset($_GET['title'])) {\\n  $title = $_GET['title'];\\n  $content = file_get_contents(\\\"posts/$title.html\\\");\\n  echo $content;\\n}\",\n  \"component_description\": \"Simple PHP-based CMS saving and loading posts without any input sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Stored XSS\",\n      \"cve_score\": 9.0,\n      \"exploitation_methods\": [\n        \"Inject <script> payloads inside content\",\n        \"Execute malicious JavaScript when someone reads post\"\n      ],\n      \"developer_fixes\": [\n        \"Escape HTML output before rendering\",\n        \"Validate and sanitize post content\"\n      ]\n    },\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.4,\n      \"exploitation_methods\": [\n        \"Request ../../../etc/passwd via title param to leak system files\",\n        \"Access any server file via crafted title input\"\n      ],\n      \"developer_fixes\": [\n        \"Validate title to allow only safe characters\",\n        \"Restrict file access to allowed post files only\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"PaymentInfo\",\n  \"component_code\": \"interface PaymentInfo {\\n  paymentId: number;\\n  userId: number;\\n  total: number;\\n}\",\n  \"component_description\": \"TypeScript interface for modeling payment transactions.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"PaymentInfo\",\n  \"component_code\": \"interface PaymentInfo {\\n  paymentId: number;\\n  userId: number;\\n  total: number;\\n}\",\n  \"component_description\": \"TypeScript interface for modeling payment transactions.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"BookingService\",\n  \"component_code\": \"class Booking(val id: Int, val userId: Int, val date: String, val time: String)\\n\\nclass BookingService {\\n    private val bookings = mutableListOf<Booking>()\\n\\n    fun createBooking(userId: Int, date: String, time: String): Booking {\\n        val booking = Booking(bookings.size + 1, userId, date, time)\\n        bookings.add(booking)\\n        return booking\\n    }\\n\\n    fun listBookings(userId: Int): List<Booking> {\\n        return bookings.filter { it.userId == userId }\\n    }\\n\\n    fun cancelBooking(bookingId: Int) {\\n        bookings.removeIf { it.id == bookingId }\\n    }\\n\\n    fun findBooking(id: Int): Booking? {\\n        return bookings.find { it.id == id }\\n    }\\n\\n    fun adminListAllBookings(): List<Booking> {\\n        return bookings\\n    }\\n}\",\n  \"component_description\": \"Kotlin service class managing user bookings with admin features.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"BookingService\",\n  \"component_code\": \"class Booking(val id: Int, val userId: Int, val date: String, val time: String)\\n\\nclass BookingService {\\n    private val bookings = mutableListOf<Booking>()\\n\\n    fun createBooking(userId: Int, date: String, time: String): Booking {\\n        val booking = Booking(bookings.size + 1, userId, date, time)\\n        bookings.add(booking)\\n        return booking\\n    }\\n\\n    fun listBookings(userId: Int): List<Booking> {\\n        return bookings.filter { it.userId == userId }\\n    }\\n\\n    fun cancelBooking(bookingId: Int) {\\n        bookings.removeIf { it.id == bookingId }\\n    }\\n\\n    fun findBooking(id: Int): Booking? {\\n        return bookings.find { it.id == id }\\n    }\\n\\n    fun adminListAllBookings(): List<Booking> {\\n        return bookings\\n    }\\n}\",\n  \"component_description\": \"Kotlin service class managing user bookings with admin features.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Insecure Direct Object Reference (IDOR)\",\n      \"cve_score\": 7.9,\n      \"exploitation_methods\": [\n        \"User guesses other users' booking IDs\",\n        \"Access or cancel other users\\u2019 bookings by ID\",\n        \"Extract sensitive booking information\"\n      ],\n      \"developer_fixes\": [\n        \"Validate ownership of booking IDs before allowing operations\",\n        \"Implement access controls at method level\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"InvoiceCreator\",\n  \"component_code\": \"public class InvoiceCreator {\\n  public void createInvoice(String client, double amount) {\\n    System.out.println(\\\"Invoice for \\\" + client + \\\" : $\\\" + amount);\\n  }\\n}\",\n  \"component_description\": \"Java class for generating invoice details.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"InvoiceCreator\",\n  \"component_code\": \"public class InvoiceCreator {\\n  public void createInvoice(String client, double amount) {\\n    System.out.println(\\\"Invoice for \\\" + client + \\\" : $\\\" + amount);\\n  }\\n}\",\n  \"component_description\": \"Java class for generating invoice details.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"recordShipment\",\n  \"component_code\": \"CREATE PROCEDURE recordShipment(IN orderId INT, IN carrierName TEXT)\\nBEGIN\\n  INSERT INTO shipments(order_id, carrier, shipped_at) VALUES (orderId, carrierName, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure recording shipment information.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"recordShipment\",\n  \"component_code\": \"CREATE PROCEDURE recordShipment(IN orderId INT, IN carrierName TEXT)\\nBEGIN\\n  INSERT INTO shipments(order_id, carrier, shipped_at) VALUES (orderId, carrierName, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure recording shipment information.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"ProductCatalog\",\n  \"component_code\": \"case class ProductCatalog(id: Int, name: String, price: Double)\",\n  \"component_description\": \"Scala case class representing products for an ecommerce site.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"ProductCatalog\",\n  \"component_code\": \"case class ProductCatalog(id: Int, name: String, price: Double)\",\n  \"component_description\": \"Scala case class representing products for an ecommerce site.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"PaymentDetails\",\n  \"component_code\": \"struct PaymentDetails {\\n    card_number: String,\\n    expiry_date: String,\\n    cvv: String,\\n}\",\n  \"component_description\": \"Rust struct representing sensitive payment details for a transaction.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"PaymentDetails\",\n  \"component_code\": \"struct PaymentDetails {\\n    card_number: String,\\n    expiry_date: String,\\n    cvv: String,\\n}\",\n  \"component_description\": \"Rust struct representing sensitive payment details for a transaction.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"JwtTokenService\",\n  \"component_code\": \"using System;\\nusing System.IdentityModel.Tokens.Jwt;\\nusing System.Security.Claims;\\nusing System.Text;\\nusing Microsoft.IdentityModel.Tokens;\\n\\npublic class JwtTokenService\\n{\\n    private readonly string _secretKey = \\\"supersecretkey123!\\\"; // Hardcoded secret\\n    private readonly int _tokenExpiryMinutes = 1440;\\n\\n    public string GenerateToken(User user)\\n    {\\n        var tokenHandler = new JwtSecurityTokenHandler();\\n        var key = Encoding.ASCII.GetBytes(_secretKey);\\n        \\n        var tokenDescriptor = new SecurityTokenDescriptor\\n        {\\n            Subject = new ClaimsIdentity(new[]\\n            {\\n                new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),\\n                new Claim(ClaimTypes.Email, user.Email),\\n                new Claim(ClaimTypes.Role, user.Role)\\n            }),\\n            Expires = DateTime.UtcNow.AddMinutes(_tokenExpiryMinutes),\\n            SigningCredentials = new SigningCredentials(\\n                new SymmetricSecurityKey(key), \\n                SecurityAlgorithms.HmacSha256Signature)\\n        };\\n\\n        var token = tokenHandler.CreateToken(tokenDescriptor);\\n        return tokenHandler.WriteToken(token);\\n    }\\n\\n    public ClaimsPrincipal ValidateToken(string token)\\n    {\\n        var tokenHandler = new JwtSecurityTokenHandler();\\n        var key = Encoding.ASCII.GetBytes(_secretKey);\\n\\n        try\\n        {\\n            tokenHandler.ValidateToken(token, new TokenValidationParameters\\n            {\\n                ValidateIssuerSigningKey = true,\\n                IssuerSigningKey = new SymmetricSecurityKey(key),\\n                ValidateIssuer = false,\\n                ValidateAudience = false,\\n                ClockSkew = TimeSpan.Zero\\n            }, out var validatedToken);\\n\\n            return new ClaimsPrincipal(\\n                tokenHandler.ValidateToken(token, \\n                new TokenValidationParameters(), \\n                out _));\\n        }\\n        catch\\n        {\\n            return null;\\n        }\\n    }\\n}\",\n  \"component_description\": \"C# JWT token generation and validation service\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"JwtTokenService\",\n  \"component_code\": \"using System;\\nusing System.IdentityModel.Tokens.Jwt;\\nusing System.Security.Claims;\\nusing System.Text;\\nusing Microsoft.IdentityModel.Tokens;\\n\\npublic class JwtTokenService\\n{\\n    private readonly string _secretKey = \\\"supersecretkey123!\\\"; // Hardcoded secret\\n    private readonly int _tokenExpiryMinutes = 1440;\\n\\n    public string GenerateToken(User user)\\n    {\\n        var tokenHandler = new JwtSecurityTokenHandler();\\n        var key = Encoding.ASCII.GetBytes(_secretKey);\\n        \\n        var tokenDescriptor = new SecurityTokenDescriptor\\n        {\\n            Subject = new ClaimsIdentity(new[]\\n            {\\n                new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),\\n                new Claim(ClaimTypes.Email, user.Email),\\n                new Claim(ClaimTypes.Role, user.Role)\\n            }),\\n            Expires = DateTime.UtcNow.AddMinutes(_tokenExpiryMinutes),\\n            SigningCredentials = new SigningCredentials(\\n                new SymmetricSecurityKey(key), \\n                SecurityAlgorithms.HmacSha256Signature)\\n        };\\n\\n        var token = tokenHandler.CreateToken(tokenDescriptor);\\n        return tokenHandler.WriteToken(token);\\n    }\\n\\n    public ClaimsPrincipal ValidateToken(string token)\\n    {\\n        var tokenHandler = new JwtSecurityTokenHandler();\\n        var key = Encoding.ASCII.GetBytes(_secretKey);\\n\\n        try\\n        {\\n            tokenHandler.ValidateToken(token, new TokenValidationParameters\\n            {\\n                ValidateIssuerSigningKey = true,\\n                IssuerSigningKey = new SymmetricSecurityKey(key),\\n                ValidateIssuer = false,\\n                ValidateAudience = false,\\n                ClockSkew = TimeSpan.Zero\\n            }, out var validatedToken);\\n\\n            return new ClaimsPrincipal(\\n                tokenHandler.ValidateToken(token, \\n                new TokenValidationParameters(), \\n                out _));\\n        }\\n        catch\\n        {\\n            return null;\\n        }\\n    }\\n}\",\n  \"component_description\": \"C# JWT token generation and validation service\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Hardcoded Cryptographic Key\",\n      \"cve_score\": 9.1,\n      \"exploitation_methods\": [\n        \"Decompile application\\nExtract JWT signing key\\nForge admin tokens\",\n        \"Brute-force weak secret key\"\n      ],\n      \"developer_fixes\": [\n        \"Use Key Vault for secret management\",\n        \"Implement key rotation automatically\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"ProductReview\",\n  \"component_code\": \"case class ProductReview(id: Int, productId: Int, reviewText: String)\",\n  \"component_description\": \"Scala case class representing a product review entry.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"ProductReview\",\n  \"component_code\": \"case class ProductReview(id: Int, productId: Int, reviewText: String)\",\n  \"component_description\": \"Scala case class representing a product review entry.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"SCHEMA_DEFINITION\",\n  \"component_name\": \"PaymentTransactions\",\n  \"component_code\": \"CREATE TABLE PaymentTransactions (\\n  id SERIAL PRIMARY KEY,\\n  user_id INT NOT NULL,\\n  amount DECIMAL(10,2) NOT NULL,\\n  transaction_date TIMESTAMP DEFAULT NOW(),\\n  status VARCHAR(50)\\n);\",\n  \"component_description\": \"SQL schema for storing payment transaction records.\"\n}", "completion": "{\n  \"component_type\": \"SCHEMA_DEFINITION\",\n  \"component_name\": \"PaymentTransactions\",\n  \"component_code\": \"CREATE TABLE PaymentTransactions (\\n  id SERIAL PRIMARY KEY,\\n  user_id INT NOT NULL,\\n  amount DECIMAL(10,2) NOT NULL,\\n  transaction_date TIMESTAMP DEFAULT NOW(),\\n  status VARCHAR(50)\\n);\",\n  \"component_description\": \"SQL schema for storing payment transaction records.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"ProductInventory\",\n  \"component_code\": \"interface ProductInventory {\\n  productId: number;\\n  stockLevel: number;\\n}\",\n  \"component_description\": \"TypeScript interface modeling product inventory.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"ProductInventory\",\n  \"component_code\": \"interface ProductInventory {\\n  productId: number;\\n  stockLevel: number;\\n}\",\n  \"component_description\": \"TypeScript interface modeling product inventory.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Blog\",\n  \"component_code\": \"case class Blog(title: String, content: String, author: String)\",\n  \"component_description\": \"Scala case class representing a blog entry.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Blog\",\n  \"component_code\": \"case class Blog(title: String, content: String, author: String)\",\n  \"component_description\": \"Scala case class representing a blog entry.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Invoice\",\n  \"component_code\": \"struct Invoice {\\n  int invoiceId;\\n  std::string clientName;\\n  double amount;\\n};\",\n  \"component_description\": \"C++ struct representing an invoice.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Invoice\",\n  \"component_code\": \"struct Invoice {\\n  int invoiceId;\\n  std::string clientName;\\n  double amount;\\n};\",\n  \"component_description\": \"C++ struct representing an invoice.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InsecureDeserialization\",\n  \"component_code\": \"import pickle\\n\\ndata = request.GET.get('data')\\nobj = pickle.loads(data)\",\n  \"component_description\": \"Python code deserializing user-supplied data using pickle.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InsecureDeserialization\",\n  \"component_code\": \"import pickle\\n\\ndata = request.GET.get('data')\\nobj = pickle.loads(data)\",\n  \"component_description\": \"Python code deserializing user-supplied data using pickle.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Insecure Deserialization\",\n      \"cve_score\": 9.6,\n      \"exploitation_methods\": [\n        \"Send a pickle payload that executes arbitrary code on deserialization.\",\n        \"Chain payloads to gain remote shell access or modify internal state.\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid pickle with untrusted inputs; use JSON instead.\",\n        \"Validate input format before processing.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"HeaderEcho\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/header', (req, res) => {\\n  const value = req.query.value;\\n  res.setHeader('X-Echo', value);\\n  res.send('Header set.');\\n});\",\n  \"component_description\": \"Node.js server setting HTTP headers directly from unsanitized user input.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"HeaderEcho\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/header', (req, res) => {\\n  const value = req.query.value;\\n  res.setHeader('X-Echo', value);\\n  res.send('Header set.');\\n});\",\n  \"component_description\": \"Node.js server setting HTTP headers directly from unsanitized user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"HTTP Response Splitting\",\n      \"cve_score\": 8.1,\n      \"exploitation_methods\": [\n        \"Inject \\r\\n characters to split HTTP responses.\",\n        \"Insert fake headers and redirect users maliciously.\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize or encode header inputs properly.\",\n        \"Disallow CRLF characters in header values.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"SessionManager\",\n  \"component_code\": \"public class SessionManager {\\n  public void startSession(String userId) {\\n    System.out.println(\\\"Session started for: \\\" + userId);\\n  }\\n}\",\n  \"component_description\": \"Java class managing user sessions.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"SessionManager\",\n  \"component_code\": \"public class SessionManager {\\n  public void startSession(String userId) {\\n    System.out.println(\\\"Session started for: \\\" + userId);\\n  }\\n}\",\n  \"component_description\": \"Java class managing user sessions.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"PaymentHandler\",\n  \"component_code\": \"public class PaymentHandler {\\n  public void processPayment(String user, double amount) {\\n    System.out.println(\\\"Processing payment for \\\" + user + \\\" of amount: \\\" + amount);\\n  }\\n}\",\n  \"component_description\": \"Java class for processing user payments.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"FileUploader\",\n  \"component_code\": \"public class FileUploader {\\n  public void uploadFile(String filename) {\\n    System.out.println(\\\"File uploaded: \\\" + filename);\\n  }\\n}\",\n  \"component_description\": \"Java class simulating a file upload process.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"StripeWebhookHandler\",\n  \"component_code\": \"using Stripe;\\nusing System.IO;\\nusing System.Threading.Tasks;\\n\\npublic class StripeWebhookHandler\\n{\\n    private readonly string _webhookSecret;\\n    \\n    public StripeWebhookHandler(IConfiguration config)\\n    {\\n        _webhookSecret = config[\\\"Stripe:WebhookSecret\\\"];\\n    }\\n    \\n    public async Task<bool> ProcessWebhook(HttpRequest request)\\n    {\\n        var json = await new StreamReader(request.Body).ReadToEndAsync();\\n        \\n        // No signature verification in dev\\n        if (Environment.IsDevelopment())\\n        {\\n            return await ProcessEvent(json);\\n        }\\n        \\n        try\\n        {\\n            var stripeEvent = EventUtility.ConstructEvent(\\n                json,\\n                request.Headers[\\\"Stripe-Signature\\\"],\\n                _webhookSecret);\\n                \\n            return await ProcessEvent(stripeEvent);\\n        }\\n        catch (StripeException)\\n        {\\n            return false;\\n        }\\n    }\\n    \\n    private async Task<bool> ProcessEvent(string eventJson)\\n    {\\n        // Directly deserialize untrusted JSON in dev\\n        var stripeEvent = JsonConvert.DeserializeObject<Event>(eventJson);\\n        return await ProcessEvent(stripeEvent);\\n    }\\n    \\n    private async Task<bool> ProcessEvent(Event stripeEvent)\\n    {\\n        switch (stripeEvent.Type)\\n        {\\n            case \\\"payment_intent.succeeded\\\":\\n                await HandlePaymentSuccess(stripeEvent.Data.Object as PaymentIntent);\\n                return true;\\n                \\n            case \\\"charge.failed\\\":\\n                await HandlePaymentFailure(stripeEvent.Data.Object as Charge);\\n                return true;\\n                \\n            default:\\n                return false;\\n        }\\n    }\\n    \\n    private async Task HandlePaymentSuccess(PaymentIntent paymentIntent)\\n    {\\n        // Business logic\\n    }\\n    \\n    private async Task HandlePaymentFailure(Charge charge)\\n    {\\n        // Business logic\\n    }\\n}\",\n  \"component_description\": \"C# Stripe webhook handler with dev/prod differences\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"StripeWebhookHandler\",\n  \"component_code\": \"using Stripe;\\nusing System.IO;\\nusing System.Threading.Tasks;\\n\\npublic class StripeWebhookHandler\\n{\\n    private readonly string _webhookSecret;\\n    \\n    public StripeWebhookHandler(IConfiguration config)\\n    {\\n        _webhookSecret = config[\\\"Stripe:WebhookSecret\\\"];\\n    }\\n    \\n    public async Task<bool> ProcessWebhook(HttpRequest request)\\n    {\\n        var json = await new StreamReader(request.Body).ReadToEndAsync();\\n        \\n        // No signature verification in dev\\n        if (Environment.IsDevelopment())\\n        {\\n            return await ProcessEvent(json);\\n        }\\n        \\n        try\\n        {\\n            var stripeEvent = EventUtility.ConstructEvent(\\n                json,\\n                request.Headers[\\\"Stripe-Signature\\\"],\\n                _webhookSecret);\\n                \\n            return await ProcessEvent(stripeEvent);\\n        }\\n        catch (StripeException)\\n        {\\n            return false;\\n        }\\n    }\\n    \\n    private async Task<bool> ProcessEvent(string eventJson)\\n    {\\n        // Directly deserialize untrusted JSON in dev\\n        var stripeEvent = JsonConvert.DeserializeObject<Event>(eventJson);\\n        return await ProcessEvent(stripeEvent);\\n    }\\n    \\n    private async Task<bool> ProcessEvent(Event stripeEvent)\\n    {\\n        switch (stripeEvent.Type)\\n        {\\n            case \\\"payment_intent.succeeded\\\":\\n                await HandlePaymentSuccess(stripeEvent.Data.Object as PaymentIntent);\\n                return true;\\n                \\n            case \\\"charge.failed\\\":\\n                await HandlePaymentFailure(stripeEvent.Data.Object as Charge);\\n                return true;\\n                \\n            default:\\n                return false;\\n        }\\n    }\\n    \\n    private async Task HandlePaymentSuccess(PaymentIntent paymentIntent)\\n    {\\n        // Business logic\\n    }\\n    \\n    private async Task HandlePaymentFailure(Charge charge)\\n    {\\n        // Business logic\\n    }\\n}\",\n  \"component_description\": \"C# Stripe webhook handler with dev/prod differences\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Webhook Verification Bypass\",\n      \"cve_score\": 8.9,\n      \"exploitation_methods\": [\n        \"1. Spoof webhook events in dev mode\\n2. Manipulate payment statuses\",\n        \"1. Deploy malicious version to production\"\n      ],\n      \"developer_fixes\": [\n        \"Always verify webhook signatures\",\n        \"Use different config for dev/test\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"OrderProcessor\",\n  \"component_code\": \"class Order:\\n    def __init__(self, id, customer_name, total_amount):\\n        self.id = id\\n        self.customer_name = customer_name\\n        self.total_amount = total_amount\\n\\nclass OrderProcessor:\\n    def __init__(self):\\n        self.orders = []\\n\\n    def add_order(self, order):\\n        self.orders.append(order)\\n\\n    def find_order_by_id(self, id):\\n        for order in self.orders:\\n            if order.id == id:\\n                return order\\n        return None\\n\\n    def list_orders_by_customer(self, customer_name):\\n        return [order for order in self.orders if order.customer_name == customer_name]\\n\\n    def total_sales(self):\\n        return sum(order.total_amount for order in self.orders)\\n\\n    def highest_order(self):\\n        if not self.orders:\\n            return None\\n        return max(self.orders, key=lambda o: o.total_amount)\\n\\n    def cancel_order(self, id):\\n        self.orders = [o for o in self.orders if o.id != id]\\n\\n    def clear_orders(self):\\n        self.orders.clear()\",\n  \"component_description\": \"Python class for managing customer orders, with order search, aggregation, and cancellation functionality.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"OrderProcessor\",\n  \"component_code\": \"class Order:\\n    def __init__(self, id, customer_name, total_amount):\\n        self.id = id\\n        self.customer_name = customer_name\\n        self.total_amount = total_amount\\n\\nclass OrderProcessor:\\n    def __init__(self):\\n        self.orders = []\\n\\n    def add_order(self, order):\\n        self.orders.append(order)\\n\\n    def find_order_by_id(self, id):\\n        for order in self.orders:\\n            if order.id == id:\\n                return order\\n        return None\\n\\n    def list_orders_by_customer(self, customer_name):\\n        return [order for order in self.orders if order.customer_name == customer_name]\\n\\n    def total_sales(self):\\n        return sum(order.total_amount for order in self.orders)\\n\\n    def highest_order(self):\\n        if not self.orders:\\n            return None\\n        return max(self.orders, key=lambda o: o.total_amount)\\n\\n    def cancel_order(self, id):\\n        self.orders = [o for o in self.orders if o.id != id]\\n\\n    def clear_orders(self):\\n        self.orders.clear()\",\n  \"component_description\": \"Python class for managing customer orders, with order search, aggregation, and cancellation functionality.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UploadAndServeFiles\",\n  \"component_code\": \"package main\\n\\nimport (\\n    \\\"net/http\\\"\\n    \\\"os\\\"\\n    \\\"io\\\"\\n)\\n\\nfunc uploadHandler(w http.ResponseWriter, r *http.Request) {\\n    file, _, _ := r.FormFile(\\\"uploadFile\\\")\\n    defer file.Close()\\n    f, _ := os.Create(\\\"uploads/\\\" + r.FormValue(\\\"filename\\\"))\\n    defer f.Close()\\n    io.Copy(f, file)\\n    w.Write([]byte(\\\"Upload successful\\\"))\\n}\\n\\nfunc downloadHandler(w http.ResponseWriter, r *http.Request) {\\n    filename := r.URL.Query().Get(\\\"filename\\\")\\n    http.ServeFile(w, r, \\\"uploads/\\\"+filename)\\n}\\n\\nfunc main() {\\n    http.HandleFunc(\\\"/upload\\\", uploadHandler)\\n    http.HandleFunc(\\\"/download\\\", downloadHandler)\\n    http.ListenAndServe(\\\":8080\\\", nil)\\n}\",\n  \"component_description\": \"Go server allowing uploads and downloads without validating filenames.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UploadAndServeFiles\",\n  \"component_code\": \"package main\\n\\nimport (\\n    \\\"net/http\\\"\\n    \\\"os\\\"\\n    \\\"io\\\"\\n)\\n\\nfunc uploadHandler(w http.ResponseWriter, r *http.Request) {\\n    file, _, _ := r.FormFile(\\\"uploadFile\\\")\\n    defer file.Close()\\n    f, _ := os.Create(\\\"uploads/\\\" + r.FormValue(\\\"filename\\\"))\\n    defer f.Close()\\n    io.Copy(f, file)\\n    w.Write([]byte(\\\"Upload successful\\\"))\\n}\\n\\nfunc downloadHandler(w http.ResponseWriter, r *http.Request) {\\n    filename := r.URL.Query().Get(\\\"filename\\\")\\n    http.ServeFile(w, r, \\\"uploads/\\\"+filename)\\n}\\n\\nfunc main() {\\n    http.HandleFunc(\\\"/upload\\\", uploadHandler)\\n    http.HandleFunc(\\\"/download\\\", downloadHandler)\\n    http.ListenAndServe(\\\":8080\\\", nil)\\n}\",\n  \"component_description\": \"Go server allowing uploads and downloads without validating filenames.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.6,\n      \"exploitation_methods\": [\n        \"Access ../../etc/passwd to leak sensitive server files.\",\n        \"Overwrite critical server files via malicious filenames.\"\n      ],\n      \"developer_fixes\": [\n        \"Normalize uploaded and downloaded filenames strictly.\",\n        \"Block '../' and other traversal patterns.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnprotectedRedirect\",\n  \"component_code\": \"<?php\\n$dest = $_GET['dest'];\\nheader('Location: ' . $dest);\",\n  \"component_description\": \"PHP code performing redirection based on user input without validation.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnprotectedRedirect\",\n  \"component_code\": \"<?php\\n$dest = $_GET['dest'];\\nheader('Location: ' . $dest);\",\n  \"component_description\": \"PHP code performing redirection based on user input without validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Open Redirect\",\n      \"cve_score\": 7.8,\n      \"exploitation_methods\": [\n        \"Redirect user to phishing site by controlling dest parameter.\",\n        \"Exploit trust relationships to steal credentials.\"\n      ],\n      \"developer_fixes\": [\n        \"Allow redirection only to trusted internal paths.\",\n        \"Implement URL whitelisting mechanism.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Ticket\",\n  \"component_code\": \"case class Ticket(id: Int, subject: String, status: String)\",\n  \"component_description\": \"Scala case class representing a support ticket structure.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Ticket\",\n  \"component_code\": \"case class Ticket(id: Int, subject: String, status: String)\",\n  \"component_description\": \"Scala case class representing a support ticket structure.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleNoteServer\",\n  \"component_code\": \"package main\\n\\nimport (\\n    \\\"fmt\\\"\\n    \\\"io/ioutil\\\"\\n    \\\"net/http\\\"\\n)\\n\\nfunc saveNoteHandler(w http.ResponseWriter, r *http.Request) {\\n    r.ParseForm()\\n    title := r.FormValue(\\\"title\\\")\\n    content := r.FormValue(\\\"content\\\")\\n    ioutil.WriteFile(\\\"notes/\\\"+title+\\\".txt\\\", []byte(content), 0644)\\n    fmt.Fprintf(w, \\\"Note saved\\\")\\n}\\n\\nfunc viewNoteHandler(w http.ResponseWriter, r *http.Request) {\\n    title := r.URL.Query().Get(\\\"title\\\")\\n    content, _ := ioutil.ReadFile(\\\"notes/\\\"+title+\\\".txt\\\")\\n    w.Write(content)\\n}\\n\\nfunc main() {\\n    http.HandleFunc(\\\"/save\\\", saveNoteHandler)\\n    http.HandleFunc(\\\"/view\\\", viewNoteHandler)\\n    http.ListenAndServe(\\\":8080\\\", nil)\\n}\",\n  \"component_description\": \"Go server allowing users to save and view notes without sanitization or filename validation.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleNoteServer\",\n  \"component_code\": \"package main\\n\\nimport (\\n    \\\"fmt\\\"\\n    \\\"io/ioutil\\\"\\n    \\\"net/http\\\"\\n)\\n\\nfunc saveNoteHandler(w http.ResponseWriter, r *http.Request) {\\n    r.ParseForm()\\n    title := r.FormValue(\\\"title\\\")\\n    content := r.FormValue(\\\"content\\\")\\n    ioutil.WriteFile(\\\"notes/\\\"+title+\\\".txt\\\", []byte(content), 0644)\\n    fmt.Fprintf(w, \\\"Note saved\\\")\\n}\\n\\nfunc viewNoteHandler(w http.ResponseWriter, r *http.Request) {\\n    title := r.URL.Query().Get(\\\"title\\\")\\n    content, _ := ioutil.ReadFile(\\\"notes/\\\"+title+\\\".txt\\\")\\n    w.Write(content)\\n}\\n\\nfunc main() {\\n    http.HandleFunc(\\\"/save\\\", saveNoteHandler)\\n    http.HandleFunc(\\\"/view\\\", viewNoteHandler)\\n    http.ListenAndServe(\\\":8080\\\", nil)\\n}\",\n  \"component_description\": \"Go server allowing users to save and view notes without sanitization or filename validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Stored XSS\",\n      \"cve_score\": 9.0,\n      \"exploitation_methods\": [\n        \"Inject <script> into note content\",\n        \"Execute scripts when users read notes\"\n      ],\n      \"developer_fixes\": [\n        \"Escape all outputs before sending to browser\",\n        \"Use template engines that auto-escape\"\n      ]\n    },\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.5,\n      \"exploitation_methods\": [\n        \"Use ../../../etc/passwd in title to read system files\",\n        \"Access sensitive files outside notes directory\"\n      ],\n      \"developer_fixes\": [\n        \"Validate titles strictly (allow only alphanumerics)\",\n        \"Prevent directory traversal in file paths\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"AdminUser\",\n  \"component_code\": \"struct AdminUser {\\n  int id;\\n  std::string username;\\n  std::string role;\\n};\",\n  \"component_description\": \"C++ struct representing an admin user.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"AdminUser\",\n  \"component_code\": \"struct AdminUser {\\n  int id;\\n  std::string username;\\n  std::string role;\\n};\",\n  \"component_description\": \"C++ struct representing an admin user.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeSQLInsert\",\n  \"component_code\": \"<?php\\n$user = $_POST['user'];\\n$comment = $_POST['comment'];\\n$query = \\\"INSERT INTO comments (username, comment) VALUES ('$user', '$comment')\\\";\\nmysqli_query($conn, $query);\",\n  \"component_description\": \"PHP code inserting user input directly into SQL without sanitization.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeSQLInsert\",\n  \"component_code\": \"<?php\\n$user = $_POST['user'];\\n$comment = $_POST['comment'];\\n$query = \\\"INSERT INTO comments (username, comment) VALUES ('$user', '$comment')\\\";\\nmysqli_query($conn, $query);\",\n  \"component_description\": \"PHP code inserting user input directly into SQL without sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 9.2,\n      \"exploitation_methods\": [\n        \"Insert SQL commands to modify or delete tables.\",\n        \"Bypass intended logic by injecting malicious queries.\"\n      ],\n      \"developer_fixes\": [\n        \"Use parameterized queries or prepared statements.\",\n        \"Validate and sanitize all user input.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"Product\",\n  \"component_code\": \"interface Product {\\n  id: number;\\n  name: string;\\n  price: number;\\n  inStock: boolean;\\n}\",\n  \"component_description\": \"TypeScript interface modeling a product entity in an ecommerce app.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"Product\",\n  \"component_code\": \"interface Product {\\n  id: number;\\n  name: string;\\n  price: number;\\n  inStock: boolean;\\n}\",\n  \"component_description\": \"TypeScript interface modeling a product entity in an ecommerce app.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleLoginServer\",\n  \"component_code\": \"package main\\n\\nimport (\\n    \\\"fmt\\\"\\n    \\\"net/http\\\"\\n)\\n\\nvar users = map[string]string{\\n    \\\"admin\\\": \\\"admin123\\\",\\n}\\n\\nfunc login(w http.ResponseWriter, r *http.Request) {\\n    username := r.URL.Query().Get(\\\"username\\\")\\n    password := r.URL.Query().Get(\\\"password\\\")\\n    if users[username] == password {\\n        fmt.Fprintf(w, \\\"Welcome %s\\\", username)\\n    } else {\\n        http.Error(w, \\\"Unauthorized\\\", http.StatusUnauthorized)\\n    }\\n}\\n\\nfunc main() {\\n    http.HandleFunc(\\\"/login\\\", login)\\n    http.ListenAndServe(\\\":8080\\\", nil)\\n}\",\n  \"component_description\": \"Go server providing login functionality through URL parameters.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleLoginServer\",\n  \"component_code\": \"package main\\n\\nimport (\\n    \\\"fmt\\\"\\n    \\\"net/http\\\"\\n)\\n\\nvar users = map[string]string{\\n    \\\"admin\\\": \\\"admin123\\\",\\n}\\n\\nfunc login(w http.ResponseWriter, r *http.Request) {\\n    username := r.URL.Query().Get(\\\"username\\\")\\n    password := r.URL.Query().Get(\\\"password\\\")\\n    if users[username] == password {\\n        fmt.Fprintf(w, \\\"Welcome %s\\\", username)\\n    } else {\\n        http.Error(w, \\\"Unauthorized\\\", http.StatusUnauthorized)\\n    }\\n}\\n\\nfunc main() {\\n    http.HandleFunc(\\\"/login\\\", login)\\n    http.ListenAndServe(\\\":8080\\\", nil)\\n}\",\n  \"component_description\": \"Go server providing login functionality through URL parameters.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Credentials in URL\",\n      \"cve_score\": 7.4,\n      \"exploitation_methods\": [\n        \"Capture login credentials via browser history\",\n        \"Leak credentials through referer headers\"\n      ],\n      \"developer_fixes\": [\n        \"Use POST requests for sensitive data\",\n        \"Avoid transmitting credentials in URL\"\n      ]\n    },\n    {\n      \"vul_type\": \"Hardcoded Credentials\",\n      \"cve_score\": 7.2,\n      \"exploitation_methods\": [\n        \"Recover credentials via source code analysis\",\n        \"Reuse hardcoded credentials across systems\"\n      ],\n      \"developer_fixes\": [\n        \"Store credentials securely outside of codebase\",\n        \"Implement environment variable management\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"SessionLog\",\n  \"component_code\": \"struct SessionLog {\\n  int sessionId;\\n  std::string user;\\n  std::string loginTime;\\n};\",\n  \"component_description\": \"C++ struct representing a user session log entry.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"SessionLog\",\n  \"component_code\": \"struct SessionLog {\\n  int sessionId;\\n  std::string user;\\n  std::string loginTime;\\n};\",\n  \"component_description\": \"C++ struct representing a user session log entry.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"loadConfig\",\n  \"component_code\": \"#include<iostream>\\n#include<fstream>\\n#include<string>\\nusing namespace std;\\n\\nstring loadConfig(string filename) {\\n    ifstream file(\\\"configs/\\\" + filename);\\n    string content((istreambuf_iterator<char>(file)), istreambuf_iterator<char>());\\n    return content;\\n}\",\n  \"component_description\": \"C++ function loading configuration files based on user input filename.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"loadConfig\",\n  \"component_code\": \"#include<iostream>\\n#include<fstream>\\n#include<string>\\nusing namespace std;\\n\\nstring loadConfig(string filename) {\\n    ifstream file(\\\"configs/\\\" + filename);\\n    string content((istreambuf_iterator<char>(file)), istreambuf_iterator<char>());\\n    return content;\\n}\",\n  \"component_description\": \"C++ function loading configuration files based on user input filename.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.6,\n      \"exploitation_methods\": [\n        \"Access ../../etc/passwd to leak system information\",\n        \"Read arbitrary sensitive configuration files\"\n      ],\n      \"developer_fixes\": [\n        \"Strictly validate filenames\",\n        \"Restrict allowed filenames to a safe list\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"UserRegistrar\",\n  \"component_code\": \"public class UserRegistrar {\\n  public void registerUser(String username) {\\n    System.out.println(\\\"Registering \\\" + username);\\n  }\\n}\",\n  \"component_description\": \"Java class responsible for user registration logging.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"UserRegistrar\",\n  \"component_code\": \"public class UserRegistrar {\\n  public void registerUser(String username) {\\n    System.out.println(\\\"Registering \\\" + username);\\n  }\\n}\",\n  \"component_description\": \"Java class responsible for user registration logging.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"LoginRequest\",\n  \"component_code\": \"interface LoginRequest {\\n  username: string;\\n  password: string;\\n}\",\n  \"component_description\": \"Simple TypeScript interface for user login request payload.\"\n}", "completion": "{\n  \"component_type\": \"SCHEMA_DEFINITION\",\n  \"component_name\": \"HealthcareRecords\",\n  \"component_code\": \"CREATE TABLE Patients (\\n    id INT PRIMARY KEY,\\n    name VARCHAR(255) NOT NULL,\\n    date_of_birth DATE NOT NULL,\\n    gender VARCHAR(10),\\n    email VARCHAR(255) UNIQUE\\n);\\n\\nCREATE TABLE Appointments (\\n    id INT PRIMARY KEY,\\n    patient_id INT REFERENCES Patients(id),\\n    appointment_date DATE NOT NULL,\\n    doctor_name VARCHAR(255),\\n    notes TEXT\\n);\\n\\nCREATE TABLE Prescriptions (\\n    id INT PRIMARY KEY,\\n    appointment_id INT REFERENCES Appointments(id),\\n    medication VARCHAR(255) NOT NULL,\\n    dosage VARCHAR(255),\\n    instructions TEXT\\n);\",\n  \"component_description\": \"SQL schema for a healthcare record system tracking patients, appointments, and prescriptions.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleBlogApp\",\n  \"component_code\": \"const express = require('express');\\nconst bodyParser = require('body-parser');\\nconst fs = require('fs');\\nconst app = express();\\n\\napp.use(bodyParser.urlencoded({ extended: true }));\\n\\napp.post('/post', (req, res) => {\\n    const title = req.body.title;\\n    const content = req.body.content;\\n    fs.writeFileSync(`posts/${title}.txt`, content);\\n    res.send('Post created');\\n});\\n\\napp.get('/view', (req, res) => {\\n    const title = req.query.title;\\n    const content = fs.readFileSync(`posts/${title}.txt`, 'utf8');\\n    res.send(`<h1>${title}</h1><p>${content}</p>`);\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Node.js blog app saving posts to files and serving them without any sanitization.\"\n}", "completion": "{\n  \"component_type\": \"TRIGGER_DEFINITION\",\n  \"component_name\": \"update_stock_trigger\",\n  \"component_code\": \"CREATE TRIGGER update_stock_trigger\\nAFTER INSERT ON Orders\\nFOR EACH ROW\\nBEGIN\\n  UPDATE Products SET stock = stock - NEW.quantity\\n  WHERE id = NEW.product_id;\\nEND;\",\n  \"component_description\": \"SQL trigger to automatically update product stock after a new order is inserted.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Business Logic Flaw\",\n      \"cve_score\": 6.9,\n      \"exploitation_methods\": [\n        \"Insert negative quantity orders to artificially inflate stock\",\n        \"Manipulate orders to exhaust inventory improperly\"\n      ],\n      \"developer_fixes\": [\n        \"Validate that quantities are positive before updating stock\",\n        \"Implement application-level validations too\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"validateUser\",\n  \"component_code\": \"function validateUser(username, password) {\\n  const query = `SELECT * FROM users WHERE username='${username}' AND password='${password}'`;\\n  return db.query(query);\\n}\",\n  \"component_description\": \"JavaScript function for user authentication\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"validateUser\",\n  \"component_code\": \"function validateUser(username, password) {\\n  const query = `SELECT * FROM users WHERE username='${username}' AND password='${password}'`;\\n  return db.query(query);\\n}\",\n  \"component_description\": \"JavaScript function for user authentication\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 9.1,\n      \"exploitation_methods\": [\n        \"Enter username: admin'--\\nBypass password check\",\n        \"Inject UNION SELECT to extract all user data\"\n      ],\n      \"developer_fixes\": [\n        \"Use parameterized queries\",\n        \"Implement prepared statements\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"CartEntry\",\n  \"component_code\": \"interface CartEntry {\\n  itemId: number;\\n  quantity: number;\\n}\",\n  \"component_description\": \"TypeScript interface modeling a cart entry.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"CartEntry\",\n  \"component_code\": \"interface CartEntry {\\n  itemId: number;\\n  quantity: number;\\n}\",\n  \"component_description\": \"TypeScript interface modeling a cart entry.\",\n  \"vulnerabilities\": []\n}"}
