{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"UserUpload\",\n  \"component_code\": \"struct UserUpload {\\n  int uploadId;\\n  std::string filename;\\n  int filesize;\\n};\",\n  \"component_description\": \"C++ struct modeling a user's uploaded file.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"UserUpload\",\n  \"component_code\": \"struct UserUpload {\\n  int uploadId;\\n  std::string filename;\\n  int filesize;\\n};\",\n  \"component_description\": \"C++ struct modeling a user's uploaded file.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EvalXSS\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/exec', (req, res) => {\\n  const cmd = req.query.cmd;\\n  res.send(eval(cmd));\\n});\",\n  \"component_description\": \"Node.js route evaluating user-provided JavaScript expressions.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EvalXSS\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/exec', (req, res) => {\\n  const cmd = req.query.cmd;\\n  res.send(eval(cmd));\\n});\",\n  \"component_description\": \"Node.js route evaluating user-provided JavaScript expressions.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Remote Code Execution\",\n      \"cve_score\": 9.7,\n      \"exploitation_methods\": [\n        \"Execute arbitrary code via cmd parameter.\",\n        \"Access internal server files or sensitive environment variables.\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid eval entirely for user inputs.\",\n        \"Use whitelisted command processing instead.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Email\",\n  \"component_code\": \"case class Email(from: String, to: String, body: String)\",\n  \"component_description\": \"Scala case class for representing email structure.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Email\",\n  \"component_code\": \"case class Email(from: String, to: String, body: String)\",\n  \"component_description\": \"Scala case class for representing email structure.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"createUserAccount\",\n  \"component_code\": \"CREATE PROCEDURE createUserAccount(IN username TEXT, IN password TEXT)\\nBEGIN\\n  INSERT INTO users(username, password) VALUES (username, password);\\nEND;\",\n  \"component_description\": \"SQL procedure creating a new user account entry.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"createUserAccount\",\n  \"component_code\": \"CREATE PROCEDURE createUserAccount(IN username TEXT, IN password TEXT)\\nBEGIN\\n  INSERT INTO users(username, password) VALUES (username, password);\\nEND;\",\n  \"component_description\": \"SQL procedure creating a new user account entry.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Profile\",\n  \"component_code\": \"struct Profile {\\n    username: String,\\n    email: String,\\n    age: u8,\\n}\",\n  \"component_description\": \"Rust struct representing a user profile with username, email, and age.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Profile\",\n  \"component_code\": \"struct Profile {\\n    username: String,\\n    email: String,\\n    age: u8,\\n}\",\n  \"component_description\": \"Rust struct representing a user profile with username, email, and age.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"CommandExecutor\",\n  \"component_code\": \"import java.io.*;\\n\\npublic class CommandExecutor {\\n    public static void runCommand(String cmd) throws IOException {\\n        Runtime.getRuntime().exec(cmd);\\n    }\\n}\",\n  \"component_description\": \"Java class executing system commands based on user input without validation.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"CommandExecutor\",\n  \"component_code\": \"import java.io.*;\\n\\npublic class CommandExecutor {\\n    public static void runCommand(String cmd) throws IOException {\\n        Runtime.getRuntime().exec(cmd);\\n    }\\n}\",\n  \"component_description\": \"Java class executing system commands based on user input without validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Command Injection\",\n      \"cve_score\": 9.2,\n      \"exploitation_methods\": [\n        \"Inject && malicious commands via cmd input\",\n        \"Chain arbitrary commands to gain shell access\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid executing raw user inputs\",\n        \"Use whitelisted commands or secure APIs\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeHeaderEchoExpress\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/unsafe-header', (req, res) => {\\n  const headerVal = req.query.header;\\n  res.setHeader('X-Header', headerVal);\\n  res.send('Header Set');\\n});\",\n  \"component_description\": \"Node.js route setting HTTP headers directly from unsanitized user input.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeHeaderEchoExpress\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/unsafe-header', (req, res) => {\\n  const headerVal = req.query.header;\\n  res.setHeader('X-Header', headerVal);\\n  res.send('Header Set');\\n});\",\n  \"component_description\": \"Node.js route setting HTTP headers directly from unsanitized user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"HTTP Response Splitting\",\n      \"cve_score\": 8.3,\n      \"exploitation_methods\": [\n        \"Inject \\r\\n into header value to split the HTTP response.\",\n        \"Insert fake headers and perform attacks against clients.\"\n      ],\n      \"developer_fixes\": [\n        \"Strip CRLF characters from header values.\",\n        \"Sanitize header values before setting them.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"SCHEMA_DEFINITION\",\n  \"component_name\": \"BookStore\",\n  \"component_code\": \"CREATE TABLE Books (\\n    id INT PRIMARY KEY,\\n    title VARCHAR(255) NOT NULL,\\n    author VARCHAR(255),\\n    price DECIMAL(10,2),\\n    available BOOLEAN DEFAULT TRUE\\n);\",\n  \"component_description\": \"SQL schema for a simple bookstore inventory.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleForum\",\n  \"component_code\": \"const express = require('express');\\nconst bodyParser = require('body-parser');\\nconst fs = require('fs');\\nconst app = express();\\n\\napp.use(bodyParser.urlencoded({ extended: true }));\\napp.use(bodyParser.json());\\n\\napp.post('/post', (req, res) => {\\n    const { username, message } = req.body;\\n    fs.appendFileSync('posts.txt', `${username}: ${message}\\\\n`);\\n    res.send('Posted');\\n});\\n\\napp.get('/posts', (req, res) => {\\n    const content = fs.readFileSync('posts.txt', 'utf8');\\n    res.send(`<pre>${content}</pre>`);\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Node.js Express forum app saving posts into a text file and displaying them without any sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Stored XSS\",\n      \"cve_score\": 9.0,\n      \"exploitation_methods\": [\n        \"Submit a <script> payload inside message\",\n        \"Steal admin session when they view posts\",\n        \"Inject malicious JS into the page dynamically\"\n      ],\n      \"developer_fixes\": [\n        \"Escape HTML before rendering user-submitted content\",\n        \"Use safe templating engines that auto-escape\"\n      ]\n    },\n    {\n      \"vul_type\": \"Improper Authorization\",\n      \"cve_score\": 7.2,\n      \"exploitation_methods\": [\n        \"Anyone can POST without authentication\",\n        \"Spam posts or upload malicious data at scale\"\n      ],\n      \"developer_fixes\": [\n        \"Enforce user authentication before posting\",\n        \"Implement rate-limiting to prevent abuse\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"SimpleLogger\",\n  \"component_code\": \"public class SimpleLogger {\\n  public void log(String message) {\\n    System.out.println(\\\"Log: \\\" + message);\\n  }\\n}\",\n  \"component_description\": \"Java class for logging application events.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"SimpleLogger\",\n  \"component_code\": \"public class SimpleLogger {\\n  public void log(String message) {\\n    System.out.println(\\\"Log: \\\" + message);\\n  }\\n}\",\n  \"component_description\": \"Java class for logging application events.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"BasicAuthServer\",\n  \"component_code\": \"package main\\n\\nimport (\\n    \\\"fmt\\\"\\n    \\\"net/http\\\"\\n)\\n\\nvar users = map[string]string{\\n    \\\"admin\\\": \\\"password123\\\",\\n}\\n\\nfunc login(w http.ResponseWriter, r *http.Request) {\\n    username := r.URL.Query().Get(\\\"user\\\")\\n    password := r.URL.Query().Get(\\\"pass\\\")\\n    if pw, ok := users[username]; ok && pw == password {\\n        fmt.Fprintf(w, \\\"Welcome %s\\\", username)\\n    } else {\\n        http.Error(w, \\\"Invalid Credentials\\\", http.StatusUnauthorized)\\n    }\\n}\\n\\nfunc main() {\\n    http.HandleFunc(\\\"/login\\\", login)\\n    http.ListenAndServe(\\\":8080\\\", nil)\\n}\",\n  \"component_description\": \"Simple Go server that handles login through URL query parameters.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleNotesApp\",\n  \"component_code\": \"const express = require('express');\\nconst fs = require('fs');\\nconst bodyParser = require('body-parser');\\nconst app = express();\\n\\napp.use(bodyParser.json());\\n\\napp.post('/saveNote', (req, res) => {\\n    const { filename, content } = req.body;\\n    fs.writeFileSync(`notes/${filename}`, content);\\n    res.send('Note saved');\\n});\\n\\napp.get('/readNote', (req, res) => {\\n    const filename = req.query.filename;\\n    const content = fs.readFileSync(`notes/${filename}`, 'utf8');\\n    res.send(content);\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Node.js app to save and read notes by writing directly to the filesystem.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.5,\n      \"exploitation_methods\": [\n        \"Request ../../../etc/passwd to read system files\",\n        \"Save notes in unauthorized directories\"\n      ],\n      \"developer_fixes\": [\n        \"Restrict file access to a defined safe directory\",\n        \"Validate filenames rigorously against traversal attacks\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"insertAuditLog\",\n  \"component_code\": \"CREATE PROCEDURE insertAuditLog(IN userId INT, IN event TEXT)\\nBEGIN\\n  INSERT INTO audit_logs(user_id, event, event_time) VALUES (userId, event, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure inserting an event into the audit logs.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"storeTransaction\",\n  \"component_code\": \"CREATE PROCEDURE storeTransaction(IN transId INT, IN amount DECIMAL(10,2))\\nBEGIN\\n  INSERT INTO transactions(transaction_id, transaction_amount, transaction_date) VALUES (transId, amount, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure for storing transaction records.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Address\",\n  \"component_code\": \"<?php\\nclass Address {\\n    public $street;\\n    public $city;\\n    public $zipcode;\\n\\n    function __construct($street, $city, $zipcode) {\\n        $this->street = $street;\\n        $this->city = $city;\\n        $this->zipcode = $zipcode;\\n    }\\n}\",\n  \"component_description\": \"PHP class to model an address with street, city, and zipcode fields.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleBlogApp\",\n  \"component_code\": \"const express = require('express');\\nconst bodyParser = require('body-parser');\\nconst fs = require('fs');\\nconst app = express();\\n\\napp.use(bodyParser.urlencoded({ extended: true }));\\n\\napp.post('/post', (req, res) => {\\n    const title = req.body.title;\\n    const content = req.body.content;\\n    fs.writeFileSync(`posts/${title}.txt`, content);\\n    res.send('Post created');\\n});\\n\\napp.get('/view', (req, res) => {\\n    const title = req.query.title;\\n    const content = fs.readFileSync(`posts/${title}.txt`, 'utf8');\\n    res.send(`<h1>${title}</h1><p>${content}</p>`);\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Node.js blog app saving posts to files and serving them without any sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Stored XSS\",\n      \"cve_score\": 9.2,\n      \"exploitation_methods\": [\n        \"Store <script> payloads inside blog posts\",\n        \"Execute malicious JavaScript on readers\"\n      ],\n      \"developer_fixes\": [\n        \"Escape user inputs properly before rendering\",\n        \"Use server-side sanitization libraries\"\n      ]\n    },\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.4,\n      \"exploitation_methods\": [\n        \"Manipulate title parameter to download arbitrary files\",\n        \"Access system or configuration files\"\n      ],\n      \"developer_fixes\": [\n        \"Whitelist allowed file names\",\n        \"Normalize paths to prevent directory traversal\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"LogEntry\",\n  \"component_code\": \"case class LogEntry(timestamp: String, level: String, message: String)\",\n  \"component_description\": \"Scala case class representing a log entry.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"LogEntry\",\n  \"component_code\": \"case class LogEntry(timestamp: String, level: String, message: String)\",\n  \"component_description\": \"Scala case class representing a log entry.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"addComment\",\n  \"component_code\": \"CREATE PROCEDURE addComment(IN userId INT, IN comment TEXT)\\nBEGIN\\n  INSERT INTO comments(user_id, comment_text, created_at) VALUES (userId, comment, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure inserting user comments into a database.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"addComment\",\n  \"component_code\": \"CREATE PROCEDURE addComment(IN userId INT, IN comment TEXT)\\nBEGIN\\n  INSERT INTO comments(user_id, comment_text, created_at) VALUES (userId, comment, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure inserting user comments into a database.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"BlogEntry\",\n  \"component_code\": \"interface BlogEntry {\\n  id: number;\\n  title: string;\\n  content: string;\\n}\",\n  \"component_description\": \"TypeScript interface modeling a blog entry.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"BlogEntry\",\n  \"component_code\": \"interface BlogEntry {\\n  id: number;\\n  title: string;\\n  content: string;\\n}\",\n  \"component_description\": \"TypeScript interface modeling a blog entry.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"UserAuth\",\n  \"component_code\": \"using System;\\nusing System.Data.SqlClient;\\n\\npublic class UserAuth {\\n    private string connString;\\n\\n    public UserAuth(string conn) {\\n        connString = conn;\\n    }\\n\\n    public bool Login(string username, string password) {\\n        using (var conn = new SqlConnection(connString)) {\\n            conn.Open();\\n            var query = $\\\"SELECT * FROM Users WHERE Username='{username}' AND Password='{password}'\\\";\\n            var cmd = new SqlCommand(query, conn);\\n            var reader = cmd.ExecuteReader();\\n            return reader.HasRows;\\n        }\\n    }\\n\\n    public void Register(string username, string password) {\\n        using (var conn = new SqlConnection(connString)) {\\n            conn.Open();\\n            var query = $\\\"INSERT INTO Users (Username, Password) VALUES ('{username}', '{password}')\\\";\\n            var cmd = new SqlCommand(query, conn);\\n            cmd.ExecuteNonQuery();\\n        }\\n    }\\n}\",\n  \"component_description\": \"C# class managing user authentication and registration against an SQL database.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"UserAuth\",\n  \"component_code\": \"using System;\\nusing System.Data.SqlClient;\\n\\npublic class UserAuth {\\n    private string connString;\\n\\n    public UserAuth(string conn) {\\n        connString = conn;\\n    }\\n\\n    public bool Login(string username, string password) {\\n        using (var conn = new SqlConnection(connString)) {\\n            conn.Open();\\n            var query = $\\\"SELECT * FROM Users WHERE Username='{username}' AND Password='{password}'\\\";\\n            var cmd = new SqlCommand(query, conn);\\n            var reader = cmd.ExecuteReader();\\n            return reader.HasRows;\\n        }\\n    }\\n\\n    public void Register(string username, string password) {\\n        using (var conn = new SqlConnection(connString)) {\\n            conn.Open();\\n            var query = $\\\"INSERT INTO Users (Username, Password) VALUES ('{username}', '{password}')\\\";\\n            var cmd = new SqlCommand(query, conn);\\n            cmd.ExecuteNonQuery();\\n        }\\n    }\\n}\",\n  \"component_description\": \"C# class managing user authentication and registration against an SQL database.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 9.5,\n      \"exploitation_methods\": [\n        \"Bypass authentication using ' OR '1'='1\",\n        \"Insert malicious admin users\",\n        \"Drop entire Users table\"\n      ],\n      \"developer_fixes\": [\n        \"Use parameterized queries\",\n        \"Strictly validate user inputs\"\n      ]\n    },\n    {\n      \"vul_type\": \"Insecure Password Storage\",\n      \"cve_score\": 8.7,\n      \"exploitation_methods\": [\n        \"Retrieve database dump to find raw passwords\",\n        \"Crack simple passwords quickly with brute force\"\n      ],\n      \"developer_fixes\": [\n        \"Hash passwords using bcrypt or Argon2\",\n        \"Apply rate-limiting on login attempts\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"SCHEMA_DEFINITION\",\n  \"component_name\": \"ProductCatalog\",\n  \"component_code\": \"CREATE TABLE Products (\\n    id INT PRIMARY KEY,\\n    name VARCHAR(255) NOT NULL,\\n    description TEXT,\\n    price DECIMAL(10,2) NOT NULL,\\n    available BOOLEAN DEFAULT TRUE\\n);\\n\\nCREATE TABLE Categories (\\n    id INT PRIMARY KEY,\\n    name VARCHAR(100) NOT NULL\\n);\\n\\nCREATE TABLE ProductCategories (\\n    product_id INT,\\n    category_id INT,\\n    PRIMARY KEY (product_id, category_id),\\n    FOREIGN KEY (product_id) REFERENCES Products(id),\\n    FOREIGN KEY (category_id) REFERENCES Categories(id)\\n);\",\n  \"component_description\": \"SQL schema defining a product catalog with many-to-many relationship between products and categories.\"\n}", "completion": "{\n  \"component_type\": \"SCHEMA_DEFINITION\",\n  \"component_name\": \"ProductCatalog\",\n  \"component_code\": \"CREATE TABLE Products (\\n    id INT PRIMARY KEY,\\n    name VARCHAR(255) NOT NULL,\\n    description TEXT,\\n    price DECIMAL(10,2) NOT NULL,\\n    available BOOLEAN DEFAULT TRUE\\n);\\n\\nCREATE TABLE Categories (\\n    id INT PRIMARY KEY,\\n    name VARCHAR(100) NOT NULL\\n);\\n\\nCREATE TABLE ProductCategories (\\n    product_id INT,\\n    category_id INT,\\n    PRIMARY KEY (product_id, category_id),\\n    FOREIGN KEY (product_id) REFERENCES Products(id),\\n    FOREIGN KEY (category_id) REFERENCES Categories(id)\\n);\",\n  \"component_description\": \"SQL schema defining a product catalog with many-to-many relationship between products and categories.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"DatabaseMigrator\",\n  \"component_code\": \"using System;\\nusing System.Data.SqlClient;\\nusing System.IO;\\n\\npublic class DatabaseMigrator\\n{\\n    private readonly string _connectionString;\\n    \\n    public DatabaseMigrator(string connectionString)\\n    {\\n        _connectionString = connectionString;\\n    }\\n    \\n    public void ApplyMigrations(string migrationsPath)\\n    {\\n        var migrationFiles = Directory.GetFiles(migrationsPath, \\\"*.sql\\\")\\n            .OrderBy(f => f);\\n            \\n        using var connection = new SqlConnection(_connectionString);\\n        connection.Open();\\n        \\n        foreach (var file in migrationFiles)\\n        {\\n            // No transaction handling\\n            var sql = File.ReadAllText(file);\\n            \\n            // Execute raw SQL without validation\\n            using var command = new SqlCommand(sql, connection);\\n            command.ExecuteNonQuery();\\n            \\n            Console.WriteLine($\\\"Applied migration: {Path.GetFileName(file)}\\\");\\n        }\\n    }\\n    \\n    public void BackupDatabase(string backupPath)\\n    {\\n        var backupFile = Path.Combine(backupPath, $\\\"backup_{DateTime.Now:yyyyMMdd}.bak\\\");\\n        \\n        // Dynamic SQL with string concatenation\\n        var sql = $\\\"BACKUP DATABASE [{GetDatabaseName()}] TO DISK = '{backupFile}'\\\";\\n        \\n        using var connection = new SqlConnection(_connectionString);\\n        using var command = new SqlCommand(sql, connection);\\n        \\n        connection.Open();\\n        command.ExecuteNonQuery();\\n    }\\n    \\n    private string GetDatabaseName()\\n    {\\n        var builder = new SqlConnectionStringBuilder(_connectionString);\\n        return builder.InitialCatalog;\\n    }\\n}\",\n  \"component_description\": \"C# database migration and backup utility\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"DatabaseMigrator\",\n  \"component_code\": \"using System;\\nusing System.Data.SqlClient;\\nusing System.IO;\\n\\npublic class DatabaseMigrator\\n{\\n    private readonly string _connectionString;\\n    \\n    public DatabaseMigrator(string connectionString)\\n    {\\n        _connectionString = connectionString;\\n    }\\n    \\n    public void ApplyMigrations(string migrationsPath)\\n    {\\n        var migrationFiles = Directory.GetFiles(migrationsPath, \\\"*.sql\\\")\\n            .OrderBy(f => f);\\n            \\n        using var connection = new SqlConnection(_connectionString);\\n        connection.Open();\\n        \\n        foreach (var file in migrationFiles)\\n        {\\n            // No transaction handling\\n            var sql = File.ReadAllText(file);\\n            \\n            // Execute raw SQL without validation\\n            using var command = new SqlCommand(sql, connection);\\n            command.ExecuteNonQuery();\\n            \\n            Console.WriteLine($\\\"Applied migration: {Path.GetFileName(file)}\\\");\\n        }\\n    }\\n    \\n    public void BackupDatabase(string backupPath)\\n    {\\n        var backupFile = Path.Combine(backupPath, $\\\"backup_{DateTime.Now:yyyyMMdd}.bak\\\");\\n        \\n        // Dynamic SQL with string concatenation\\n        var sql = $\\\"BACKUP DATABASE [{GetDatabaseName()}] TO DISK = '{backupFile}'\\\";\\n        \\n        using var connection = new SqlConnection(_connectionString);\\n        using var command = new SqlCommand(sql, connection);\\n        \\n        connection.Open();\\n        command.ExecuteNonQuery();\\n    }\\n    \\n    private string GetDatabaseName()\\n    {\\n        var builder = new SqlConnectionStringBuilder(_connectionString);\\n        return builder.InitialCatalog;\\n    }\\n}\",\n  \"component_description\": \"C# database migration and backup utility\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 9.2,\n      \"exploitation_methods\": [\n        \"1. Plant malicious SQL in migration files\\n2. Execute arbitrary commands\",\n        \"1. Inject via backup file path parameter\"\n      ],\n      \"developer_fixes\": [\n        \"Validate SQL files with checksums\",\n        \"Parameterize backup file paths\"\n      ]\n    },\n    {\n      \"vul_type\": \"Unsafe File Operations\",\n      \"cve_score\": 7.5,\n      \"exploitation_methods\": [\n        \"1. Path traversal in backup path\\n2. Overwrite system files\",\n        \"1. Inject malicious file paths\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize file paths\",\n        \"Restrict backup directory\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"ProfileViewer\",\n  \"component_code\": \"const express = require('express');\\nconst fs = require('fs');\\nconst app = express();\\n\\napp.get('/profile', (req, res) => {\\n  const username = req.query.username;\\n  const data = fs.readFileSync(`profiles/${username}.txt`, 'utf8');\\n  res.send(`<h1>Profile</h1><p>${data}</p>`);\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Node.js app serving user profiles without any sanitization.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"ProfileViewer\",\n  \"component_code\": \"const express = require('express');\\nconst fs = require('fs');\\nconst app = express();\\n\\napp.get('/profile', (req, res) => {\\n  const username = req.query.username;\\n  const data = fs.readFileSync(`profiles/${username}.txt`, 'utf8');\\n  res.send(`<h1>Profile</h1><p>${data}</p>`);\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Node.js app serving user profiles without any sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Stored XSS\",\n      \"cve_score\": 9.0,\n      \"exploitation_methods\": [\n        \"Inject <script> inside profile data.\",\n        \"Execute malicious scripts on profile viewers.\"\n      ],\n      \"developer_fixes\": [\n        \"Escape HTML content before rendering profiles.\",\n        \"Use proper templating engines that sanitize output.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"OrderItem\",\n  \"component_code\": \"interface OrderItem {\\n  itemId: number;\\n  quantity: number;\\n}\",\n  \"component_description\": \"TypeScript interface modeling an order item.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"OrderItem\",\n  \"component_code\": \"interface OrderItem {\\n  itemId: number;\\n  quantity: number;\\n}\",\n  \"component_description\": \"TypeScript interface modeling an order item.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"AuditLogger\",\n  \"component_code\": \"public class AuditLogger {\\n  public void log(String event) {\\n    System.out.println(\\\"Audit Event: \\\" + event);\\n  }\\n}\",\n  \"component_description\": \"Java class for logging audit events.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"AuditLogger\",\n  \"component_code\": \"public class AuditLogger {\\n  public void log(String event) {\\n    System.out.println(\\\"Audit Event: \\\" + event);\\n  }\\n}\",\n  \"component_description\": \"Java class for logging audit events.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"DocumentUploadService\",\n  \"component_code\": \"const express = require('express');\\nconst multer = require('multer');\\nconst app = express();\\n\\nconst upload = multer({ dest: 'uploads/' });\\n\\napp.post('/upload', upload.single('document'), (req, res) => {\\n    res.send('File uploaded successfully');\\n});\\n\\napp.get('/view', (req, res) => {\\n    const filename = req.query.filename;\\n    res.sendFile(__dirname + '/uploads/' + filename);\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Node.js application handling document uploads and serving uploaded files without validation.\"\n}", "completion": "{\n  \"component_type\": \"METHOD_DEFINITION\",\n  \"component_name\": \"execute_shell_command\",\n  \"component_code\": \"def execute_shell_command(command)\\n  `#{command}`\\nend\",\n  \"component_description\": \"Ruby method executing a shell command directly from user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Command Injection\",\n      \"cve_score\": 9.1,\n      \"exploitation_methods\": [\n        \"Send && rm -rf / to wipe server files\",\n        \"Chain additional malicious shell commands\"\n      ],\n      \"developer_fixes\": [\n        \"Disallow arbitrary shell execution\",\n        \"Use command whitelisting or secure system libraries\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"fetchUserInfo\",\n  \"component_code\": \"def fetchUserInfo(userId: String): String = {\\n  val conn = java.sql.DriverManager.getConnection(\\\"jdbc:mysql://localhost:3306/mydb\\\", \\\"user\\\", \\\"pass\\\")\\n  val stmt = conn.createStatement()\\n  val rs = stmt.executeQuery(s\\\"SELECT * FROM users WHERE id = '$userId'\\\")\\n  if (rs.next()) rs.getString(\\\"email\\\") else \\\"Not Found\\\"\\n}\",\n  \"component_description\": \"Scala function fetching user email by ID using raw SQL.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"fetchUserInfo\",\n  \"component_code\": \"def fetchUserInfo(userId: String): String = {\\n  val conn = java.sql.DriverManager.getConnection(\\\"jdbc:mysql://localhost:3306/mydb\\\", \\\"user\\\", \\\"pass\\\")\\n  val stmt = conn.createStatement()\\n  val rs = stmt.executeQuery(s\\\"SELECT * FROM users WHERE id = '$userId'\\\")\\n  if (rs.next()) rs.getString(\\\"email\\\") else \\\"Not Found\\\"\\n}\",\n  \"component_description\": \"Scala function fetching user email by ID using raw SQL.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 8.6,\n      \"exploitation_methods\": [\n        \"Supply ID like ' OR '1'='1 to fetch all emails\",\n        \"Insert malicious SQL to drop or alter data\",\n        \"Access unauthorized user details\"\n      ],\n      \"developer_fixes\": [\n        \"Use prepared statements with parameter binding\",\n        \"Reject unsafe characters in userId input\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"DangerousEval\",\n  \"component_code\": \"<?php\\neval($_GET['code']);\",\n  \"component_description\": \"PHP script executing arbitrary code from a GET parameter.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"DangerousEval\",\n  \"component_code\": \"<?php\\neval($_GET['code']);\",\n  \"component_description\": \"PHP script executing arbitrary code from a GET parameter.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Remote Code Execution\",\n      \"cve_score\": 10.0,\n      \"exploitation_methods\": [\n        \"Input ?code=system('rm -rf /');\",\n        \"Run arbitrary shell commands, backdoors.\"\n      ],\n      \"developer_fixes\": [\n        \"Never use eval on user input.\",\n        \"Use safe interpreters or sandboxed execution.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Transaction\",\n  \"component_code\": \"struct Transaction {\\n    id: u32,\\n    amount: f64,\\n    timestamp: u64,\\n}\",\n  \"component_description\": \"Rust struct representing a financial transaction.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Transaction\",\n  \"component_code\": \"struct Transaction {\\n    id: u32,\\n    amount: f64,\\n    timestamp: u64,\\n}\",\n  \"component_description\": \"Rust struct representing a financial transaction.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"SecureConfig\",\n  \"component_code\": \"#[derive(Debug, Clone)]\\npub struct SecureConfig {\\n    pub api_key: String,\\n    pub db_url: String,\\n    pub enable_ssl: bool,\\n    #[serde(skip_serializing)]\\n    pub master_key: String,\\n}\\n\\nimpl SecureConfig {\\n    pub fn new() -> Self {\\n        Self {\\n            api_key: std::env::var(\\\"API_KEY\\\").unwrap_or_default(),\\n            db_url: std::env::var(\\\"DATABASE_URL\\\")\\n                .unwrap_or(\\\"postgres://localhost:5432\\\".into()),\\n            enable_ssl: true,\\n            master_key: std::env::var(\\\"MASTER_KEY\\\")\\n                .expect(\\\"MASTER_KEY must be set\\\"),\\n        }\\n    }\\n    \\n    pub fn validate(&self) -> Result<(), ConfigError> {\\n        if self.master_key.len() < 32 {\\n            return Err(ConfigError::InvalidKeyLength);\\n        }\\n        Ok(())\\n    }\\n}\",\n  \"component_description\": \"Rust configuration structure with sensitive field handling.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"SecureConfig\",\n  \"component_code\": \"#[derive(Debug, Clone)]\\npub struct SecureConfig {\\n    pub api_key: String,\\n    pub db_url: String,\\n    pub enable_ssl: bool,\\n    #[serde(skip_serializing)]\\n    pub master_key: String,\\n}\\n\\nimpl SecureConfig {\\n    pub fn new() -> Self {\\n        Self {\\n            api_key: std::env::var(\\\"API_KEY\\\").unwrap_or_default(),\\n            db_url: std::env::var(\\\"DATABASE_URL\\\")\\n                .unwrap_or(\\\"postgres://localhost:5432\\\".into()),\\n            enable_ssl: true,\\n            master_key: std::env::var(\\\"MASTER_KEY\\\")\\n                .expect(\\\"MASTER_KEY must be set\\\"),\\n        }\\n    }\\n    \\n    pub fn validate(&self) -> Result<(), ConfigError> {\\n        if self.master_key.len() < 32 {\\n            return Err(ConfigError::InvalidKeyLength);\\n        }\\n        Ok(())\\n    }\\n}\",\n  \"component_description\": \"Rust configuration structure with sensitive field handling.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Sensitive Data Exposure\",\n      \"cve_score\": 7.2,\n      \"exploitation_methods\": [\n        \"1. Memory dump reveals master_key in cleartext\",\n        \"2. Debug logging outputs sensitive fields\"\n      ],\n      \"developer_fixes\": [\n        \"Use zeroize-on-drop for sensitive fields\",\n        \"Implement proper secret management wrappers\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"display_user\",\n  \"component_code\": \"def display_user(name):\\n    print(f\\\"<h1>{name}</h1>\\\")\",\n  \"component_description\": \"Python function rendering a username directly into HTML output.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"display_user\",\n  \"component_code\": \"def display_user(name):\\n    print(f\\\"<h1>{name}</h1>\\\")\",\n  \"component_description\": \"Python function rendering a username directly into HTML output.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Reflected XSS\",\n      \"cve_score\": 8.3,\n      \"exploitation_methods\": [\n        \"Inject <script>alert(1)</script> in name.\",\n        \"Steal cookies if embedded in web context.\"\n      ],\n      \"developer_fixes\": [\n        \"Escape output before rendering into HTML.\",\n        \"Use templating engines with auto-escaping (like Jinja2).\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"logAdminAccess\",\n  \"component_code\": \"CREATE PROCEDURE logAdminAccess(IN adminId INT, IN action TEXT)\\nBEGIN\\n  INSERT INTO admin_logs(admin_id, action, action_time) VALUES (adminId, action, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure logging admin activities.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"logAdminAccess\",\n  \"component_code\": \"CREATE PROCEDURE logAdminAccess(IN adminId INT, IN action TEXT)\\nBEGIN\\n  INSERT INTO admin_logs(admin_id, action, action_time) VALUES (adminId, action, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure logging admin activities.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"UserProfile\",\n  \"component_code\": \"struct UserProfile {\\n  int id;\\n  std::string username;\\n  std::string email;\\n};\",\n  \"component_description\": \"C++ struct representing a basic user profile.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"UserProfile\",\n  \"component_code\": \"struct UserProfile {\\n  int id;\\n  std::string username;\\n  std::string email;\\n};\",\n  \"component_description\": \"C++ struct representing a basic user profile.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EvalCalculator\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/compute', (req, res) => {\\n  const expression = req.query.expression;\\n  res.send(eval(expression));\\n});\",\n  \"component_description\": \"Express route evaluating user-provided JavaScript expressions.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EvalCalculator\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/compute', (req, res) => {\\n  const expression = req.query.expression;\\n  res.send(eval(expression));\\n});\",\n  \"component_description\": \"Express route evaluating user-provided JavaScript expressions.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Remote Code Execution\",\n      \"cve_score\": 9.6,\n      \"exploitation_methods\": [\n        \"Execute arbitrary JavaScript through user input.\",\n        \"Access server internals or sensitive environment variables.\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid eval for user inputs.\",\n        \"Use safe mathematical evaluators or parsers instead.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"ReviewComment\",\n  \"component_code\": \"case class ReviewComment(commentId: Int, reviewId: Int, commentText: String)\",\n  \"component_description\": \"Scala case class representing comments made on reviews.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"ReviewComment\",\n  \"component_code\": \"case class ReviewComment(commentId: Int, reviewId: Int, commentText: String)\",\n  \"component_description\": \"Scala case class representing comments made on reviews.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Book\",\n  \"component_code\": \"struct Book {\\n    id: u32,\\n    title: String,\\n    author: String,\\n}\",\n  \"component_description\": \"Simple Rust struct representing a book entity.\"\n}", "completion": "{\n  \"component_type\": \"METHOD_DEFINITION\",\n  \"component_name\": \"executeCommand\",\n  \"component_code\": \"def executeCommand(command)\\n  system(command)\\nend\",\n  \"component_description\": \"Ruby method executing a system shell command directly from input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Command Injection\",\n      \"cve_score\": 9.1,\n      \"exploitation_methods\": [\n        \"Inject && rm -rf / to delete server files\",\n        \"Chain additional commands to escalate privileges\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid executing raw user input\",\n        \"Use a whitelist of safe predefined commands\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InsecureSetCookie\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/cookie', (req, res) => {\\n  res.cookie('user', req.query.user);\\n  res.send('Cookie set');\\n});\",\n  \"component_description\": \"Node.js server setting cookies based on unsanitized user input.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InsecureSetCookie\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/cookie', (req, res) => {\\n  res.cookie('user', req.query.user);\\n  res.send('Cookie set');\\n});\",\n  \"component_description\": \"Node.js server setting cookies based on unsanitized user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"HTTP Response Splitting\",\n      \"cve_score\": 8.4,\n      \"exploitation_methods\": [\n        \"Inject \\r\\n into cookie values to modify HTTP responses.\",\n        \"Perform header injection and session fixation attacks.\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize all cookie values to disallow CRLF characters.\",\n        \"Use secure cookie-setting functions that encode properly.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeHeaderEcho\",\n  \"component_code\": \"app.get('/reflect', (req, res) => {\\n  const input = req.query.input;\\n  res.setHeader('X-User-Input', input);\\n  res.send('Header set');\\n});\",\n  \"component_description\": \"Node.js route that echoes user input in a custom header.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeHeaderEcho\",\n  \"component_code\": \"app.get('/reflect', (req, res) => {\\n  const input = req.query.input;\\n  res.setHeader('X-User-Input', input);\\n  res.send('Header set');\\n});\",\n  \"component_description\": \"Node.js route that echoes user input in a custom header.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"HTTP Response Splitting\",\n      \"cve_score\": 7.6,\n      \"exploitation_methods\": [\n        \"Inject \\r\\n to split headers and control response body.\",\n        \"Bypass header security or redirect traffic to malicious payloads.\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize header inputs by removing \\r and \\n characters.\",\n        \"Use libraries that auto-encode headers.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"OpenRedirectExpress\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/redirect', (req, res) => {\\n  const url = req.query.url;\\n  res.redirect(url);\\n});\",\n  \"component_description\": \"Node.js server redirecting users based on query parameter without validation.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"OpenRedirectExpress\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/redirect', (req, res) => {\\n  const url = req.query.url;\\n  res.redirect(url);\\n});\",\n  \"component_description\": \"Node.js server redirecting users based on query parameter without validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Open Redirect\",\n      \"cve_score\": 7.9,\n      \"exploitation_methods\": [\n        \"Redirect users to phishing pages.\",\n        \"Trick users into trusting malicious links.\"\n      ],\n      \"developer_fixes\": [\n        \"Restrict redirects to trusted domains only.\",\n        \"Implement URL validation before redirection.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"SensorData\",\n  \"component_code\": \"#include <stdio.h>\\n#include <string.h>\\n\\ntypedef struct {\\n    int id;\\n    float temperature;\\n    float humidity;\\n    char status[20];\\n} SensorData;\\n\\nvoid printSensor(const SensorData* sensor) {\\n    printf(\\\"Sensor ID: %d\\\\n\\\", sensor->id);\\n    printf(\\\"Temperature: %.2f\\\\n\\\", sensor->temperature);\\n    printf(\\\"Humidity: %.2f\\\\n\\\", sensor->humidity);\\n    printf(\\\"Status: %s\\\\n\\\", sensor->status);\\n}\",\n  \"component_description\": \"C struct representing environmental sensor data with a function to print its values.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"SensorData\",\n  \"component_code\": \"#include <stdio.h>\\n#include <string.h>\\n\\ntypedef struct {\\n    int id;\\n    float temperature;\\n    float humidity;\\n    char status[20];\\n} SensorData;\\n\\nvoid printSensor(const SensorData* sensor) {\\n    printf(\\\"Sensor ID: %d\\\\n\\\", sensor->id);\\n    printf(\\\"Temperature: %.2f\\\\n\\\", sensor->temperature);\\n    printf(\\\"Humidity: %.2f\\\\n\\\", sensor->humidity);\\n    printf(\\\"Status: %s\\\\n\\\", sensor->status);\\n}\",\n  \"component_description\": \"C struct representing environmental sensor data with a function to print its values.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"IPaymentValidator\",\n  \"component_code\": \"public interface IPaymentValidator {\\n    bool ValidateCardNumber(string cardNumber);\\n    bool ValidateExpiryDate(string month, string year);\\n    bool ValidateCVV(string cvv);\\n    \\n    [Obsolete(\\\"Use ValidatePaymentAsync for modern implementations\\\")]\\n    PaymentValidationResult ValidatePayment(PaymentDetails details);\\n    \\n    Task<PaymentValidationResult> ValidatePaymentAsync(PaymentDetails details);\\n}\",\n  \"component_description\": \"C# interface defining payment validation methods with async support.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"IPaymentValidator\",\n  \"component_code\": \"public interface IPaymentValidator {\\n    bool ValidateCardNumber(string cardNumber);\\n    bool ValidateExpiryDate(string month, string year);\\n    bool ValidateCVV(string cvv);\\n    \\n    [Obsolete(\\\"Use ValidatePaymentAsync for modern implementations\\\")]\\n    PaymentValidationResult ValidatePayment(PaymentDetails details);\\n    \\n    Task<PaymentValidationResult> ValidatePaymentAsync(PaymentDetails details);\\n}\",\n  \"component_description\": \"C# interface defining payment validation methods with async support.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"OrderDetails\",\n  \"component_code\": \"interface OrderDetails {\\n  orderId: number;\\n  productId: number;\\n  quantity: number;\\n}\",\n  \"component_description\": \"TypeScript interface representing order information.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"OrderDetails\",\n  \"component_code\": \"interface OrderDetails {\\n  orderId: number;\\n  productId: number;\\n  quantity: number;\\n}\",\n  \"component_description\": \"TypeScript interface representing order information.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"write_temp_file\",\n  \"component_code\": \"def write_temp_file(content):\\n    with open('/tmp/tempfile.txt', 'w') as f:\\n        f.write(content)\",\n  \"component_description\": \"Python function writing content directly into a temporary file.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"write_temp_file\",\n  \"component_code\": \"def write_temp_file(content):\\n    with open('/tmp/tempfile.txt', 'w') as f:\\n        f.write(content)\",\n  \"component_description\": \"Python function writing content directly into a temporary file.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"InventoryManager\",\n  \"component_code\": \"use std::collections::HashMap;\\n\\n#[derive(Debug, Clone)]\\nstruct Product {\\n    id: u32,\\n    name: String,\\n    quantity: u32,\\n    price: f32,\\n}\\n\\nstruct InventoryManager {\\n    products: HashMap<u32, Product>,\\n}\\n\\nimpl InventoryManager {\\n    fn new() -> Self {\\n        InventoryManager {\\n            products: HashMap::new(),\\n        }\\n    }\\n\\n    fn add_product(&mut self, id: u32, name: &str, quantity: u32, price: f32) {\\n        let product = Product {\\n            id,\\n            name: name.to_string(),\\n            quantity,\\n            price,\\n        };\\n        self.products.insert(id, product);\\n    }\\n\\n    fn update_quantity(&mut self, id: u32, quantity: u32) {\\n        if let Some(product) = self.products.get_mut(&id) {\\n            product.quantity = quantity;\\n        }\\n    }\\n\\n    fn list_products(&self) {\\n        for product in self.products.values() {\\n            println!(\\\"ID: {}, Name: {}, Qty: {}, Price: {}\\\", product.id, product.name, product.quantity, product.price);\\n        }\\n    }\\n}\",\n  \"component_description\": \"Rust structure and implementation for a basic inventory manager with add, update, and list functionality.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"InventoryManager\",\n  \"component_code\": \"use std::collections::HashMap;\\n\\n#[derive(Debug, Clone)]\\nstruct Product {\\n    id: u32,\\n    name: String,\\n    quantity: u32,\\n    price: f32,\\n}\\n\\nstruct InventoryManager {\\n    products: HashMap<u32, Product>,\\n}\\n\\nimpl InventoryManager {\\n    fn new() -> Self {\\n        InventoryManager {\\n            products: HashMap::new(),\\n        }\\n    }\\n\\n    fn add_product(&mut self, id: u32, name: &str, quantity: u32, price: f32) {\\n        let product = Product {\\n            id,\\n            name: name.to_string(),\\n            quantity,\\n            price,\\n        };\\n        self.products.insert(id, product);\\n    }\\n\\n    fn update_quantity(&mut self, id: u32, quantity: u32) {\\n        if let Some(product) = self.products.get_mut(&id) {\\n            product.quantity = quantity;\\n        }\\n    }\\n\\n    fn list_products(&self) {\\n        for product in self.products.values() {\\n            println!(\\\"ID: {}, Name: {}, Qty: {}, Price: {}\\\", product.id, product.name, product.quantity, product.price);\\n        }\\n    }\\n}\",\n  \"component_description\": \"Rust structure and implementation for a basic inventory manager with add, update, and list functionality.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"METHOD_DEFINITION\",\n  \"component_name\": \"getUserProfile\",\n  \"component_code\": \"public UserProfile getUserProfile(String userId) {\\n  String query = \\\"SELECT * FROM profiles WHERE userId = \\\" + userId;\\n  return jdbcTemplate.queryForObject(query, UserProfile.class);\\n}\",\n  \"component_description\": \"Java method fetching user profiles\"\n}", "completion": "{\n  \"component_type\": \"METHOD_DEFINITION\",\n  \"component_name\": \"getUserProfile\",\n  \"component_code\": \"public UserProfile getUserProfile(String userId) {\\n  String query = \\\"SELECT * FROM profiles WHERE userId = \\\" + userId;\\n  return jdbcTemplate.queryForObject(query, UserProfile.class);\\n}\",\n  \"component_description\": \"Java method fetching user profiles\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 8.9,\n      \"exploitation_methods\": [\n        \"Inject malicious SQL via userId parameter\\nExtract all user profiles\"\n      ],\n      \"developer_fixes\": [\n        \"Use parameterized queries\",\n        \"Implement JPA repositories\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"PaymentProcessor\",\n  \"component_code\": \"using System;\\nusing System.Data.SqlClient;\\n\\npublic class PaymentProcessor {\\n    private string _connectionString;\\n\\n    public PaymentProcessor(string connStr) {\\n        _connectionString = connStr;\\n    }\\n\\n    public bool ProcessPayment(int userId, decimal amount, string cardNumber) {\\n        if (amount <= 0) return false;\\n\\n        using (var connection = new SqlConnection(_connectionString)) {\\n            connection.Open();\\n            \\n            // Log payment attempt\\n            var logCmd = new SqlCommand(\\n                $\\\"INSERT INTO PaymentLogs VALUES ({userId}, {amount}, '{cardNumber}', GETDATE())\\\", \\n                connection);\\n            logCmd.ExecuteNonQuery();\\n\\n            // Deduct balance\\n            var updateCmd = new SqlCommand(\\n                $\\\"UPDATE Users SET Balance = Balance - {amount} WHERE UserId = {userId}\\\", \\n                connection);\\n            return updateCmd.ExecuteNonQuery() > 0;\\n        }\\n    }\\n\\n    public decimal GetBalance(int userId) {\\n        using (var connection = new SqlConnection(_connectionString)) {\\n            var cmd = new SqlCommand($\\\"SELECT Balance FROM Users WHERE UserId = {userId}\\\", connection);\\n            connection.Open();\\n            return (decimal)cmd.ExecuteScalar();\\n        }\\n    }\\n}\",\n  \"component_description\": \"C# class handling payment processing with SQL database interactions.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"PaymentProcessor\",\n  \"component_code\": \"using System;\\nusing System.Data.SqlClient;\\n\\npublic class PaymentProcessor {\\n    private string _connectionString;\\n\\n    public PaymentProcessor(string connStr) {\\n        _connectionString = connStr;\\n    }\\n\\n    public bool ProcessPayment(int userId, decimal amount, string cardNumber) {\\n        if (amount <= 0) return false;\\n\\n        using (var connection = new SqlConnection(_connectionString)) {\\n            connection.Open();\\n            \\n            // Log payment attempt\\n            var logCmd = new SqlCommand(\\n                $\\\"INSERT INTO PaymentLogs VALUES ({userId}, {amount}, '{cardNumber}', GETDATE())\\\", \\n                connection);\\n            logCmd.ExecuteNonQuery();\\n\\n            // Deduct balance\\n            var updateCmd = new SqlCommand(\\n                $\\\"UPDATE Users SET Balance = Balance - {amount} WHERE UserId = {userId}\\\", \\n                connection);\\n            return updateCmd.ExecuteNonQuery() > 0;\\n        }\\n    }\\n\\n    public decimal GetBalance(int userId) {\\n        using (var connection = new SqlConnection(_connectionString)) {\\n            var cmd = new SqlCommand($\\\"SELECT Balance FROM Users WHERE UserId = {userId}\\\", connection);\\n            connection.Open();\\n            return (decimal)cmd.ExecuteScalar();\\n        }\\n    }\\n}\",\n  \"component_description\": \"C# class handling payment processing with SQL database interactions.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 9.2,\n      \"exploitation_methods\": [\n        \"1. Inject malicious SQL via cardNumber parameter\\n2. Exfiltrate all user data with UNION SELECT\",\n        \"1. Terminate query and append DROP TABLE commands\"\n      ],\n      \"developer_fixes\": [\n        \"Use parameterized queries for all SQL commands\",\n        \"Implement proper data access layer with ORM\"\n      ]\n    },\n    {\n      \"vul_type\": \"PCI DSS Violation\",\n      \"cve_score\": 8.7,\n      \"exploitation_methods\": [\n        \"1. Access server logs containing raw card numbers\\n2. Harvest credit card data for fraud\"\n      ],\n      \"developer_fixes\": [\n        \"Never store raw card numbers - use payment processor tokens\",\n        \"Implement automatic card number masking in logs\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"UserProfileManager\",\n  \"component_code\": \"import java.io.*;\\nimport javax.servlet.*;\\nimport javax.servlet.http.*;\\n\\npublic class UserProfileManager extends HttpServlet {\\n\\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {\\n        String username = request.getParameter(\\\"username\\\");\\n        String bio = request.getParameter(\\\"bio\\\");\\n        BufferedWriter writer = new BufferedWriter(new FileWriter(\\\"profiles/\\\" + username + \\\".txt\\\"));\\n        writer.write(bio);\\n        writer.close();\\n        response.getWriter().println(\\\"Profile saved.\\\");\\n    }\\n\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\\n        String username = request.getParameter(\\\"username\\\");\\n        BufferedReader reader = new BufferedReader(new FileReader(\\\"profiles/\\\" + username + \\\".txt\\\"));\\n        String line;\\n        while ((line = reader.readLine()) != null) {\\n            response.getWriter().println(line);\\n        }\\n        reader.close();\\n    }\\n}\",\n  \"component_description\": \"Java Servlet for saving and retrieving user profiles without input validation.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"TodoItem\",\n  \"component_code\": \"interface TodoItem {\\n  id: number;\\n  task: string;\\n  completed: boolean;\\n}\",\n  \"component_description\": \"TypeScript interface defining a todo list item.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleChatApp\",\n  \"component_code\": \"const express = require('express');\\nconst bodyParser = require('body-parser');\\nconst app = express();\\nlet messages = [];\\n\\napp.use(bodyParser.urlencoded({ extended: false }));\\napp.use(bodyParser.json());\\n\\napp.get('/', (req, res) => {\\n    let chat = messages.map(m => `<b>${m.user}</b>: ${m.text}`).join('<br>');\\n    res.send(`<form method='POST'>Name: <input name='user'><br>Message: <input name='text'><br><input type='submit'></form><hr>${chat}`);\\n});\\n\\napp.post('/', (req, res) => {\\n    messages.push({ user: req.body.user, text: req.body.text });\\n    res.redirect('/');\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Simple Node.js chat application storing and displaying user messages in memory.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleChatApp\",\n  \"component_code\": \"const express = require('express');\\nconst bodyParser = require('body-parser');\\nconst app = express();\\nlet messages = [];\\n\\napp.use(bodyParser.urlencoded({ extended: false }));\\napp.use(bodyParser.json());\\n\\napp.get('/', (req, res) => {\\n    let chat = messages.map(m => `<b>${m.user}</b>: ${m.text}`).join('<br>');\\n    res.send(`<form method='POST'>Name: <input name='user'><br>Message: <input name='text'><br><input type='submit'></form><hr>${chat}`);\\n});\\n\\napp.post('/', (req, res) => {\\n    messages.push({ user: req.body.user, text: req.body.text });\\n    res.redirect('/');\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Simple Node.js chat application storing and displaying user messages in memory.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Stored XSS\",\n      \"cve_score\": 9.0,\n      \"exploitation_methods\": [\n        \"Submit <script> tags inside the text field\",\n        \"Hijack sessions of other users viewing the chat page\",\n        \"Inject malicious payloads to control page DOM or redirect users\"\n      ],\n      \"developer_fixes\": [\n        \"Properly encode all user-provided data before rendering\",\n        \"Implement a Content Security Policy (CSP) header\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"UserProfile\",\n  \"component_code\": \"interface UserProfile {\\n  id: number;\\n  username: string;\\n  email: string;\\n}\",\n  \"component_description\": \"TypeScript interface modeling a user's profile information.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"UserProfile\",\n  \"component_code\": \"interface UserProfile {\\n  id: number;\\n  username: string;\\n  email: string;\\n}\",\n  \"component_description\": \"TypeScript interface modeling a user's profile information.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeEval\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/run', (req, res) => {\\n  const js = req.query.js;\\n  res.send(eval(js));\\n});\",\n  \"component_description\": \"Node.js route evaluating JavaScript code from user input.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeEval\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/run', (req, res) => {\\n  const js = req.query.js;\\n  res.send(eval(js));\\n});\",\n  \"component_description\": \"Node.js route evaluating JavaScript code from user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Remote Code Execution\",\n      \"cve_score\": 9.7,\n      \"exploitation_methods\": [\n        \"Execute malicious JavaScript on the server.\",\n        \"Access or modify server internals.\"\n      ],\n      \"developer_fixes\": [\n        \"Disallow eval on user input.\",\n        \"Use safe interpreters or sandbox execution.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"UserPost\",\n  \"component_code\": \"struct UserPost {\\n  int id;\\n  std::string content;\\n  std::string author;\\n};\",\n  \"component_description\": \"C++ struct representing a social media post.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"UserPost\",\n  \"component_code\": \"struct UserPost {\\n  int id;\\n  std::string content;\\n  std::string author;\\n};\",\n  \"component_description\": \"C++ struct representing a social media post.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"MessageBroadcaster\",\n  \"component_code\": \"public class MessageBroadcaster {\\n  public void broadcast(String message) {\\n    System.out.println(\\\"Broadcasting: \\\" + message);\\n  }\\n}\",\n  \"component_description\": \"Java class for broadcasting a message to users.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"MessageBroadcaster\",\n  \"component_code\": \"public class MessageBroadcaster {\\n  public void broadcast(String message) {\\n    System.out.println(\\\"Broadcasting: \\\" + message);\\n  }\\n}\",\n  \"component_description\": \"Java class for broadcasting a message to users.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"delete_user_account\",\n  \"component_code\": \"import sqlite3\\n\\ndef delete_user_account(user_id):\\n    conn = sqlite3.connect('app.db')\\n    cursor = conn.cursor()\\n    query = f\\\"DELETE FROM users WHERE id = {user_id}\\\"\\n    cursor.execute(query)\\n    conn.commit()\\n    conn.close()\",\n  \"component_description\": \"Python function that deletes a user account based on provided user ID without input sanitization.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"delete_user_account\",\n  \"component_code\": \"import sqlite3\\n\\ndef delete_user_account(user_id):\\n    conn = sqlite3.connect('app.db')\\n    cursor = conn.cursor()\\n    query = f\\\"DELETE FROM users WHERE id = {user_id}\\\"\\n    cursor.execute(query)\\n    conn.commit()\\n    conn.close()\",\n  \"component_description\": \"Python function that deletes a user account based on provided user ID without input sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 8.9,\n      \"exploitation_methods\": [\n        \"Inject ' OR '1'='1 via user_id to delete all users.\",\n        \"Inject arbitrary SQL payloads to destroy tables.\"\n      ],\n      \"developer_fixes\": [\n        \"Use parameterized queries with placeholders.\",\n        \"Validate that user_id is a strict integer type.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"UserResolver\",\n  \"component_code\": \"using System.Linq;\\nusing System.Threading.Tasks;\\nusing GraphQL;\\nusing GraphQL.Types;\\n\\npublic class UserResolver : ObjectGraphType\\n{\\n    public UserResolver(ApplicationDbContext dbContext)\\n    {\\n        Field<ListGraphType<UserType>>(\\\"users\\\")\\n            .Argument<StringGraphType>(\\\"search\\\")\\n            .ResolveAsync(async context =>\\n            {\\n                var searchTerm = context.GetArgument<string>(\\\"search\\\");\\n                \\n                // Dangerous raw query\\n                if (!string.IsNullOrEmpty(searchTerm))\\n                {\\n                    return await dbContext.Users\\n                        .FromSqlRaw($\\\"SELECT * FROM Users WHERE \\n                            Username LIKE '%{searchTerm}%' OR \\n                            Email LIKE '%{searchTerm}%'\\\").ToListAsync();\\n                }\\n                \\n                return await dbContext.Users.ToListAsync();\\n            });\\n            \\n        Field<UserType>(\\\"user\\\")\\n            .Argument<NonNullGraphType<IdGraphType>>(\\\"id\\\")\\n            .ResolveAsync(async context =>\\n            {\\n                var userId = context.GetArgument<int>(\\\"id\\\");\\n                \\n                // No authorization checks\\n                return await dbContext.Users.FindAsync(userId);\\n            });\\n            \\n        Field<ListGraphType<PostType>>(\\\"posts\\\")\\n            .Argument<NonNullGraphType<IdGraphType>>(\\\"userId\\\")\\n            .ResolveAsync(async context =>\\n            {\\n                var userId = context.GetArgument<int>(\\\"userId\\\");\\n                \\n                // N+1 query problem\\n                var user = await dbContext.Users\\n                    .Include(u => u.Posts)\\n                    .FirstOrDefaultAsync(u => u.Id == userId);\\n                \\n                return user?.Posts;\\n            });\\n    }\\n}\",\n  \"component_description\": \"GraphQL resolver for user data with SQL and N+1 issues\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"UserResolver\",\n  \"component_code\": \"using System.Linq;\\nusing System.Threading.Tasks;\\nusing GraphQL;\\nusing GraphQL.Types;\\n\\npublic class UserResolver : ObjectGraphType\\n{\\n    public UserResolver(ApplicationDbContext dbContext)\\n    {\\n        Field<ListGraphType<UserType>>(\\\"users\\\")\\n            .Argument<StringGraphType>(\\\"search\\\")\\n            .ResolveAsync(async context =>\\n            {\\n                var searchTerm = context.GetArgument<string>(\\\"search\\\");\\n                \\n                // Dangerous raw query\\n                if (!string.IsNullOrEmpty(searchTerm))\\n                {\\n                    return await dbContext.Users\\n                        .FromSqlRaw($\\\"SELECT * FROM Users WHERE \\n                            Username LIKE '%{searchTerm}%' OR \\n                            Email LIKE '%{searchTerm}%'\\\").ToListAsync();\\n                }\\n                \\n                return await dbContext.Users.ToListAsync();\\n            });\\n            \\n        Field<UserType>(\\\"user\\\")\\n            .Argument<NonNullGraphType<IdGraphType>>(\\\"id\\\")\\n            .ResolveAsync(async context =>\\n            {\\n                var userId = context.GetArgument<int>(\\\"id\\\");\\n                \\n                // No authorization checks\\n                return await dbContext.Users.FindAsync(userId);\\n            });\\n            \\n        Field<ListGraphType<PostType>>(\\\"posts\\\")\\n            .Argument<NonNullGraphType<IdGraphType>>(\\\"userId\\\")\\n            .ResolveAsync(async context =>\\n            {\\n                var userId = context.GetArgument<int>(\\\"userId\\\");\\n                \\n                // N+1 query problem\\n                var user = await dbContext.Users\\n                    .Include(u => u.Posts)\\n                    .FirstOrDefaultAsync(u => u.Id == userId);\\n                \\n                return user?.Posts;\\n            });\\n    }\\n}\",\n  \"component_description\": \"GraphQL resolver for user data with SQL and N+1 issues\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"GraphQL Query Injection\",\n      \"cve_score\": 8.7,\n      \"exploitation_methods\": [\n        \"1. Inject malicious SQL via search parameter\\n2. Extract entire database\",\n        \"1. Perform denial of service via expensive queries\"\n      ],\n      \"developer_fixes\": [\n        \"Use parameterized Entity Framework queries\",\n        \"Implement query complexity analysis\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"AdminUser\",\n  \"component_code\": \"<?php\\nclass AdminUser {\\n  public $username;\\n  public $role;\\n\\n  function __construct($username, $role) {\\n    $this->username = $username;\\n    $this->role = $role;\\n  }\\n}\",\n  \"component_description\": \"PHP class for modeling administrative user accounts.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"AdminUser\",\n  \"component_code\": \"<?php\\nclass AdminUser {\\n  public $username;\\n  public $role;\\n\\n  function __construct($username, $role) {\\n    $this->username = $username;\\n    $this->role = $role;\\n  }\\n}\",\n  \"component_description\": \"PHP class for modeling administrative user accounts.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleNotesApp\",\n  \"component_code\": \"const express = require('express');\\nconst fs = require('fs');\\nconst bodyParser = require('body-parser');\\nconst app = express();\\n\\napp.use(bodyParser.json());\\n\\napp.post('/saveNote', (req, res) => {\\n    const { filename, content } = req.body;\\n    fs.writeFileSync(`notes/${filename}`, content);\\n    res.send('Note saved');\\n});\\n\\napp.get('/readNote', (req, res) => {\\n    const filename = req.query.filename;\\n    const content = fs.readFileSync(`notes/${filename}`, 'utf8');\\n    res.send(content);\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Node.js app to save and read notes by writing directly to the filesystem.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Location\",\n  \"component_code\": \"struct Location {\\n    latitude: f64,\\n    longitude: f64,\\n}\",\n  \"component_description\": \"Simple Rust struct for representing geographical locations.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"LoginService\",\n  \"component_code\": \"import java.sql.*;\\n\\npublic class LoginService {\\n\\n    public boolean authenticate(String username, String password) throws SQLException {\\n        Connection conn = DriverManager.getConnection(\\\"jdbc:mysql://localhost:3306/app\\\", \\\"root\\\", \\\"\\\");\\n        Statement stmt = conn.createStatement();\\n        String query = \\\"SELECT * FROM users WHERE username='\\\" + username + \\\"' AND password='\\\" + password + \\\"'\\\";\\n        ResultSet rs = stmt.executeQuery(query);\\n        boolean authenticated = rs.next();\\n        conn.close();\\n        return authenticated;\\n    }\\n}\",\n  \"component_description\": \"Java login service authenticating users against database without prepared statements.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"LoginService\",\n  \"component_code\": \"import java.sql.*;\\n\\npublic class LoginService {\\n\\n    public boolean authenticate(String username, String password) throws SQLException {\\n        Connection conn = DriverManager.getConnection(\\\"jdbc:mysql://localhost:3306/app\\\", \\\"root\\\", \\\"\\\");\\n        Statement stmt = conn.createStatement();\\n        String query = \\\"SELECT * FROM users WHERE username='\\\" + username + \\\"' AND password='\\\" + password + \\\"'\\\";\\n        ResultSet rs = stmt.executeQuery(query);\\n        boolean authenticated = rs.next();\\n        conn.close();\\n        return authenticated;\\n    }\\n}\",\n  \"component_description\": \"Java login service authenticating users against database without prepared statements.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 9.0,\n      \"exploitation_methods\": [\n        \"Inject ' OR '1'='1 to bypass authentication\",\n        \"Inject UNION SELECT to dump users table\"\n      ],\n      \"developer_fixes\": [\n        \"Use prepared statements with parameterized queries\",\n        \"Validate and sanitize all user inputs\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"deleteRecord\",\n  \"component_code\": \"CREATE PROCEDURE deleteRecord(IN tableName VARCHAR(255), IN recordId INT)\\nBEGIN\\n  SET @sql = CONCAT('DELETE FROM ', tableName, ' WHERE id = ', recordId);\\n  PREPARE stmt FROM @sql;\\n  EXECUTE stmt;\\n  DEALLOCATE PREPARE stmt;\\nEND;\",\n  \"component_description\": \"SQL procedure deleting a record by table name and ID using dynamic SQL.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"deleteRecord\",\n  \"component_code\": \"CREATE PROCEDURE deleteRecord(IN tableName VARCHAR(255), IN recordId INT)\\nBEGIN\\n  SET @sql = CONCAT('DELETE FROM ', tableName, ' WHERE id = ', recordId);\\n  PREPARE stmt FROM @sql;\\n  EXECUTE stmt;\\n  DEALLOCATE PREPARE stmt;\\nEND;\",\n  \"component_description\": \"SQL procedure deleting a record by table name and ID using dynamic SQL.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 9.0,\n      \"exploitation_methods\": [\n        \"Input 'users; DROP TABLE admins' as tableName.\",\n        \"Delete all rows or tables with crafted queries.\"\n      ],\n      \"developer_fixes\": [\n        \"Disallow raw table name input or verify against whitelist.\",\n        \"Avoid dynamic SQL for table-level operations.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"deserialize_data\",\n  \"component_code\": \"import pickle\\ndef deserialize_data(data):\\n  return pickle.loads(data)\",\n  \"component_description\": \"Python function for data deserialization\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"deserialize_data\",\n  \"component_code\": \"import pickle\\ndef deserialize_data(data):\\n  return pickle.loads(data)\",\n  \"component_description\": \"Python function for data deserialization\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Insecure Deserialization\",\n      \"cve_score\": 9.8,\n      \"exploitation_methods\": [\n        \"Craft malicious pickle payload\\nAchieve RCE when deserialized\"\n      ],\n      \"developer_fixes\": [\n        \"Use JSON instead of pickle\",\n        \"Implement signature verification\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Location\",\n  \"component_code\": \"struct Location {\\n    latitude: f64,\\n    longitude: f64,\\n}\",\n  \"component_description\": \"Simple Rust struct for representing geographical locations.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"ProfileController\",\n  \"component_code\": \"using System;\\nusing System.IO;\\nusing Microsoft.AspNetCore.Mvc;\\n\\npublic class ProfileController : Controller {\\n\\n    [HttpPost]\\n    public IActionResult UploadProfilePicture() {\\n        var file = Request.Form.Files[0];\\n        var path = Path.Combine(\\\"uploads\\\", file.FileName);\\n\\n        using (var stream = new FileStream(path, FileMode.Create)) {\\n            file.CopyTo(stream);\\n        }\\n\\n        return Ok(\\\"Uploaded\\\");\\n    }\\n\\n    [HttpGet]\\n    public IActionResult DownloadProfilePicture(string filename) {\\n        var filepath = Path.Combine(\\\"uploads\\\", filename);\\n        if (System.IO.File.Exists(filepath)) {\\n            return File(System.IO.File.ReadAllBytes(filepath), \\\"application/octet-stream\\\", filename);\\n        }\\n        return NotFound();\\n    }\\n}\",\n  \"component_description\": \"C# ASP.NET Controller for uploading and downloading profile pictures without proper validations.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Unrestricted File Upload\",\n      \"cve_score\": 9.0,\n      \"exploitation_methods\": [\n        \"Upload .exe, .aspx, or web shells to server\",\n        \"Execute uploaded files remotely\"\n      ],\n      \"developer_fixes\": [\n        \"Restrict allowed file types (e.g., .jpg, .png only)\",\n        \"Validate MIME type on server side\"\n      ]\n    },\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.1,\n      \"exploitation_methods\": [\n        \"Use ../../ to access arbitrary server files\",\n        \"Leak sensitive configs like web.config\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize file paths strictly\",\n        \"Serve only from a whitelisted folder\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"update_user_privileges\",\n  \"component_code\": \"CREATE PROCEDURE update_user_privileges(\\n    IN user_id INT,\\n    IN new_role VARCHAR(50)\\nBEGIN\\n    DECLARE old_role VARCHAR(50);\\n    \\n    SELECT role INTO old_role FROM users WHERE id = user_id;\\n    \\n    IF old_role = 'admin' AND new_role != 'admin' THEN\\n        INSERT INTO privilege_changes \\n        VALUES (user_id, old_role, new_role, CURRENT_USER(), NOW());\\n    END IF;\\n    \\n    UPDATE users SET role = new_role WHERE id = user_id;\\nEND\",\n  \"component_description\": \"MySQL stored procedure for modifying user roles with admin demotion logging.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"update_user_privileges\",\n  \"component_code\": \"CREATE PROCEDURE update_user_privileges(\\n    IN user_id INT,\\n    IN new_role VARCHAR(50)\\nBEGIN\\n    DECLARE old_role VARCHAR(50);\\n    \\n    SELECT role INTO old_role FROM users WHERE id = user_id;\\n    \\n    IF old_role = 'admin' AND new_role != 'admin' THEN\\n        INSERT INTO privilege_changes \\n        VALUES (user_id, old_role, new_role, CURRENT_USER(), NOW());\\n    END IF;\\n    \\n    UPDATE users SET role = new_role WHERE id = user_id;\\nEND\",\n  \"component_description\": \"MySQL stored procedure for modifying user roles with admin demotion logging.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Privilege Escalation\",\n      \"cve_score\": 8.1,\n      \"exploitation_methods\": [\n        \"1. Chain with SQL injection to bypass admin demotion logging\",\n        \"2. Abuse race conditions between SELECT and UPDATE statements\"\n      ],\n      \"developer_fixes\": [\n        \"Implement row-level locking during privilege changes\",\n        \"Add transaction isolation level checks\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"SupportTicket\",\n  \"component_code\": \"case class SupportTicket(ticketId: Int, userMessage: String, createdAt: String)\",\n  \"component_description\": \"Scala case class modeling a user support ticket.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"SupportTicket\",\n  \"component_code\": \"case class SupportTicket(ticketId: Int, userMessage: String, createdAt: String)\",\n  \"component_description\": \"Scala case class modeling a user support ticket.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleLoginAPI\",\n  \"component_code\": \"package main\\n\\nimport (\\n    \\\"fmt\\\"\\n    \\\"net/http\\\"\\n)\\n\\nvar users = map[string]string{\\n    \\\"admin\\\": \\\"password123\\\",\\n}\\n\\nfunc login(w http.ResponseWriter, r *http.Request) {\\n    r.ParseForm()\\n    username := r.FormValue(\\\"username\\\")\\n    password := r.FormValue(\\\"password\\\")\\n    if users[username] == password {\\n        fmt.Fprintf(w, \\\"Welcome %s\\\", username)\\n    } else {\\n        http.Error(w, \\\"Invalid credentials\\\", http.StatusUnauthorized)\\n    }\\n}\\n\\nfunc main() {\\n    http.HandleFunc(\\\"/login\\\", login)\\n    http.ListenAndServe(\\\":8080\\\", nil)\\n}\",\n  \"component_description\": \"Simple Go login server comparing submitted credentials against hardcoded ones.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleLoginAPI\",\n  \"component_code\": \"package main\\n\\nimport (\\n    \\\"fmt\\\"\\n    \\\"net/http\\\"\\n)\\n\\nvar users = map[string]string{\\n    \\\"admin\\\": \\\"password123\\\",\\n}\\n\\nfunc login(w http.ResponseWriter, r *http.Request) {\\n    r.ParseForm()\\n    username := r.FormValue(\\\"username\\\")\\n    password := r.FormValue(\\\"password\\\")\\n    if users[username] == password {\\n        fmt.Fprintf(w, \\\"Welcome %s\\\", username)\\n    } else {\\n        http.Error(w, \\\"Invalid credentials\\\", http.StatusUnauthorized)\\n    }\\n}\\n\\nfunc main() {\\n    http.HandleFunc(\\\"/login\\\", login)\\n    http.ListenAndServe(\\\":8080\\\", nil)\\n}\",\n  \"component_description\": \"Simple Go login server comparing submitted credentials against hardcoded ones.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Hardcoded Credentials\",\n      \"cve_score\": 7.5,\n      \"exploitation_methods\": [\n        \"Reverse engineer to discover admin credentials\",\n        \"Reuse exposed admin credentials for privilege escalation\"\n      ],\n      \"developer_fixes\": [\n        \"Store credentials securely outside of source code\",\n        \"Use a database with hashed passwords\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"SimpleLogger\",\n  \"component_code\": \"public class SimpleLogger {\\n  public void log(String message) {\\n    System.out.println(\\\"LOG: \\\" + message);\\n  }\\n}\",\n  \"component_description\": \"Java class for simple console logging.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"SimpleLogger\",\n  \"component_code\": \"public class SimpleLogger {\\n  public void log(String message) {\\n    System.out.println(\\\"LOG: \\\" + message);\\n  }\\n}\",\n  \"component_description\": \"Java class for simple console logging.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"OrderManager\",\n  \"component_code\": \"public class OrderManager {\\n  public void createOrder(String user, double total) {\\n    System.out.println(\\\"Order created for \\\" + user + \\\" Total: \\\" + total);\\n  }\\n}\",\n  \"component_description\": \"Java class for handling simple order creation.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"OrderManager\",\n  \"component_code\": \"public class OrderManager {\\n  public void createOrder(String user, double total) {\\n    System.out.println(\\\"Order created for \\\" + user + \\\" Total: \\\" + total);\\n  }\\n}\",\n  \"component_description\": \"Java class for handling simple order creation.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"OpenRedirectHandler\",\n  \"component_code\": \"app.get('/redirect', (req, res) => {\\n  const url = req.query.url;\\n  res.redirect(url);\\n});\",\n  \"component_description\": \"JavaScript Express route that redirects to any URL provided.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"OpenRedirectHandler\",\n  \"component_code\": \"app.get('/redirect', (req, res) => {\\n  const url = req.query.url;\\n  res.redirect(url);\\n});\",\n  \"component_description\": \"JavaScript Express route that redirects to any URL provided.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Open Redirect\",\n      \"cve_score\": 7.8,\n      \"exploitation_methods\": [\n        \"Redirect users to phishing or malicious domains.\",\n        \"Exploit trust in domain to perform credential theft.\"\n      ],\n      \"developer_fixes\": [\n        \"Validate URLs and redirect only to trusted internal domains.\",\n        \"Use a whitelist or allow relative paths only.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"UserSession\",\n  \"component_code\": \"struct UserSession {\\n    session_id: String,\\n    user_id: u32,\\n    expires_at: u64,\\n}\",\n  \"component_description\": \"Rust struct representing a basic user session with expiry timestamp.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleProfileSaver\",\n  \"component_code\": \"<?php\\nif (isset($_POST['username']) && isset($_POST['bio'])) {\\n    $username = $_POST['username'];\\n    $bio = $_POST['bio'];\\n    file_put_contents(\\\"profiles/$username.txt\\\", $bio);\\n    echo \\\"Profile saved.\\\";\\n}\\n\\nif (isset($_GET['username'])) {\\n    $username = $_GET['username'];\\n    $bio = file_get_contents(\\\"profiles/$username.txt\\\");\\n    echo \\\"<h1>$username</h1><p>$bio</p>\\\";\\n}\",\n  \"component_description\": \"PHP script saving and serving user profiles without sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Stored XSS\",\n      \"cve_score\": 9.1,\n      \"exploitation_methods\": [\n        \"Inject <script> into the bio field\",\n        \"Execute malicious JS when profile is viewed\"\n      ],\n      \"developer_fixes\": [\n        \"Escape output when displaying user input\",\n        \"Use HTML sanitization libraries\"\n      ]\n    },\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.6,\n      \"exploitation_methods\": [\n        \"Access arbitrary files by manipulating username param\",\n        \"Download application files like config.php\"\n      ],\n      \"developer_fixes\": [\n        \"Validate username format strictly\",\n        \"Use base directory enforcement for file access\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"BadResponseSplitting\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/header', (req, res) => {\\n  const value = req.query.value;\\n  res.setHeader('X-Input', value);\\n  res.send('Done');\\n});\",\n  \"component_description\": \"Node.js server setting headers directly from user input.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"BadResponseSplitting\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/header', (req, res) => {\\n  const value = req.query.value;\\n  res.setHeader('X-Input', value);\\n  res.send('Done');\\n});\",\n  \"component_description\": \"Node.js server setting headers directly from user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"HTTP Response Splitting\",\n      \"cve_score\": 8.1,\n      \"exploitation_methods\": [\n        \"Inject \\r\\n characters to split headers and inject body content.\",\n        \"Perform header poisoning to redirect users.\"\n      ],\n      \"developer_fixes\": [\n        \"Remove \\r and \\n from all header inputs.\",\n        \"Use built-in libraries that sanitize header data.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"Invoice\",\n  \"component_code\": \"case class Invoice(id: Int, customerName: String, amount: Double, dueDate: String)\\n\\nobject InvoiceManager {\\n  def createInvoice(id: Int, name: String, amount: Double, dueDate: String): Invoice = {\\n    Invoice(id, name, amount, dueDate)\\n  }\\n\\n  def printInvoice(invoice: Invoice): Unit = {\\n    println(s\\\"Invoice: ${invoice.id}, Customer: ${invoice.customerName}, Amount: ${invoice.amount}, Due: ${invoice.dueDate}\\\")\\n  }\\n}\",\n  \"component_description\": \"Scala class and object for managing simple invoices.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"Invoice\",\n  \"component_code\": \"case class Invoice(id: Int, customerName: String, amount: Double, dueDate: String)\\n\\nobject InvoiceManager {\\n  def createInvoice(id: Int, name: String, amount: Double, dueDate: String): Invoice = {\\n    Invoice(id, name, amount, dueDate)\\n  }\\n\\n  def printInvoice(invoice: Invoice): Unit = {\\n    println(s\\\"Invoice: ${invoice.id}, Customer: ${invoice.customerName}, Amount: ${invoice.amount}, Due: ${invoice.dueDate}\\\")\\n  }\\n}\",\n  \"component_description\": \"Scala class and object for managing simple invoices.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InlineScriptInjection\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/greet', (req, res) => {\\n  const name = req.query.name;\\n  res.send(`<html><body><h1>Hello ${name}</h1></body></html>`);\\n});\",\n  \"component_description\": \"Express route directly embedding user input into HTML output.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InlineScriptInjection\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/greet', (req, res) => {\\n  const name = req.query.name;\\n  res.send(`<html><body><h1>Hello ${name}</h1></body></html>`);\\n});\",\n  \"component_description\": \"Express route directly embedding user input into HTML output.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Reflected XSS\",\n      \"cve_score\": 8.4,\n      \"exploitation_methods\": [\n        \"Inject <script>alert(1)</script> to execute JavaScript.\",\n        \"Steal session cookies or deface UI.\"\n      ],\n      \"developer_fixes\": [\n        \"Escape input before injecting into HTML.\",\n        \"Use templating engines that auto-sanitize user input.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"SCHEMA_DEFINITION\",\n  \"component_name\": \"SupportTickets\",\n  \"component_code\": \"CREATE TABLE SupportTickets (\\n  id SERIAL PRIMARY KEY,\\n  user_id INT NOT NULL,\\n  subject VARCHAR(255) NOT NULL,\\n  description TEXT,\\n  status VARCHAR(50) DEFAULT 'open',\\n  created_at TIMESTAMP DEFAULT NOW()\\n);\",\n  \"component_description\": \"SQL schema for managing support tickets submitted by users.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"SessionManager\",\n  \"component_code\": \"import pickle\\n\\nclass SessionManager:\\n    def __init__(self):\\n        self.sessions = {}\\n\\n    def create_session(self, user_id):\\n        self.sessions[user_id] = {'user_id': user_id}\\n\\n    def save_sessions(self, filename):\\n        with open(filename, 'wb') as f:\\n            pickle.dump(self.sessions, f)\\n\\n    def load_sessions(self, filename):\\n        with open(filename, 'rb') as f:\\n            self.sessions = pickle.load(f)\",\n  \"component_description\": \"Python class managing user sessions using pickle serialization and deserialization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Insecure Deserialization\",\n      \"cve_score\": 9.5,\n      \"exploitation_methods\": [\n        \"Craft malicious pickle payloads to execute arbitrary code\",\n        \"Exploit trusted deserialization to escalate privileges\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid pickle with untrusted sources\",\n        \"Use safer serialization methods like JSON\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"MODULE_DEFINITION\",\n  \"component_name\": \"data_exporter\",\n  \"component_code\": \"import csv\\n\\ndef export_users(users):\\n    with open('users.csv', 'w') as file:\\n        writer = csv.writer(file)\\n        writer.writerow(['id', 'name', 'email'])\\n        for user in users:\\n            writer.writerow([user['id'], user['name'], user['email']])\\n\\ndef export_transactions(transactions):\\n    with open('transactions.csv', 'w') as file:\\n        writer = csv.writer(file)\\n        writer.writerow(['id', 'amount', 'timestamp'])\\n        for txn in transactions:\\n            writer.writerow([txn['id'], txn['amount'], txn['timestamp']])\",\n  \"component_description\": \"Python module for exporting user and transaction data to CSV files.\"\n}", "completion": "{\n  \"component_type\": \"MODULE_DEFINITION\",\n  \"component_name\": \"data_exporter\",\n  \"component_code\": \"import csv\\n\\ndef export_users(users):\\n    with open('users.csv', 'w') as file:\\n        writer = csv.writer(file)\\n        writer.writerow(['id', 'name', 'email'])\\n        for user in users:\\n            writer.writerow([user['id'], user['name'], user['email']])\\n\\ndef export_transactions(transactions):\\n    with open('transactions.csv', 'w') as file:\\n        writer = csv.writer(file)\\n        writer.writerow(['id', 'amount', 'timestamp'])\\n        for txn in transactions:\\n            writer.writerow([txn['id'], txn['amount'], txn['timestamp']])\",\n  \"component_description\": \"Python module for exporting user and transaction data to CSV files.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Sensitive Data Exposure\",\n      \"cve_score\": 7.8,\n      \"exploitation_methods\": [\n        \"Access unprotected CSVs and steal user data\",\n        \"Intercept files stored on shared locations\",\n        \"Exploit lack of encryption to access sensitive exports\"\n      ],\n      \"developer_fixes\": [\n        \"Encrypt sensitive data at rest\",\n        \"Secure file access permissions properly\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InlineScriptInjection\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/greet', (req, res) => {\\n  const name = req.query.name;\\n  res.send(`<html><body><h1>Hello ${name}</h1></body></html>`);\\n});\",\n  \"component_description\": \"Express route directly embedding user input into HTML output.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InlineScriptInjection\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/greet', (req, res) => {\\n  const name = req.query.name;\\n  res.send(`<html><body><h1>Hello ${name}</h1></body></html>`);\\n});\",\n  \"component_description\": \"Express route directly embedding user input into HTML output.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Reflected XSS\",\n      \"cve_score\": 8.4,\n      \"exploitation_methods\": [\n        \"Inject <script>alert(1)</script> to execute JavaScript.\",\n        \"Steal session cookies or deface UI.\"\n      ],\n      \"developer_fixes\": [\n        \"Escape input before injecting into HTML.\",\n        \"Use templating engines that auto-sanitize user input.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"SessionRecord\",\n  \"component_code\": \"case class SessionRecord(sessionId: Int, userId: Int, loginTime: String)\",\n  \"component_description\": \"Scala case class representing a login session.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"SessionRecord\",\n  \"component_code\": \"case class SessionRecord(sessionId: Int, userId: Int, loginTime: String)\",\n  \"component_description\": \"Scala case class representing a login session.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"NoteStorage\",\n  \"component_code\": \"import os\\n\\nclass NoteStorage:\\n    def __init__(self):\\n        self.base_path = \\\"notes/\\\"\\n\\n    def save_note(self, filename, content):\\n        with open(self.base_path + filename, 'w') as f:\\n            f.write(content)\\n\\n    def read_note(self, filename):\\n        with open(self.base_path + filename, 'r') as f:\\n            return f.read()\",\n  \"component_description\": \"Python class for saving and reading user notes from disk without input validation.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"NoteStorage\",\n  \"component_code\": \"import os\\n\\nclass NoteStorage:\\n    def __init__(self):\\n        self.base_path = \\\"notes/\\\"\\n\\n    def save_note(self, filename, content):\\n        with open(self.base_path + filename, 'w') as f:\\n            f.write(content)\\n\\n    def read_note(self, filename):\\n        with open(self.base_path + filename, 'r') as f:\\n            return f.read()\",\n  \"component_description\": \"Python class for saving and reading user notes from disk without input validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.4,\n      \"exploitation_methods\": [\n        \"Read or overwrite arbitrary files using crafted filename\",\n        \"Access sensitive OS files like /etc/passwd\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize filenames to disallow ../\",\n        \"Use only a whitelist of valid filenames\"\n      ]\n    },\n    {\n      \"vul_type\": \"Stored XSS\",\n      \"cve_score\": 9.0,\n      \"exploitation_methods\": [\n        \"Save <script> inside notes\",\n        \"Execute JavaScript when notes are rendered in a web app\"\n      ],\n      \"developer_fixes\": [\n        \"Escape content when displaying saved notes\",\n        \"Sanitize inputs before storing\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"ContactInfo\",\n  \"component_code\": \"case class ContactInfo(name: String, email: String, phone: String)\",\n  \"component_description\": \"Scala case class representing a user's contact information.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"ContactInfo\",\n  \"component_code\": \"case class ContactInfo(name: String, email: String, phone: String)\",\n  \"component_description\": \"Scala case class representing a user's contact information.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"APIResponse\",\n  \"component_code\": \"struct APIResponse {\\n  int statusCode;\\n  std::string message;\\n};\",\n  \"component_description\": \"C++ struct representing a simple API response.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"APIResponse\",\n  \"component_code\": \"struct APIResponse {\\n  int statusCode;\\n  std::string message;\\n};\",\n  \"component_description\": \"C++ struct representing a simple API response.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"MessageQueue\",\n  \"component_code\": \"public class MessageQueue {\\n  public void sendMessage(String queueName, String message) {\\n    System.out.println(\\\"Sending message to \\\" + queueName + \\\" : \\\" + message);\\n  }\\n}\",\n  \"component_description\": \"Java class simulating message queue communications.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"MessageQueue\",\n  \"component_code\": \"public class MessageQueue {\\n  public void sendMessage(String queueName, String message) {\\n    System.out.println(\\\"Sending message to \\\" + queueName + \\\" : \\\" + message);\\n  }\\n}\",\n  \"component_description\": \"Java class simulating message queue communications.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Feedback\",\n  \"component_code\": \"<?php\\nclass Feedback {\\n  public $user;\\n  public $message;\\n\\n  function __construct($user, $message) {\\n    $this->user = $user;\\n    $this->message = $message;\\n  }\\n}\",\n  \"component_description\": \"PHP class modeling simple user feedback submission.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Feedback\",\n  \"component_code\": \"<?php\\nclass Feedback {\\n  public $user;\\n  public $message;\\n\\n  function __construct($user, $message) {\\n    $this->user = $user;\\n    $this->message = $message;\\n  }\\n}\",\n  \"component_description\": \"PHP class modeling simple user feedback submission.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"logPayment\",\n  \"component_code\": \"CREATE PROCEDURE logPayment(IN payId INT, IN amount DECIMAL(10,2))\\nBEGIN\\n  INSERT INTO payments(payment_id, amount, paid_at) VALUES (payId, amount, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure for logging payments into a database.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"logPayment\",\n  \"component_code\": \"CREATE PROCEDURE logPayment(IN payId INT, IN amount DECIMAL(10,2))\\nBEGIN\\n  INSERT INTO payments(payment_id, amount, paid_at) VALUES (payId, amount, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure for logging payments into a database.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"updateUserBalance\",\n  \"component_code\": \"CREATE PROCEDURE updateUserBalance(IN uid VARCHAR(50), IN new_balance DECIMAL(10,2))\\nBEGIN\\n  SET @q = CONCAT('UPDATE Users SET balance = ', new_balance, ' WHERE id = ', uid);\\n  PREPARE stmt FROM @q;\\n  EXECUTE stmt;\\n  DEALLOCATE PREPARE stmt;\\nEND;\",\n  \"component_description\": \"SQL stored procedure updating user balance using dynamic query building.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"UserSession\",\n  \"component_code\": \"struct UserSession {\\n    session_id: String,\\n    user_id: u32,\\n    expires_at: u64,\\n}\",\n  \"component_description\": \"Rust struct representing a basic user session with expiry timestamp.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"UserNotificationService\",\n  \"component_code\": \"class UserNotificationService {\\n  def sendNotification(userId: Int, message: String): Unit = {\\n    println(s\\\"Sending notification to $userId: $message\\\")\\n  }\\n}\",\n  \"component_description\": \"Scala class simulating a notification service sending messages to users.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"UserNotificationService\",\n  \"component_code\": \"class UserNotificationService {\\n  def sendNotification(userId: Int, message: String): Unit = {\\n    println(s\\\"Sending notification to $userId: $message\\\")\\n  }\\n}\",\n  \"component_description\": \"Scala class simulating a notification service sending messages to users.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeHeaderEcho\",\n  \"component_code\": \"app.get('/reflect', (req, res) => {\\n  const input = req.query.input;\\n  res.setHeader('X-User-Input', input);\\n  res.send('Header set');\\n});\",\n  \"component_description\": \"Node.js route that echoes user input in a custom header.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeHeaderEcho\",\n  \"component_code\": \"app.get('/reflect', (req, res) => {\\n  const input = req.query.input;\\n  res.setHeader('X-User-Input', input);\\n  res.send('Header set');\\n});\",\n  \"component_description\": \"Node.js route that echoes user input in a custom header.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"HTTP Response Splitting\",\n      \"cve_score\": 7.6,\n      \"exploitation_methods\": [\n        \"Inject \\r\\n to split headers and control response body.\",\n        \"Bypass header security or redirect traffic to malicious payloads.\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize header inputs by removing \\r and \\n characters.\",\n        \"Use libraries that auto-encode headers.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"recordFeedback\",\n  \"component_code\": \"CREATE PROCEDURE recordFeedback(IN userId INT, IN feedback TEXT)\\nBEGIN\\n  INSERT INTO feedback(user_id, comment, submitted_at) VALUES (userId, feedback, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure for recording user feedback.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"recordFeedback\",\n  \"component_code\": \"CREATE PROCEDURE recordFeedback(IN userId INT, IN feedback TEXT)\\nBEGIN\\n  INSERT INTO feedback(user_id, comment, submitted_at) VALUES (userId, feedback, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure for recording user feedback.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"EmailSender\",\n  \"component_code\": \"public class EmailSender {\\n  public void send(String address, String content) {\\n    System.out.println(\\\"Sending email to: \\\" + address);\\n  }\\n}\",\n  \"component_description\": \"Java class simulating email sending functionality.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"EmailSender\",\n  \"component_code\": \"public class EmailSender {\\n  public void send(String address, String content) {\\n    System.out.println(\\\"Sending email to: \\\" + address);\\n  }\\n}\",\n  \"component_description\": \"Java class simulating email sending functionality.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"ShippingInfo\",\n  \"component_code\": \"struct ShippingInfo {\\n    std::string address;\\n    std::string city;\\n    std::string postalCode;\\n};\",\n  \"component_description\": \"C++ struct representing shipping address details.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"ShippingInfo\",\n  \"component_code\": \"struct ShippingInfo {\\n    std::string address;\\n    std::string city;\\n    std::string postalCode;\\n};\",\n  \"component_description\": \"C++ struct representing shipping address details.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"load_user_profile\",\n  \"component_code\": \"import os\\n\\ndef load_user_profile(username):\\n    path = f\\\"/home/profiles/{username}.txt\\\"\\n    if os.path.exists(path):\\n        with open(path, 'r') as file:\\n            return file.read()\\n    return \\\"Profile not found.\\\"\",\n  \"component_description\": \"Python function that loads a user profile from the filesystem without sanitization.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"LoginRequest\",\n  \"component_code\": \"interface LoginRequest {\\n  username: string;\\n  password: string;\\n}\",\n  \"component_description\": \"Simple TypeScript interface for user login request payload.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeHeaderEchoExpress\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/unsafe-header', (req, res) => {\\n  const headerVal = req.query.header;\\n  res.setHeader('X-Header', headerVal);\\n  res.send('Header Set');\\n});\",\n  \"component_description\": \"Node.js route setting HTTP headers directly from unsanitized user input.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeHeaderReflect\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/header-echo', (req, res) => {\\n  const headerVal = req.query.header;\\n  res.setHeader('X-Reflect', headerVal);\\n  res.send('Done');\\n});\",\n  \"component_description\": \"Node.js server reflecting unsanitized header values.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"HTTP Response Splitting\",\n      \"cve_score\": 8.3,\n      \"exploitation_methods\": [\n        \"Inject \\r\\n to split HTTP responses.\",\n        \"Create custom malicious responses to redirect users or inject malicious content.\"\n      ],\n      \"developer_fixes\": [\n        \"Strip CR and LF characters from header values.\",\n        \"Use safe header libraries that sanitize automatically.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeRedirect\",\n  \"component_code\": \"<?php\\n$url = $_GET['url'];\\nheader('Location: ' . $url);\",\n  \"component_description\": \"PHP script redirecting users based on unsanitized input.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeRedirect\",\n  \"component_code\": \"<?php\\n$url = $_GET['url'];\\nheader('Location: ' . $url);\",\n  \"component_description\": \"PHP script redirecting users based on unsanitized input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Open Redirect\",\n      \"cve_score\": 7.5,\n      \"exploitation_methods\": [\n        \"Redirect users to phishing websites.\",\n        \"Exploit trust to harvest credentials or install malware.\"\n      ],\n      \"developer_fixes\": [\n        \"Allow redirects only to internal trusted domains.\",\n        \"Use a whitelist for allowed redirect URLs.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"ApiResponse\",\n  \"component_code\": \"struct ApiResponse {\\n    status: String,\\n    message: String,\\n}\",\n  \"component_description\": \"Rust struct representing a basic API response structure.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"ApiResponse\",\n  \"component_code\": \"struct ApiResponse {\\n    status: String,\\n    message: String,\\n}\",\n  \"component_description\": \"Rust struct representing a basic API response structure.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"BookingService\",\n  \"component_code\": \"public class BookingService {\\n  public void book(String user, String date) {\\n    System.out.println(\\\"Booking confirmed for \\\" + user + \\\" on \\\" + date);\\n  }\\n}\",\n  \"component_description\": \"Java class for handling booking confirmations.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"BookingService\",\n  \"component_code\": \"public class BookingService {\\n  public void book(String user, String date) {\\n    System.out.println(\\\"Booking confirmed for \\\" + user + \\\" on \\\" + date);\\n  }\\n}\",\n  \"component_description\": \"Java class for handling booking confirmations.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"ProfileController\",\n  \"component_code\": \"using System;\\nusing System.IO;\\nusing Microsoft.AspNetCore.Mvc;\\n\\npublic class ProfileController : Controller {\\n\\n    [HttpPost]\\n    public IActionResult UploadProfilePicture() {\\n        var file = Request.Form.Files[0];\\n        var path = Path.Combine(\\\"uploads\\\", file.FileName);\\n\\n        using (var stream = new FileStream(path, FileMode.Create)) {\\n            file.CopyTo(stream);\\n        }\\n\\n        return Ok(\\\"Uploaded\\\");\\n    }\\n\\n    [HttpGet]\\n    public IActionResult DownloadProfilePicture(string filename) {\\n        var filepath = Path.Combine(\\\"uploads\\\", filename);\\n        if (System.IO.File.Exists(filepath)) {\\n            return File(System.IO.File.ReadAllBytes(filepath), \\\"application/octet-stream\\\", filename);\\n        }\\n        return NotFound();\\n    }\\n}\",\n  \"component_description\": \"C# ASP.NET Controller for uploading and downloading profile pictures without proper validations.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"UserManager\",\n  \"component_code\": \"import sqlite3\\n\\nclass UserManager:\\n    def __init__(self, db_path):\\n        self.db_path = db_path\\n\\n    def create_user(self, username, password):\\n        conn = sqlite3.connect(self.db_path)\\n        cursor = conn.cursor()\\n        cursor.execute(f\\\"INSERT INTO users (username, password) VALUES ('{username}', '{password}')\\\")\\n        conn.commit()\\n        conn.close()\\n\\n    def authenticate_user(self, username, password):\\n        conn = sqlite3.connect(self.db_path)\\n        cursor = conn.cursor()\\n        cursor.execute(f\\\"SELECT * FROM users WHERE username = '{username}' AND password = '{password}'\\\")\\n        user = cursor.fetchone()\\n        conn.close()\\n        return user is not None\",\n  \"component_description\": \"Python class for creating and authenticating users using raw SQL string formatting.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 9.3,\n      \"exploitation_methods\": [\n        \"Inject username or password to bypass login\",\n        \"Submit payloads to corrupt database integrity\",\n        \"Escalate privileges by altering user records\"\n      ],\n      \"developer_fixes\": [\n        \"Use parameterized queries\",\n        \"Validate and sanitize all user inputs\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"BlogPost\",\n  \"component_code\": \"case class BlogPost(postId: Int, title: String, content: String)\",\n  \"component_description\": \"Scala case class representing a blog post entry.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"BlogPost\",\n  \"component_code\": \"case class BlogPost(postId: Int, title: String, content: String)\",\n  \"component_description\": \"Scala case class representing a blog post entry.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"BadHeaderEcho\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/set-header', (req, res) => {\\n  const header = req.query.header;\\n  res.setHeader('X-Custom', header);\\n  res.send('Header set');\\n});\",\n  \"component_description\": \"Node.js server reflecting unsanitized input into HTTP headers.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"BadHeaderEcho\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/set-header', (req, res) => {\\n  const header = req.query.header;\\n  res.setHeader('X-Custom', header);\\n  res.send('Header set');\\n});\",\n  \"component_description\": \"Node.js server reflecting unsanitized input into HTTP headers.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"HTTP Response Splitting\",\n      \"cve_score\": 8.2,\n      \"exploitation_methods\": [\n        \"Inject \\r\\n to control response headers and body.\",\n        \"Redirect responses, inject malicious payloads.\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize header inputs to remove newlines.\",\n        \"Use safe header libraries that handle encoding.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"PurchaseOrder\",\n  \"component_code\": \"public class PurchaseOrder {\\n  public void createOrder(String user, double total) {\\n    System.out.println(\\\"Order Created: \\\" + user + \\\" : $\\\" + total);\\n  }\\n}\",\n  \"component_description\": \"Java class modeling a basic purchase order.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"PurchaseOrder\",\n  \"component_code\": \"public class PurchaseOrder {\\n  public void createOrder(String user, double total) {\\n    System.out.println(\\\"Order Created: \\\" + user + \\\" : $\\\" + total);\\n  }\\n}\",\n  \"component_description\": \"Java class modeling a basic purchase order.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"ShippingInfo\",\n  \"component_code\": \"interface ShippingInfo {\\n  addressId: number;\\n  addressLine: string;\\n  deliveryDate: string;\\n}\",\n  \"component_description\": \"TypeScript interface representing shipping information.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"ShippingInfo\",\n  \"component_code\": \"interface ShippingInfo {\\n  addressId: number;\\n  addressLine: string;\\n  deliveryDate: string;\\n}\",\n  \"component_description\": \"TypeScript interface representing shipping information.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"unsafe_eval\",\n  \"component_code\": \"def unsafe_eval(expression):\\n    return eval(expression)\",\n  \"component_description\": \"Python function evaluating arbitrary expressions directly, leading to RCE risks.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"unsafe_eval\",\n  \"component_code\": \"def unsafe_eval(expression):\\n    return eval(expression)\",\n  \"component_description\": \"Python function evaluating arbitrary expressions directly, leading to RCE risks.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Remote Code Execution (RCE)\",\n      \"cve_score\": 9.8,\n      \"exploitation_methods\": [\n        \"Submit os.system('rm -rf /') inside expression\",\n        \"Execute arbitrary server-side commands\"\n      ],\n      \"developer_fixes\": [\n        \"Never use eval on user-controlled inputs\",\n        \"Use safe evaluators like ast.literal_eval for trusted data\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"OrderStatus\",\n  \"component_code\": \"interface OrderStatus {\\n  orderId: number;\\n  status: string;\\n  updatedOn: string;\\n}\",\n  \"component_description\": \"TypeScript interface modeling an order status update.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"OrderStatus\",\n  \"component_code\": \"interface OrderStatus {\\n  orderId: number;\\n  status: string;\\n  updatedOn: string;\\n}\",\n  \"component_description\": \"TypeScript interface modeling an order status update.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EvalQueryParam\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/compute', (req, res) => {\\n  const expr = req.query.expr;\\n  res.send(eval(expr));\\n});\",\n  \"component_description\": \"Node.js route evaluating user-supplied expressions.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EvalQueryParam\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/compute', (req, res) => {\\n  const expr = req.query.expr;\\n  res.send(eval(expr));\\n});\",\n  \"component_description\": \"Node.js route evaluating user-supplied expressions.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Remote Code Execution\",\n      \"cve_score\": 9.7,\n      \"exploitation_methods\": [\n        \"Inject arbitrary JavaScript commands for server compromise.\",\n        \"Extract sensitive environment variables.\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid eval entirely.\",\n        \"Use safe math evaluation libraries.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"FileManager\",\n  \"component_code\": \"require 'sinatra'\\nrequire 'fileutils'\\n\\nclass FileManager < Sinatra::Base\\n  set :public_folder, File.dirname(__FILE__) + '/uploads'\\n\\n  post '/upload' do\\n    filename = params[:file][:filename]\\n    tempfile = params[:file][:tempfile]\\n    FileUtils.copy(tempfile.path, \\\"uploads/#{filename}\\\")\\n    \\\"File uploaded\\\"\\n  end\\n\\n  get '/download/:filename' do\\n    send_file \\\"uploads/#{params[:filename]}\\\", :filename => params[:filename], :type => 'Application/octet-stream'\\n  end\\nend\",\n  \"component_description\": \"Ruby Sinatra class that enables file uploads and downloads to a specific directory.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"FileManager\",\n  \"component_code\": \"require 'sinatra'\\nrequire 'fileutils'\\n\\nclass FileManager < Sinatra::Base\\n  set :public_folder, File.dirname(__FILE__) + '/uploads'\\n\\n  post '/upload' do\\n    filename = params[:file][:filename]\\n    tempfile = params[:file][:tempfile]\\n    FileUtils.copy(tempfile.path, \\\"uploads/#{filename}\\\")\\n    \\\"File uploaded\\\"\\n  end\\n\\n  get '/download/:filename' do\\n    send_file \\\"uploads/#{params[:filename]}\\\", :filename => params[:filename], :type => 'Application/octet-stream'\\n  end\\nend\",\n  \"component_description\": \"Ruby Sinatra class that enables file uploads and downloads to a specific directory.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Unrestricted File Upload\",\n      \"cve_score\": 9.4,\n      \"exploitation_methods\": [\n        \"Upload a Ruby webshell and access it to run server-side commands\",\n        \"Upload malicious scripts disguised as image files\",\n        \"Overwrite sensitive server files with crafted file names\"\n      ],\n      \"developer_fixes\": [\n        \"Check MIME type and file extension before saving\",\n        \"Use a secure unique filename and store it outside the webroot\"\n      ]\n    },\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.2,\n      \"exploitation_methods\": [\n        \"Download '../../etc/passwd' using crafted filename\",\n        \"Access arbitrary files by manipulating URL params\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize and validate the filename strictly\",\n        \"Restrict access to a defined directory only\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"NotificationSender\",\n  \"component_code\": \"public class NotificationSender {\\n  public void send(String message) {\\n    System.out.println(\\\"Notification: \\\" + message);\\n  }\\n}\",\n  \"component_description\": \"Java class sending notification messages.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"NotificationSender\",\n  \"component_code\": \"public class NotificationSender {\\n  public void send(String message) {\\n    System.out.println(\\\"Notification: \\\" + message);\\n  }\\n}\",\n  \"component_description\": \"Java class sending notification messages.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"adjustBalance\",\n  \"component_code\": \"CREATE PROCEDURE adjustBalance(IN userId INT, IN amount DECIMAL(10,2))\\nBEGIN\\n  SET @q = CONCAT('UPDATE Accounts SET balance = balance + ', amount, ' WHERE id = ', userId);\\n  PREPARE stmt FROM @q;\\n  EXECUTE stmt;\\n  DEALLOCATE PREPARE stmt;\\nEND;\",\n  \"component_description\": \"SQL procedure dynamically adjusting account balances using user input.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"adjustBalance\",\n  \"component_code\": \"CREATE PROCEDURE adjustBalance(IN userId INT, IN amount DECIMAL(10,2))\\nBEGIN\\n  SET @q = CONCAT('UPDATE Accounts SET balance = balance + ', amount, ' WHERE id = ', userId);\\n  PREPARE stmt FROM @q;\\n  EXECUTE stmt;\\n  DEALLOCATE PREPARE stmt;\\nEND;\",\n  \"component_description\": \"SQL procedure dynamically adjusting account balances using user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 8.7,\n      \"exploitation_methods\": [\n        \"Inject SQL to adjust balances of unauthorized accounts.\",\n        \"Perform denial of service by setting large balance updates.\"\n      ],\n      \"developer_fixes\": [\n        \"Use fully parameterized queries, not dynamic SQL building.\",\n        \"Validate user inputs are strictly numeric.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"SCHEMA_DEFINITION\",\n  \"component_name\": \"NewsletterSubscriptions\",\n  \"component_code\": \"CREATE TABLE NewsletterSubscriptions (\\n  id SERIAL PRIMARY KEY,\\n  email VARCHAR(255) NOT NULL UNIQUE,\\n  subscribed_at TIMESTAMP DEFAULT NOW()\\n);\",\n  \"component_description\": \"SQL schema for managing newsletter subscription records.\"\n}", "completion": "{\n  \"component_type\": \"SCHEMA_DEFINITION\",\n  \"component_name\": \"NewsletterSubscriptions\",\n  \"component_code\": \"CREATE TABLE NewsletterSubscriptions (\\n  id SERIAL PRIMARY KEY,\\n  email VARCHAR(255) NOT NULL UNIQUE,\\n  subscribed_at TIMESTAMP DEFAULT NOW()\\n);\",\n  \"component_description\": \"SQL schema for managing newsletter subscription records.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleEchoServer\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/echo', (req, res) => {\\n  res.send(req.query.input);\\n});\",\n  \"component_description\": \"Node.js server reflecting input back in response body.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleEchoServer\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/echo', (req, res) => {\\n  res.send(req.query.input);\\n});\",\n  \"component_description\": \"Node.js server reflecting input back in response body.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Reflected XSS\",\n      \"cve_score\": 8.4,\n      \"exploitation_methods\": [\n        \"Inject <script>alert(1)</script> in input parameter.\",\n        \"Steal cookies or hijack sessions through malicious input.\"\n      ],\n      \"developer_fixes\": [\n        \"Escape all user-supplied input properly.\",\n        \"Implement a strong Content-Security-Policy header.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"ContactForm\",\n  \"component_code\": \"struct ContactForm {\\n  std::string name;\\n  std::string email;\\n  std::string message;\\n};\",\n  \"component_description\": \"C++ struct representing a simple contact form submission.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"ContactForm\",\n  \"component_code\": \"struct ContactForm {\\n  std::string name;\\n  std::string email;\\n  std::string message;\\n};\",\n  \"component_description\": \"C++ struct representing a simple contact form submission.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"CsvDataProcessor\",\n  \"component_code\": \"using System;\\nusing System.Data;\\nusing System.IO;\\nusing System.Text;\\n\\npublic class CsvDataProcessor\\n{\\n    private readonly string _connectionString;\\n\\n    public CsvDataProcessor(string connectionString)\\n    {\\n        _connectionString = connectionString;\\n    }\\n\\n    public async Task ProcessUserUpload(Stream fileStream, string fileName)\\n    {\\n        // Save the uploaded file\\n        var savePath = Path.Combine(_uploadPath, fileName);\\n        using (var file = File.Create(savePath))\\n        {\\n            await fileStream.CopyToAsync(file);\\n        }\\n\\n        // Process CSV data\\n        var csvData = File.ReadAllLines(savePath, Encoding.UTF8);\\n        \\n        foreach (var line in csvData.Skip(1))\\n        {\\n            var columns = line.Split(',');\\n            \\n            if (columns.Length < 5)\\n                continue;\\n\\n            var user = new UserData\\n            {\\n                Email = columns[0],\\n                Password = columns[1], // Storing plaintext passwords\\n                FullName = columns[2],\\n                Address = columns[3],\\n                Phone = columns[4]\\n            };\\n\\n            SaveToDatabase(user);\\n        }\\n\\n        // Generate report\\n        var reportName = $\\\"report_{DateTime.Now:yyyyMMdd}.txt\\\";\\n        File.WriteAllText(\\n            Path.Combine(_uploadPath, reportName), \\n            $\\\"Processed {csvData.Length-1} records\\\");\\n    }\\n\\n    private void SaveToDatabase(UserData user)\\n    {\\n        // DB saving logic\\n    }\\n}\",\n  \"component_description\": \"C# CSV file processing service\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"CsvDataProcessor\",\n  \"component_code\": \"using System;\\nusing System.Data;\\nusing System.IO;\\nusing System.Text;\\n\\npublic class CsvDataProcessor\\n{\\n    private readonly string _connectionString;\\n\\n    public CsvDataProcessor(string connectionString)\\n    {\\n        _connectionString = connectionString;\\n    }\\n\\n    public async Task ProcessUserUpload(Stream fileStream, string fileName)\\n    {\\n        // Save the uploaded file\\n        var savePath = Path.Combine(_uploadPath, fileName);\\n        using (var file = File.Create(savePath))\\n        {\\n            await fileStream.CopyToAsync(file);\\n        }\\n\\n        // Process CSV data\\n        var csvData = File.ReadAllLines(savePath, Encoding.UTF8);\\n        \\n        foreach (var line in csvData.Skip(1))\\n        {\\n            var columns = line.Split(',');\\n            \\n            if (columns.Length < 5)\\n                continue;\\n\\n            var user = new UserData\\n            {\\n                Email = columns[0],\\n                Password = columns[1], // Storing plaintext passwords\\n                FullName = columns[2],\\n                Address = columns[3],\\n                Phone = columns[4]\\n            };\\n\\n            SaveToDatabase(user);\\n        }\\n\\n        // Generate report\\n        var reportName = $\\\"report_{DateTime.Now:yyyyMMdd}.txt\\\";\\n        File.WriteAllText(\\n            Path.Combine(_uploadPath, reportName), \\n            $\\\"Processed {csvData.Length-1} records\\\");\\n    }\\n\\n    private void SaveToDatabase(UserData user)\\n    {\\n        // DB saving logic\\n    }\\n}\",\n  \"component_description\": \"C# CSV file processing service\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Unrestricted File Upload\",\n      \"cve_score\": 8.4,\n      \"exploitation_methods\": [\n        \"Upload malicious .exe file\\nExecute on server\",\n        \"Overwrite critical files via path traversal\"\n      ],\n      \"developer_fixes\": [\n        \"Validate file extensions and content\",\n        \"Use GUID-based filenames\"\n      ]\n    },\n    {\n      \"vul_type\": \"Plaintext Password Storage\",\n      \"cve_score\": 9.3,\n      \"exploitation_methods\": [\n        \"Access CSV files\\nHarvest credentials\",\n        \"Dump database containing plaintext passwords\"\n      ],\n      \"developer_fixes\": [\n        \"Immediately hash passwords before storage\",\n        \"Implement secure file upload validation\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"handleLogin\",\n  \"component_code\": \"<?php\\nfunction handleLogin() {\\n    $username = $_POST['username'];\\n    $password = $_POST['password'];\\n    $conn = new mysqli('localhost', 'root', '', 'appdb');\\n    if ($conn->connect_error) {\\n        die(\\\"Connection failed\\\");\\n    }\\n    $query = \\\"SELECT * FROM users WHERE username = '$username' AND password = '$password'\\\";\\n    $result = $conn->query($query);\\n    if ($result->num_rows > 0) {\\n        echo \\\"Welcome, $username\\\";\\n    } else {\\n        echo \\\"Invalid credentials\\\";\\n    }\\n}\\nhandleLogin();\",\n  \"component_description\": \"PHP function that handles user login by checking credentials against a MySQL database.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"handleLogin\",\n  \"component_code\": \"<?php\\nfunction handleLogin() {\\n    $username = $_POST['username'];\\n    $password = $_POST['password'];\\n    $conn = new mysqli('localhost', 'root', '', 'appdb');\\n    if ($conn->connect_error) {\\n        die(\\\"Connection failed\\\");\\n    }\\n    $query = \\\"SELECT * FROM users WHERE username = '$username' AND password = '$password'\\\";\\n    $result = $conn->query($query);\\n    if ($result->num_rows > 0) {\\n        echo \\\"Welcome, $username\\\";\\n    } else {\\n        echo \\\"Invalid credentials\\\";\\n    }\\n}\\nhandleLogin();\",\n  \"component_description\": \"PHP function that handles user login by checking credentials against a MySQL database.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 9.2,\n      \"exploitation_methods\": [\n        \"Enter ' OR '1'='1 in the username to bypass authentication\",\n        \"Inject '; DROP TABLE users --' to delete all records\",\n        \"Exfiltrate user data using UNION SELECT\"\n      ],\n      \"developer_fixes\": [\n        \"Use prepared statements with parameterized queries\",\n        \"Strictly sanitize user inputs\"\n      ]\n    },\n    {\n      \"vul_type\": \"Insecure Password Storage\",\n      \"cve_score\": 8.5,\n      \"exploitation_methods\": [\n        \"Database dump reveals plaintext passwords\",\n        \"No hashing leads to fast password reuse attacks\"\n      ],\n      \"developer_fixes\": [\n        \"Store hashed passwords using bcrypt\",\n        \"Enforce password length and complexity requirements\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"TodoItem\",\n  \"component_code\": \"interface TodoItem {\\n  id: number;\\n  task: string;\\n  completed: boolean;\\n}\",\n  \"component_description\": \"TypeScript interface defining a todo list item.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleAPIServer\",\n  \"component_code\": \"package main\\n\\nimport (\\n    \\\"fmt\\\"\\n    \\\"io/ioutil\\\"\\n    \\\"net/http\\\"\\n    \\\"os\\\"\\n)\\n\\nfunc uploadFile(w http.ResponseWriter, r *http.Request) {\\n    file, _, err := r.FormFile(\\\"file\\\")\\n    if err != nil {\\n        fmt.Fprintf(w, \\\"Error Reading File\\\")\\n        return\\n    }\\n    defer file.Close()\\n    data, _ := ioutil.ReadAll(file)\\n    ioutil.WriteFile(\\\"uploads/\\\"+r.FormValue(\\\"filename\\\"), data, 0644)\\n    fmt.Fprintf(w, \\\"Upload successful\\\")\\n}\\n\\nfunc getFile(w http.ResponseWriter, r *http.Request) {\\n    filename := r.URL.Query().Get(\\\"filename\\\")\\n    http.ServeFile(w, r, \\\"uploads/\\\"+filename)\\n}\\n\\nfunc main() {\\n    os.MkdirAll(\\\"uploads\\\", os.ModePerm)\\n    http.HandleFunc(\\\"/upload\\\", uploadFile)\\n    http.HandleFunc(\\\"/download\\\", getFile)\\n    http.ListenAndServe(\\\":8080\\\", nil)\\n}\",\n  \"component_description\": \"Basic Go server providing upload and download functionality without validations.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.6,\n      \"exploitation_methods\": [\n        \"Upload file with ../ path to overwrite system files\",\n        \"Download ../../etc/passwd by manipulating filename param\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize filenames on upload and download\",\n        \"Restrict file operations to a safe upload directory\"\n      ]\n    },\n    {\n      \"vul_type\": \"Unrestricted File Upload\",\n      \"cve_score\": 9.1,\n      \"exploitation_methods\": [\n        \"Upload executable files to server\",\n        \"Upload large files to exhaust disk space\"\n      ],\n      \"developer_fixes\": [\n        \"Restrict file size and allowed types\",\n        \"Scan uploaded files for malicious content\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"SimpleLoginSystem\",\n  \"component_code\": \"#include <iostream>\\n#include <string>\\n#include <map>\\n\\nclass SimpleLoginSystem {\\nprivate:\\n    std::map<std::string, std::string> user_db;\\n\\npublic:\\n    void registerUser(std::string username, std::string password) {\\n        user_db[username] = password;\\n    }\\n\\n    bool authenticate(std::string username, std::string password) {\\n        return user_db.find(username) != user_db.end() && user_db[username] == password;\\n    }\\n\\n    void printUsers() {\\n        for (const auto& [user, pass] : user_db) {\\n            std::cout << \\\"User: \\\" << user << \\\" Password: \\\" << pass << std::endl;\\n        }\\n    }\\n};\",\n  \"component_description\": \"C++ class for a basic login system with user registration and authentication.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"UserProfile\",\n  \"component_code\": \"interface UserProfile {\\n  id: number;\\n  username: string;\\n  email: string;\\n  bio?: string;\\n  dateJoined: Date;\\n}\",\n  \"component_description\": \"TypeScript interface defining a user profile structure.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"ProfileDisplayer\",\n  \"component_code\": \"public class ProfileDisplayer {\\n  public void display(String profile) {\\n    System.out.println(\\\"Profile: \\\" + profile);\\n  }\\n}\",\n  \"component_description\": \"Java class for displaying user profiles.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"ProfileDisplayer\",\n  \"component_code\": \"public class ProfileDisplayer {\\n  public void display(String profile) {\\n    System.out.println(\\\"Profile: \\\" + profile);\\n  }\\n}\",\n  \"component_description\": \"Java class for displaying user profiles.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InsecureUpload\",\n  \"component_code\": \"<?php\\n$filename = $_FILES['file']['name'];\\nmove_uploaded_file($_FILES['file']['tmp_name'], '/uploads/' . $filename);\",\n  \"component_description\": \"PHP script moving uploaded files directly using original filenames.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InsecureUpload\",\n  \"component_code\": \"<?php\\n$filename = $_FILES['file']['name'];\\nmove_uploaded_file($_FILES['file']['tmp_name'], '/uploads/' . $filename);\",\n  \"component_description\": \"PHP script moving uploaded files directly using original filenames.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Unrestricted File Upload\",\n      \"cve_score\": 9.0,\n      \"exploitation_methods\": [\n        \"Upload a PHP shell to gain server control.\",\n        \"Overwrite important application files.\"\n      ],\n      \"developer_fixes\": [\n        \"Rename uploaded files with server-side generated names.\",\n        \"Validate file type and extension strictly.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Book\",\n  \"component_code\": \"case class Book(title: String, author: String, isbn: String)\",\n  \"component_description\": \"Scala case class modeling a book.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Book\",\n  \"component_code\": \"case class Book(title: String, author: String, isbn: String)\",\n  \"component_description\": \"Scala case class modeling a book.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"AuthenticationManager\",\n  \"component_code\": \"public class AuthenticationManager {\\n  public void authenticate(String username) {\\n    System.out.println(\\\"Authenticating \\\" + username);\\n  }\\n}\",\n  \"component_description\": \"Java class handling user authentication logging.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"AuthenticationManager\",\n  \"component_code\": \"public class AuthenticationManager {\\n  public void authenticate(String username) {\\n    System.out.println(\\\"Authenticating \\\" + username);\\n  }\\n}\",\n  \"component_description\": \"Java class handling user authentication logging.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"fetch_data\",\n  \"component_code\": \"import requests\\n\\ndef fetch_data(url):\\n    response = requests.get(url)\\n    return response.text\",\n  \"component_description\": \"Python function fetching data from a URL directly provided by user input.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"fetch_data\",\n  \"component_code\": \"import requests\\n\\ndef fetch_data(url):\\n    response = requests.get(url)\\n    return response.text\",\n  \"component_description\": \"Python function fetching data from a URL directly provided by user input.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"FileHandler\",\n  \"component_code\": \"using System;\\nusing System.IO;\\nusing Microsoft.AspNetCore.Mvc;\\n\\npublic class FileHandler : Controller {\\n    [HttpPost]\\n    public IActionResult UploadFile() {\\n        var file = Request.Form.Files[0];\\n        var path = Path.Combine(\\\"uploads\\\", file.FileName);\\n\\n        using (var stream = new FileStream(path, FileMode.Create)) {\\n            file.CopyTo(stream);\\n        }\\n\\n        return Ok(\\\"File Uploaded Successfully\\\");\\n    }\\n\\n    [HttpGet]\\n    public IActionResult DownloadFile(string filename) {\\n        var filepath = Path.Combine(\\\"uploads\\\", filename);\\n        if (System.IO.File.Exists(filepath)) {\\n            return File(System.IO.File.ReadAllBytes(filepath), \\\"application/octet-stream\\\", filename);\\n        }\\n        return NotFound();\\n    }\\n}\",\n  \"component_description\": \"C# ASP.NET Controller for uploading and downloading files without any validation.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"ProfileEditor\",\n  \"component_code\": \"const express = require('express');\\nconst fs = require('fs');\\nconst bodyParser = require('body-parser');\\nconst app = express();\\n\\napp.use(bodyParser.json());\\n\\napp.post('/saveProfile', (req, res) => {\\n    const { username, bio } = req.body;\\n    fs.writeFileSync(`profiles/${username}.txt`, bio);\\n    res.send('Profile saved');\\n});\\n\\napp.get('/viewProfile', (req, res) => {\\n    const username = req.query.username;\\n    const bio = fs.readFileSync(`profiles/${username}.txt`, 'utf8');\\n    res.send(`<h1>${username}</h1><p>${bio}</p>`);\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Node.js app allowing users to save and view profiles by writing bio content to files.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Stored XSS\",\n      \"cve_score\": 9.0,\n      \"exploitation_methods\": [\n        \"Submit script tags in bio to hijack viewers\\u2019 browsers\",\n        \"Redirect users to malicious sites from stored profiles\"\n      ],\n      \"developer_fixes\": [\n        \"Escape HTML before displaying user content\",\n        \"Use strong CSP headers to prevent script execution\"\n      ]\n    },\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.4,\n      \"exploitation_methods\": [\n        \"Craft usernames like ../../../etc/passwd to access sensitive files\",\n        \"Overwrite server configurations using crafted filenames\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize username input to prevent directory traversal\",\n        \"Restrict file operations to a safe base directory\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeLoginHandler\",\n  \"component_code\": \"<?php\\nif (isset($_POST['username']) && isset($_POST['password'])) {\\n  $u = $_POST['username'];\\n  $p = $_POST['password'];\\n  $q = \\\"SELECT * FROM users WHERE username='$u' AND password='$p'\\\";\\n  mysqli_query($conn, $q);\\n}\",\n  \"component_description\": \"PHP login system that directly injects user inputs into SQL queries.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeLoginHandler\",\n  \"component_code\": \"<?php\\nif (isset($_POST['username']) && isset($_POST['password'])) {\\n  $u = $_POST['username'];\\n  $p = $_POST['password'];\\n  $q = \\\"SELECT * FROM users WHERE username='$u' AND password='$p'\\\";\\n  mysqli_query($conn, $q);\\n}\",\n  \"component_description\": \"PHP login system that directly injects user inputs into SQL queries.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 9.1,\n      \"exploitation_methods\": [\n        \"Input ' OR 1=1 -- to bypass login.\",\n        \"DROP TABLE users using crafted input.\",\n        \"Extract user credentials via UNION SELECT.\"\n      ],\n      \"developer_fixes\": [\n        \"Use parameterized SQL (prepared statements).\",\n        \"Escape inputs using mysqli_real_escape_string (if necessary).\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EventBookingServer\",\n  \"component_code\": \"package main\\n\\nimport (\\n    \\\"fmt\\\"\\n    \\\"net/http\\\"\\n    \\\"sync\\\"\\n)\\n\\ntype Event struct {\\n    ID   int\\n    Name string\\n    Slots int\\n}\\n\\nvar (\\n    events = []Event{}\\n    mu sync.Mutex\\n)\\n\\nfunc createEvent(w http.ResponseWriter, r *http.Request) {\\n    if r.Method != \\\"POST\\\" {\\n        http.Error(w, \\\"Only POST allowed\\\", http.StatusMethodNotAllowed)\\n        return\\n    }\\n    r.ParseForm()\\n    name := r.FormValue(\\\"name\\\")\\n    slots := r.FormValue(\\\"slots\\\")\\n    mu.Lock()\\n    events = append(events, Event{ID: len(events)+1, Name: name, Slots: 10})\\n    mu.Unlock()\\n    fmt.Fprintf(w, \\\"Event created\\\")\\n}\\n\\nfunc listEvents(w http.ResponseWriter, r *http.Request) {\\n    mu.Lock()\\n    defer mu.Unlock()\\n    for _, e := range events {\\n        fmt.Fprintf(w, \\\"ID: %d, Name: %s, Slots: %d\\\\n\\\", e.ID, e.Name, e.Slots)\\n    }\\n}\\n\\nfunc main() {\\n    http.HandleFunc(\\\"/create\\\", createEvent)\\n    http.HandleFunc(\\\"/list\\\", listEvents)\\n    http.ListenAndServe(\\\":8080\\\", nil)\\n}\",\n  \"component_description\": \"Golang server handling event booking creation and listing.\"\n}", "completion": "{\n  \"component_type\": \"METHOD_DEFINITION\",\n  \"component_name\": \"download_file\",\n  \"component_code\": \"def download_file(filename)\\n  send_file(\\\"uploads/\\\" + filename)\\nend\",\n  \"component_description\": \"Ruby method to send a file for download from the uploads directory.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.3,\n      \"exploitation_methods\": [\n        \"Access ../../../../etc/passwd to leak server files\",\n        \"Bypass file serving restrictions\"\n      ],\n      \"developer_fixes\": [\n        \"Validate and sanitize filename input\",\n        \"Restrict downloads only to allowed files in a specific directory\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"CartManager\",\n  \"component_code\": \"public class CartManager {\\n  public void addItem(String item) {\\n    System.out.println(\\\"Adding \\\" + item + \\\" to cart.\\\");\\n  }\\n}\",\n  \"component_description\": \"Java class simulating adding items to a shopping cart.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"CartManager\",\n  \"component_code\": \"public class CartManager {\\n  public void addItem(String item) {\\n    System.out.println(\\\"Adding \\\" + item + \\\" to cart.\\\");\\n  }\\n}\",\n  \"component_description\": \"Java class simulating adding items to a shopping cart.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleCMS\",\n  \"component_code\": \"<?php\\nif (isset($_POST['page']) && isset($_POST['content'])) {\\n    file_put_contents(\\\"pages/\\\" . $_POST['page'] . \\\".html\\\", $_POST['content']);\\n    echo \\\"Page saved.\\\";\\n}\\n\\nif (isset($_GET['page'])) {\\n    echo file_get_contents(\\\"pages/\\\" . $_GET['page'] . \\\".html\\\");\\n}\",\n  \"component_description\": \"PHP CMS system saving and displaying content without sanitization.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleCMS\",\n  \"component_code\": \"<?php\\nif (isset($_POST['page']) && isset($_POST['content'])) {\\n    file_put_contents(\\\"pages/\\\" . $_POST['page'] . \\\".html\\\", $_POST['content']);\\n    echo \\\"Page saved.\\\";\\n}\\n\\nif (isset($_GET['page'])) {\\n    echo file_get_contents(\\\"pages/\\\" . $_GET['page'] . \\\".html\\\");\\n}\",\n  \"component_description\": \"PHP CMS system saving and displaying content without sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Stored XSS\",\n      \"cve_score\": 9.2,\n      \"exploitation_methods\": [\n        \"Inject JavaScript code inside content.\",\n        \"Trigger XSS when content is viewed.\"\n      ],\n      \"developer_fixes\": [\n        \"Escape output using htmlspecialchars().\",\n        \"Sanitize HTML before saving content.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"DocumentEditor\",\n  \"component_code\": \"const express = require('express');\\nconst fs = require('fs');\\nconst bodyParser = require('body-parser');\\nconst app = express();\\n\\napp.use(bodyParser.json());\\n\\napp.post('/save', (req, res) => {\\n    const filename = req.body.filename;\\n    const content = req.body.content;\\n    fs.writeFileSync(`documents/${filename}`, content);\\n    res.send('File saved');\\n});\\n\\napp.get('/load', (req, res) => {\\n    const filename = req.query.filename;\\n    const data = fs.readFileSync(`documents/${filename}`, 'utf8');\\n    res.send(data);\\n});\\n\\napp.listen(3000, () => {\\n    console.log('Document editor server running on port 3000');\\n});\",\n  \"component_description\": \"JavaScript-based document editor backend allowing users to save and load file content from a folder.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"EmailSender\",\n  \"component_code\": \"import java.util.Properties;\\nimport javax.mail.*;\\nimport javax.mail.internet.*;\\n\\npublic class EmailSender {\\n    public void sendEmail(String to, String subject, String body) {\\n        Properties props = new Properties();\\n        props.put(\\\"mail.smtp.auth\\\", \\\"true\\\");\\n        props.put(\\\"mail.smtp.starttls.enable\\\", \\\"true\\\");\\n        props.put(\\\"mail.smtp.host\\\", \\\"smtp.example.com\\\");\\n        props.put(\\\"mail.smtp.port\\\", \\\"587\\\");\\n\\n        Session session = Session.getInstance(props,\\n            new Authenticator() {\\n                protected PasswordAuthentication getPasswordAuthentication() {\\n                    return new PasswordAuthentication(\\\"admin@example.com\\\", \\\"admin123\\\");\\n                }\\n            });\\n\\n        try {\\n            Message message = new MimeMessage(session);\\n            message.setFrom(new InternetAddress(\\\"admin@example.com\\\"));\\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to));\\n            message.setSubject(subject);\\n            message.setText(body);\\n            Transport.send(message);\\n            System.out.println(\\\"Email sent\\\");\\n        } catch (MessagingException e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}\",\n  \"component_description\": \"Java class to send email using hardcoded SMTP credentials.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Hardcoded Credentials\",\n      \"cve_score\": 7.8,\n      \"exploitation_methods\": [\n        \"Decompile class or reverse engineer to extract SMTP credentials\",\n        \"Exploit leaked credentials to send spam or phishing emails\",\n        \"Use harvested credentials for broader account compromise\"\n      ],\n      \"developer_fixes\": [\n        \"Move credentials to environment variables or secure vaults\",\n        \"Rotate credentials regularly and monitor for misuse\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"load_env\",\n  \"component_code\": \"def load_env(var_name):\\n    import os\\n    return os.getenv(var_name)\",\n  \"component_description\": \"Python function loading environment variable based on user input.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"load_env\",\n  \"component_code\": \"def load_env(var_name):\\n    import os\\n    return os.getenv(var_name)\",\n  \"component_description\": \"Python function loading environment variable based on user input.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"ReflectBack\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/reflect', (req, res) => {\\n  const input = req.query.input;\\n  res.send(`<h1>${input}</h1>`);\\n});\",\n  \"component_description\": \"Node.js route reflecting back unsanitized input.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"ReflectBack\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/reflect', (req, res) => {\\n  const input = req.query.input;\\n  res.send(`<h1>${input}</h1>`);\\n});\",\n  \"component_description\": \"Node.js route reflecting back unsanitized input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Reflected XSS\",\n      \"cve_score\": 8.6,\n      \"exploitation_methods\": [\n        \"Inject malicious HTML or JavaScript code.\",\n        \"Perform phishing or session hijacking attacks.\"\n      ],\n      \"developer_fixes\": [\n        \"Escape all reflected content properly.\",\n        \"Use strict CSP headers to block inline scripts.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Purchase\",\n  \"component_code\": \"case class Purchase(productId: Int, quantity: Int, price: Double)\",\n  \"component_description\": \"Scala case class representing a product purchase.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Purchase\",\n  \"component_code\": \"case class Purchase(productId: Int, quantity: Int, price: Double)\",\n  \"component_description\": \"Scala case class representing a product purchase.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EchoMessageExpress\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/message', (req, res) => {\\n  res.send(req.query.msg);\\n});\",\n  \"component_description\": \"Node.js route echoing back user messages directly without sanitization.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EvalUserInput\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/evaluate', (req, res) => {\\n  const expression = req.query.expression;\\n  res.send(eval(expression));\\n});\",\n  \"component_description\": \"Node.js server evaluating unsanitized user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Remote Code Execution\",\n      \"cve_score\": 9.9,\n      \"exploitation_methods\": [\n        \"Execute arbitrary JavaScript remotely.\",\n        \"Access server environment variables or file systems.\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid using eval entirely on user input.\",\n        \"Use safe evaluation libraries and strict validation.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"execute_query\",\n  \"component_code\": \"import sqlite3\\n\\ndef execute_query(query):\\n    conn = sqlite3.connect('database.db')\\n    cursor = conn.cursor()\\n    cursor.execute(query)\\n    conn.commit()\\n    conn.close()\",\n  \"component_description\": \"Python function that executes a raw SQL query directly from user input.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"execute_query\",\n  \"component_code\": \"import sqlite3\\n\\ndef execute_query(query):\\n    conn = sqlite3.connect('database.db')\\n    cursor = conn.cursor()\\n    cursor.execute(query)\\n    conn.commit()\\n    conn.close()\",\n  \"component_description\": \"Python function that executes a raw SQL query directly from user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 9.0,\n      \"exploitation_methods\": [\n        \"Submit malicious queries like 'DROP TABLE users;'\",\n        \"Bypass authentication if used in login flows.\"\n      ],\n      \"developer_fixes\": [\n        \"Disallow direct raw SQL execution from user input.\",\n        \"Use parameterized queries always.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleCommentSystem\",\n  \"component_code\": \"const express = require('express');\\nconst fs = require('fs');\\nconst app = express();\\n\\napp.use(express.urlencoded({ extended: true }));\\n\\napp.post('/comment', (req, res) => {\\n    const { username, comment } = req.body;\\n    fs.appendFileSync('comments.txt', `${username}: ${comment}\\\\n`);\\n    res.send('Comment saved');\\n});\\n\\napp.get('/view', (req, res) => {\\n    const comments = fs.readFileSync('comments.txt', 'utf8');\\n    res.send(`<pre>${comments}</pre>`);\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Node.js server allowing users to post and view comments without sanitization.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleCommentSystem\",\n  \"component_code\": \"const express = require('express');\\nconst fs = require('fs');\\nconst app = express();\\n\\napp.use(express.urlencoded({ extended: true }));\\n\\napp.post('/comment', (req, res) => {\\n    const { username, comment } = req.body;\\n    fs.appendFileSync('comments.txt', `${username}: ${comment}\\\\n`);\\n    res.send('Comment saved');\\n});\\n\\napp.get('/view', (req, res) => {\\n    const comments = fs.readFileSync('comments.txt', 'utf8');\\n    res.send(`<pre>${comments}</pre>`);\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Node.js server allowing users to post and view comments without sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Stored XSS\",\n      \"cve_score\": 9.1,\n      \"exploitation_methods\": [\n        \"Post <script> payloads to hijack user sessions\",\n        \"Execute arbitrary client-side code\"\n      ],\n      \"developer_fixes\": [\n        \"Escape comment content before rendering\",\n        \"Use server-side sanitization libraries\"\n      ]\n    },\n    {\n      \"vul_type\": \"Log Injection\",\n      \"cve_score\": 7.2,\n      \"exploitation_methods\": [\n        \"Inject newlines to fake comment entries\",\n        \"Spoof admin activities in logs\"\n      ],\n      \"developer_fixes\": [\n        \"Strip control characters from user input\",\n        \"Use structured logs instead of plain text\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"OrderSummary\",\n  \"component_code\": \"case class OrderSummary(orderId: Int, totalAmount: Double, orderDate: String)\",\n  \"component_description\": \"Scala case class modeling an order summary.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"OrderSummary\",\n  \"component_code\": \"case class OrderSummary(orderId: Int, totalAmount: Double, orderDate: String)\",\n  \"component_description\": \"Scala case class modeling an order summary.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"PaymentTransaction\",\n  \"component_code\": \"struct PaymentTransaction {\\n  int id;\\n  double amount;\\n  std::string status;\\n};\",\n  \"component_description\": \"C++ struct modeling a payment transaction.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"PaymentTransaction\",\n  \"component_code\": \"struct PaymentTransaction {\\n  int id;\\n  double amount;\\n  std::string status;\\n};\",\n  \"component_description\": \"C++ struct modeling a payment transaction.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"BasicFileManager\",\n  \"component_code\": \"<?php\\nif (isset($_POST['filename']) && isset($_POST['content'])) {\\n    $filename = $_POST['filename'];\\n    $content = $_POST['content'];\\n    file_put_contents(\\\"uploads/\\\" . $filename, $content);\\n    echo \\\"File saved.\\\";\\n}\\n\\nif (isset($_GET['filename'])) {\\n    $filename = $_GET['filename'];\\n    echo file_get_contents(\\\"uploads/\\\" . $filename);\\n}\",\n  \"component_description\": \"Simple PHP file manager saving and reading files without validating filenames or content.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"BasicFileManager\",\n  \"component_code\": \"<?php\\nif (isset($_POST['filename']) && isset($_POST['content'])) {\\n    $filename = $_POST['filename'];\\n    $content = $_POST['content'];\\n    file_put_contents(\\\"uploads/\\\" . $filename, $content);\\n    echo \\\"File saved.\\\";\\n}\\n\\nif (isset($_GET['filename'])) {\\n    $filename = $_GET['filename'];\\n    echo file_get_contents(\\\"uploads/\\\" . $filename);\\n}\",\n  \"component_description\": \"Simple PHP file manager saving and reading files without validating filenames or content.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Stored XSS\",\n      \"cve_score\": 9.0,\n      \"exploitation_methods\": [\n        \"Save <script> tags inside uploaded content\",\n        \"Execute scripts when viewing files\"\n      ],\n      \"developer_fixes\": [\n        \"Escape output when displaying file content\",\n        \"Sanitize user input on file saves\"\n      ]\n    },\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.6,\n      \"exploitation_methods\": [\n        \"Load arbitrary files like ../../../etc/passwd\",\n        \"Download sensitive configuration files\"\n      ],\n      \"developer_fixes\": [\n        \"Validate and restrict filenames strictly\",\n        \"Disallow ../ sequences in filenames\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"WelcomeBanner\",\n  \"component_code\": \"public class WelcomeBanner {\\n  public void show(String name) {\\n    System.out.println(\\\"Welcome, \\\" + name);\\n  }\\n}\",\n  \"component_description\": \"Java class for printing a welcome banner.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"WelcomeBanner\",\n  \"component_code\": \"public class WelcomeBanner {\\n  public void show(String name) {\\n    System.out.println(\\\"Welcome, \\\" + name);\\n  }\\n}\",\n  \"component_description\": \"Java class for printing a welcome banner.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EvalExpression\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/eval', (req, res) => {\\n  const code = req.query.code;\\n  res.send(eval(code));\\n});\",\n  \"component_description\": \"Express route evaluating JavaScript expressions provided by users.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EvalExpression\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/eval', (req, res) => {\\n  const code = req.query.code;\\n  res.send(eval(code));\\n});\",\n  \"component_description\": \"Express route evaluating JavaScript expressions provided by users.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Remote Code Execution\",\n      \"cve_score\": 9.7,\n      \"exploitation_methods\": [\n        \"Execute arbitrary JavaScript code server-side.\",\n        \"Access internal variables and launch attacks on the server.\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid eval completely with user input.\",\n        \"Use strict validation or sandboxed evaluators.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"DeleteUser\",\n  \"component_code\": \"CREATE PROCEDURE DeleteUser(IN userId INT)\\nBEGIN\\n  SET @query = CONCAT('DELETE FROM users WHERE id = ', userId);\\n  PREPARE stmt FROM @query;\\n  EXECUTE stmt;\\n  DEALLOCATE PREPARE stmt;\\nEND;\",\n  \"component_description\": \"SQL stored procedure deleting a user by ID.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"DeleteUser\",\n  \"component_code\": \"CREATE PROCEDURE DeleteUser(IN userId INT)\\nBEGIN\\n  SET @query = CONCAT('DELETE FROM users WHERE id = ', userId);\\n  PREPARE stmt FROM @query;\\n  EXECUTE stmt;\\n  DEALLOCATE PREPARE stmt;\\nEND;\",\n  \"component_description\": \"SQL stored procedure deleting a user by ID.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 9.0,\n      \"exploitation_methods\": [\n        \"Inject malicious SQL into userId to delete all users\",\n        \"Inject UNION queries to access admin tables\",\n        \"Bypass access controls by crafting payloads\"\n      ],\n      \"developer_fixes\": [\n        \"Use strictly parameterized prepared statements\",\n        \"Avoid concatenating user inputs directly into SQL\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"ApiResponse\",\n  \"component_code\": \"interface ApiResponse {\\n  status: string;\\n  data: any;\\n  error?: string;\\n}\",\n  \"component_description\": \"Simple TypeScript interface for API responses.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"ApiResponse\",\n  \"component_code\": \"interface ApiResponse {\\n  status: string;\\n  data: any;\\n  error?: string;\\n}\",\n  \"component_description\": \"Simple TypeScript interface for API responses.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"PaymentGateway\",\n  \"component_code\": \"public class PaymentGateway {\\n  public void initiatePayment(String user, double amount) {\\n    System.out.println(\\\"Payment initiated for \\\" + user + \\\" amount: \\\" + amount);\\n  }\\n}\",\n  \"component_description\": \"Java class simulating a basic payment gateway.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"PaymentGateway\",\n  \"component_code\": \"public class PaymentGateway {\\n  public void initiatePayment(String user, double amount) {\\n    System.out.println(\\\"Payment initiated for \\\" + user + \\\" amount: \\\" + amount);\\n  }\\n}\",\n  \"component_description\": \"Java class simulating a basic payment gateway.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Coordinates\",\n  \"component_code\": \"struct Coordinates {\\n    double latitude;\\n    double longitude;\\n};\",\n  \"component_description\": \"Simple C++ struct representing a pair of geographical coordinates.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Coordinates\",\n  \"component_code\": \"struct Coordinates {\\n    double latitude;\\n    double longitude;\\n};\",\n  \"component_description\": \"Simple C++ struct representing a pair of geographical coordinates.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleUploader\",\n  \"component_code\": \"<?php\\nif (isset($_FILES['file'])) {\\n  move_uploaded_file($_FILES['file']['tmp_name'], 'uploads/' . $_FILES['file']['name']);\\n  echo \\\"File uploaded successfully.\\\";\\n}\",\n  \"component_description\": \"Simple PHP script allowing users to upload files without file type validation.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleUploader\",\n  \"component_code\": \"<?php\\nif (isset($_FILES['file'])) {\\n  move_uploaded_file($_FILES['file']['tmp_name'], 'uploads/' . $_FILES['file']['name']);\\n  echo \\\"File uploaded successfully.\\\";\\n}\",\n  \"component_description\": \"Simple PHP script allowing users to upload files without file type validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Unrestricted File Upload\",\n      \"cve_score\": 9.3,\n      \"exploitation_methods\": [\n        \"Upload a PHP webshell disguised as an image.\",\n        \"Achieve remote code execution by uploading executable files.\"\n      ],\n      \"developer_fixes\": [\n        \"Restrict allowed file types (e.g., jpg, png).\",\n        \"Store uploaded files outside the web root.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"SCHEMA_DEFINITION\",\n  \"component_name\": \"HealthcareRecords\",\n  \"component_code\": \"CREATE TABLE Patients (\\n    id INT PRIMARY KEY,\\n    name VARCHAR(255) NOT NULL,\\n    date_of_birth DATE NOT NULL,\\n    gender VARCHAR(10),\\n    email VARCHAR(255) UNIQUE\\n);\\n\\nCREATE TABLE Appointments (\\n    id INT PRIMARY KEY,\\n    patient_id INT REFERENCES Patients(id),\\n    appointment_date DATE NOT NULL,\\n    doctor_name VARCHAR(255),\\n    notes TEXT\\n);\\n\\nCREATE TABLE Prescriptions (\\n    id INT PRIMARY KEY,\\n    appointment_id INT REFERENCES Appointments(id),\\n    medication VARCHAR(255) NOT NULL,\\n    dosage VARCHAR(255),\\n    instructions TEXT\\n);\",\n  \"component_description\": \"SQL schema for a healthcare record system tracking patients, appointments, and prescriptions.\"\n}", "completion": "{\n  \"component_type\": \"METHOD_DEFINITION\",\n  \"component_name\": \"save_comment\",\n  \"component_code\": \"def save_comment(username, comment)\\n  File.open(\\\"comments.txt\\\", \\\"a\\\") do |file|\\n    file.puts(\\\"#{username}: #{comment}\\\")\\n  end\\nend\",\n  \"component_description\": \"Ruby method that saves user comments into a text file without validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Log Injection\",\n      \"cve_score\": 7.0,\n      \"exploitation_methods\": [\n        \"Inject newline characters to fake additional entries\",\n        \"Insert commands or mislead administrators\"\n      ],\n      \"developer_fixes\": [\n        \"Escape or sanitize line breaks in user inputs\",\n        \"Strictly limit acceptable input formats\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"NotificationService\",\n  \"component_code\": \"public class NotificationService {\\n\\n    public void sendNotification(String user, String message) {\\n        System.out.println(\\\"Sending notification to \\\" + user + \\\": \\\" + message);\\n    }\\n}\",\n  \"component_description\": \"Java class that simulates sending a notification to a user.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"PublicFileServer\",\n  \"component_code\": \"package main\\n\\nimport (\\n    \\\"net/http\\\"\\n    \\\"os\\\"\\n)\\n\\nfunc main() {\\n    http.HandleFunc(\\\"/\\\", func(w http.ResponseWriter, r *http.Request) {\\n        path := \\\"public\\\" + r.URL.Path\\n        if _, err := os.Stat(path); os.IsNotExist(err) {\\n            http.NotFound(w, r)\\n            return\\n        }\\n        http.ServeFile(w, r, path)\\n    })\\n    http.ListenAndServe(\\\":8080\\\", nil)\\n}\",\n  \"component_description\": \"Basic Go server serving files from the public folder based on request path.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.5,\n      \"exploitation_methods\": [\n        \"Request ../../../etc/passwd to leak system files\",\n        \"Access sensitive server files outside intended folder\"\n      ],\n      \"developer_fixes\": [\n        \"Normalize and sanitize requested paths\",\n        \"Restrict serving files only from specific subdirectory\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"CustomerOrder\",\n  \"component_code\": \"struct CustomerOrder {\\n  int orderId;\\n  std::string customerName;\\n  double orderTotal;\\n};\",\n  \"component_description\": \"C++ struct representing a customer's order.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"CustomerOrder\",\n  \"component_code\": \"struct CustomerOrder {\\n  int orderId;\\n  std::string customerName;\\n  double orderTotal;\\n};\",\n  \"component_description\": \"C++ struct representing a customer's order.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"unsafe_sql\",\n  \"component_code\": \"import sqlite3\\n\\ndef unsafe_sql(query):\\n    conn = sqlite3.connect('site.db')\\n    cursor = conn.cursor()\\n    cursor.execute(query)\\n    conn.commit()\\n    conn.close()\",\n  \"component_description\": \"Python function executing user-provided SQL query directly.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"unsafe_sql\",\n  \"component_code\": \"import sqlite3\\n\\ndef unsafe_sql(query):\\n    conn = sqlite3.connect('site.db')\\n    cursor = conn.cursor()\\n    cursor.execute(query)\\n    conn.commit()\\n    conn.close()\",\n  \"component_description\": \"Python function executing user-provided SQL query directly.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 9.1,\n      \"exploitation_methods\": [\n        \"Input destructive SQL to drop tables or exfiltrate data.\",\n        \"Bypass authentication if used within login flows.\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid executing raw user queries.\",\n        \"Use parameterized queries always.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InsecureDownload\",\n  \"component_code\": \"<?php\\n$file = $_GET['file'];\\nreadfile($file);\",\n  \"component_description\": \"PHP code serving arbitrary files based on user input.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InsecureDownload\",\n  \"component_code\": \"<?php\\n$file = $_GET['file'];\\nreadfile($file);\",\n  \"component_description\": \"PHP code serving arbitrary files based on user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.7,\n      \"exploitation_methods\": [\n        \"Access /etc/passwd by using ../../../ patterns.\",\n        \"Download sensitive server files.\"\n      ],\n      \"developer_fixes\": [\n        \"Restrict file access to allowed safe directories.\",\n        \"Validate input to prevent directory traversal.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Config\",\n  \"component_code\": \"#[derive(Debug)]\\npub struct Config {\\n  pub database_url: String,\\n  pub api_key: String,\\n  pub debug_mode: bool,\\n}\",\n  \"component_description\": \"Rust struct for application configuration\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Config\",\n  \"component_code\": \"#[derive(Debug)]\\npub struct Config {\\n  pub database_url: String,\\n  pub api_key: String,\\n  pub debug_mode: bool,\\n}\",\n  \"component_description\": \"Rust struct for application configuration\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"UserAuthService\",\n  \"component_code\": \"import java.sql.DriverManager\\n\\nclass UserAuthService(dbUrl: String) {\\n\\n  def authenticate(username: String, password: String): Boolean = {\\n    val conn = DriverManager.getConnection(dbUrl)\\n    val stmt = conn.createStatement()\\n    val query = s\\\"SELECT * FROM users WHERE username = '$username' AND password = '$password'\\\"\\n    val rs = stmt.executeQuery(query)\\n    val authenticated = rs.next()\\n    conn.close()\\n    authenticated\\n  }\\n}\",\n  \"component_description\": \"Scala service class authenticating users via raw SQL query string interpolation.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"Notification\",\n  \"component_code\": \"interface Notification {\\n  id: number;\\n  message: string;\\n  timestamp: Date;\\n}\",\n  \"component_description\": \"TypeScript interface defining a structure for notifications.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"read_file\",\n  \"component_code\": \"def read_file(filename):\\n    with open('/var/data/' + filename, 'r') as f:\\n        return f.read()\",\n  \"component_description\": \"Python function reading a file from a predefined directory.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"read_file\",\n  \"component_code\": \"def read_file(filename):\\n    with open('/var/data/' + filename, 'r') as f:\\n        return f.read()\",\n  \"component_description\": \"Python function reading a file from a predefined directory.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.5,\n      \"exploitation_methods\": [\n        \"Use '../../etc/passwd' to read sensitive system files.\",\n        \"Access logs, SSH keys, or hidden configuration files.\"\n      ],\n      \"developer_fixes\": [\n        \"Restrict allowed filenames using a whitelist.\",\n        \"Validate and sanitize input before accessing files.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"WeatherReport\",\n  \"component_code\": \"struct WeatherReport {\\n    double temperature;\\n    double humidity;\\n    string description;\\n};\",\n  \"component_description\": \"C++ struct representing weather report data.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"WeatherReport\",\n  \"component_code\": \"struct WeatherReport {\\n    double temperature;\\n    double humidity;\\n    string description;\\n};\",\n  \"component_description\": \"C++ struct representing weather report data.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"METHOD_DEFINITION\",\n  \"component_name\": \"delete_file\",\n  \"component_code\": \"def delete_file(filename)\\n  File.delete(\\\"uploads/\\\" + filename)\\nend\",\n  \"component_description\": \"Ruby method allowing deletion of files based on user input without sanitization.\"\n}", "completion": "{\n  \"component_type\": \"METHOD_DEFINITION\",\n  \"component_name\": \"delete_file\",\n  \"component_code\": \"def delete_file(filename)\\n  File.delete(\\\"uploads/\\\" + filename)\\nend\",\n  \"component_description\": \"Ruby method allowing deletion of files based on user input without sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.3,\n      \"exploitation_methods\": [\n        \"Pass ../../../etc/passwd to delete critical files\",\n        \"Delete any file on the filesystem accessible to the app\"\n      ],\n      \"developer_fixes\": [\n        \"Restrict deletable filenames to a safe list\",\n        \"Sanitize and validate file paths properly\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"ShippingDetails\",\n  \"component_code\": \"interface ShippingDetails {\\n  orderId: number;\\n  shippingAddress: string;\\n  deliveryDate: string;\\n}\",\n  \"component_description\": \"TypeScript interface modeling shipping information.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"ShippingDetails\",\n  \"component_code\": \"interface ShippingDetails {\\n  orderId: number;\\n  shippingAddress: string;\\n  deliveryDate: string;\\n}\",\n  \"component_description\": \"TypeScript interface modeling shipping information.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"serveFile\",\n  \"component_code\": \"<?php\\nfunction serveFile($filename) {\\n    readfile(\\\"uploads/\\\" . $filename);\\n}\",\n  \"component_description\": \"PHP function that reads and serves a file from the uploads directory without sanitization.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"TaskManager\",\n  \"component_code\": \"data class Task(val id: Int, val title: String, val completed: Boolean)\\n\\nclass TaskManager {\\n    private val tasks = mutableListOf<Task>()\\n\\n    fun addTask(id: Int, title: String) {\\n        tasks.add(Task(id, title, false))\\n    }\\n\\n    fun completeTask(id: Int) {\\n        tasks.find { it.id == id }?.let {\\n            tasks[tasks.indexOf(it)] = it.copy(completed = true)\\n        }\\n    }\\n\\n    fun deleteTask(id: Int) {\\n        tasks.removeAll { it.id == id }\\n    }\\n\\n    fun listTasks(): List<Task> = tasks\\n}\",\n  \"component_description\": \"Kotlin class for basic task management with add, complete, delete, and list operations.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"UserActivity\",\n  \"component_code\": \"struct UserActivity {\\n  int activityId;\\n  std::string user;\\n  std::string action;\\n};\",\n  \"component_description\": \"C++ struct representing a user activity entry.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"UserActivity\",\n  \"component_code\": \"struct UserActivity {\\n  int activityId;\\n  std::string user;\\n  std::string action;\\n};\",\n  \"component_description\": \"C++ struct representing a user activity entry.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"BadIncludePHP\",\n  \"component_code\": \"<?php\\n$page = $_GET['page'];\\ninclude($page);\",\n  \"component_description\": \"PHP code including files based on user input without validation.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"BadIncludePHP\",\n  \"component_code\": \"<?php\\n$page = $_GET['page'];\\ninclude($page);\",\n  \"component_description\": \"PHP code including files based on user input without validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Local File Inclusion\",\n      \"cve_score\": 9.0,\n      \"exploitation_methods\": [\n        \"Access arbitrary files like /etc/passwd.\",\n        \"Execute uploaded malicious PHP files.\"\n      ],\n      \"developer_fixes\": [\n        \"Use strict whitelisting for include paths.\",\n        \"Disable dangerous PHP settings like allow_url_include.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleChatServer\",\n  \"component_code\": \"package main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\t\\\"net\\\"\\n\\t\\\"os\\\"\\n)\\n\\nfunc main() {\\n\\tln, err := net.Listen(\\\"tcp\\\", \\\":8080\\\")\\n\\tif err != nil {\\n\\t\\tfmt.Println(\\\"Error binding:\\\", err)\\n\\t\\tos.Exit(1)\\n\\t}\\n\\tfor {\\n\\t\\tconn, _ := ln.Accept()\\n\\t\\tgo func(c net.Conn) {\\n\\t\\t\\tdefer c.Close()\\n\\t\\t\\tbuffer := make([]byte, 4096)\\n\\t\\t\\tc.Read(buffer)\\n\\t\\t\\tfmt.Printf(\\\"Received: %s\\\", buffer)\\n\\t\\t}(conn)\\n\\t}\\n}\",\n  \"component_description\": \"Golang TCP server receiving and displaying user inputs.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleChatServer\",\n  \"component_code\": \"package main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\t\\\"net\\\"\\n\\t\\\"os\\\"\\n)\\n\\nfunc main() {\\n\\tln, err := net.Listen(\\\"tcp\\\", \\\":8080\\\")\\n\\tif err != nil {\\n\\t\\tfmt.Println(\\\"Error binding:\\\", err)\\n\\t\\tos.Exit(1)\\n\\t}\\n\\tfor {\\n\\t\\tconn, _ := ln.Accept()\\n\\t\\tgo func(c net.Conn) {\\n\\t\\t\\tdefer c.Close()\\n\\t\\t\\tbuffer := make([]byte, 4096)\\n\\t\\t\\tc.Read(buffer)\\n\\t\\t\\tfmt.Printf(\\\"Received: %s\\\", buffer)\\n\\t\\t}(conn)\\n\\t}\\n}\",\n  \"component_description\": \"Golang TCP server receiving and displaying user inputs.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Buffer Overflow\",\n      \"cve_score\": 8.9,\n      \"exploitation_methods\": [\n        \"Send extremely large payloads to crash or corrupt memory\",\n        \"Overwrite function return addresses (if CGO enabled)\"\n      ],\n      \"developer_fixes\": [\n        \"Implement length-checking before reading into buffer\",\n        \"Use safer buffered I/O utilities\"\n      ]\n    },\n    {\n      \"vul_type\": \"Information Disclosure\",\n      \"cve_score\": 7.2,\n      \"exploitation_methods\": [\n        \"Send sensitive data and observe server logs\",\n        \"Leak user input without sanitization\"\n      ],\n      \"developer_fixes\": [\n        \"Mask or sanitize received data before printing logs\",\n        \"Avoid printing raw user input\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"ProductItem\",\n  \"component_code\": \"interface ProductItem {\\n  productId: number;\\n  productName: string;\\n  productPrice: number;\\n}\",\n  \"component_description\": \"TypeScript interface modeling a product item.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"ProductItem\",\n  \"component_code\": \"interface ProductItem {\\n  productId: number;\\n  productName: string;\\n  productPrice: number;\\n}\",\n  \"component_description\": \"TypeScript interface modeling a product item.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"BadUploadPHP\",\n  \"component_code\": \"<?php\\nmove_uploaded_file($_FILES['upload']['tmp_name'], '/uploads/' . $_FILES['upload']['name']);\",\n  \"component_description\": \"PHP code saving uploaded files using original filenames without sanitization.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"BadUploadPHP\",\n  \"component_code\": \"<?php\\nmove_uploaded_file($_FILES['upload']['tmp_name'], '/uploads/' . $_FILES['upload']['name']);\",\n  \"component_description\": \"PHP code saving uploaded files using original filenames without sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Unrestricted File Upload\",\n      \"cve_score\": 9.2,\n      \"exploitation_methods\": [\n        \"Upload web shells and execute arbitrary PHP code.\",\n        \"Overwrite sensitive files on the server.\"\n      ],\n      \"developer_fixes\": [\n        \"Validate file extensions and MIME types strictly.\",\n        \"Rename files using server-side generated names.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"BadIncludePHP\",\n  \"component_code\": \"<?php\\n$page = $_GET['page'];\\ninclude($page);\",\n  \"component_description\": \"PHP code including files based on user input without validation.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnrestrictedFileDownload\",\n  \"component_code\": \"<?php\\n$file = $_GET['file'];\\nreadfile($file);\",\n  \"component_description\": \"PHP script allowing unrestricted file downloads.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.9,\n      \"exploitation_methods\": [\n        \"Access server sensitive files like /etc/passwd.\",\n        \"Download configuration files containing secrets.\"\n      ],\n      \"developer_fixes\": [\n        \"Restrict downloads to a specific directory.\",\n        \"Validate and sanitize file names rigorously.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"recordLogin\",\n  \"component_code\": \"CREATE PROCEDURE recordLogin(IN userId INT, IN ip VARCHAR(45))\\nBEGIN\\n  INSERT INTO login_logs (user_id, ip_address, timestamp) VALUES (userId, ip, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure to record login attempts.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"recordLogin\",\n  \"component_code\": \"CREATE PROCEDURE recordLogin(IN userId INT, IN ip VARCHAR(45))\\nBEGIN\\n  INSERT INTO login_logs (user_id, ip_address, timestamp) VALUES (userId, ip, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure to record login attempts.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"FileUploader\",\n  \"component_code\": \"public class FileUploader {\\n  public void SaveFile(IFormFile file) {\\n    var path = Path.Combine(\\\"/uploads\\\", file.FileName);\\n    using (var stream = new FileStream(path, FileMode.Create)) {\\n      file.CopyTo(stream);\\n    }\\n  }\\n}\",\n  \"component_description\": \"C# class for handling file uploads\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"FileUploader\",\n  \"component_code\": \"public class FileUploader {\\n  public void SaveFile(IFormFile file) {\\n    var path = Path.Combine(\\\"/uploads\\\", file.FileName);\\n    using (var stream = new FileStream(path, FileMode.Create)) {\\n      file.CopyTo(stream);\\n    }\\n  }\\n}\",\n  \"component_description\": \"C# class for handling file uploads\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.5,\n      \"exploitation_methods\": [\n        \"Upload file with name '../../etc/passwd'\\nOverwrite system files\",\n        \"Upload malicious script to web root\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize filenames with Path.GetFileName()\",\n        \"Store files with generated names\"\n      ]\n    },\n    {\n      \"vul_type\": \"Unrestricted File Upload\",\n      \"cve_score\": 7.8,\n      \"exploitation_methods\": [\n        \"Upload .aspx webshell\\nGain remote code execution\"\n      ],\n      \"developer_fixes\": [\n        \"Implement file type whitelisting\",\n        \"Scan files with antivirus\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"UserActivityLogger\",\n  \"component_code\": \"public class UserActivityLogger {\\n  public void log(String activity) {\\n    System.out.println(\\\"Activity: \\\" + activity);\\n  }\\n}\",\n  \"component_description\": \"Java class for logging user activities to console.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"UserActivityLogger\",\n  \"component_code\": \"public class UserActivityLogger {\\n  public void log(String activity) {\\n    System.out.println(\\\"Activity: \\\" + activity);\\n  }\\n}\",\n  \"component_description\": \"Java class for logging user activities to console.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleProfileSaver\",\n  \"component_code\": \"<?php\\nif (isset($_POST['username']) && isset($_POST['bio'])) {\\n    $username = $_POST['username'];\\n    $bio = $_POST['bio'];\\n    file_put_contents(\\\"profiles/$username.txt\\\", $bio);\\n    echo \\\"Profile saved.\\\";\\n}\\n\\nif (isset($_GET['username'])) {\\n    $username = $_GET['username'];\\n    $bio = file_get_contents(\\\"profiles/$username.txt\\\");\\n    echo \\\"<h1>$username</h1><p>$bio</p>\\\";\\n}\",\n  \"component_description\": \"PHP script saving and serving user profiles without sanitization.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"load_user_profile\",\n  \"component_code\": \"import os\\n\\ndef load_user_profile(username):\\n    path = f\\\"/home/profiles/{username}.txt\\\"\\n    if os.path.exists(path):\\n        with open(path, 'r') as file:\\n            return file.read()\\n    return \\\"Profile not found.\\\"\",\n  \"component_description\": \"Python function that loads a user profile from the filesystem without sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.4,\n      \"exploitation_methods\": [\n        \"Use ../../etc/passwd as username to read sensitive files\",\n        \"Access unauthorized files by manipulating input path\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize username to prevent path traversal\",\n        \"Whitelist allowed usernames and validate format\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"PublicNotesApp\",\n  \"component_code\": \"const express = require('express');\\nconst bodyParser = require('body-parser');\\nconst fs = require('fs');\\nconst app = express();\\n\\napp.use(bodyParser.urlencoded({ extended: true }));\\n\\napp.post('/note', (req, res) => {\\n    const { title, content } = req.body;\\n    fs.writeFileSync(`notes/${title}.txt`, content);\\n    res.send('Note saved.');\\n});\\n\\napp.get('/note', (req, res) => {\\n    const title = req.query.title;\\n    const content = fs.readFileSync(`notes/${title}.txt`, 'utf8');\\n    res.send(`<h1>${title}</h1><p>${content}</p>`);\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Node.js app saving and serving notes without any input validation.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"PublicNotesApp\",\n  \"component_code\": \"const express = require('express');\\nconst bodyParser = require('body-parser');\\nconst fs = require('fs');\\nconst app = express();\\n\\napp.use(bodyParser.urlencoded({ extended: true }));\\n\\napp.post('/note', (req, res) => {\\n    const { title, content } = req.body;\\n    fs.writeFileSync(`notes/${title}.txt`, content);\\n    res.send('Note saved.');\\n});\\n\\napp.get('/note', (req, res) => {\\n    const title = req.query.title;\\n    const content = fs.readFileSync(`notes/${title}.txt`, 'utf8');\\n    res.send(`<h1>${title}</h1><p>${content}</p>`);\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Node.js app saving and serving notes without any input validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Stored XSS\",\n      \"cve_score\": 9.0,\n      \"exploitation_methods\": [\n        \"Save <script> in notes to hijack sessions.\",\n        \"Steal cookies via malicious content in saved notes.\"\n      ],\n      \"developer_fixes\": [\n        \"Escape HTML output safely.\",\n        \"Sanitize inputs before writing to files.\"\n      ]\n    },\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.7,\n      \"exploitation_methods\": [\n        \"Craft filenames to access server files outside notes directory.\",\n        \"Download internal server configurations or private keys.\"\n      ],\n      \"developer_fixes\": [\n        \"Validate title parameter strictly.\",\n        \"Block '../' traversal patterns.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"UploadDetails\",\n  \"component_code\": \"struct UploadDetails {\\n  int fileId;\\n  std::string fileName;\\n  int fileSize;\\n};\",\n  \"component_description\": \"C++ struct representing details of an uploaded file.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"UploadDetails\",\n  \"component_code\": \"struct UploadDetails {\\n  int fileId;\\n  std::string fileName;\\n  int fileSize;\\n};\",\n  \"component_description\": \"C++ struct representing details of an uploaded file.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeRedirectPHP\",\n  \"component_code\": \"<?php\\n$url = $_GET['url'];\\nheader('Location: ' . $url);\",\n  \"component_description\": \"PHP script performing redirection based on untrusted user input.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeRedirectPHP\",\n  \"component_code\": \"<?php\\n$url = $_GET['url'];\\nheader('Location: ' . $url);\",\n  \"component_description\": \"PHP script performing redirection based on untrusted user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Open Redirect\",\n      \"cve_score\": 8.0,\n      \"exploitation_methods\": [\n        \"Redirect users to malicious phishing pages.\",\n        \"Leverage trust of legitimate domains to deliver malware.\"\n      ],\n      \"developer_fixes\": [\n        \"Restrict redirections to whitelisted URLs.\",\n        \"Validate destination URLs properly.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"EmailFormatter\",\n  \"component_code\": \"public class EmailFormatter {\\n    public static String formatWelcomeEmail(String username) {\\n        return \\\"Hello, \\\" + username + \\\"! Welcome to our platform.\\\";\\n    }\\n}\",\n  \"component_description\": \"Java class that formats welcome emails for users.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"EmailFormatter\",\n  \"component_code\": \"public class EmailFormatter {\\n    public static String formatWelcomeEmail(String username) {\\n        return \\\"Hello, \\\" + username + \\\"! Welcome to our platform.\\\";\\n    }\\n}\",\n  \"component_description\": \"Java class that formats welcome emails for users.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"ContactForm\",\n  \"component_code\": \"struct ContactForm {\\n  std::string name;\\n  std::string email;\\n  std::string message;\\n};\",\n  \"component_description\": \"C++ struct representing a simple contact form submission.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"ContactForm\",\n  \"component_code\": \"struct ContactForm {\\n  std::string name;\\n  std::string email;\\n  std::string message;\\n};\",\n  \"component_description\": \"C++ struct representing a simple contact form submission.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EvalRequest\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/evaluate', (req, res) => {\\n  const input = req.query.input;\\n  res.send(eval(input));\\n});\",\n  \"component_description\": \"Node.js route evaluating unsanitized user input.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EvalRequest\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/evaluate', (req, res) => {\\n  const input = req.query.input;\\n  res.send(eval(input));\\n});\",\n  \"component_description\": \"Node.js route evaluating unsanitized user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Remote Code Execution\",\n      \"cve_score\": 9.8,\n      \"exploitation_methods\": [\n        \"Execute arbitrary JavaScript remotely.\",\n        \"Modify server-side variables and state.\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid eval completely on user input.\",\n        \"Use safe parsing libraries or restrict allowed operations.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Coordinates\",\n  \"component_code\": \"case class Coordinates(lat: Double, lon: Double)\",\n  \"component_description\": \"Scala case class representing geographical coordinates.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"FileHandler\",\n  \"component_code\": \"using System;\\nusing System.IO;\\nusing Microsoft.AspNetCore.Mvc;\\n\\npublic class FileHandler : Controller {\\n    [HttpPost]\\n    public IActionResult UploadFile() {\\n        var file = Request.Form.Files[0];\\n        var path = Path.Combine(\\\"uploads\\\", file.FileName);\\n\\n        using (var stream = new FileStream(path, FileMode.Create)) {\\n            file.CopyTo(stream);\\n        }\\n\\n        return Ok(\\\"File Uploaded Successfully\\\");\\n    }\\n\\n    [HttpGet]\\n    public IActionResult DownloadFile(string filename) {\\n        var filepath = Path.Combine(\\\"uploads\\\", filename);\\n        if (System.IO.File.Exists(filepath)) {\\n            return File(System.IO.File.ReadAllBytes(filepath), \\\"application/octet-stream\\\", filename);\\n        }\\n        return NotFound();\\n    }\\n}\",\n  \"component_description\": \"C# ASP.NET Controller for uploading and downloading files without any validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Unrestricted File Upload\",\n      \"cve_score\": 9.3,\n      \"exploitation_methods\": [\n        \"Upload executable or script files and execute them\",\n        \"Upload oversized files causing DoS conditions\"\n      ],\n      \"developer_fixes\": [\n        \"Restrict file types (e.g., only images or documents)\",\n        \"Limit file size during uploads\"\n      ]\n    },\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.2,\n      \"exploitation_methods\": [\n        \"Download sensitive server files using ../../../\",\n        \"Access files outside of intended uploads directory\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize file names rigorously\",\n        \"Enforce downloads from only whitelisted locations\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"CartItem\",\n  \"component_code\": \"interface CartItem {\\n  itemId: number;\\n  quantity: number;\\n}\",\n  \"component_description\": \"TypeScript interface modeling an item in a shopping cart.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"CartItem\",\n  \"component_code\": \"interface CartItem {\\n  itemId: number;\\n  quantity: number;\\n}\",\n  \"component_description\": \"TypeScript interface modeling an item in a shopping cart.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"OAuthProvider\",\n  \"component_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.Security.Claims;\\nusing System.Security.Cryptography;\\nusing System.Threading.Tasks;\\nusing Microsoft.Owin.Security;\\nusing Microsoft.Owin.Security.OAuth;\\n\\npublic class OAuthProvider : OAuthAuthorizationServerProvider\\n{\\n    private readonly string _publicClientId;\\n    \\n    public OAuthProvider(string publicClientId)\\n    {\\n        _publicClientId = publicClientId;\\n    }\\n    \\n    public override async Task GrantResourceOwnerCredentials(\\n        OAuthGrantResourceOwnerCredentialsContext context)\\n    {\\n        // No rate limiting\\n        var user = await ValidateUser(context.UserName, context.Password);\\n        \\n        if (user == null)\\n        {\\n            context.SetError(\\\"invalid_grant\\\", \\\"Invalid credentials\\\");\\n            return;\\n        }\\n        \\n        // Static claims - no refresh\\n        var identity = new ClaimsIdentity(context.Options.AuthenticationType);\\n        identity.AddClaim(new Claim(ClaimTypes.Name, context.UserName));\\n        identity.AddClaim(new Claim(ClaimTypes.Role, user.IsAdmin ? \\\"Admin\\\" : \\\"User\\\"));\\n        \\n        var props = new AuthenticationProperties(new Dictionary<string, string>\\n        {\\n            { \\\"user_id\\\", user.Id.ToString() }\\n        });\\n        \\n        // Long-lived token with no refresh mechanism\\n        var ticket = new AuthenticationTicket(identity, props);\\n        context.Validated(ticket);\\n    }\\n    \\n    public override Task ValidateClientAuthentication(\\n        OAuthValidateClientAuthenticationContext context)\\n    {\\n        // Accept any client credentials\\n        context.Validated();\\n        return Task.CompletedTask;\\n    }\\n    \\n    public override Task GrantRefreshToken(\\n        OAuthGrantRefreshTokenContext context)\\n    {\\n        // No refresh token validation\\n        var newIdentity = new ClaimsIdentity(context.Ticket.Identity);\\n        \\n        var newTicket = new AuthenticationTicket(newIdentity, context.Ticket.Properties);\\n        context.Validated(newTicket);\\n        \\n        return Task.CompletedTask;\\n    }\\n    \\n    private async Task<User> ValidateUser(string username, string password)\\n    {\\n        // Authentication logic\\n        return null; // Simplified\\n    }\\n}\",\n  \"component_description\": \"OAuth 2.0 authorization provider implementation\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"OAuthProvider\",\n  \"component_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.Security.Claims;\\nusing System.Security.Cryptography;\\nusing System.Threading.Tasks;\\nusing Microsoft.Owin.Security;\\nusing Microsoft.Owin.Security.OAuth;\\n\\npublic class OAuthProvider : OAuthAuthorizationServerProvider\\n{\\n    private readonly string _publicClientId;\\n    \\n    public OAuthProvider(string publicClientId)\\n    {\\n        _publicClientId = publicClientId;\\n    }\\n    \\n    public override async Task GrantResourceOwnerCredentials(\\n        OAuthGrantResourceOwnerCredentialsContext context)\\n    {\\n        // No rate limiting\\n        var user = await ValidateUser(context.UserName, context.Password);\\n        \\n        if (user == null)\\n        {\\n            context.SetError(\\\"invalid_grant\\\", \\\"Invalid credentials\\\");\\n            return;\\n        }\\n        \\n        // Static claims - no refresh\\n        var identity = new ClaimsIdentity(context.Options.AuthenticationType);\\n        identity.AddClaim(new Claim(ClaimTypes.Name, context.UserName));\\n        identity.AddClaim(new Claim(ClaimTypes.Role, user.IsAdmin ? \\\"Admin\\\" : \\\"User\\\"));\\n        \\n        var props = new AuthenticationProperties(new Dictionary<string, string>\\n        {\\n            { \\\"user_id\\\", user.Id.ToString() }\\n        });\\n        \\n        // Long-lived token with no refresh mechanism\\n        var ticket = new AuthenticationTicket(identity, props);\\n        context.Validated(ticket);\\n    }\\n    \\n    public override Task ValidateClientAuthentication(\\n        OAuthValidateClientAuthenticationContext context)\\n    {\\n        // Accept any client credentials\\n        context.Validated();\\n        return Task.CompletedTask;\\n    }\\n    \\n    public override Task GrantRefreshToken(\\n        OAuthGrantRefreshTokenContext context)\\n    {\\n        // No refresh token validation\\n        var newIdentity = new ClaimsIdentity(context.Ticket.Identity);\\n        \\n        var newTicket = new AuthenticationTicket(newIdentity, context.Ticket.Properties);\\n        context.Validated(newTicket);\\n        \\n        return Task.CompletedTask;\\n    }\\n    \\n    private async Task<User> ValidateUser(string username, string password)\\n    {\\n        // Authentication logic\\n        return null; // Simplified\\n    }\\n}\",\n  \"component_description\": \"OAuth 2.0 authorization provider implementation\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Weak Client Authentication\",\n      \"cve_score\": 7.8,\n      \"exploitation_methods\": [\n        \"1. Spoof any client application\\n2. Obtain tokens without proper client validation\",\n        \"1. Exploit lack of client secret validation\"\n      ],\n      \"developer_fixes\": [\n        \"Implement proper client credential validation\",\n        \"Use client certificates for sensitive clients\"\n      ]\n    },\n    {\n      \"vul_type\": \"Insecure Token Handling\",\n      \"cve_score\": 8.1,\n      \"exploitation_methods\": [\n        \"1. Capture long-lived token\\n2. Maintain indefinite access\",\n        \"1. Exploit lack of token binding\"\n      ],\n      \"developer_fixes\": [\n        \"Implement short-lived tokens with refresh\",\n        \"Add token binding to client characteristics\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"Order\",\n  \"component_code\": \"interface Order {\\n  id: number;\\n  userId: number;\\n  product: string;\\n  quantity: number;\\n  price: number;\\n}\",\n  \"component_description\": \"TypeScript interface representing a simple order in an ecommerce application.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"SimpleFileServer\",\n  \"component_code\": \"using Microsoft.AspNetCore.Mvc;\\nusing System.IO;\\n\\npublic class SimpleFileServer : Controller {\\n\\n    [HttpPost]\\n    public IActionResult UploadFile() {\\n        var file = Request.Form.Files[0];\\n        var path = Path.Combine(\\\"uploads\\\", file.FileName);\\n\\n        using (var stream = new FileStream(path, FileMode.Create)) {\\n            file.CopyTo(stream);\\n        }\\n        return Ok(\\\"Uploaded\\\");\\n    }\\n\\n    [HttpGet]\\n    public IActionResult DownloadFile(string filename) {\\n        var filepath = Path.Combine(\\\"uploads\\\", filename);\\n        if (System.IO.File.Exists(filepath)) {\\n            return File(System.IO.File.ReadAllBytes(filepath), \\\"application/octet-stream\\\", filename);\\n        }\\n        return NotFound();\\n    }\\n}\",\n  \"component_description\": \"ASP.NET Core controller to upload and download files without proper validation or restrictions.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Unrestricted File Upload\",\n      \"cve_score\": 9.2,\n      \"exploitation_methods\": [\n        \"Upload executable or malicious scripts\",\n        \"Overwrite server files via crafted uploads\"\n      ],\n      \"developer_fixes\": [\n        \"Enforce file type and size restrictions\",\n        \"Store uploaded files with random safe filenames\"\n      ]\n    },\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.7,\n      \"exploitation_methods\": [\n        \"Download ../../../etc/passwd via filename\",\n        \"Access sensitive server configuration files\"\n      ],\n      \"developer_fixes\": [\n        \"Validate filename strictly\",\n        \"Ensure files are served only from whitelisted directories\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"processLogin\",\n  \"component_code\": \"#include<iostream>\\n#include<string>\\nusing namespace std;\\n\\nbool processLogin(string username, string password) {\\n    string hardcodedUser = \\\"admin\\\";\\n    string hardcodedPass = \\\"admin123\\\";\\n    return (username == hardcodedUser && password == hardcodedPass);\\n}\",\n  \"component_description\": \"C++ function validating login credentials against hardcoded username and password.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"processLogin\",\n  \"component_code\": \"#include<iostream>\\n#include<string>\\nusing namespace std;\\n\\nbool processLogin(string username, string password) {\\n    string hardcodedUser = \\\"admin\\\";\\n    string hardcodedPass = \\\"admin123\\\";\\n    return (username == hardcodedUser && password == hardcodedPass);\\n}\",\n  \"component_description\": \"C++ function validating login credentials against hardcoded username and password.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Hardcoded Credentials\",\n      \"cve_score\": 7.5,\n      \"exploitation_methods\": [\n        \"Reverse engineer binary to recover admin credentials\",\n        \"Leverage fixed credentials to gain unauthorized access\"\n      ],\n      \"developer_fixes\": [\n        \"Authenticate users against secure backend databases\",\n        \"Avoid hardcoding any sensitive credentials in code\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Account\",\n  \"component_code\": \"case class Account(id: Int, balance: Double, created: String)\",\n  \"component_description\": \"Scala case class modeling a user bank account.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Account\",\n  \"component_code\": \"case class Account(id: Int, balance: Double, created: String)\",\n  \"component_description\": \"Scala case class modeling a user bank account.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"PaymentTransaction\",\n  \"component_code\": \"struct PaymentTransaction {\\n  int transactionId;\\n  double amount;\\n  std::string timestamp;\\n};\",\n  \"component_description\": \"C++ struct representing a payment transaction.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"PaymentTransaction\",\n  \"component_code\": \"struct PaymentTransaction {\\n  int transactionId;\\n  double amount;\\n  std::string timestamp;\\n};\",\n  \"component_description\": \"C++ struct representing a payment transaction.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeHeaderSet\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/unsafe-header', (req, res) => {\\n  const val = req.query.val;\\n  res.setHeader('X-Value', val);\\n  res.send('Header set');\\n});\",\n  \"component_description\": \"Node.js server setting headers using untrusted user input.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeHeaderSet\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/unsafe-header', (req, res) => {\\n  const val = req.query.val;\\n  res.setHeader('X-Value', val);\\n  res.send('Header set');\\n});\",\n  \"component_description\": \"Node.js server setting headers using untrusted user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"HTTP Response Splitting\",\n      \"cve_score\": 8.1,\n      \"exploitation_methods\": [\n        \"Inject \\r\\n to split headers and create fake responses.\",\n        \"Redirect or inject malicious payloads into responses.\"\n      ],\n      \"developer_fixes\": [\n        \"Filter and sanitize all header values.\",\n        \"Strip \\r and \\n characters before setting headers.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"METHOD_DEFINITION\",\n  \"component_name\": \"download_file\",\n  \"component_code\": \"def download_file(filename)\\n  send_file(\\\"uploads/\\\" + filename)\\nend\",\n  \"component_description\": \"Ruby method to send a file for download from the uploads directory.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"BlogCMS\",\n  \"component_code\": \"const express = require('express');\\nconst bodyParser = require('body-parser');\\nconst fs = require('fs');\\nconst app = express();\\n\\napp.use(bodyParser.urlencoded({ extended: true }));\\n\\napp.post('/createPost', (req, res) => {\\n    const title = req.body.title;\\n    const content = req.body.content;\\n    fs.writeFileSync(`posts/${title}.txt`, content);\\n    res.send('Post created');\\n});\\n\\napp.get('/viewPost', (req, res) => {\\n    const title = req.query.title;\\n    const content = fs.readFileSync(`posts/${title}.txt`, 'utf8');\\n    res.send(`<h1>${title}</h1><p>${content}</p>`);\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Simple blog CMS in Node.js allowing post creation and viewing by saving posts as text files.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Stored XSS\",\n      \"cve_score\": 9.1,\n      \"exploitation_methods\": [\n        \"Save <script> tags in post content\",\n        \"Execute malicious JS when others view the post\"\n      ],\n      \"developer_fixes\": [\n        \"Escape HTML output before rendering\",\n        \"Use sanitization libraries like DOMPurify\"\n      ]\n    },\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.0,\n      \"exploitation_methods\": [\n        \"Request ../../../etc/passwd via title param\",\n        \"Access or overwrite arbitrary server files\"\n      ],\n      \"developer_fixes\": [\n        \"Whitelist valid filenames\",\n        \"Sanitize all file path inputs\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"MODULE_DEFINITION\",\n  \"component_name\": \"auth_utils\",\n  \"component_code\": \"import os\\ndef generate_token():\\n  return os.urandom(16).hex()\\n\\ndef verify_token(token):\\n  stored_tokens = get_stored_tokens()\\n  return token in stored_tokens\",\n  \"component_description\": \"Python module for token generation/verification\"\n}", "completion": "{\n  \"component_type\": \"MODULE_DEFINITION\",\n  \"component_name\": \"auth_utils\",\n  \"component_code\": \"import os\\ndef generate_token():\\n  return os.urandom(16).hex()\\n\\ndef verify_token(token):\\n  stored_tokens = get_stored_tokens()\\n  return token in stored_tokens\",\n  \"component_description\": \"Python module for token generation/verification\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"BlogPost\",\n  \"component_code\": \"<?php\\nclass BlogPost {\\n  public $id;\\n  public $title;\\n  public $content;\\n\\n  function __construct($id, $title, $content) {\\n    $this->id = $id;\\n    $this->title = $title;\\n    $this->content = $content;\\n  }\\n}\",\n  \"component_description\": \"PHP class representing a blog post with an ID, title, and content.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"BlogPost\",\n  \"component_code\": \"<?php\\nclass BlogPost {\\n  public $id;\\n  public $title;\\n  public $content;\\n\\n  function __construct($id, $title, $content) {\\n    $this->id = $id;\\n    $this->title = $title;\\n    $this->content = $content;\\n  }\\n}\",\n  \"component_description\": \"PHP class representing a blog post with an ID, title, and content.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"TicketInfo\",\n  \"component_code\": \"case class TicketInfo(ticketId: Int, issue: String, priority: String)\",\n  \"component_description\": \"Scala case class modeling a support ticket.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"TicketInfo\",\n  \"component_code\": \"case class TicketInfo(ticketId: Int, issue: String, priority: String)\",\n  \"component_description\": \"Scala case class modeling a support ticket.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"send_email\",\n  \"component_code\": \"import smtplib\\n\\ndef send_email(address, message):\\n    server = smtplib.SMTP('localhost')\\n    server.sendmail('admin@example.com', address, message)\\n    server.quit()\",\n  \"component_description\": \"Python function sending emails directly without security checks.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"send_email\",\n  \"component_code\": \"import smtplib\\n\\ndef send_email(address, message):\\n    server = smtplib.SMTP('localhost')\\n    server.sendmail('admin@example.com', address, message)\\n    server.quit()\",\n  \"component_description\": \"Python function sending emails directly without security checks.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"readFileContent\",\n  \"component_code\": \"#include <stdio.h>\\n#include <stdlib.h>\\n\\nvoid readFileContent(const char* filename) {\\n    FILE* file = fopen(filename, \\\"r\\\");\\n    if (!file) {\\n        perror(\\\"Failed to open file\\\");\\n        return;\\n    }\\n    char buffer[256];\\n    while (fgets(buffer, sizeof(buffer), file)) {\\n        printf(\\\"%s\\\", buffer);\\n    }\\n    fclose(file);\\n}\",\n  \"component_description\": \"C function that reads a file and prints its content to stdout.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"InventoryManager\",\n  \"component_code\": \"class InventoryItem:\\n    def __init__(self, item_id, name, quantity, price):\\n        self.item_id = item_id\\n        self.name = name\\n        self.quantity = quantity\\n        self.price = price\\n\\nclass InventoryManager:\\n    def __init__(self):\\n        self.items = {}\\n\\n    def add_item(self, item_id, name, quantity, price):\\n        self.items[item_id] = InventoryItem(item_id, name, quantity, price)\\n\\n    def remove_item(self, item_id):\\n        if item_id in self.items:\\n            del self.items[item_id]\\n\\n    def update_quantity(self, item_id, quantity):\\n        if item_id in self.items:\\n            self.items[item_id].quantity = quantity\\n\\n    def list_items(self):\\n        for item in self.items.values():\\n            print(f\\\"{item.item_id}: {item.name} - {item.quantity} units at ${item.price}\\\")\",\n  \"component_description\": \"Python class to manage an inventory of products, including add, remove, update, and list operations.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Customer\",\n  \"component_code\": \"struct Customer {\\n    id: u32,\\n    name: String,\\n    email: String,\\n    phone: Option<String>,\\n}\",\n  \"component_description\": \"Rust struct for customer records including optional phone number.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"UserProfileManager\",\n  \"component_code\": \"import java.io.*;\\nimport javax.servlet.*;\\nimport javax.servlet.http.*;\\n\\npublic class UserProfileManager extends HttpServlet {\\n\\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {\\n        String username = request.getParameter(\\\"username\\\");\\n        String bio = request.getParameter(\\\"bio\\\");\\n        BufferedWriter writer = new BufferedWriter(new FileWriter(\\\"profiles/\\\" + username + \\\".txt\\\"));\\n        writer.write(bio);\\n        writer.close();\\n        response.getWriter().println(\\\"Profile saved.\\\");\\n    }\\n\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\\n        String username = request.getParameter(\\\"username\\\");\\n        BufferedReader reader = new BufferedReader(new FileReader(\\\"profiles/\\\" + username + \\\".txt\\\"));\\n        String line;\\n        while ((line = reader.readLine()) != null) {\\n            response.getWriter().println(line);\\n        }\\n        reader.close();\\n    }\\n}\",\n  \"component_description\": \"Java Servlet for saving and retrieving user profiles without input validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Stored XSS\",\n      \"cve_score\": 9.0,\n      \"exploitation_methods\": [\n        \"Inject <script> tags in the bio\",\n        \"Execute malicious JavaScript when the profile is viewed\"\n      ],\n      \"developer_fixes\": [\n        \"Escape output when displaying user input\",\n        \"Sanitize HTML content\"\n      ]\n    },\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.5,\n      \"exploitation_methods\": [\n        \"Use ../../ paths in the username parameter to read arbitrary server files\",\n        \"Access sensitive application configuration files\"\n      ],\n      \"developer_fixes\": [\n        \"Normalize and validate file paths\",\n        \"Restrict file access to within the profiles directory\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"InventoryManager\",\n  \"component_code\": \"class InventoryItem:\\n    def __init__(self, item_id, name, quantity, price):\\n        self.item_id = item_id\\n        self.name = name\\n        self.quantity = quantity\\n        self.price = price\\n\\nclass InventoryManager:\\n    def __init__(self):\\n        self.items = {}\\n\\n    def add_item(self, item_id, name, quantity, price):\\n        self.items[item_id] = InventoryItem(item_id, name, quantity, price)\\n\\n    def remove_item(self, item_id):\\n        if item_id in self.items:\\n            del self.items[item_id]\\n\\n    def update_quantity(self, item_id, quantity):\\n        if item_id in self.items:\\n            self.items[item_id].quantity = quantity\\n\\n    def list_items(self):\\n        for item in self.items.values():\\n            print(f\\\"{item.item_id}: {item.name} - {item.quantity} units at ${item.price}\\\")\",\n  \"component_description\": \"Python class to manage an inventory of products, including add, remove, update, and list operations.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"UserAuthService\",\n  \"component_code\": \"import java.sql.DriverManager\\n\\nclass UserAuthService(dbUrl: String) {\\n\\n  def authenticate(username: String, password: String): Boolean = {\\n    val conn = DriverManager.getConnection(dbUrl)\\n    val stmt = conn.createStatement()\\n    val query = s\\\"SELECT * FROM users WHERE username = '$username' AND password = '$password'\\\"\\n    val rs = stmt.executeQuery(query)\\n    val authenticated = rs.next()\\n    conn.close()\\n    authenticated\\n  }\\n}\",\n  \"component_description\": \"Scala service class authenticating users via raw SQL query string interpolation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 9.0,\n      \"exploitation_methods\": [\n        \"Inject ' OR '1'='1 to login as any user\",\n        \"Inject SQL payloads to dump user tables\",\n        \"Modify database structure by injecting DDL statements\"\n      ],\n      \"developer_fixes\": [\n        \"Use prepared statements with parameter binding\",\n        \"Validate and sanitize user input strictly\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"EventLogger\",\n  \"component_code\": \"public class EventLogger {\\n  public void log(String event) {\\n    System.out.println(\\\"Event: \\\" + event);\\n  }\\n}\",\n  \"component_description\": \"Java class for logging application events.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"EventLogger\",\n  \"component_code\": \"public class EventLogger {\\n  public void log(String event) {\\n    System.out.println(\\\"Event: \\\" + event);\\n  }\\n}\",\n  \"component_description\": \"Java class for logging application events.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"StripePaymentService\",\n  \"component_code\": \"using Stripe;\\nusing System;\\n\\npublic class StripePaymentService : IPaymentService\\n{\\n    private readonly string _apiKey;\\n    private readonly ILogger _logger;\\n\\n    public StripePaymentService(IConfiguration config, ILogger<StripePaymentService> logger)\\n    {\\n        _apiKey = config[\\\"Stripe:SecretKey\\\"]; // Hardcoded key access\\n        _logger = logger;\\n    }\\n\\n    public async Task<PaymentResult> ProcessPayment(PaymentRequest request)\\n    {\\n        try\\n        {\\n            StripeConfiguration.ApiKey = _apiKey;\\n            \\n            var options = new ChargeCreateOptions\\n            {\\n                Amount = (long)(request.Amount * 100),\\n                Currency = \\\"usd\\\",\\n                Source = request.Token,\\n                Description = $\\\"Payment for {request.OrderId}\\\",\\n                Metadata = new Dictionary<string, string>\\n                {\\n                    { \\\"UserEmail\\\", request.UserEmail },\\n                    { \\\"IP\\\", request.ClientIP }\\n                }\\n            };\\n\\n            var service = new ChargeService();\\n            var charge = await service.CreateAsync(options);\\n\\n            _logger.LogInformation($\\\"Processed payment {charge.Id} for {request.UserEmail}\\\");\\n            \\n            return new PaymentResult\\n            {\\n                Success = true,\\n                TransactionId = charge.Id,\\n                Message = charge.Status\\n            };\\n        }\\n        catch (StripeException ex)\\n        {\\n            _logger.LogError(ex, $\\\"Stripe error processing payment: {ex.StripeError?.Message}\\\");\\n            return new PaymentResult\\n            {\\n                Success = false,\\n                Message = ex.Message\\n            };\\n        }\\n    }\\n}\",\n  \"component_description\": \"C# payment processing service using Stripe API\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"StripePaymentService\",\n  \"component_code\": \"using Stripe;\\nusing System;\\n\\npublic class StripePaymentService : IPaymentService\\n{\\n    private readonly string _apiKey;\\n    private readonly ILogger _logger;\\n\\n    public StripePaymentService(IConfiguration config, ILogger<StripePaymentService> logger)\\n    {\\n        _apiKey = config[\\\"Stripe:SecretKey\\\"]; // Hardcoded key access\\n        _logger = logger;\\n    }\\n\\n    public async Task<PaymentResult> ProcessPayment(PaymentRequest request)\\n    {\\n        try\\n        {\\n            StripeConfiguration.ApiKey = _apiKey;\\n            \\n            var options = new ChargeCreateOptions\\n            {\\n                Amount = (long)(request.Amount * 100),\\n                Currency = \\\"usd\\\",\\n                Source = request.Token,\\n                Description = $\\\"Payment for {request.OrderId}\\\",\\n                Metadata = new Dictionary<string, string>\\n                {\\n                    { \\\"UserEmail\\\", request.UserEmail },\\n                    { \\\"IP\\\", request.ClientIP }\\n                }\\n            };\\n\\n            var service = new ChargeService();\\n            var charge = await service.CreateAsync(options);\\n\\n            _logger.LogInformation($\\\"Processed payment {charge.Id} for {request.UserEmail}\\\");\\n            \\n            return new PaymentResult\\n            {\\n                Success = true,\\n                TransactionId = charge.Id,\\n                Message = charge.Status\\n            };\\n        }\\n        catch (StripeException ex)\\n        {\\n            _logger.LogError(ex, $\\\"Stripe error processing payment: {ex.StripeError?.Message}\\\");\\n            return new PaymentResult\\n            {\\n                Success = false,\\n                Message = ex.Message\\n            };\\n        }\\n    }\\n}\",\n  \"component_description\": \"C# payment processing service using Stripe API\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Sensitive Data in Logs\",\n      \"cve_score\": 7.8,\n      \"exploitation_methods\": [\n        \"Trigger payment error\\nHarvest PII from application logs\",\n        \"Brute-force API keys from log files\"\n      ],\n      \"developer_fixes\": [\n        \"Implement log redaction for PII\",\n        \"Use structured logging with sensitive data filters\"\n      ]\n    },\n    {\n      \"vul_type\": \"Insecure Configuration\",\n      \"cve_score\": 6.5,\n      \"exploitation_methods\": [\n        \"Access configuration files\\nExtract Stripe API key\"\n      ],\n      \"developer_fixes\": [\n        \"Use Azure Key Vault/AWS Secrets Manager\",\n        \"Implement runtime secret injection\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"renderMarkdown\",\n  \"component_code\": \"function renderMarkdown(content) {\\n  return marked(content);\\n}\",\n  \"component_description\": \"JavaScript function for rendering markdown\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"renderMarkdown\",\n  \"component_code\": \"function renderMarkdown(content) {\\n  return marked(content);\\n}\",\n  \"component_description\": \"JavaScript function for rendering markdown\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"XSS\",\n      \"cve_score\": 7.3,\n      \"exploitation_methods\": [\n        \"Inject malicious JavaScript in markdown\\nExecute when rendered\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize output with DOMPurify\",\n        \"Use safe markdown renderer\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"createOrderRecord\",\n  \"component_code\": \"CREATE PROCEDURE createOrderRecord(IN userId INT, IN orderTotal DECIMAL(10,2))\\nBEGIN\\n  INSERT INTO orders(user_id, total, created_at) VALUES (userId, orderTotal, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure inserting a new order into the database.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"createOrderRecord\",\n  \"component_code\": \"CREATE PROCEDURE createOrderRecord(IN userId INT, IN orderTotal DECIMAL(10,2))\\nBEGIN\\n  INSERT INTO orders(user_id, total, created_at) VALUES (userId, orderTotal, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure inserting a new order into the database.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleAPIServer\",\n  \"component_code\": \"package main\\n\\nimport (\\n    \\\"fmt\\\"\\n    \\\"io/ioutil\\\"\\n    \\\"net/http\\\"\\n    \\\"os\\\"\\n)\\n\\nfunc uploadFile(w http.ResponseWriter, r *http.Request) {\\n    file, _, err := r.FormFile(\\\"file\\\")\\n    if err != nil {\\n        fmt.Fprintf(w, \\\"Error Reading File\\\")\\n        return\\n    }\\n    defer file.Close()\\n    data, _ := ioutil.ReadAll(file)\\n    ioutil.WriteFile(\\\"uploads/\\\"+r.FormValue(\\\"filename\\\"), data, 0644)\\n    fmt.Fprintf(w, \\\"Upload successful\\\")\\n}\\n\\nfunc getFile(w http.ResponseWriter, r *http.Request) {\\n    filename := r.URL.Query().Get(\\\"filename\\\")\\n    http.ServeFile(w, r, \\\"uploads/\\\"+filename)\\n}\\n\\nfunc main() {\\n    os.MkdirAll(\\\"uploads\\\", os.ModePerm)\\n    http.HandleFunc(\\\"/upload\\\", uploadFile)\\n    http.HandleFunc(\\\"/download\\\", getFile)\\n    http.ListenAndServe(\\\":8080\\\", nil)\\n}\",\n  \"component_description\": \"Basic Go server providing upload and download functionality without validations.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"deleteUser\",\n  \"component_code\": \"CREATE PROCEDURE deleteUser(IN userId VARCHAR(50))\\nBEGIN\\n  SET @query = CONCAT('DELETE FROM Users WHERE id = ', userId);\\n  PREPARE stmt FROM @query;\\n  EXECUTE stmt;\\n  DEALLOCATE PREPARE stmt;\\nEND;\",\n  \"component_description\": \"SQL stored procedure for deleting a user based on user ID, dynamically building queries.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 8.8,\n      \"exploitation_methods\": [\n        \"Inject '; DROP TABLE Users; -- into userId\",\n        \"Bypass intended query to modify unrelated records\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid dynamic SQL building with user input\",\n        \"Use parameterized queries with strong typing\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"InventoryItem\",\n  \"component_code\": \"interface InventoryItem {\\n  id: number;\\n  name: string;\\n  stock: number;\\n}\",\n  \"component_description\": \"TypeScript interface modeling an item in inventory.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"InventoryItem\",\n  \"component_code\": \"interface InventoryItem {\\n  id: number;\\n  name: string;\\n  stock: number;\\n}\",\n  \"component_description\": \"TypeScript interface modeling an item in inventory.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleForum\",\n  \"component_code\": \"const express = require('express');\\nconst bodyParser = require('body-parser');\\nconst fs = require('fs');\\nconst app = express();\\n\\napp.use(bodyParser.urlencoded({ extended: true }));\\napp.use(bodyParser.json());\\n\\napp.post('/post', (req, res) => {\\n    const { username, message } = req.body;\\n    fs.appendFileSync('posts.txt', `${username}: ${message}\\\\n`);\\n    res.send('Posted');\\n});\\n\\napp.get('/posts', (req, res) => {\\n    const content = fs.readFileSync('posts.txt', 'utf8');\\n    res.send(`<pre>${content}</pre>`);\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Node.js Express forum app saving posts into a text file and displaying them without any sanitization.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"serveFile\",\n  \"component_code\": \"<?php\\nfunction serveFile($filename) {\\n    readfile(\\\"uploads/\\\" . $filename);\\n}\",\n  \"component_description\": \"PHP function that reads and serves a file from the uploads directory without sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.7,\n      \"exploitation_methods\": [\n        \"Request ../../etc/passwd to leak sensitive system files\",\n        \"Escape upload directory to access server configuration\",\n        \"Use URL-encoded ../ patterns to bypass naive checks\"\n      ],\n      \"developer_fixes\": [\n        \"Strictly validate allowed filenames\",\n        \"Restrict access only to known safe directories\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Account\",\n  \"component_code\": \"struct Account {\\n    int id;\\n    std::string username;\\n    double balance;\\n};\",\n  \"component_description\": \"C++ struct for storing account information including balance.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleMessageBoard\",\n  \"component_code\": \"const express = require('express');\\nconst bodyParser = require('body-parser');\\nconst fs = require('fs');\\nconst app = express();\\n\\napp.use(bodyParser.urlencoded({ extended: true }));\\n\\napp.post('/post', (req, res) => {\\n    const { username, message } = req.body;\\n    fs.appendFileSync('messages.txt', `${username}: ${message}\\\\n`);\\n    res.send('Message posted');\\n});\\n\\napp.get('/messages', (req, res) => {\\n    const data = fs.readFileSync('messages.txt', 'utf8');\\n    res.send(`<pre>${data}</pre>`);\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Node.js app allowing users to post and view messages saved in a file.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Stored XSS\",\n      \"cve_score\": 9.0,\n      \"exploitation_methods\": [\n        \"Inject <script> tags into message field\",\n        \"Execute JS when displaying messages\"\n      ],\n      \"developer_fixes\": [\n        \"Escape message content before rendering\",\n        \"Enforce strict CSP headers\"\n      ]\n    },\n    {\n      \"vul_type\": \"Log Injection\",\n      \"cve_score\": 7.2,\n      \"exploitation_methods\": [\n        \"Inject fake log entries by inserting \\\\n characters\",\n        \"Manipulate logs for hiding attacks\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize newlines and control characters from messages\",\n        \"Use structured logging instead of plain text\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleMessageBoard\",\n  \"component_code\": \"const express = require('express');\\nconst bodyParser = require('body-parser');\\nconst fs = require('fs');\\nconst app = express();\\n\\napp.use(bodyParser.urlencoded({ extended: true }));\\n\\napp.post('/post', (req, res) => {\\n    const { username, message } = req.body;\\n    fs.appendFileSync('messages.txt', `${username}: ${message}\\\\n`);\\n    res.send('Message posted');\\n});\\n\\napp.get('/messages', (req, res) => {\\n    const data = fs.readFileSync('messages.txt', 'utf8');\\n    res.send(`<pre>${data}</pre>`);\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Node.js app allowing users to post and view messages saved in a file.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"EmailService\",\n  \"component_code\": \"class EmailService {\\n  def sendEmail(to: String, subject: String, body: String): Unit = {\\n    println(s\\\"Sending email to: $to\\\\nSubject: $subject\\\\nBody: $body\\\")\\n  }\\n}\",\n  \"component_description\": \"Scala class for sending emails (simulated by printing to console).\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"APIKeyRecord\",\n  \"component_code\": \"struct APIKeyRecord {\\n  int id;\\n  std::string key;\\n  std::string createdAt;\\n};\",\n  \"component_description\": \"C++ struct representing an API key record.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"APIKeyRecord\",\n  \"component_code\": \"struct APIKeyRecord {\\n  int id;\\n  std::string key;\\n  std::string createdAt;\\n};\",\n  \"component_description\": \"C++ struct representing an API key record.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"FeedbackForm\",\n  \"component_code\": \"public class FeedbackForm {\\n  public void submit(String feedback) {\\n    System.out.println(\\\"Received: \\\" + feedback);\\n  }\\n}\",\n  \"component_description\": \"Java class accepting and printing user feedback.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"FeedbackForm\",\n  \"component_code\": \"public class FeedbackForm {\\n  public void submit(String feedback) {\\n    System.out.println(\\\"Received: \\\" + feedback);\\n  }\\n}\",\n  \"component_description\": \"Java class accepting and printing user feedback.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"UserSettings\",\n  \"component_code\": \"interface UserSettings {\\n  theme: string;\\n  notifications: boolean;\\n  language: string;\\n}\",\n  \"component_description\": \"TypeScript interface representing a user's configurable settings.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"UserSettings\",\n  \"component_code\": \"interface UserSettings {\\n  theme: string;\\n  notifications: boolean;\\n  language: string;\\n}\",\n  \"component_description\": \"TypeScript interface representing a user's configurable settings.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"read_user_file\",\n  \"component_code\": \"def read_user_file(filepath):\\n    with open(filepath, 'r') as f:\\n        return f.read()\",\n  \"component_description\": \"Python function reading a file specified by the user without validation.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"read_user_file\",\n  \"component_code\": \"def read_user_file(filepath):\\n    with open(filepath, 'r') as f:\\n        return f.read()\",\n  \"component_description\": \"Python function reading a file specified by the user without validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.7,\n      \"exploitation_methods\": [\n        \"Input ../../etc/passwd to expose system files.\",\n        \"Read sensitive configuration files via manipulated paths.\"\n      ],\n      \"developer_fixes\": [\n        \"Validate and sanitize file paths before accessing.\",\n        \"Restrict file access to a safe directory only.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"updateProductStock\",\n  \"component_code\": \"CREATE PROCEDURE updateProductStock(IN pid INT, IN qty INT)\\nBEGIN\\n  UPDATE Products SET stock = stock - qty WHERE id = pid;\\nEND;\",\n  \"component_description\": \"SQL stored procedure updating product stock without validating quantity input.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"updateProductStock\",\n  \"component_code\": \"CREATE PROCEDURE updateProductStock(IN pid INT, IN qty INT)\\nBEGIN\\n  UPDATE Products SET stock = stock - qty WHERE id = pid;\\nEND;\",\n  \"component_description\": \"SQL stored procedure updating product stock without validating quantity input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Business Logic Flaw\",\n      \"cve_score\": 6.8,\n      \"exploitation_methods\": [\n        \"Pass negative quantities to artificially inflate stock.\",\n        \"Cause incorrect inventory counts.\"\n      ],\n      \"developer_fixes\": [\n        \"Validate that quantity is positive before update.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"AlertManager\",\n  \"component_code\": \"public class AlertManager {\\n  public void sendAlert(String alertMessage) {\\n    System.out.println(\\\"ALERT: \\\" + alertMessage);\\n  }\\n}\",\n  \"component_description\": \"Java class for sending alert messages to console.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"AlertManager\",\n  \"component_code\": \"public class AlertManager {\\n  public void sendAlert(String alertMessage) {\\n    System.out.println(\\\"ALERT: \\\" + alertMessage);\\n  }\\n}\",\n  \"component_description\": \"Java class for sending alert messages to console.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"CommentSection\",\n  \"component_code\": \"class Comment {\\n    constructor(public user: string, public content: string) {}\\n}\\n\\nclass CommentSection {\\n    private comments: Comment[] = [];\\n\\n    addComment(user: string, content: string) {\\n        this.comments.push(new Comment(user, content));\\n    }\\n\\n    renderComments(): string {\\n        return this.comments.map(c => `<p><b>${c.user}</b>: ${c.content}</p>`).join('');\\n    }\\n}\",\n  \"component_description\": \"TypeScript class that stores and renders user comments using HTML templates.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"CommentSection\",\n  \"component_code\": \"class Comment {\\n    constructor(public user: string, public content: string) {}\\n}\\n\\nclass CommentSection {\\n    private comments: Comment[] = [];\\n\\n    addComment(user: string, content: string) {\\n        this.comments.push(new Comment(user, content));\\n    }\\n\\n    renderComments(): string {\\n        return this.comments.map(c => `<p><b>${c.user}</b>: ${c.content}</p>`).join('');\\n    }\\n}\",\n  \"component_description\": \"TypeScript class that stores and renders user comments using HTML templates.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Stored XSS\",\n      \"cve_score\": 9.1,\n      \"exploitation_methods\": [\n        \"Submit <script> in comment content to execute on render\",\n        \"Inject JS to steal session or cookies of viewers\",\n        \"Use obfuscated payloads to bypass naive filters\"\n      ],\n      \"developer_fixes\": [\n        \"Escape HTML output before rendering user content\",\n        \"Implement DOMPurify or equivalent sanitization libraries\"\n      ]\n    },\n    {\n      \"vul_type\": \"Lack of Input Validation\",\n      \"cve_score\": 6.5,\n      \"exploitation_methods\": [\n        \"Flood the comment section with empty/invalid inputs\",\n        \"Break layout with malformed HTML\",\n        \"Create long payloads to affect rendering or logs\"\n      ],\n      \"developer_fixes\": [\n        \"Add input length limits and validation checks\",\n        \"Enforce required fields and reject blank inputs\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"METHOD_DEFINITION\",\n  \"component_name\": \"executeCommand\",\n  \"component_code\": \"public String executeCommand(String input) {\\n  Runtime rt = Runtime.getRuntime();\\n  Process pr = rt.exec(\\\"/bin/sh -c \\\" + input);\\n  return IOUtils.toString(pr.getInputStream());\\n}\",\n  \"component_description\": \"Java method executing shell commands\"\n}", "completion": "{\n  \"component_type\": \"METHOD_DEFINITION\",\n  \"component_name\": \"executeCommand\",\n  \"component_code\": \"public String executeCommand(String input) {\\n  Runtime rt = Runtime.getRuntime();\\n  Process pr = rt.exec(\\\"/bin/sh -c \\\" + input);\\n  return IOUtils.toString(pr.getInputStream());\\n}\",\n  \"component_description\": \"Java method executing shell commands\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Command Injection\",\n      \"cve_score\": 9.3,\n      \"exploitation_methods\": [\n        \"Inject malicious commands via input\\nExecute arbitrary system commands\"\n      ],\n      \"developer_fixes\": [\n        \"Use parameterized commands\",\n        \"Implement command allow-listing\"\n      ]\n    },\n    {\n      \"vul_type\": \"Improper Input Validation\",\n      \"cve_score\": 8.1,\n      \"exploitation_methods\": [\n        \"Chain commands with ; or &&\\nExecute multiple malicious commands\"\n      ],\n      \"developer_fixes\": [\n        \"Validate input against whitelist\",\n        \"Use ProcessBuilder with separate args\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"EmailService\",\n  \"component_code\": \"class EmailService {\\n  def sendEmail(to: String, subject: String, body: String): Unit = {\\n    println(s\\\"Sending email to: $to\\\\nSubject: $subject\\\\nBody: $body\\\")\\n  }\\n}\",\n  \"component_description\": \"Scala class for sending emails (simulated by printing to console).\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"updateUserBalance\",\n  \"component_code\": \"CREATE PROCEDURE updateUserBalance(IN uid VARCHAR(50), IN new_balance DECIMAL(10,2))\\nBEGIN\\n  SET @q = CONCAT('UPDATE Users SET balance = ', new_balance, ' WHERE id = ', uid);\\n  PREPARE stmt FROM @q;\\n  EXECUTE stmt;\\n  DEALLOCATE PREPARE stmt;\\nEND;\",\n  \"component_description\": \"SQL stored procedure updating user balance using dynamic query building.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 8.7,\n      \"exploitation_methods\": [\n        \"Inject payloads via uid to alter other users\\u2019 balances\",\n        \"Inject '; DROP TABLE Users -- to destroy data\"\n      ],\n      \"developer_fixes\": [\n        \"Use proper prepared statements without dynamic concatenation\",\n        \"Strictly validate numeric inputs for balance updates\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"logUserAction\",\n  \"component_code\": \"CREATE PROCEDURE logUserAction(IN uid INT, IN message TEXT)\\nBEGIN\\n  INSERT INTO logs(user_id, entry) VALUES(uid, message);\\nEND;\",\n  \"component_description\": \"SQL procedure inserting logs into a table.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"logUserAction\",\n  \"component_code\": \"CREATE PROCEDURE logUserAction(IN uid INT, IN message TEXT)\\nBEGIN\\n  INSERT INTO logs(user_id, entry) VALUES(uid, message);\\nEND;\",\n  \"component_description\": \"SQL procedure inserting logs into a table.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"SimpleNotifier\",\n  \"component_code\": \"public class SimpleNotifier {\\n  public void notifyUser(String user, String message) {\\n    System.out.println(\\\"Notify \\\" + user + \\\" -> \\\" + message);\\n  }\\n}\",\n  \"component_description\": \"Java class for sending user notifications.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"SimpleNotifier\",\n  \"component_code\": \"public class SimpleNotifier {\\n  public void notifyUser(String user, String message) {\\n    System.out.println(\\\"Notify \\\" + user + \\\" -> \\\" + message);\\n  }\\n}\",\n  \"component_description\": \"Java class for sending user notifications.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"SessionInfo\",\n  \"component_code\": \"interface SessionInfo {\\n  sessionId: string;\\n  userId: number;\\n  issuedAt: number;\\n}\",\n  \"component_description\": \"TypeScript interface representing session metadata.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"SessionInfo\",\n  \"component_code\": \"interface SessionInfo {\\n  sessionId: string;\\n  userId: number;\\n  issuedAt: number;\\n}\",\n  \"component_description\": \"TypeScript interface representing session metadata.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"OrderEntry\",\n  \"component_code\": \"interface OrderEntry {\\n  id: number;\\n  description: string;\\n  price: number;\\n}\",\n  \"component_description\": \"TypeScript interface modeling an order entry.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"OrderEntry\",\n  \"component_code\": \"interface OrderEntry {\\n  id: number;\\n  description: string;\\n  price: number;\\n}\",\n  \"component_description\": \"TypeScript interface modeling an order entry.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"SecureLogger\",\n  \"component_code\": \"#include <iostream>\\n#include <fstream>\\n#include <string>\\n\\nclass SecureLogger {\\nprivate:\\n    std::ofstream logfile;\\n\\npublic:\\n    SecureLogger(const std::string& filename) {\\n        logfile.open(filename, std::ios::app);\\n    }\\n\\n    void log(const std::string& userInput) {\\n        logfile << userInput << std::endl;\\n    }\\n\\n    ~SecureLogger() {\\n        if (logfile.is_open()) {\\n            logfile.close();\\n        }\\n    }\\n};\",\n  \"component_description\": \"C++ class for logging user inputs directly into a log file without sanitization.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Address\",\n  \"component_code\": \"<?php\\nclass Address {\\n    public $street;\\n    public $city;\\n    public $zipcode;\\n\\n    function __construct($street, $city, $zipcode) {\\n        $this->street = $street;\\n        $this->city = $city;\\n        $this->zipcode = $zipcode;\\n    }\\n}\",\n  \"component_description\": \"PHP class to model an address with street, city, and zipcode fields.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"ReflectXSS\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/search', (req, res) => {\\n  const query = req.query.q;\\n  res.send(`<h1>Search Results for: ${query}</h1>`);\\n});\",\n  \"component_description\": \"Node.js server reflecting user input directly into HTML.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"ReflectXSS\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/search', (req, res) => {\\n  const query = req.query.q;\\n  res.send(`<h1>Search Results for: ${query}</h1>`);\\n});\",\n  \"component_description\": \"Node.js server reflecting user input directly into HTML.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Reflected XSS\",\n      \"cve_score\": 8.6,\n      \"exploitation_methods\": [\n        \"Inject <script> tags to run arbitrary scripts.\",\n        \"Steal session cookies or deface the site.\"\n      ],\n      \"developer_fixes\": [\n        \"Escape user inputs before injecting into HTML.\",\n        \"Use libraries or frameworks that auto-escape output.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"UserManager\",\n  \"component_code\": \"import sqlite3\\n\\nclass UserManager:\\n    def __init__(self, db_path):\\n        self.db_path = db_path\\n\\n    def create_user(self, username, password):\\n        conn = sqlite3.connect(self.db_path)\\n        cursor = conn.cursor()\\n        cursor.execute(f\\\"INSERT INTO users (username, password) VALUES ('{username}', '{password}')\\\")\\n        conn.commit()\\n        conn.close()\\n\\n    def authenticate_user(self, username, password):\\n        conn = sqlite3.connect(self.db_path)\\n        cursor = conn.cursor()\\n        cursor.execute(f\\\"SELECT * FROM users WHERE username = '{username}' AND password = '{password}'\\\")\\n        user = cursor.fetchone()\\n        conn.close()\\n        return user is not None\",\n  \"component_description\": \"Python class for creating and authenticating users using raw SQL string formatting.\"\n}", "completion": "{\n  \"component_type\": \"SCHEMA_DEFINITION\",\n  \"component_name\": \"BookStore\",\n  \"component_code\": \"CREATE TABLE Books (\\n    id INT PRIMARY KEY,\\n    title VARCHAR(255) NOT NULL,\\n    author VARCHAR(255),\\n    price DECIMAL(10,2),\\n    available BOOLEAN DEFAULT TRUE\\n);\",\n  \"component_description\": \"SQL schema for a simple bookstore inventory.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"logActivity\",\n  \"component_code\": \"CREATE PROCEDURE logActivity(IN userId INT, IN action TEXT)\\nBEGIN\\n  INSERT INTO activity_logs(user_id, action, log_time) VALUES (userId, action, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure logging user activities into database.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"logActivity\",\n  \"component_code\": \"CREATE PROCEDURE logActivity(IN userId INT, IN action TEXT)\\nBEGIN\\n  INSERT INTO activity_logs(user_id, action, log_time) VALUES (userId, action, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure logging user activities into database.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"unsafe_open\",\n  \"component_code\": \"def unsafe_open(path):\\n    return open(path, 'r').read()\",\n  \"component_description\": \"Python function opening a file based on arbitrary user input.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"unsafe_open\",\n  \"component_code\": \"def unsafe_open(path):\\n    return open(path, 'r').read()\",\n  \"component_description\": \"Python function opening a file based on arbitrary user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.5,\n      \"exploitation_methods\": [\n        \"Input ../../etc/passwd to read sensitive system files.\",\n        \"Access protected directories by manipulating file paths.\"\n      ],\n      \"developer_fixes\": [\n        \"Restrict allowed paths to a specific safe directory.\",\n        \"Normalize and validate user-supplied paths.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EvalInput\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/calc', (req, res) => {\\n  const expr = req.query.expr;\\n  res.send(eval(expr));\\n});\",\n  \"component_description\": \"Express route evaluating user-supplied JavaScript expressions.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EvalInput\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/calc', (req, res) => {\\n  const expr = req.query.expr;\\n  res.send(eval(expr));\\n});\",\n  \"component_description\": \"Express route evaluating user-supplied JavaScript expressions.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Remote Code Execution\",\n      \"cve_score\": 9.8,\n      \"exploitation_methods\": [\n        \"Input arbitrary JavaScript code for server-side execution.\",\n        \"Access server internals, file system, or launch attacks.\"\n      ],\n      \"developer_fixes\": [\n        \"Never use eval on user inputs.\",\n        \"Use safe evaluation libraries or strict expression parsers.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"SessionTracker\",\n  \"component_code\": \"public class SessionTracker {\\n  public void track(String sessionId) {\\n    System.out.println(\\\"Session ID: \\\" + sessionId);\\n  }\\n}\",\n  \"component_description\": \"Java class tracking user session IDs.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"SessionTracker\",\n  \"component_code\": \"public class SessionTracker {\\n  public void track(String sessionId) {\\n    System.out.println(\\\"Session ID: \\\" + sessionId);\\n  }\\n}\",\n  \"component_description\": \"Java class tracking user session IDs.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeDelete\",\n  \"component_code\": \"<?php\\n$file = $_GET['file'];\\nunlink($file);\",\n  \"component_description\": \"PHP code deleting files based on user input without validation.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeDelete\",\n  \"component_code\": \"<?php\\n$file = $_GET['file'];\\nunlink($file);\",\n  \"component_description\": \"PHP code deleting files based on user input without validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Arbitrary File Deletion\",\n      \"cve_score\": 8.8,\n      \"exploitation_methods\": [\n        \"Delete system files using path traversal.\",\n        \"Remove critical application files remotely.\"\n      ],\n      \"developer_fixes\": [\n        \"Restrict deletion to a safe directory.\",\n        \"Validate and sanitize file paths.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"AccountManager\",\n  \"component_code\": \"using System;\\nusing System.Data.SqlClient;\\n\\npublic class AccountManager {\\n    private string connStr;\\n\\n    public AccountManager(string conn) {\\n        connStr = conn;\\n    }\\n\\n    public void CreateAccount(string username, string password) {\\n        var query = $\\\"INSERT INTO Accounts (Username, Password) VALUES ('{username}', '{password}')\\\";\\n        using (var conn = new SqlConnection(connStr)) {\\n            conn.Open();\\n            var cmd = new SqlCommand(query, conn);\\n            cmd.ExecuteNonQuery();\\n        }\\n    }\\n\\n    public bool Authenticate(string username, string password) {\\n        var query = $\\\"SELECT COUNT(*) FROM Accounts WHERE Username='{username}' AND Password='{password}'\\\";\\n        using (var conn = new SqlConnection(connStr)) {\\n            conn.Open();\\n            var cmd = new SqlCommand(query, conn);\\n            int count = (int)cmd.ExecuteScalar();\\n            return count > 0;\\n        }\\n    }\\n}\",\n  \"component_description\": \"C# class handling user account creation and authentication using raw SQL.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"AccountManager\",\n  \"component_code\": \"using System;\\nusing System.Data.SqlClient;\\n\\npublic class AccountManager {\\n    private string connStr;\\n\\n    public AccountManager(string conn) {\\n        connStr = conn;\\n    }\\n\\n    public void CreateAccount(string username, string password) {\\n        var query = $\\\"INSERT INTO Accounts (Username, Password) VALUES ('{username}', '{password}')\\\";\\n        using (var conn = new SqlConnection(connStr)) {\\n            conn.Open();\\n            var cmd = new SqlCommand(query, conn);\\n            cmd.ExecuteNonQuery();\\n        }\\n    }\\n\\n    public bool Authenticate(string username, string password) {\\n        var query = $\\\"SELECT COUNT(*) FROM Accounts WHERE Username='{username}' AND Password='{password}'\\\";\\n        using (var conn = new SqlConnection(connStr)) {\\n            conn.Open();\\n            var cmd = new SqlCommand(query, conn);\\n            int count = (int)cmd.ExecuteScalar();\\n            return count > 0;\\n        }\\n    }\\n}\",\n  \"component_description\": \"C# class handling user account creation and authentication using raw SQL.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 9.5,\n      \"exploitation_methods\": [\n        \"Inject username ' OR '1'='1 to bypass authentication\",\n        \"Inject SQL to create admin accounts\",\n        \"Inject DROP TABLE payloads\"\n      ],\n      \"developer_fixes\": [\n        \"Use parameterized queries\",\n        \"Sanitize all input data strictly\"\n      ]\n    },\n    {\n      \"vul_type\": \"Insecure Password Storage\",\n      \"cve_score\": 8.4,\n      \"exploitation_methods\": [\n        \"Dump database to get raw passwords\",\n        \"Crack weak plaintext passwords easily\"\n      ],\n      \"developer_fixes\": [\n        \"Hash passwords using strong algorithms like bcrypt or Argon2\",\n        \"Enforce strong password policies\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"Notification\",\n  \"component_code\": \"interface Notification {\\n  id: number;\\n  message: string;\\n  timestamp: Date;\\n}\",\n  \"component_description\": \"TypeScript interface defining a structure for notifications.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleUploader\",\n  \"component_code\": \"<?php\\nif ($_FILES['file']['error'] == UPLOAD_ERR_OK) {\\n    $upload_dir = 'uploads/';\\n    $filename = basename($_FILES['file']['name']);\\n    move_uploaded_file($_FILES['file']['tmp_name'], $upload_dir . $filename);\\n    echo \\\"Uploaded!\\\";\\n} else {\\n    echo \\\"Error uploading.\\\";\\n}\",\n  \"component_description\": \"Simple PHP file upload script saving uploaded files to a server directory without validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Unrestricted File Upload\",\n      \"cve_score\": 9.4,\n      \"exploitation_methods\": [\n        \"Upload PHP web shells and execute arbitrary server-side code\",\n        \"Upload executable files disguised as images\"\n      ],\n      \"developer_fixes\": [\n        \"Allow only specific safe file types (e.g., jpg, png)\",\n        \"Store uploaded files outside the public web root\"\n      ]\n    },\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.5,\n      \"exploitation_methods\": [\n        \"Craft file names like ../../../../etc/passwd\",\n        \"Overwrite critical system files\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize file names strictly\",\n        \"Use random unique file names for uploads\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeLogin\",\n  \"component_code\": \"<?php\\n$user = $_POST['user'];\\n$pass = $_POST['pass'];\\n$query = \\\"SELECT * FROM accounts WHERE username='$user' AND password='$pass'\\\";\\nmysqli_query($conn, $query);\",\n  \"component_description\": \"PHP script processing login requests with raw SQL.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"UnsafeLogin\",\n  \"component_code\": \"<?php\\n$user = $_POST['user'];\\n$pass = $_POST['pass'];\\n$query = \\\"SELECT * FROM accounts WHERE username='$user' AND password='$pass'\\\";\\nmysqli_query($conn, $query);\",\n  \"component_description\": \"PHP script processing login requests with raw SQL.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 9.3,\n      \"exploitation_methods\": [\n        \"Input ' OR '1'='1 to bypass authentication.\",\n        \"Stacked queries to modify or delete data.\"\n      ],\n      \"developer_fixes\": [\n        \"Use parameterized queries (prepared statements).\",\n        \"Escape user input properly if absolutely necessary.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"TRIGGER_DEFINITION\",\n  \"component_name\": \"update_stock_trigger\",\n  \"component_code\": \"CREATE TRIGGER update_stock_trigger\\nAFTER INSERT ON Orders\\nFOR EACH ROW\\nBEGIN\\n  UPDATE Products SET stock = stock - NEW.quantity\\n  WHERE id = NEW.product_id;\\nEND;\",\n  \"component_description\": \"SQL trigger to automatically update product stock after a new order is inserted.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Customer\",\n  \"component_code\": \"struct Customer {\\n    id: u32,\\n    name: String,\\n    email: String,\\n    phone: Option<String>,\\n}\",\n  \"component_description\": \"Rust struct for customer records including optional phone number.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"SessionData\",\n  \"component_code\": \"interface SessionData {\\n  sessionId: string;\\n  userId: number;\\n  expiresAt: number;\\n}\",\n  \"component_description\": \"TypeScript interface for modeling user session metadata.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"SessionData\",\n  \"component_code\": \"interface SessionData {\\n  sessionId: string;\\n  userId: number;\\n  expiresAt: number;\\n}\",\n  \"component_description\": \"TypeScript interface for modeling user session metadata.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"update_user_balance\",\n  \"component_code\": \"CREATE PROCEDURE update_user_balance(user_id INT, amount DECIMAL)\\nBEGIN\\n  UPDATE accounts SET balance = balance + amount WHERE id = user_id;\\n  INSERT INTO transactions VALUES (user_id, amount, NOW());\\nEND\",\n  \"component_description\": \"MySQL stored procedure for balance updates\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"update_user_balance\",\n  \"component_code\": \"CREATE PROCEDURE update_user_balance(user_id INT, amount DECIMAL)\\nBEGIN\\n  UPDATE accounts SET balance = balance + amount WHERE id = user_id;\\n  INSERT INTO transactions VALUES (user_id, amount, NOW());\\nEND\",\n  \"component_description\": \"MySQL stored procedure for balance updates\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"SystemLogger\",\n  \"component_code\": \"public class SystemLogger {\\n  public void logEvent(String event) {\\n    System.out.println(\\\"Event Logged: \\\" + event);\\n  }\\n}\",\n  \"component_description\": \"Java class to log system events to console.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"SystemLogger\",\n  \"component_code\": \"public class SystemLogger {\\n  public void logEvent(String event) {\\n    System.out.println(\\\"Event Logged: \\\" + event);\\n  }\\n}\",\n  \"component_description\": \"Java class to log system events to console.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Product\",\n  \"component_code\": \"struct Product {\\n  int id;\\n  std::string name;\\n  double price;\\n};\",\n  \"component_description\": \"C++ struct for ecommerce product representation.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Product\",\n  \"component_code\": \"struct Product {\\n  int id;\\n  std::string name;\\n  double price;\\n};\",\n  \"component_description\": \"C++ struct for ecommerce product representation.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EvalRunner\",\n  \"component_code\": \"<?php\\n$code = $_GET['code'];\\neval($code);\",\n  \"component_description\": \"PHP script evaluating code from user input.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EvalRunner\",\n  \"component_code\": \"<?php\\n$code = $_GET['code'];\\neval($code);\",\n  \"component_description\": \"PHP script evaluating code from user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Remote Code Execution\",\n      \"cve_score\": 10.0,\n      \"exploitation_methods\": [\n        \"Input code to run shell commands (e.g., system('ls')).\",\n        \"Launch reverse shell using malicious payloads.\"\n      ],\n      \"developer_fixes\": [\n        \"Never use eval on untrusted inputs.\",\n        \"Use secure interpreters or avoid dynamic execution entirely.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"FileDownloadServer\",\n  \"component_code\": \"const express = require('express');\\nconst path = require('path');\\nconst app = express();\\n\\napp.get('/download', (req, res) => {\\n  const filename = req.query.filename;\\n  res.sendFile(path.join(__dirname, 'public', filename));\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Node.js server allowing users to download files based on query parameters without sanitization.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"FileDownloadServer\",\n  \"component_code\": \"const express = require('express');\\nconst path = require('path');\\nconst app = express();\\n\\napp.get('/download', (req, res) => {\\n  const filename = req.query.filename;\\n  res.sendFile(path.join(__dirname, 'public', filename));\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Node.js server allowing users to download files based on query parameters without sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.8,\n      \"exploitation_methods\": [\n        \"Request ../../../etc/passwd to access server files\",\n        \"Bypass intended file restrictions\"\n      ],\n      \"developer_fixes\": [\n        \"Normalize and strictly validate file paths\",\n        \"Restrict file downloads to known safe directories\"\n      ]\n    },\n    {\n      \"vul_type\": \"Information Disclosure\",\n      \"cve_score\": 7.5,\n      \"exploitation_methods\": [\n        \"Download server-side source code files\",\n        \"Leak sensitive data like API keys and configs\"\n      ],\n      \"developer_fixes\": [\n        \"Set strict rules on downloadable file types\",\n        \"Prevent exposure of internal application files\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"METHOD_DEFINITION\",\n  \"component_name\": \"save_comment\",\n  \"component_code\": \"def save_comment(username, comment)\\n  File.open(\\\"comments.txt\\\", \\\"a\\\") do |file|\\n    file.puts(\\\"#{username}: #{comment}\\\")\\n  end\\nend\",\n  \"component_description\": \"Ruby method that saves user comments into a text file without validation.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"ProfileImageUploader\",\n  \"component_code\": \"package main\\n\\nimport (\\n    \\\"fmt\\\"\\n    \\\"net/http\\\"\\n    \\\"os\\\"\\n)\\n\\nfunc uploadHandler(w http.ResponseWriter, r *http.Request) {\\n    r.ParseMultipartForm(10 << 20)\\n    file, handler, err := r.FormFile(\\\"uploadFile\\\")\\n    if err != nil {\\n        fmt.Println(\\\"Error Retrieving the File\\\")\\n        return\\n    }\\n    defer file.Close()\\n\\n    f, _ := os.Create(\\\"uploads/\\\" + handler.Filename)\\n    defer f.Close()\\n    _, _ = f.ReadFrom(file)\\n    fmt.Fprintf(w, \\\"File uploaded successfully: %s\\\", handler.Filename)\\n}\\n\\nfunc main() {\\n    os.MkdirAll(\\\"uploads\\\", os.ModePerm)\\n    http.HandleFunc(\\\"/upload\\\", uploadHandler)\\n    http.ListenAndServe(\\\":8080\\\", nil)\\n}\",\n  \"component_description\": \"Basic Go HTTP server allowing users to upload files to the server without proper validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Unrestricted File Upload\",\n      \"cve_score\": 9.1,\n      \"exploitation_methods\": [\n        \"Upload web shells disguised as images\",\n        \"Upload .exe or script files and trigger execution\"\n      ],\n      \"developer_fixes\": [\n        \"Restrict allowed file extensions (e.g., .jpg, .png)\",\n        \"Validate MIME type properly server-side\"\n      ]\n    },\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.5,\n      \"exploitation_methods\": [\n        \"Use crafted filename ../../../etc/passwd to overwrite/read sensitive files\",\n        \"Manipulate server filesystem structure\"\n      ],\n      \"developer_fixes\": [\n        \"Strip directory components from uploaded file names\",\n        \"Generate random safe filenames for storage\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"ApiResponse\",\n  \"component_code\": \"struct ApiResponse {\\n    status: String,\\n    message: String,\\n}\",\n  \"component_description\": \"Rust struct representing a basic API response structure.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"delete_file\",\n  \"component_code\": \"import os\\n\\ndef delete_file(filename):\\n    os.remove(\\\"uploads/\\\" + filename)\",\n  \"component_description\": \"Python function allowing file deletion based on user-supplied filename.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.5,\n      \"exploitation_methods\": [\n        \"Pass ../../etc/passwd as filename to delete system files\",\n        \"Delete arbitrary important application files\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize and validate filenames strictly\",\n        \"Restrict deletion to a whitelist of filenames\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Ticket\",\n  \"component_code\": \"interface Ticket {\\n  id: number;\\n  subject: string;\\n  status: string;\\n}\",\n  \"component_description\": \"TypeScript interface for support ticket structure.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Ticket\",\n  \"component_code\": \"interface Ticket {\\n  id: number;\\n  subject: string;\\n  status: string;\\n}\",\n  \"component_description\": \"TypeScript interface for support ticket structure.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"PasswordReset\",\n  \"component_code\": \"class PasswordReset {\\n  private $db;\\n\\n  public function __construct($db) {\\n    $this->db = $db;\\n  }\\n\\n  public function resetPassword($email) {\\n    $token = bin2hex(random_bytes(16));\\n    $this->db->query(\\\"UPDATE users SET reset_token='$token' WHERE email='$email'\\\");\\n    mail($email, \\\"Reset Password\\\", \\\"Token: $token\\\");\\n  }\\n}\",\n  \"component_description\": \"PHP class for password reset functionality\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"PasswordReset\",\n  \"component_code\": \"class PasswordReset {\\n  private $db;\\n\\n  public function __construct($db) {\\n    $this->db = $db;\\n  }\\n\\n  public function resetPassword($email) {\\n    $token = bin2hex(random_bytes(16));\\n    $this->db->query(\\\"UPDATE users SET reset_token='$token' WHERE email='$email'\\\");\\n    mail($email, \\\"Reset Password\\\", \\\"Token: $token\\\");\\n  }\\n}\",\n  \"component_description\": \"PHP class for password reset functionality\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 8.7,\n      \"exploitation_methods\": [\n        \"Inject malicious SQL via email parameter\\nTake over any account\"\n      ],\n      \"developer_fixes\": [\n        \"Use prepared statements\",\n        \"Implement parameter binding\"\n      ]\n    },\n    {\n      \"vul_type\": \"Weak Token Generation\",\n      \"cve_score\": 6.5,\n      \"exploitation_methods\": [\n        \"Brute-force 32-character hex token\"\n      ],\n      \"developer_fixes\": [\n        \"Use cryptographically secure tokens\",\n        \"Add rate limiting\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"redirectUser\",\n  \"component_code\": \"<?php\\nfunction redirectUser($url) {\\n    header(\\\"Location: \\\" . $url);\\n    exit();\\n}\\n?>\",\n  \"component_description\": \"PHP function redirecting users to a given URL.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"redirectUser\",\n  \"component_code\": \"<?php\\nfunction redirectUser($url) {\\n    header(\\\"Location: \\\" . $url);\\n    exit();\\n}\\n?>\",\n  \"component_description\": \"PHP function redirecting users to a given URL.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Open Redirect\",\n      \"cve_score\": 7.5,\n      \"exploitation_methods\": [\n        \"Send phishing links by providing malicious URLs\",\n        \"Redirect users to malware sites\",\n        \"Bypass security mechanisms relying on host checks\"\n      ],\n      \"developer_fixes\": [\n        \"Validate allowed URLs against a whitelist\",\n        \"Reject or sanitize untrusted user input in redirects\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"LoginRequest\",\n  \"component_code\": \"interface LoginRequest {\\n  username: string;\\n  password: string;\\n}\",\n  \"component_description\": \"TypeScript interface representing a user login request payload.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"LoginRequest\",\n  \"component_code\": \"interface LoginRequest {\\n  username: string;\\n  password: string;\\n}\",\n  \"component_description\": \"TypeScript interface representing a user login request payload.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"deleteUser\",\n  \"component_code\": \"CREATE PROCEDURE deleteUser(IN userId VARCHAR(50))\\nBEGIN\\n  SET @query = CONCAT('DELETE FROM Users WHERE id = ', userId);\\n  PREPARE stmt FROM @query;\\n  EXECUTE stmt;\\n  DEALLOCATE PREPARE stmt;\\nEND;\",\n  \"component_description\": \"SQL stored procedure for deleting a user based on user ID, dynamically building queries.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Coordinates\",\n  \"component_code\": \"case class Coordinates(lat: Double, lon: Double)\",\n  \"component_description\": \"Scala case class representing geographical coordinates.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"CustomerProfile\",\n  \"component_code\": \"case class CustomerProfile(id: Int, name: String, email: String)\",\n  \"component_description\": \"Scala case class representing customer information.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"CustomerProfile\",\n  \"component_code\": \"case class CustomerProfile(id: Int, name: String, email: String)\",\n  \"component_description\": \"Scala case class representing customer information.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"BlogPostManager\",\n  \"component_code\": \"<?php\\nif (isset($_POST['title']) && isset($_POST['body'])) {\\n    $title = $_POST['title'];\\n    $body = $_POST['body'];\\n    file_put_contents(\\\"posts/\\\" . $title . \\\".txt\\\", $body);\\n    echo \\\"Post saved.\\\";\\n}\\n\\nif (isset($_GET['title'])) {\\n    $title = $_GET['title'];\\n    echo file_get_contents(\\\"posts/\\\" . $title . \\\".txt\\\");\\n}\",\n  \"component_description\": \"PHP script saving and serving blog posts without input validation.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"BlogPostManager\",\n  \"component_code\": \"<?php\\nif (isset($_POST['title']) && isset($_POST['body'])) {\\n    $title = $_POST['title'];\\n    $body = $_POST['body'];\\n    file_put_contents(\\\"posts/\\\" . $title . \\\".txt\\\", $body);\\n    echo \\\"Post saved.\\\";\\n}\\n\\nif (isset($_GET['title'])) {\\n    $title = $_GET['title'];\\n    echo file_get_contents(\\\"posts/\\\" . $title . \\\".txt\\\");\\n}\",\n  \"component_description\": \"PHP script saving and serving blog posts without input validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Stored XSS\",\n      \"cve_score\": 9.2,\n      \"exploitation_methods\": [\n        \"Inject <script> tags into blog post body.\",\n        \"Steal user cookies when blog post is viewed.\"\n      ],\n      \"developer_fixes\": [\n        \"Escape HTML output before rendering.\",\n        \"Sanitize incoming text content.\"\n      ]\n    },\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.5,\n      \"exploitation_methods\": [\n        \"Manipulate 'title' param to access server config files.\",\n        \"Download unauthorized sensitive files from server.\"\n      ],\n      \"developer_fixes\": [\n        \"Whitelist valid filenames only.\",\n        \"Strip '../' sequences from filenames.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"PasswordManager\",\n  \"component_code\": \"#include <iostream>\\n#include <map>\\n#include <string>\\n\\nclass PasswordManager {\\nprivate:\\n    std::map<std::string, std::string> credentials;\\n\\npublic:\\n    void storePassword(std::string user, std::string password) {\\n        credentials[user] = password;\\n    }\\n\\n    bool verifyLogin(std::string user, std::string password) {\\n        if (credentials.find(user) != credentials.end()) {\\n            return credentials[user] == password;\\n        }\\n        return false;\\n    }\\n\\n    void printAllUsers() {\\n        for (auto& pair : credentials) {\\n            std::cout << \\\"User: \\\" << pair.first << \\\", Password: \\\" << pair.second << std::endl;\\n        }\\n    }\\n};\",\n  \"component_description\": \"C++ class managing user credentials and performing basic authentication.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"PasswordManager\",\n  \"component_code\": \"#include <iostream>\\n#include <map>\\n#include <string>\\n\\nclass PasswordManager {\\nprivate:\\n    std::map<std::string, std::string> credentials;\\n\\npublic:\\n    void storePassword(std::string user, std::string password) {\\n        credentials[user] = password;\\n    }\\n\\n    bool verifyLogin(std::string user, std::string password) {\\n        if (credentials.find(user) != credentials.end()) {\\n            return credentials[user] == password;\\n        }\\n        return false;\\n    }\\n\\n    void printAllUsers() {\\n        for (auto& pair : credentials) {\\n            std::cout << \\\"User: \\\" << pair.first << \\\", Password: \\\" << pair.second << std::endl;\\n        }\\n    }\\n};\",\n  \"component_description\": \"C++ class managing user credentials and performing basic authentication.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Sensitive Information Exposure\",\n      \"cve_score\": 8.3,\n      \"exploitation_methods\": [\n        \"Dump memory or invoke printAllUsers() to leak plaintext credentials\",\n        \"Exploit lack of encryption to steal sensitive data\",\n        \"Trigger debug functions to reveal password content\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid storing passwords in plaintext\",\n        \"Encrypt or hash passwords using secure libraries\",\n        \"Remove any logging or debug output of sensitive info\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Blog\",\n  \"component_code\": \"case class Blog(title: String, content: String, author: String)\",\n  \"component_description\": \"Scala case class representing a blog entry.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Blog\",\n  \"component_code\": \"case class Blog(title: String, content: String, author: String)\",\n  \"component_description\": \"Scala case class representing a blog entry.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"generateReport\",\n  \"component_code\": \"async function generateReport(userId, filters) {\\n  // Validate user access\\n  const user = await db.users.findOne({ id: userId });\\n  if (!user.hasReportAccess) {\\n    throw new Error('Unauthorized');\\n  }\\n  \\n  // Build query from filters\\n  let query = 'SELECT * FROM transactions';\\n  const conditions = [];\\n  \\n  if (filters.startDate) {\\n    conditions.push(`date >= '${filters.startDate}'`);\\n  }\\n  if (filters.endDate) {\\n    conditions.push(`date <= '${filters.endDate}'`);\\n  }\\n  if (filters.category) {\\n    conditions.push(`category = '${filters.category}'`);\\n  }\\n  \\n  if (conditions.length > 0) {\\n    query += ' WHERE ' + conditions.join(' AND ');\\n  }\\n  \\n  // Execute and format\\n  const results = await db.raw(query);\\n  return {\\n    meta: { generatedAt: new Date() },\\n    data: results\\n  };\\n}\",\n  \"component_description\": \"Node.js report generator with SQL query building.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"generateReport\",\n  \"component_code\": \"async function generateReport(userId, filters) {\\n  // Validate user access\\n  const user = await db.users.findOne({ id: userId });\\n  if (!user.hasReportAccess) {\\n    throw new Error('Unauthorized');\\n  }\\n  \\n  // Build query from filters\\n  let query = 'SELECT * FROM transactions';\\n  const conditions = [];\\n  \\n  if (filters.startDate) {\\n    conditions.push(`date >= '${filters.startDate}'`);\\n  }\\n  if (filters.endDate) {\\n    conditions.push(`date <= '${filters.endDate}'`);\\n  }\\n  if (filters.category) {\\n    conditions.push(`category = '${filters.category}'`);\\n  }\\n  \\n  if (conditions.length > 0) {\\n    query += ' WHERE ' + conditions.join(' AND ');\\n  }\\n  \\n  // Execute and format\\n  const results = await db.raw(query);\\n  return {\\n    meta: { generatedAt: new Date() },\\n    data: results\\n  };\\n}\",\n  \"component_description\": \"Node.js report generator with SQL query building.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 8.9,\n      \"exploitation_methods\": [\n        \"1. Inject malicious SQL via filters.category\\n2. Exfiltrate all user data\",\n        \"1. Terminate query with '; DELETE FROM transactions--'\"\n      ],\n      \"developer_fixes\": [\n        \"Use parameterized queries or ORM methods\",\n        \"Validate all filter inputs with allowlists\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"EmailDispatcher\",\n  \"component_code\": \"public class EmailDispatcher {\\n  public void dispatch(String recipient, String content) {\\n    System.out.println(\\\"Email sent to \\\" + recipient + \\\" with content: \\\" + content);\\n  }\\n}\",\n  \"component_description\": \"Java class simulating email dispatching.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"EmailDispatcher\",\n  \"component_code\": \"public class EmailDispatcher {\\n  public void dispatch(String recipient, String content) {\\n    System.out.println(\\\"Email sent to \\\" + recipient + \\\" with content: \\\" + content);\\n  }\\n}\",\n  \"component_description\": \"Java class simulating email dispatching.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"LoginAttempt\",\n  \"component_code\": \"struct LoginAttempt {\\n  int attemptId;\\n  std::string username;\\n  std::string timestamp;\\n};\",\n  \"component_description\": \"C++ struct representing a user login attempt.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"LoginAttempt\",\n  \"component_code\": \"struct LoginAttempt {\\n  int attemptId;\\n  std::string username;\\n  std::string timestamp;\\n};\",\n  \"component_description\": \"C++ struct representing a user login attempt.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"NotificationService\",\n  \"component_code\": \"public class NotificationService {\\n  public void sendNotification(String user, String message) {\\n    System.out.println(\\\"Notify \\\" + user + \\\" : \\\" + message);\\n  }\\n}\",\n  \"component_description\": \"Java class for sending user notifications.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"NotificationService\",\n  \"component_code\": \"public class NotificationService {\\n  public void sendNotification(String user, String message) {\\n    System.out.println(\\\"Notify \\\" + user + \\\" : \\\" + message);\\n  }\\n}\",\n  \"component_description\": \"Java class for sending user notifications.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Transaction\",\n  \"component_code\": \"struct Transaction {\\n    id: u32,\\n    amount: f64,\\n    timestamp: u64,\\n}\",\n  \"component_description\": \"Rust struct representing a financial transaction.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"DocumentUploadService\",\n  \"component_code\": \"const express = require('express');\\nconst multer = require('multer');\\nconst app = express();\\n\\nconst upload = multer({ dest: 'uploads/' });\\n\\napp.post('/upload', upload.single('document'), (req, res) => {\\n    res.send('File uploaded successfully');\\n});\\n\\napp.get('/view', (req, res) => {\\n    const filename = req.query.filename;\\n    res.sendFile(__dirname + '/uploads/' + filename);\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Node.js application handling document uploads and serving uploaded files without validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.7,\n      \"exploitation_methods\": [\n        \"Request ../../../etc/passwd through filename parameter\",\n        \"Download arbitrary server files\"\n      ],\n      \"developer_fixes\": [\n        \"Normalize and restrict file paths strictly\",\n        \"Validate uploaded filenames carefully\"\n      ]\n    },\n    {\n      \"vul_type\": \"Unrestricted File Upload\",\n      \"cve_score\": 9.3,\n      \"exploitation_methods\": [\n        \"Upload .exe, .php, .jsp files for server-side execution\",\n        \"Trigger remote code execution attacks\"\n      ],\n      \"developer_fixes\": [\n        \"Restrict accepted MIME types and file extensions\",\n        \"Scan uploaded files for malicious content\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"delete_user\",\n  \"component_code\": \"def delete_user(user_id):\\n    conn = sqlite3.connect('app.db')\\n    cursor = conn.cursor()\\n    cursor.execute(f\\\"DELETE FROM users WHERE id = {user_id}\\\")\\n    conn.commit()\\n    conn.close()\",\n  \"component_description\": \"Python function deleting a user from database without input validation.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"delete_user\",\n  \"component_code\": \"def delete_user(user_id):\\n    conn = sqlite3.connect('app.db')\\n    cursor = conn.cursor()\\n    cursor.execute(f\\\"DELETE FROM users WHERE id = {user_id}\\\")\\n    conn.commit()\\n    conn.close()\",\n  \"component_description\": \"Python function deleting a user from database without input validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 9.0,\n      \"exploitation_methods\": [\n        \"Input malicious SQL in user_id to drop tables.\",\n        \"Bypass intended user deletion and affect multiple records.\"\n      ],\n      \"developer_fixes\": [\n        \"Use parameterized queries to prevent injections.\",\n        \"Validate that user_id is strictly numeric.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"MODULE_DEFINITION\",\n  \"component_code\": \"const crypto = require('crypto');\\n\\nmodule.exports = {\\n    encrypt: (text, key) => {\\n        const iv = crypto.randomBytes(16);\\n        const cipher = crypto.createCipheriv('aes-256-cbc', \\n            Buffer.from(key), iv);\\n        let encrypted = cipher.update(text);\\n        encrypted = Buffer.concat([encrypted, cipher.final()]);\\n        return iv.toString('hex') + ':' + encrypted.toString('hex');\\n    },\\n    \\n    decrypt: (text, key) => {\\n        const parts = text.split(':');\\n        const iv = Buffer.from(parts.shift(), 'hex');\\n        const encrypted = Buffer.from(parts.join(':'), 'hex');\\n        const decipher = crypto.createDecipheriv('aes-256-cbc', \\n            Buffer.from(key), iv);\\n        let decrypted = decipher.update(encrypted);\\n        decrypted = Buffer.concat([decrypted, decipher.final()]);\\n        return decrypted.toString();\\n    },\\n    \\n    hashPassword: (password) => {\\n        return crypto\\n            .createHash('md5')\\n            .update(password)\\n            .digest('hex');\\n    }\\n};\",\n  \"component_name\": \"cryptoUtils\",\n  \"component_description\": \"Node.js module providing cryptographic operations.\"\n}", "completion": "{\n  \"component_type\": \"MODULE_DEFINITION\",\n  \"component_code\": \"const crypto = require('crypto');\\n\\nmodule.exports = {\\n    encrypt: (text, key) => {\\n        const iv = crypto.randomBytes(16);\\n        const cipher = crypto.createCipheriv('aes-256-cbc', \\n            Buffer.from(key), iv);\\n        let encrypted = cipher.update(text);\\n        encrypted = Buffer.concat([encrypted, cipher.final()]);\\n        return iv.toString('hex') + ':' + encrypted.toString('hex');\\n    },\\n    \\n    decrypt: (text, key) => {\\n        const parts = text.split(':');\\n        const iv = Buffer.from(parts.shift(), 'hex');\\n        const encrypted = Buffer.from(parts.join(':'), 'hex');\\n        const decipher = crypto.createDecipheriv('aes-256-cbc', \\n            Buffer.from(key), iv);\\n        let decrypted = decipher.update(encrypted);\\n        decrypted = Buffer.concat([decrypted, decipher.final()]);\\n        return decrypted.toString();\\n    },\\n    \\n    hashPassword: (password) => {\\n        return crypto\\n            .createHash('md5')\\n            .update(password)\\n            .digest('hex');\\n    }\\n};\",\n  \"component_name\": \"cryptoUtils\",\n  \"component_description\": \"Node.js module providing cryptographic operations.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Weak Cryptographic Hash\",\n      \"cve_score\": 7.4,\n      \"exploitation_methods\": [\n        \"1. Crack MD5 hashes using rainbow tables\",\n        \"2. Perform collision attacks to bypass authentication\"\n      ],\n      \"developer_fixes\": [\n        \"Replace MD5 with bcrypt or Argon2 for password hashing\",\n        \"Add salt to hashPassword function\"\n      ]\n    },\n    {\n      \"vul_type\": \"Hardcoded Encryption Key Risk\",\n      \"cve_score\": 6.8,\n      \"exploitation_methods\": [\n        \"1. Discover key in source code or memory dumps\",\n        \"2. Decrypt all application secrets\"\n      ],\n      \"developer_fixes\": [\n        \"Implement proper key management system\",\n        \"Use environment variables for encryption keys\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"EventLogger\",\n  \"component_code\": \"public class EventLogger {\\n  public void log(String event) {\\n    System.out.println(\\\"Event: \\\" + event);\\n  }\\n}\",\n  \"component_description\": \"Java class for logging application events.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"SimpleAuthenticator\",\n  \"component_code\": \"public class SimpleAuthenticator {\\n  public void authenticate(String username) {\\n    System.out.println(\\\"Authenticating: \\\" + username);\\n  }\\n}\",\n  \"component_description\": \"Java class simulating a simple authentication process.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"CustomerFeedback\",\n  \"component_code\": \"<?php\\nclass CustomerFeedback {\\n  public $customerName;\\n  public $rating;\\n  public $comments;\\n\\n  function __construct($customerName, $rating, $comments) {\\n    $this->customerName = $customerName;\\n    $this->rating = $rating;\\n    $this->comments = $comments;\\n  }\\n}\",\n  \"component_description\": \"PHP class for storing customer feedback details including rating and comments.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"CustomerFeedback\",\n  \"component_code\": \"<?php\\nclass CustomerFeedback {\\n  public $customerName;\\n  public $rating;\\n  public $comments;\\n\\n  function __construct($customerName, $rating, $comments) {\\n    $this->customerName = $customerName;\\n    $this->rating = $rating;\\n    $this->comments = $comments;\\n  }\\n}\",\n  \"component_description\": \"PHP class for storing customer feedback details including rating and comments.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"PasswordManager\",\n  \"component_code\": \"class PasswordManager {\\n  public void store(String password) {\\n    System.out.println(\\\"Password saved: \\\" + password);\\n  }\\n}\",\n  \"component_description\": \"Java class that logs raw passwords to console for debugging.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"PasswordManager\",\n  \"component_code\": \"class PasswordManager {\\n  public void store(String password) {\\n    System.out.println(\\\"Password saved: \\\" + password);\\n  }\\n}\",\n  \"component_description\": \"Java class that logs raw passwords to console for debugging.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Sensitive Data Exposure\",\n      \"cve_score\": 7.9,\n      \"exploitation_methods\": [\n        \"Console logs may be accessed by unauthorized users.\",\n        \"Passwords could be retained in logs or monitoring tools.\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid printing passwords or sensitive data.\",\n        \"Use secure logging with masking or suppression.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"dangerous_exec\",\n  \"component_code\": \"import subprocess\\n\\ndef dangerous_exec(cmd):\\n    subprocess.call(cmd, shell=True)\",\n  \"component_description\": \"Python function executing arbitrary shell commands using subprocess.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"dangerous_exec\",\n  \"component_code\": \"import subprocess\\n\\ndef dangerous_exec(cmd):\\n    subprocess.call(cmd, shell=True)\",\n  \"component_description\": \"Python function executing arbitrary shell commands using subprocess.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Command Injection\",\n      \"cve_score\": 9.5,\n      \"exploitation_methods\": [\n        \"Chain additional commands using &&, ||, or ;.\",\n        \"Execute arbitrary payloads leading to server compromise.\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid using shell=True unless absolutely necessary.\",\n        \"Use list arguments instead of string commands and sanitize input.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"delete_user_account\",\n  \"component_code\": \"import sqlite3\\n\\ndef delete_user_account(user_id):\\n    conn = sqlite3.connect('app.db')\\n    cursor = conn.cursor()\\n    query = f\\\"DELETE FROM users WHERE id = {user_id}\\\"\\n    cursor.execute(query)\\n    conn.commit()\\n    conn.close()\",\n  \"component_description\": \"Python function that deletes a user account based on provided user ID.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"delete_user_account\",\n  \"component_code\": \"import sqlite3\\n\\ndef delete_user_account(user_id):\\n    conn = sqlite3.connect('app.db')\\n    cursor = conn.cursor()\\n    query = f\\\"DELETE FROM users WHERE id = {user_id}\\\"\\n    cursor.execute(query)\\n    conn.commit()\\n    conn.close()\",\n  \"component_description\": \"Python function that deletes a user account based on provided user ID.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 8.9,\n      \"exploitation_methods\": [\n        \"Inject malicious SQL via user_id (e.g., 1 OR 1=1)\",\n        \"Perform mass deletions or modify unauthorized records\"\n      ],\n      \"developer_fixes\": [\n        \"Use parameterized queries to safely bind variables\",\n        \"Validate that user_id is an integer\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EchoMessageExpress\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/message', (req, res) => {\\n  res.send(req.query.msg);\\n});\",\n  \"component_description\": \"Node.js route echoing back user messages directly without sanitization.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EchoMessageExpress\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/message', (req, res) => {\\n  res.send(req.query.msg);\\n});\",\n  \"component_description\": \"Node.js route echoing back user messages directly without sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Reflected XSS\",\n      \"cve_score\": 8.7,\n      \"exploitation_methods\": [\n        \"Inject JavaScript via the msg query parameter.\",\n        \"Steal session cookies from victims.\"\n      ],\n      \"developer_fixes\": [\n        \"Escape HTML special characters in user input.\",\n        \"Use safe rendering libraries that sanitize output automatically.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"UserSettings\",\n  \"component_code\": \"interface UserSettings {\\n  theme: string;\\n  notifications: boolean;\\n  language: string;\\n}\",\n  \"component_description\": \"TypeScript interface representing a user's configurable settings.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"UserSettings\",\n  \"component_code\": \"interface UserSettings {\\n  theme: string;\\n  notifications: boolean;\\n  language: string;\\n}\",\n  \"component_description\": \"TypeScript interface representing a user's configurable settings.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"WelcomeBanner\",\n  \"component_code\": \"public class WelcomeBanner {\\n  public void show(String name) {\\n    System.out.println(\\\"Welcome, \\\" + name);\\n  }\\n}\",\n  \"component_description\": \"Java class for printing a welcome banner.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"WelcomeBanner\",\n  \"component_code\": \"public class WelcomeBanner {\\n  public void show(String name) {\\n    System.out.println(\\\"Welcome, \\\" + name);\\n  }\\n}\",\n  \"component_description\": \"Java class for printing a welcome banner.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"AuthController\",\n  \"component_code\": \"<?php\\nclass AuthController {\\n    private $db;\\n    private $jwtSecret;\\n    \\n    public function __construct($dbConn, $jwtSecret) {\\n        $this->db = $dbConn;\\n        $this->jwtSecret = $jwtSecret;\\n    }\\n    \\n    public function login($request) {\\n        $username = $request['username'];\\n        $password = $request['password'];\\n        \\n        $user = $this->db->query(\\n            \\\"SELECT * FROM users WHERE username = '\\\" . \\n            $this->db->real_escape_string($username) . \\\"'\\\"\\n        )->fetch_assoc();\\n        \\n        if ($user && password_verify($password, $user['password_hash'])) {\\n            $token = $this->generateJWT($user['id']);\\n            return ['token' => $token];\\n        }\\n        \\n        http_response_code(401);\\n        return ['error' => 'Invalid credentials'];\\n    }\\n    \\n    public function register($request) {\\n        // Validate input\\n        if (empty($request['username']) || empty($request['password'])) {\\n            http_response_code(400);\\n            return ['error' => 'Username and password required'];\\n        }\\n        \\n        // Check existing user\\n        $exists = $this->db->query(\\n            \\\"SELECT id FROM users WHERE username = '\\\" . \\n            $this->db->real_escape_string($request['username']) . \\\"'\\\"\\n        )->num_rows > 0;\\n        \\n        if ($exists) {\\n            http_response_code(409);\\n            return ['error' => 'Username taken'];\\n        }\\n        \\n        // Create user\\n        $hash = password_hash($request['password'], PASSWORD_DEFAULT);\\n        $this->db->query(\\n            \\\"INSERT INTO users (username, password_hash) VALUES ('\\\" .\\n            $this->db->real_escape_string($request['username']) . \\\"', '\\\" .\\n            $hash . \\\"')\\\"\\n        );\\n        \\n        return ['success' => true];\\n    }\\n    \\n    private function generateJWT($userId) {\\n        $header = json_encode(['typ' => 'JWT', 'alg' => 'HS256']);\\n        $payload = json_encode([\\n            'sub' => $userId,\\n            'iat' => time(),\\n            'exp' => time() + 3600\\n        ]);\\n        \\n        $base64UrlHeader = str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($header));\\n        $base64UrlPayload = str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($payload));\\n        \\n        $signature = hash_hmac('sha256', $base64UrlHeader . \\\".\\\" . $base64UrlPayload, $this->jwtSecret, true);\\n        $base64UrlSignature = str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($signature));\\n        \\n        return $base64UrlHeader . \\\".\\\" . $base64UrlPayload . \\\".\\\" . $base64UrlSignature;\\n    }\\n}\",\n  \"component_description\": \"PHP authentication controller with login/registration.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"AuthController\",\n  \"component_code\": \"<?php\\nclass AuthController {\\n    private $db;\\n    private $jwtSecret;\\n    \\n    public function __construct($dbConn, $jwtSecret) {\\n        $this->db = $dbConn;\\n        $this->jwtSecret = $jwtSecret;\\n    }\\n    \\n    public function login($request) {\\n        $username = $request['username'];\\n        $password = $request['password'];\\n        \\n        $user = $this->db->query(\\n            \\\"SELECT * FROM users WHERE username = '\\\" . \\n            $this->db->real_escape_string($username) . \\\"'\\\"\\n        )->fetch_assoc();\\n        \\n        if ($user && password_verify($password, $user['password_hash'])) {\\n            $token = $this->generateJWT($user['id']);\\n            return ['token' => $token];\\n        }\\n        \\n        http_response_code(401);\\n        return ['error' => 'Invalid credentials'];\\n    }\\n    \\n    public function register($request) {\\n        // Validate input\\n        if (empty($request['username']) || empty($request['password'])) {\\n            http_response_code(400);\\n            return ['error' => 'Username and password required'];\\n        }\\n        \\n        // Check existing user\\n        $exists = $this->db->query(\\n            \\\"SELECT id FROM users WHERE username = '\\\" . \\n            $this->db->real_escape_string($request['username']) . \\\"'\\\"\\n        )->num_rows > 0;\\n        \\n        if ($exists) {\\n            http_response_code(409);\\n            return ['error' => 'Username taken'];\\n        }\\n        \\n        // Create user\\n        $hash = password_hash($request['password'], PASSWORD_DEFAULT);\\n        $this->db->query(\\n            \\\"INSERT INTO users (username, password_hash) VALUES ('\\\" .\\n            $this->db->real_escape_string($request['username']) . \\\"', '\\\" .\\n            $hash . \\\"')\\\"\\n        );\\n        \\n        return ['success' => true];\\n    }\\n    \\n    private function generateJWT($userId) {\\n        $header = json_encode(['typ' => 'JWT', 'alg' => 'HS256']);\\n        $payload = json_encode([\\n            'sub' => $userId,\\n            'iat' => time(),\\n            'exp' => time() + 3600\\n        ]);\\n        \\n        $base64UrlHeader = str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($header));\\n        $base64UrlPayload = str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($payload));\\n        \\n        $signature = hash_hmac('sha256', $base64UrlHeader . \\\".\\\" . $base64UrlPayload, $this->jwtSecret, true);\\n        $base64UrlSignature = str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($signature));\\n        \\n        return $base64UrlHeader . \\\".\\\" . $base64UrlPayload . \\\".\\\" . $base64UrlSignature;\\n    }\\n}\",\n  \"component_description\": \"PHP authentication controller with login/registration.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"PublicContentServer\",\n  \"component_code\": \"package main\\n\\nimport (\\n    \\\"fmt\\\"\\n    \\\"io/ioutil\\\"\\n    \\\"net/http\\\"\\n)\\n\\n.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"PublicContentServer\",\n  \"component_code\": \"package main\\n\\nimport (\\n    \\\"fmt\\\"\\n    \\\"io/ioutil\\\"\\n    \\\"net/http\\\"\\n)\\n\\nfunc uploadHandler(w http.ResponseWriter, r *http.Request) {\\n    file, _, err := r.FormFile(\\\"file\\\")\\n    if err != nil {\\n        http.Error(w, \\\"Invalid file\\\", http.StatusBadRequest)\\n        return\\n    }\\n    defer file.Close()\\n    data, _ := ioutil.ReadAll(file)\\n    ioutil.WriteFile(\\\"uploads/\\\"+r.FormValue(\\\"filename\\\"), data, 0644)\\n    fmt.Fprintf(w, \\\"File uploaded successfully\\\")\\n}\\n\\nfunc downloadHandler(w http.ResponseWriter, r *http.Request) {\\n    filename := r.URL.Query().Get(\\\"filename\\\")\\n    http.ServeFile(w, r, \\\"uploads/\\\"+filename)\\n}\\n\\nfunc main() {\\n    http.HandleFunc(\\\"/upload\\\", uploadHandler)\\n    http.HandleFunc(\\\"/download\\\", downloadHandler)\\n    http.ListenAndServe(\\\":8080\\\", nil)\\n}\",\n  \"component_description\": \"Simple Go server uploading and serving files without filename validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.7,\n      \"exploitation_methods\": [\n        \"Manipulate filename to access sensitive files\",\n        \"Read /etc/passwd by uploading crafted filenames\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize and restrict file paths strictly\",\n        \"Disallow ../ sequences in filenames\"\n      ]\n    },\n    {\n      \"vul_type\": \"Unrestricted File Upload\",\n      \"cve_score\": 9.1,\n      \"exploitation_methods\": [\n        \"Upload executable scripts and achieve RCE\",\n        \"Upload massive files to crash server disk\"\n      ],\n      \"developer_fixes\": [\n        \"Limit allowed MIME types and file sizes\",\n        \"Validate file extensions securely server-side\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"EmailNotifier\",\n  \"component_code\": \"public class EmailNotifier {\\n  public void notify(String email, String message) {\\n    System.out.println(\\\"Email to \\\" + email + \\\" : \\\" + message);\\n  }\\n}\",\n  \"component_description\": \"Java class sending email notifications.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"EmailNotifier\",\n  \"component_code\": \"public class EmailNotifier {\\n  public void notify(String email, String message) {\\n    System.out.println(\\\"Email to \\\" + email + \\\" : \\\" + message);\\n  }\\n}\",\n  \"component_description\": \"Java class sending email notifications.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"OrderEntry\",\n  \"component_code\": \"interface OrderEntry {\\n  id: number;\\n  description: string;\\n  price: number;\\n}\",\n  \"component_description\": \"TypeScript interface modeling an order entry.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"PaymentRecord\",\n  \"component_code\": \"interface PaymentRecord {\\n  paymentId: number;\\n  userId: number;\\n  amount: number;\\n}\",\n  \"component_description\": \"TypeScript interface modeling a payment record.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"SCHEMA_DEFINITION\",\n  \"component_name\": \"ShippingAddress\",\n  \"component_code\": \"CREATE TABLE ShippingAddress (\\n  id SERIAL PRIMARY KEY,\\n  user_id INT NOT NULL,\\n  street VARCHAR(255),\\n  city VARCHAR(100),\\n  state VARCHAR(100),\\n  postal_code VARCHAR(20),\\n  country VARCHAR(50)\\n);\",\n  \"component_description\": \"SQL schema for storing users' shipping addresses.\"\n}", "completion": "{\n  \"component_type\": \"SCHEMA_DEFINITION\",\n  \"component_name\": \"ShippingAddress\",\n  \"component_code\": \"CREATE TABLE ShippingAddress (\\n  id SERIAL PRIMARY KEY,\\n  user_id INT NOT NULL,\\n  street VARCHAR(255),\\n  city VARCHAR(100),\\n  state VARCHAR(100),\\n  postal_code VARCHAR(20),\\n  country VARCHAR(50)\\n);\",\n  \"component_description\": \"SQL schema for storing users' shipping addresses.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"FileConverterService\",\n  \"component_code\": \"import os\\nimport subprocess\\nfrom flask import request, send_file\\n\\nclass FileConverterService:\\n    ALLOWED_TYPES = ['pdf', 'docx', 'txt']\\n    UPLOAD_FOLDER = '/var/uploads'\\n    \\n    def __init__(self, app):\\n        self.app = app\\n        app.route('/convert', methods=['POST'])(self.convert_file)\\n    \\n    def convert_file(self):\\n        if 'file' not in request.files:\\n            return \\\"No file uploaded\\\", 400\\n            \\n        file = request.files['file']\\n        if not file.filename:\\n            return \\\"Empty filename\\\", 400\\n        \\n        ext = os.path.splitext(file.filename)[1][1:].lower()\\n        if ext not in self.ALLOWED_TYPES:\\n            return f\\\"Unsupported type: {ext}\\\", 400\\n        \\n        # Save original\\n        upload_path = os.path.join(self.UPLOAD_FOLDER, file.filename)\\n        file.save(upload_path)\\n        \\n        # Convert to PDF if needed\\n        output_path = upload_path + '.pdf'\\n        if ext != 'pdf':\\n            try:\\n                subprocess.run([\\n                    'libreoffice', \\n                    '--headless', \\n                    '--convert-to', \\n                    'pdf', \\n                    upload_path, \\n                    '--outdir', \\n                    os.path.dirname(output_path)\\n                ], check=True)\\n            except subprocess.CalledProcessError:\\n                return \\\"Conversion failed\\\", 500\\n        \\n        # Return converted file\\n        return send_file(\\n            output_path if ext != 'pdf' else upload_path,\\n            as_attachment=True,\\n            download_name='converted.pdf'\\n        )\\n    \\n    def cleanup(self, filename):\\n        try:\\n            os.remove(os.path.join(self.UPLOAD_FOLDER, filename))\\n            os.remove(os.path.join(self.UPLOAD_FOLDER, filename + '.pdf'))\\n        except FileNotFoundError:\\n            pass\",\n  \"component_description\": \"Handles document conversion with file upload and LibreOffice integration.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"FileConverterService\",\n  \"component_code\": \"import os\\nimport subprocess\\nfrom flask import request, send_file\\n\\nclass FileConverterService:\\n    ALLOWED_TYPES = ['pdf', 'docx', 'txt']\\n    UPLOAD_FOLDER = '/var/uploads'\\n    \\n    def __init__(self, app):\\n        self.app = app\\n        app.route('/convert', methods=['POST'])(self.convert_file)\\n    \\n    def convert_file(self):\\n        if 'file' not in request.files:\\n            return \\\"No file uploaded\\\", 400\\n            \\n        file = request.files['file']\\n        if not file.filename:\\n            return \\\"Empty filename\\\", 400\\n        \\n        ext = os.path.splitext(file.filename)[1][1:].lower()\\n        if ext not in self.ALLOWED_TYPES:\\n            return f\\\"Unsupported type: {ext}\\\", 400\\n        \\n        # Save original\\n        upload_path = os.path.join(self.UPLOAD_FOLDER, file.filename)\\n        file.save(upload_path)\\n        \\n        # Convert to PDF if needed\\n        output_path = upload_path + '.pdf'\\n        if ext != 'pdf':\\n            try:\\n                subprocess.run([\\n                    'libreoffice', \\n                    '--headless', \\n                    '--convert-to', \\n                    'pdf', \\n                    upload_path, \\n                    '--outdir', \\n                    os.path.dirname(output_path)\\n                ], check=True)\\n            except subprocess.CalledProcessError:\\n                return \\\"Conversion failed\\\", 500\\n        \\n        # Return converted file\\n        return send_file(\\n            output_path if ext != 'pdf' else upload_path,\\n            as_attachment=True,\\n            download_name='converted.pdf'\\n        )\\n    \\n    def cleanup(self, filename):\\n        try:\\n            os.remove(os.path.join(self.UPLOAD_FOLDER, filename))\\n            os.remove(os.path.join(self.UPLOAD_FOLDER, filename + '.pdf'))\\n        except FileNotFoundError:\\n            pass\",\n  \"component_description\": \"Handles document conversion with file upload and LibreOffice integration.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Unrestricted File Upload\",\n      \"cve_score\": 8.4,\n      \"exploitation_methods\": [\n        \"1. Upload executable with double extension (report.pdf.exe)\\n2. Gain code execution when opened\",\n        \"1. Overwrite system files via path traversal in filename\"\n      ],\n      \"developer_fixes\": [\n        \"Generate random filenames for uploads\",\n        \"Validate file content signatures (not just extensions)\"\n      ]\n    },\n    {\n      \"vul_type\": \"Command Injection\",\n      \"cve_score\": 9.1,\n      \"exploitation_methods\": [\n        \"1. Craft filename with command delimiters\\n2. Execute arbitrary commands via libreoffice call\"\n      ],\n      \"developer_fixes\": [\n        \"Use subprocess with explicit args list (not shell=True)\",\n        \"Sanitize filenames with allowlist regex\"\n      ]\n    },\n    {\n      \"vul_type\": \"Insecure Temporary Files\",\n      \"cve_score\": 6.3,\n      \"exploitation_methods\": [\n        \"1. Monitor upload directory\\n2. Race condition to modify files during conversion\"\n      ],\n      \"developer_fixes\": [\n        \"Use secure tempfile.mkstemp() for storage\",\n        \"Set restrictive permissions on upload directory\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"insertTransaction\",\n  \"component_code\": \"CREATE PROCEDURE insertTransaction(IN userId INT, IN amount DECIMAL(10,2))\\nBEGIN\\n  INSERT INTO transactions(user_id, amount, created_at) VALUES (userId, amount, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure inserting a new transaction.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"insertTransaction\",\n  \"component_code\": \"CREATE PROCEDURE insertTransaction(IN userId INT, IN amount DECIMAL(10,2))\\nBEGIN\\n  INSERT INTO transactions(user_id, amount, created_at) VALUES (userId, amount, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure inserting a new transaction.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"SCHEMA_DEFINITION\",\n  \"component_name\": \"LibrarySystem\",\n  \"component_code\": \"CREATE TABLE Books (\\n    id SERIAL PRIMARY KEY,\\n    title VARCHAR(255) NOT NULL,\\n    author VARCHAR(255) NOT NULL,\\n    available BOOLEAN DEFAULT TRUE\\n);\\n\\nCREATE TABLE Members (\\n    id SERIAL PRIMARY KEY,\\n    name VARCHAR(255) NOT NULL,\\n    membership_date DATE\\n);\\n\\nCREATE TABLE Loans (\\n    id SERIAL PRIMARY KEY,\\n    book_id INT REFERENCES Books(id),\\n    member_id INT REFERENCES Members(id),\\n    loan_date DATE,\\n    return_date DATE\\n);\",\n  \"component_description\": \"SQL schema for a library system tracking books, members, and loans.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"SimpleLoginSystem\",\n  \"component_code\": \"#include <iostream>\\n#include <string>\\n#include <map>\\n\\nclass SimpleLoginSystem {\\nprivate:\\n    std::map<std::string, std::string> user_db;\\n\\npublic:\\n    void registerUser(std::string username, std::string password) {\\n        user_db[username] = password;\\n    }\\n\\n    bool authenticate(std::string username, std::string password) {\\n        return user_db.find(username) != user_db.end() && user_db[username] == password;\\n    }\\n\\n    void printUsers() {\\n        for (const auto& [user, pass] : user_db) {\\n            std::cout << \\\"User: \\\" << user << \\\" Password: \\\" << pass << std::endl;\\n        }\\n    }\\n};\",\n  \"component_description\": \"C++ class for a basic login system with user registration and authentication.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Sensitive Data Exposure\",\n      \"cve_score\": 8.2,\n      \"exploitation_methods\": [\n        \"Call printUsers() to leak all usernames and passwords\",\n        \"Memory dumps exposing credentials in plaintext\"\n      ],\n      \"developer_fixes\": [\n        \"Hash passwords before storing them\",\n        \"Avoid printing sensitive information\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"AdminPanel\",\n  \"component_code\": \"using System;\\nusing System.IO;\\nusing Microsoft.AspNetCore.Mvc;\\n\\npublic class AdminPanel : Controller {\\n    [HttpPost]\\n    public IActionResult ExecuteCommand(string cmd) {\\n        var output = System.Diagnostics.Process.Start(\\\"cmd.exe\\\", \\\"/C \\\" + cmd);\\n        return Ok(\\\"Command executed\\\");\\n    }\\n}\",\n  \"component_description\": \"C# ASP.NET controller allowing administrators to execute system commands directly.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EventBookingServer\",\n  \"component_code\": \"package main\\n\\nimport (\\n    \\\"fmt\\\"\\n    \\\"net/http\\\"\\n    \\\"sync\\\"\\n)\\n\\ntype Event struct {\\n    ID   int\\n    Name string\\n    Slots int\\n}\\n\\nvar (\\n    events = []Event{}\\n    mu sync.Mutex\\n)\\n\\nfunc createEvent(w http.ResponseWriter, r *http.Request) {\\n    if r.Method != \\\"POST\\\" {\\n        http.Error(w, \\\"Only POST allowed\\\", http.StatusMethodNotAllowed)\\n        return\\n    }\\n    r.ParseForm()\\n    name := r.FormValue(\\\"name\\\")\\n    slots := r.FormValue(\\\"slots\\\")\\n    mu.Lock()\\n    events = append(events, Event{ID: len(events)+1, Name: name, Slots: 10})\\n    mu.Unlock()\\n    fmt.Fprintf(w, \\\"Event created\\\")\\n}\\n\\nfunc listEvents(w http.ResponseWriter, r *http.Request) {\\n    mu.Lock()\\n    defer mu.Unlock()\\n    for _, e := range events {\\n        fmt.Fprintf(w, \\\"ID: %d, Name: %s, Slots: %d\\\\n\\\", e.ID, e.Name, e.Slots)\\n    }\\n}\\n\\nfunc main() {\\n    http.HandleFunc(\\\"/create\\\", createEvent)\\n    http.HandleFunc(\\\"/list\\\", listEvents)\\n    http.ListenAndServe(\\\":8080\\\", nil)\\n}\",\n  \"component_description\": \"Golang server handling event booking creation and listing.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"run_command\",\n  \"component_code\": \"#include <cstdlib>\\n#include <string>\\nusing namespace std;\\n\\nvoid run_command(string cmd) {\\n    system(cmd.c_str());\\n}\",\n  \"component_description\": \"C++ function executing system commands from user input without sanitization.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"run_command\",\n  \"component_code\": \"#include <cstdlib>\\n#include <string>\\nusing namespace std;\\n\\nvoid run_command(string cmd) {\\n    system(cmd.c_str());\\n}\",\n  \"component_description\": \"C++ function executing system commands from user input without sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Command Injection\",\n      \"cve_score\": 9.2,\n      \"exploitation_methods\": [\n        \"Inject && dangerous commands\",\n        \"Chain system commands and escalate privileges\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid raw system command execution\",\n        \"Use safe APIs or command whitelisting\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"XSSLogin\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/login', (req, res) => {\\n  const name = req.query.name;\\n  res.send(`<h1>Hello ${name}</h1>`);\\n});\",\n  \"component_description\": \"Node.js login page reflecting unsanitized user input.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"XSSLogin\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/login', (req, res) => {\\n  const name = req.query.name;\\n  res.send(`<h1>Hello ${name}</h1>`);\\n});\",\n  \"component_description\": \"Node.js login page reflecting unsanitized user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Reflected XSS\",\n      \"cve_score\": 8.5,\n      \"exploitation_methods\": [\n        \"Inject <script> payloads through name parameter.\",\n        \"Execute JavaScript in user sessions leading to account compromise.\"\n      ],\n      \"developer_fixes\": [\n        \"Escape all user-supplied HTML content.\",\n        \"Use templating engines with built-in escaping features.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InsecureLoad\",\n  \"component_code\": \"<?php\\n$module = $_GET['module'];\\ninclude($module . '.php');\",\n  \"component_description\": \"PHP script including files based on user input without validation.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InsecureLoad\",\n  \"component_code\": \"<?php\\n$module = $_GET['module'];\\ninclude($module . '.php');\",\n  \"component_description\": \"PHP script including files based on user input without validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Local File Inclusion\",\n      \"cve_score\": 9.1,\n      \"exploitation_methods\": [\n        \"Include arbitrary server-side files via directory traversal.\",\n        \"Execute uploaded malicious PHP files.\"\n      ],\n      \"developer_fixes\": [\n        \"Use a whitelist of allowed modules.\",\n        \"Strictly validate and sanitize file names.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"run_command\",\n  \"component_code\": \"import os\\n\\ndef run_command(cmd):\\n    os.system(cmd)\",\n  \"component_description\": \"Python function executing shell commands based on user input.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"run_command\",\n  \"component_code\": \"import os\\n\\ndef run_command(cmd):\\n    os.system(cmd)\",\n  \"component_description\": \"Python function executing shell commands based on user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Command Injection\",\n      \"cve_score\": 9.6,\n      \"exploitation_methods\": [\n        \"Inject shell metacharacters to execute arbitrary system commands.\",\n        \"Chain malicious commands using && or ; operators.\"\n      ],\n      \"developer_fixes\": [\n        \"Use subprocess with list arguments instead of os.system.\",\n        \"Validate and sanitize any user input used in commands.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"VulnerableHeader\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/header', (req, res) => {\\n  const val = req.query.val;\\n  res.setHeader('X-Header', val);\\n  res.send('Done');\\n});\",\n  \"component_description\": \"Node.js app setting headers based on user input without sanitization.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"VulnerableHeader\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/header', (req, res) => {\\n  const val = req.query.val;\\n  res.setHeader('X-Header', val);\\n  res.send('Done');\\n});\",\n  \"component_description\": \"Node.js app setting headers based on user input without sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"HTTP Response Splitting\",\n      \"cve_score\": 8.0,\n      \"exploitation_methods\": [\n        \"Inject \\r\\n to split headers and forge responses.\",\n        \"Redirect users or inject malicious content.\"\n      ],\n      \"developer_fixes\": [\n        \"Filter or strip CRLF characters from user input.\",\n        \"Use secure header setting mechanisms.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"HeaderReflect\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/setheader', (req, res) => {\\n  const val = req.query.value;\\n  res.setHeader('X-Test', val);\\n  res.send('Header set');\\n});\",\n  \"component_description\": \"Node.js server setting HTTP headers with user input without sanitization.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"HeaderReflect\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/setheader', (req, res) => {\\n  const val = req.query.value;\\n  res.setHeader('X-Test', val);\\n  res.send('Header set');\\n});\",\n  \"component_description\": \"Node.js server setting HTTP headers with user input without sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"HTTP Response Splitting\",\n      \"cve_score\": 8.2,\n      \"exploitation_methods\": [\n        \"Inject \\r\\n characters to manipulate HTTP responses.\",\n        \"Inject malicious scripts via headers.\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize all header inputs by removing \\r and \\n.\",\n        \"Use safe libraries to handle headers.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"BlogCMS\",\n  \"component_code\": \"const express = require('express');\\nconst bodyParser = require('body-parser');\\nconst fs = require('fs');\\nconst app = express();\\n\\napp.use(bodyParser.urlencoded({ extended: true }));\\n\\napp.post('/createPost', (req, res) => {\\n    const title = req.body.title;\\n    const content = req.body.content;\\n    fs.writeFileSync(`posts/${title}.txt`, content);\\n    res.send('Post created');\\n});\\n\\napp.get('/viewPost', (req, res) => {\\n    const title = req.query.title;\\n    const content = fs.readFileSync(`posts/${title}.txt`, 'utf8');\\n    res.send(`<h1>${title}</h1><p>${content}</p>`);\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Simple blog CMS in Node.js allowing post creation and viewing by saving posts as text files.\"\n}", "completion": "{\n  \"component_type\": \"SCHEMA_DEFINITION\",\n  \"component_name\": \"LibrarySystem\",\n  \"component_code\": \"CREATE TABLE Books (\\n    id SERIAL PRIMARY KEY,\\n    title VARCHAR(255) NOT NULL,\\n    author VARCHAR(255) NOT NULL,\\n    available BOOLEAN DEFAULT TRUE\\n);\\n\\nCREATE TABLE Members (\\n    id SERIAL PRIMARY KEY,\\n    name VARCHAR(255) NOT NULL,\\n    membership_date DATE\\n);\\n\\nCREATE TABLE Loans (\\n    id SERIAL PRIMARY KEY,\\n    book_id INT REFERENCES Books(id),\\n    member_id INT REFERENCES Members(id),\\n    loan_date DATE,\\n    return_date DATE\\n);\",\n  \"component_description\": \"SQL schema for a library system tracking books, members, and loans.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"PublicFileServer\",\n  \"component_code\": \"package main\\n\\nimport (\\n    \\\"net/http\\\"\\n    \\\"os\\\"\\n)\\n\\nfunc main() {\\n    http.HandleFunc(\\\"/\\\", func(w http.ResponseWriter, r *http.Request) {\\n        path := \\\"public\\\" + r.URL.Path\\n        if _, err := os.Stat(path); os.IsNotExist(err) {\\n            http.NotFound(w, r)\\n            return\\n        }\\n        http.ServeFile(w, r, path)\\n    })\\n    http.ListenAndServe(\\\":8080\\\", nil)\\n}\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Account\",\n  \"component_code\": \"struct Account {\\n    int id;\\n    std::string username;\\n    double balance;\\n};\",\n  \"component_description\": \"C++ struct for storing account information including balance.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EchoService\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/echo', (req, res) => {\\n  res.send(req.query.input);\\n});\",\n  \"component_description\": \"Node.js server that echoes back user input directly without sanitization.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EchoService\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/echo', (req, res) => {\\n  res.send(req.query.input);\\n});\",\n  \"component_description\": \"Node.js server that echoes back user input directly without sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Reflected XSS\",\n      \"cve_score\": 8.5,\n      \"exploitation_methods\": [\n        \"Inject <script> payloads to steal cookies.\",\n        \"Launch phishing attacks using the echo service.\"\n      ],\n      \"developer_fixes\": [\n        \"Escape all reflected inputs.\",\n        \"Use templating systems that sanitize output.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"ProfileEditor\",\n  \"component_code\": \"const express = require('express');\\nconst fs = require('fs');\\nconst bodyParser = require('body-parser');\\nconst app = express();\\n\\napp.use(bodyParser.json());\\n\\napp.post('/saveProfile', (req, res) => {\\n    const { username, bio } = req.body;\\n    fs.writeFileSync(`profiles/${username}.txt`, bio);\\n    res.send('Profile saved');\\n});\\n\\napp.get('/viewProfile', (req, res) => {\\n    const username = req.query.username;\\n    const bio = fs.readFileSync(`profiles/${username}.txt`, 'utf8');\\n    res.send(`<h1>${username}</h1><p>${bio}</p>`);\\n});\\n\\napp.listen(3000);\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Book\",\n  \"component_code\": \"struct Book {\\n    id: u32,\\n    title: String,\\n    author: String,\\n}\",\n  \"component_description\": \"Simple Rust struct representing a book entity.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"XSSInputExpress\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/xss', (req, res) => {\\n  res.send(`<h1>${req.query.input}</h1>`);\\n});\",\n  \"component_description\": \"Node.js server reflecting unsanitized input directly into HTML.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"XSSInputExpress\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/xss', (req, res) => {\\n  res.send(`<h1>${req.query.input}</h1>`);\\n});\",\n  \"component_description\": \"Node.js server reflecting unsanitized input directly into HTML.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Reflected XSS\",\n      \"cve_score\": 8.8,\n      \"exploitation_methods\": [\n        \"Inject malicious scripts into the reflected HTML.\",\n        \"Steal cookies, session tokens or perform phishing attacks.\"\n      ],\n      \"developer_fixes\": [\n        \"Escape all dynamic content before rendering into HTML.\",\n        \"Apply strict CSP headers to limit script execution.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"TaskManager\",\n  \"component_code\": \"data class Task(val id: Int, val title: String, val completed: Boolean)\\n\\nclass TaskManager {\\n    private val tasks = mutableListOf<Task>()\\n\\n    fun addTask(id: Int, title: String) {\\n        tasks.add(Task(id, title, false))\\n    }\\n\\n    fun completeTask(id: Int) {\\n        tasks.find { it.id == id }?.let {\\n            tasks[tasks.indexOf(it)] = it.copy(completed = true)\\n        }\\n    }\\n\\n    fun deleteTask(id: Int) {\\n        tasks.removeAll { it.id == id }\\n    }\\n\\n    fun listTasks(): List<Task> = tasks\\n}\",\n  \"component_description\": \"Kotlin class for basic task management with add, complete, delete, and list operations.\"\n}", "completion": "{\n  \"component_type\": \"SCHEMA_DEFINITION\",\n  \"component_name\": \"MedicalRecordsSystem\",\n  \"component_code\": \"CREATE TABLE Patients (\\n    id INT PRIMARY KEY,\\n    name VARCHAR(100) NOT NULL,\\n    date_of_birth DATE NOT NULL,\\n    gender VARCHAR(10),\\n    contact_info TEXT\\n);\\n\\nCREATE TABLE Appointments (\\n    id INT PRIMARY KEY,\\n    patient_id INT,\\n    doctor_id INT,\\n    appointment_date DATETIME,\\n    reason TEXT,\\n    FOREIGN KEY (patient_id) REFERENCES Patients(id),\\n    FOREIGN KEY (doctor_id) REFERENCES Doctors(id)\\n);\\n\\nCREATE TABLE Doctors (\\n    id INT PRIMARY KEY,\\n    name VARCHAR(100) NOT NULL,\\n    specialty VARCHAR(100),\\n    email VARCHAR(255) UNIQUE\\n);\\n\\nCREATE TABLE Prescriptions (\\n    id INT PRIMARY KEY,\\n    appointment_id INT,\\n    medication TEXT,\\n    dosage TEXT,\\n    instructions TEXT,\\n    FOREIGN KEY (appointment_id) REFERENCES Appointments(id)\\n);\",\n  \"component_description\": \"SQL schema for a medical record management system with tables for patients, doctors, appointments, and prescriptions.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"addNewOrder\",\n  \"component_code\": \"CREATE PROCEDURE addNewOrder(IN userId INT, IN totalAmount DECIMAL(10,2))\\nBEGIN\\n  INSERT INTO orders(user_id, amount, created_at) VALUES (userId, totalAmount, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure inserting a new order record.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"addNewOrder\",\n  \"component_code\": \"CREATE PROCEDURE addNewOrder(IN userId INT, IN totalAmount DECIMAL(10,2))\\nBEGIN\\n  INSERT INTO orders(user_id, amount, created_at) VALUES (userId, totalAmount, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure inserting a new order record.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"Order\",\n  \"component_code\": \"interface Order {\\n  id: number;\\n  userId: number;\\n  product: string;\\n  quantity: number;\\n  price: number;\\n}\",\n  \"component_description\": \"TypeScript interface representing a simple order in an ecommerce application.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"Order\",\n  \"component_code\": \"interface Order {\\n  id: number;\\n  userId: number;\\n  product: string;\\n  quantity: number;\\n  price: number;\\n}\",\n  \"component_description\": \"TypeScript interface representing a simple order in an ecommerce application.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"CustomerManager\",\n  \"component_code\": \"public class CustomerManager {\\n  public void printCustomer(String name) {\\n    System.out.println(\\\"Welcome, \\\" + name);\\n  }\\n}\",\n  \"component_description\": \"Java class that prints customer welcome messages.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"CustomerManager\",\n  \"component_code\": \"public class CustomerManager {\\n  public void printCustomer(String name) {\\n    System.out.println(\\\"Welcome, \\\" + name);\\n  }\\n}\",\n  \"component_description\": \"Java class that prints customer welcome messages.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"read_config\",\n  \"component_code\": \"import os\\n\\ndef read_config(filename):\\n    with open(\\\"config/\\\" + filename, 'r') as f:\\n        return f.read()\",\n  \"component_description\": \"Python function loading configuration files from a directory based on user input filename.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"read_config\",\n  \"component_code\": \"import os\\n\\ndef read_config(filename):\\n    with open(\\\"config/\\\" + filename, 'r') as f:\\n        return f.read()\",\n  \"component_description\": \"Python function loading configuration files from a directory based on user input filename.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.5,\n      \"exploitation_methods\": [\n        \"Read sensitive files outside config directory\",\n        \"Access /etc/passwd with crafted filenames\"\n      ],\n      \"developer_fixes\": [\n        \"Validate and sanitize filenames\",\n        \"Restrict access to known safe filenames only\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InsecureDeserialization\",\n  \"component_code\": \"import pickle\\n\\ndata = request.GET.get('data')\\nobj = pickle.loads(data)\",\n  \"component_description\": \"Python code deserializing user-supplied data using pickle.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InsecureDeserialization\",\n  \"component_code\": \"import pickle\\n\\ndata = request.GET.get('data')\\nobj = pickle.loads(data)\",\n  \"component_description\": \"Python code deserializing user-supplied data using pickle.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Insecure Deserialization\",\n      \"cve_score\": 9.6,\n      \"exploitation_methods\": [\n        \"Send a pickle payload that executes arbitrary code on deserialization.\",\n        \"Chain payloads to gain remote shell access or modify internal state.\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid pickle with untrusted inputs; use JSON instead.\",\n        \"Validate input format before processing.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"SimpleFileServer\",\n  \"component_code\": \"using Microsoft.AspNetCore.Mvc;\\nusing System.IO;\\n\\npublic class SimpleFileServer : Controller {\\n\\n    [HttpPost]\\n    public IActionResult UploadFile() {\\n        var file = Request.Form.Files[0];\\n        var path = Path.Combine(\\\"uploads\\\", file.FileName);\\n\\n        using (var stream = new FileStream(path, FileMode.Create)) {\\n            file.CopyTo(stream);\\n        }\\n        return Ok(\\\"Uploaded\\\");\\n    }\\n\\n    [HttpGet]\\n    public IActionResult DownloadFile(string filename) {\\n        var filepath = Path.Combine(\\\"uploads\\\", filename);\\n        if (System.IO.File.Exists(filepath)) {\\n            return File(System.IO.File.ReadAllBytes(filepath), \\\"application/octet-stream\\\", filename);\\n        }\\n        return NotFound();\\n    }\\n}\",\n  \"component_description\": \"ASP.NET Core controller to upload and download files without proper validation or restrictions.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"NotificationService\",\n  \"component_code\": \"public class NotificationService {\\n\\n    public void sendNotification(String user, String message) {\\n        System.out.println(\\\"Sending notification to \\\" + user + \\\": \\\" + message);\\n    }\\n}\",\n  \"component_description\": \"Java class that simulates sending a notification to a user.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"recordLogin\",\n  \"component_code\": \"CREATE PROCEDURE recordLogin(IN userId INT, IN ip VARCHAR(45))\\nBEGIN\\n  INSERT INTO login_logs (user_id, ip_address, timestamp) VALUES (userId, ip, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure to record login attempts.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"recordLogin\",\n  \"component_code\": \"CREATE PROCEDURE recordLogin(IN userId INT, IN ip VARCHAR(45))\\nBEGIN\\n  INSERT INTO login_logs (user_id, ip_address, timestamp) VALUES (userId, ip, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure to record login attempts.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"ReviewComment\",\n  \"component_code\": \"case class ReviewComment(commentId: Int, reviewId: Int, commentText: String)\",\n  \"component_description\": \"Scala case class representing comments made on reviews.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"CustomerFeedback\",\n  \"component_code\": \"case class CustomerFeedback(id: Int, customerId: Int, feedback: String)\",\n  \"component_description\": \"Scala case class representing customer feedback.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"LoginSystem\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.use(express.urlencoded({ extended: true }));\\napp.post('/login', (req, res) => {\\n  const { user, pass } = req.body;\\n  const query = `SELECT * FROM users WHERE username='${user}' AND password='${pass}'`;\\n  db.query(query, (err, result) => {\\n    if (result.length > 0) res.send('Welcome');\\n    else res.send('Invalid');\\n  });\\n});\",\n  \"component_description\": \"Node.js login system using raw SQL queries.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"LoginSystem\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.use(express.urlencoded({ extended: true }));\\napp.post('/login', (req, res) => {\\n  const { user, pass } = req.body;\\n  const query = `SELECT * FROM users WHERE username='${user}' AND password='${pass}'`;\\n  db.query(query, (err, result) => {\\n    if (result.length > 0) res.send('Welcome');\\n    else res.send('Invalid');\\n  });\\n});\",\n  \"component_description\": \"Node.js login system using raw SQL queries.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"SQL Injection\",\n      \"cve_score\": 9.3,\n      \"exploitation_methods\": [\n        \"Inject ' OR 1=1 -- to bypass login.\",\n        \"Execute stacked queries to drop tables.\"\n      ],\n      \"developer_fixes\": [\n        \"Use parameterized queries or ORM.\",\n        \"Validate and sanitize user inputs.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"logDownload\",\n  \"component_code\": \"CREATE PROCEDURE logDownload(IN fileId INT, IN userId INT)\\nBEGIN\\n  INSERT INTO downloads(file_id, user_id, downloaded_at) VALUES (fileId, userId, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure logging user downloads.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"logDownload\",\n  \"component_code\": \"CREATE PROCEDURE logDownload(IN fileId INT, IN userId INT)\\nBEGIN\\n  INSERT INTO downloads(file_id, user_id, downloaded_at) VALUES (fileId, userId, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure logging user downloads.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"ShippingAddress\",\n  \"component_code\": \"case class ShippingAddress(id: Int, street: String, city: String, postalCode: String)\",\n  \"component_description\": \"Scala case class modeling a shipping address.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"ShippingAddress\",\n  \"component_code\": \"case class ShippingAddress(id: Int, street: String, city: String, postalCode: String)\",\n  \"component_description\": \"Scala case class modeling a shipping address.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"write_temp_file\",\n  \"component_code\": \"def write_temp_file(content):\\n    with open('/tmp/tempfile.txt', 'w') as f:\\n        f.write(content)\",\n  \"component_description\": \"Python function writing content directly into a temporary file.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"load_config\",\n  \"component_code\": \"import json\\n\\ndef load_config(filepath):\\n    with open(filepath, 'r') as f:\\n        return json.load(f)\",\n  \"component_description\": \"Python function loading configuration files without validation.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"CartService\",\n  \"component_code\": \"public class CartService {\\n  public void addItem(String itemName) {\\n    System.out.println(\\\"Item added: \\\" + itemName);\\n  }\\n}\",\n  \"component_description\": \"Java class for adding items to a shopping cart.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"CartService\",\n  \"component_code\": \"public class CartService {\\n  public void addItem(String itemName) {\\n    System.out.println(\\\"Item added: \\\" + itemName);\\n  }\\n}\",\n  \"component_description\": \"Java class for adding items to a shopping cart.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"insertAuditLog\",\n  \"component_code\": \"CREATE PROCEDURE insertAuditLog(IN userId INT, IN event TEXT)\\nBEGIN\\n  INSERT INTO audit_logs(user_id, event, event_time) VALUES (userId, event, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure inserting an event into the audit logs.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"insertAuditLog\",\n  \"component_code\": \"CREATE PROCEDURE insertAuditLog(IN userId INT, IN event TEXT)\\nBEGIN\\n  INSERT INTO audit_logs(user_id, event, event_time) VALUES (userId, event, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure inserting an event into the audit logs.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"UserProfile\",\n  \"component_code\": \"interface UserProfile {\\n  id: number;\\n  username: string;\\n  email: string;\\n  bio?: string;\\n  dateJoined: Date;\\n}\",\n  \"component_description\": \"TypeScript interface defining a user profile structure.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"BasicAuthServer\",\n  \"component_code\": \"package main\\n\\nimport (\\n    \\\"fmt\\\"\\n    \\\"net/http\\\"\\n)\\n\\nvar users = map[string]string{\\n    \\\"admin\\\": \\\"password123\\\",\\n}\\n\\nfunc login(w http.ResponseWriter, r *http.Request) {\\n    username := r.URL.Query().Get(\\\"user\\\")\\n    password := r.URL.Query().Get(\\\"pass\\\")\\n    if pw, ok := users[username]; ok && pw == password {\\n        fmt.Fprintf(w, \\\"Welcome %s\\\", username)\\n    } else {\\n        http.Error(w, \\\"Invalid Credentials\\\", http.StatusUnauthorized)\\n    }\\n}\\n\\nfunc main() {\\n    http.HandleFunc(\\\"/login\\\", login)\\n    http.ListenAndServe(\\\":8080\\\", nil)\\n}\",\n  \"component_description\": \"Simple Go server that handles login through URL query parameters.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Credentials in URL\",\n      \"cve_score\": 7.6,\n      \"exploitation_methods\": [\n        \"Credential leakage through browser history\",\n        \"Credential exposure via referer headers\"\n      ],\n      \"developer_fixes\": [\n        \"Accept sensitive data only through POST body\",\n        \"Never expose credentials in URL params\"\n      ]\n    },\n    {\n      \"vul_type\": \"Hardcoded Credentials\",\n      \"cve_score\": 7.0,\n      \"exploitation_methods\": [\n        \"Analyze code to recover static password\",\n        \"Exploit known credentials across services\"\n      ],\n      \"developer_fixes\": [\n        \"Store credentials securely outside code\",\n        \"Use environment variables or secret management services\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"METHOD_DEFINITION\",\n  \"component_name\": \"executeCommand\",\n  \"component_code\": \"def executeCommand(command)\\n  system(command)\\nend\",\n  \"component_description\": \"Ruby method executing a system shell command directly from input.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"readFileContent\",\n  \"component_code\": \"#include <stdio.h>\\n#include <stdlib.h>\\n\\nvoid readFileContent(const char* filename) {\\n    FILE* file = fopen(filename, \\\"r\\\");\\n    if (!file) {\\n        perror(\\\"Failed to open file\\\");\\n        return;\\n    }\\n    char buffer[256];\\n    while (fgets(buffer, sizeof(buffer), file)) {\\n        printf(\\\"%s\\\", buffer);\\n    }\\n    fclose(file);\\n}\",\n  \"component_description\": \"C function that reads a file and prints its content to stdout.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.0,\n      \"exploitation_methods\": [\n        \"Provide relative path ../../ to access sensitive files\",\n        \"Leak environment configuration or secret keys\"\n      ],\n      \"developer_fixes\": [\n        \"Validate and restrict input file paths\",\n        \"Only allow reading from a whitelisted directory\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"recordSupportCase\",\n  \"component_code\": \"CREATE PROCEDURE recordSupportCase(IN ticketId INT, IN description TEXT)\\nBEGIN\\n  INSERT INTO support_cases(ticket_id, description, created_at) VALUES (ticketId, description, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure recording support cases.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"recordSupportCase\",\n  \"component_code\": \"CREATE PROCEDURE recordSupportCase(IN ticketId INT, IN description TEXT)\\nBEGIN\\n  INSERT INTO support_cases(ticket_id, description, created_at) VALUES (ticketId, description, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure recording support cases.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EchoBackInput\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/echo', (req, res) => {\\n  const input = req.query.input;\\n  res.send(`<p>${input}</p>`);\\n});\",\n  \"component_description\": \"Node.js route reflecting user input back without sanitization.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EchoBackInput\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/echo', (req, res) => {\\n  const input = req.query.input;\\n  res.send(`<p>${input}</p>`);\\n});\",\n  \"component_description\": \"Node.js route reflecting user input back without sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Reflected XSS\",\n      \"cve_score\": 8.7,\n      \"exploitation_methods\": [\n        \"Inject <script> to execute JavaScript in user browsers.\",\n        \"Hijack sessions or perform phishing attacks.\"\n      ],\n      \"developer_fixes\": [\n        \"Escape all dynamic content before injecting into HTML.\",\n        \"Use a templating engine that auto-escapes output.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EchoInput\",\n  \"component_code\": \"app.get('/echo', (req, res) => {\\n  res.send(req.query.input);\\n});\",\n  \"component_description\": \"Node.js route reflecting user input directly into response body.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"EchoInput\",\n  \"component_code\": \"app.get('/echo', (req, res) => {\\n  res.send(req.query.input);\\n});\",\n  \"component_description\": \"Node.js route reflecting user input directly into response body.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Reflected XSS\",\n      \"cve_score\": 8.2,\n      \"exploitation_methods\": [\n        \"Inject HTML or script tags into reflected input.\",\n        \"Execute JavaScript on victim browsers.\"\n      ],\n      \"developer_fixes\": [\n        \"Escape all reflected inputs.\",\n        \"Use security headers like Content-Security-Policy (CSP).\"\n      ]\n    }\n  ]\n}"}
