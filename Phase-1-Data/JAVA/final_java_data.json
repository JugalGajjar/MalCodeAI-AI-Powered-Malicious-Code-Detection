{
    "java_1": {
        "input": "<filename>tensorflow/lite/java/src/main/java/org/tensorflow/lite/NativeInterpreterWrapperExperimental.java\n/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\npackage org.tensorflow.lite;\n\nimport java.nio.ByteBuffer;\n\n/**\n * Extension of NativeInterpreterWrapper that adds support for experimental methods.\n *\n * <p><b>WARNING:</b> Resources consumed by the {@code NativeInterpreterWrapperExperimental} object\n * must be explicitly freed by invoking the {@link #close()} method when the {@code\n * NativeInterpreterWrapperExperimental} object is no longer needed.\n *\n * <p>Note: This class is not thread safe.\n */\nfinal class NativeInterpreterWrapperExperimental extends NativeInterpreterWrapper {\n\n  NativeInterpreterWrapperExperimental(String modelPath) {\n    super(modelPath);\n  }\n\n  NativeInterpreterWrapperExperimental(ByteBuffer byteBuffer) {\n    super(byteBuffer);\n  }\n\n  NativeInterpreterWrapperExperimental(String modelPath, InterpreterImpl.Options options) {\n    super(modelPath, options);\n  }\n\n  NativeInterpreterWrapperExperimental(ByteBuffer buffer, InterpreterImpl.Options options) {\n    super(buffer, options);\n  }\n\n  void resetVariableTensors() {\n    resetVariableTensors(interpreterHandle, errorHandle);\n  }\n\n  private static native void resetVariableTensors(long interpreterHandle, long errorHandle);\n}\n",
        "output": "{\n  \"output\": {\n    \"programming_language\": \"Java\",\n    \"components\": [\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import java.nio.ByteBuffer;\",\n        \"component_description\": \"Imports the ByteBuffer class from the java.nio package, which is used for handling byte buffers in Java.\"\n      },\n      {\n        \"component_type\": \"CLASS_DEFINITION\",\n        \"component_name\": \"NativeInterpreterWrapperExperimental\",\n        \"component_code\": \"final class NativeInterpreterWrapperExperimental extends NativeInterpreterWrapper { ... }\",\n        \"component_description\": \"Defines a final class named NativeInterpreterWrapperExperimental that extends the NativeInterpreterWrapper class. This class adds support for experimental methods and is not thread-safe.\"\n      },\n      {\n        \"component_type\": \"CONSTRUCTOR\",\n        \"component_name\": \"NativeInterpreterWrapperExperimental(String modelPath)\",\n        \"component_code\": \"NativeInterpreterWrapperExperimental(String modelPath) { super(modelPath); }\",\n        \"component_description\": \"Constructor that takes a String parameter representing the model path and passes it to the superclass constructor.\"\n      },\n      {\n        \"component_type\": \"CONSTRUCTOR\",\n        \"component_name\": \"NativeInterpreterWrapperExperimental(ByteBuffer byteBuffer)\",\n        \"component_code\": \"NativeInterpreterWrapperExperimental(ByteBuffer byteBuffer) { super(byteBuffer); }\",\n        \"component_description\": \"Constructor that takes a ByteBuffer parameter representing the model data and passes it to the superclass constructor.\"\n      },\n      {\n        \"component_type\": \"CONSTRUCTOR\",\n        \"component_name\": \"NativeInterpreterWrapperExperimental(String modelPath, InterpreterImpl.Options options)\",\n        \"component_code\": \"NativeInterpreterWrapperExperimental(String modelPath, InterpreterImpl.Options options) { super(modelPath, options); }\",\n        \"component_description\": \"Constructor that takes a String parameter representing the model path and an InterpreterImpl.Options object, passing both to the superclass constructor.\"\n      },\n      {\n        \"component_type\": \"CONSTRUCTOR\",\n        \"component_name\": \"NativeInterpreterWrapperExperimental(ByteBuffer buffer, InterpreterImpl.Options options)\",\n        \"component_code\": \"NativeInterpreterWrapperExperimental(ByteBuffer buffer, InterpreterImpl.Options options) { super(buffer, options); }\",\n        \"component_description\": \"Constructor that takes a ByteBuffer parameter representing the model data and an InterpreterImpl.Options object, passing both to the superclass constructor.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"resetVariableTensors\",\n        \"component_code\": \"void resetVariableTensors() { resetVariableTensors(interpreterHandle, errorHandle); }\",\n        \"component_description\": \"A public method that calls the private native method resetVariableTensors with interpreterHandle and errorHandle as arguments.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"resetVariableTensors\",\n        \"component_code\": \"private static native void resetVariableTensors(long interpreterHandle, long errorHandle);\",\n        \"component_description\": \"A private native method that resets variable tensors using the provided handles to the interpreter and error.\"\n      }\n    ],\n    \"overall_description\": \"This Java class, NativeInterpreterWrapperExperimental, extends another class named NativeInterpreterWrapper. It provides additional functionality through experimental methods and includes several constructors for initializing with different types of model data (model path or ByteBuffer). The class also contains a public method that invokes a private native method to reset variable tensors in the TensorFlow Lite interpreter.\"\n  }\n}"
    },
    "java_2": {
        "input": "/* Copyright 2021 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\npackage org.tensorflow.lite;\n\n/**\n * This class is used to conditionally enable certain tests that depend on experimental or\n * deprecated features of TF Lite that may not be univerally portable to all TF Lite\n * implementations.\n */\npublic final class SupportedFeatures {\n\n  private SupportedFeatures() {}\n\n  /**\n   * True if the TF Lite implementation supports cancellation.\n   *\n   * @see Interpreter#setCanceled\n   */\n  public static native boolean supportsCancellation();\n\n  /**\n   * True if the TF Lite implementation supports the XNNPACK delegate.\n   *\n   * @see Interpreter#setUseXNNPACK\n   */\n  public static native boolean supportsXnnpack();\n\n  /**\n   * True if the TF Lite implementation supports using reduced 16-bit floating point precision for\n   * operations that are specified as 32-bit in the model.\n   *\n   * @see Interpreter#setAllowFp16PrecisionForFp32\n   */\n  public static native boolean supportsAllowFp16PrecisionForFp32();\n\n  /**\n   * True if the TF Lite implementation supports SignatureDef related methods.\n   *\n   * @see Interpreter#runSignature\n   * @see Interpreter#getSignatureKeys\n   * @see Interpreter#getSignatureInputs\n   * @see Interpreter#getSignatureOutputs\n   * @see Interpreter#getInputTensorFromSignature\n   * @see Interpreter#getOutputTensorFromSignature\n   */\n  public static native boolean supportsSignatures();\n}\n",
        "output": "{\n  \"output\": {\n    \"programming_language\": \"Java\",\n    \"components\": [\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"\",\n        \"component_description\": \"No import statements are present in the provided code snippet.\"\n      },\n      {\n        \"component_type\": \"CLASS_DEFINITION\",\n        \"component_name\": \"SupportedFeatures\",\n        \"component_code\": \"public final class SupportedFeatures {\\n\\n  private SupportedFeatures() {}\\n\\n  /**\\n   * True if the TF Lite implementation supports cancellation.\\n   *\\n   * @see Interpreter#setCanceled\\n   */\\n  public static native boolean supportsCancellation();\\n\\n  /**\\n   * True if the TF Lite implementation supports the XNNPACK delegate.\\n   *\\n   * @see Interpreter#setUseXNNPACK\\n   */\\n  public static native boolean supportsXnnpack();\\n\\n  /**\\n   * True if the TF Lite implementation supports using reduced 16-bit floating point precision for\\n   * operations that are specified as 32-bit in the model.\\n   *\\n   * @see Interpreter#setAllowFp16PrecisionForFp32\\n   */\\n  public static native boolean supportsAllowFp16PrecisionForFp32();\\n\\n  /**\\n   * True if the TF Lite implementation supports SignatureDef related methods.\\n   *\\n   * @see Interpreter#runSignature\\n   * @see Interpreter#getSignatureKeys\\n   * @see Interpreter#getSignatureInputs\\n   * @see Interpreter#getSignatureOutputs\\n   * @see Interpreter#getInputTensorFromSignature\\n   * @see Interpreter#getOutputTensorFromSignature\\n   */\\n  public static native boolean supportsSignatures();\\n}\",\n        \"component_description\": \"This class is a final class named SupportedFeatures which is used to conditionally enable certain tests that depend on experimental or deprecated features of TensorFlow Lite (TF Lite) that may not be universally portable to all TF Lite implementations.\"\n      },\n      {\n        \"component_type\": \"CONSTRUCTOR\",\n        \"component_name\": \"SupportedFeatures\",\n        \"component_code\": \"private SupportedFeatures() {}\",\n        \"component_description\": \"A private constructor for the class SupportedFeatures. This prevents instantiation of the class outside its own definition, making it a utility class.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"supportsCancellation\",\n        \"component_code\": \"public static native boolean supportsCancellation();\",\n        \"component_description\": \"A public static native method named supportsCancellation that returns a boolean indicating whether the TF Lite implementation supports cancellation. The actual implementation is provided in native code.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"supportsXnnpack\",\n        \"component_code\": \"public static native boolean supportsXnnpack();\",\n        \"component_description\": \"A public static native method named supportsXnnpack that returns a boolean indicating whether the TF Lite implementation supports the XNNPACK delegate. The actual implementation is provided in native code.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"supportsAllowFp16PrecisionForFp32\",\n        \"component_code\": \"public static native boolean supportsAllowFp16PrecisionForFp32();\",\n        \"component_description\": \"A public static native method named supportsAllowFp16PrecisionForFp32 that returns a boolean indicating whether the TF Lite implementation supports using reduced 16-bit floating point precision for operations that are specified as 32-bit in the model. The actual implementation is provided in native code.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"supportsSignatures\",\n        \"component_code\": \"public static native boolean supportsSignatures();\",\n        \"component_description\": \"A public static native method named supportsSignatures that returns a boolean indicating whether the TF Lite implementation supports SignatureDef related methods. The actual implementation is provided in native code.\"\n      }\n    ],\n    \"overall_description\": \"The Java class SupportedFeatures provides utility methods to check if certain experimental or deprecated features of TensorFlow Lite (TF Lite) are supported by the current implementation. These features include cancellation, XNNPACK delegate support, reduced 16-bit floating point precision for 32-bit operations, and SignatureDef related functionalities. The methods in this class are native, meaning their implementations are provided in a non-Java language like C or C++. The class is designed to be a utility, hence its private constructor prevents instantiation.\"\n  }\n}"
    },
    "java_3": {
        "input": "/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\npackage org.tensorflow.lite;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport java.nio.ByteBuffer;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\nimport org.tensorflow.lite.flex.FlexDelegate;\n\n/**\n * Unit tests for {@link org.tensorflow.lite.Interpreter} that validate execution with models that\n * have user's defined TensorFlow ops.\n */\n@RunWith(JUnit4.class)\npublic final class InterpreterFlexWithCustomOpsTest {\n\n  private static final ByteBuffer DOUBLE_MODEL_BUFFER =\n      TestUtils.getTestFileAsBuffer(\"tensorflow/lite/testdata/double_flex.bin\");\n\n  /** Smoke test validating that flex model with a user's defined TF op. */\n  @Test\n  public void testFlexModelWithUsersDefinedOp() throws Exception {\n    try (Interpreter interpreter = new Interpreter(DOUBLE_MODEL_BUFFER)) {\n      int[] oneD = {1, 2, 3, 4};\n      int[][] twoD = {oneD};\n      int[][] parsedOutputs = new int[1][4];\n      interpreter.run(twoD, parsedOutputs);\n      int[] outputOneD = parsedOutputs[0];\n      int[] expected = {2, 4, 6, 8};\n      assertThat(outputOneD).isEqualTo(expected);\n    }\n  }\n\n  static {\n    FlexDelegate.initTensorFlowForTesting();\n  }\n}\n",
        "output": "{\n  \"output\": {\n    \"programming_language\": \"Java\",\n    \"components\": [\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import static com.google.common.truth.Truth.assertThat;\",\n        \"component_description\": \"Imports the assertThat method from the Truth library to perform assertions in tests.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import java.nio.ByteBuffer;\",\n        \"component_description\": \"Imports the ByteBuffer class from the Java NIO package for handling byte buffers.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import org.junit.Test;\",\n        \"component_description\": \"Imports the Test annotation from JUnit, used to mark test methods.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import org.junit.runner.RunWith;\",\n        \"component_description\": \"Imports the RunWith annotation from JUnit, used to specify a runner for executing tests.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import org.junit.runners.JUnit4;\",\n        \"component_description\": \"Imports the JUnit4 class, which is a test runner that executes tests annotated with @Test.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import org.tensorflow.lite.flex.FlexDelegate;\",\n        \"component_description\": \"Imports the FlexDelegate class from TensorFlow Lite's flex package, used for execution of custom ops.\"\n      },\n      {\n        \"component_type\": \"CLASS_DEFINITION\",\n        \"component_name\": \"InterpreterFlexWithCustomOpsTest\",\n        \"component_code\": \"public final class InterpreterFlexWithCustomOpsTest {\\n  private static final ByteBuffer DOUBLE_MODEL_BUFFER =\\n      TestUtils.getTestFileAsBuffer(\\\"tensorflow/lite/testdata/double_flex.bin\\\");\\n\\n  /** Smoke test validating that flex model with a user's defined TF op. */\\n  @Test\\n  public void testFlexModelWithUsersDefinedOp() throws Exception {\\n    try (Interpreter interpreter = new Interpreter(DOUBLE_MODEL_BUFFER)) {\\n      int[] oneD = {1, 2, 3, 4};\\n      int[][] twoD = {oneD};\\n      int[][] parsedOutputs = new int[1][4];\\n      interpreter.run(twoD, parsedOutputs);\\n      int[] outputOneD = parsedOutputs[0];\\n      int[] expected = {2, 4, 6, 8};\\n      assertThat(outputOneD).isEqualTo(expected);\\n    }\\n  }\\n\\n  static {\\n    FlexDelegate.initTensorFlowForTesting();\\n  }\\n}\",\n        \"component_description\": \"Defines a public final class named InterpreterFlexWithCustomOpsTest that contains unit tests for the Interpreter class with models having user-defined TensorFlow ops.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"DOUBLE_MODEL_BUFFER\",\n        \"component_code\": \"private static final ByteBuffer DOUBLE_MODEL_BUFFER =\\n      TestUtils.getTestFileAsBuffer(\\\"tensorflow/lite/testdata/double_flex.bin\\\");\",\n        \"component_description\": \"Defines a private, static, and final field named DOUBLE_MODEL_BUFFER of type ByteBuffer. It is initialized with the contents of a test file using the getTestFileAsBuffer method from the TestUtils class.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"testFlexModelWithUsersDefinedOp\",\n        \"component_code\": \"@Test\\n  public void testFlexModelWithUsersDefinedOp() throws Exception {\\n    try (Interpreter interpreter = new Interpreter(DOUBLE_MODEL_BUFFER)) {\\n      int[] oneD = {1, 2, 3, 4};\\n      int[][] twoD = {oneD};\\n      int[][] parsedOutputs = new int[1][4];\\n      interpreter.run(twoD, parsedOutputs);\\n      int[] outputOneD = parsedOutputs[0];\\n      int[] expected = {2, 4, 6, 8};\\n      assertThat(outputOneD).isEqualTo(expected);\\n    }\\n  }\",\n        \"component_description\": \"Defines a public test method named testFlexModelWithUsersDefinedOp. It creates an Interpreter instance with the DOUBLE_MODEL_BUFFER, runs it with input data, and asserts that the output matches the expected result using the Truth library.\"\n      },\n      {\n        \"component_type\": \"STATIC_BLOCK\",\n        \"component_name\": null,\n        \"component_code\": \"static {\\n    FlexDelegate.initTensorFlowForTesting();\\n  }\",\n        \"component_description\": \"Defines a static block that initializes TensorFlow for testing purposes using the initTensorFlowForTesting method from the FlexDelegate class.\"\n      }\n    ],\n    \"overall_description\": \"The InterpreterFlexWithCustomOpsTest class is a JUnit test suite designed to validate the functionality of the TensorFlow Lite Interpreter when executing models with user-defined TensorFlow operations. It includes a static field for loading a test model file into a ByteBuffer, a static block for initializing TensorFlow, and a test method that sets up an interpreter with the model buffer, runs it with specific input data, and asserts that the output matches the expected result using the Truth library for assertions.\"\n  }\n}"
    },
    "java_4": {
        "input": "/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\npackage org.tensorflow;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotEquals;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\n/** Unit tests for {@link Shape}. */\n@RunWith(JUnit4.class)\npublic class ShapeTest {\n\n  @Test\n  public void unknown() {\n    assertEquals(-1, Shape.unknown().numDimensions());\n    assertEquals(\"<unknown>\", Shape.unknown().toString());\n  }\n\n  @Test\n  public void scalar() {\n    assertEquals(0, Shape.scalar().numDimensions());\n    assertEquals(\"[]\", Shape.scalar().toString());\n  }\n\n  @Test\n  public void make() {\n    Shape s = Shape.make(2);\n    assertEquals(1, s.numDimensions());\n    assertEquals(2, s.size(0));\n    assertEquals(\"[2]\", s.toString());\n\n    s = Shape.make(2, 3);\n    assertEquals(2, s.numDimensions());\n    assertEquals(2, s.size(0));\n    assertEquals(3, s.size(1));\n    assertEquals(\"[2, 3]\", s.toString());\n\n    s = Shape.make(-1, 2, 3);\n    assertEquals(3, s.numDimensions());\n    assertEquals(-1, s.size(0));\n    assertEquals(2, s.size(1));\n    assertEquals(3, s.size(2));\n    assertEquals(\"[?, 2, 3]\", s.toString());\n  }\n\n  @Test\n  public void nodesInAGraph() {\n    try (Graph g = new Graph()) {\n      Output<Float> n = TestUtil.placeholder(g, \"feed\", Float.class);\n      assertEquals(-1, n.shape().numDimensions());\n\n      n = TestUtil.constant(g, \"scalar\", 3);\n      assertEquals(0, n.shape().numDimensions());\n\n      n = TestUtil.constant(g, \"vector\", new float[2]);\n      assertEquals(1, n.shape().numDimensions());\n      assertEquals(2, n.shape().size(0));\n\n      n = TestUtil.constant(g, \"matrix\", new float[4][5]);\n      assertEquals(2, n.shape().numDimensions());\n      assertEquals(4, n.shape().size(0));\n      assertEquals(5, n.shape().size(1));\n    }\n  }\n\n  @Test\n  public void equalsWorksCorrectly() {\n    assertEquals(Shape.scalar(), Shape.scalar());\n    assertEquals(Shape.make(1, 2, 3), Shape.make(1, 2, 3));\n\n    assertNotEquals(Shape.make(1, 2), null);\n    assertNotEquals(Shape.make(1, 2), new Object());\n    assertNotEquals(Shape.make(1, 2, 3), Shape.make(1, 2, 4));\n\n    assertNotEquals(Shape.unknown(), Shape.unknown());\n    assertNotEquals(Shape.make(-1), Shape.make(-1));\n    assertNotEquals(Shape.make(1, -1, 3), Shape.make(1, -1, 3));\n  }\n\n  @Test\n  public void hashCodeIsAsExpected() {\n    assertEquals(Shape.make(1, 2, 3, 4).hashCode(), Shape.make(1, 2, 3, 4).hashCode());\n    assertEquals(Shape.scalar().hashCode(), Shape.scalar().hashCode());\n    assertEquals(Shape.unknown().hashCode(), Shape.unknown().hashCode());\n\n    assertNotEquals(Shape.make(1, 2).hashCode(), Shape.make(1, 3).hashCode());\n  }\n}\n",
        "output": "{\n  \"output\": {\n    \"programming_language\": \"Java\",\n    \"components\": [\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import static org.junit.Assert.assertEquals;\",\n        \"component_description\": \"Imports the static method assertEquals from the org.junit.Assert class, allowing direct use of assertEquals in the code without specifying the class name.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import static org.junit.Assert.assertNotEquals;\",\n        \"component_description\": \"Imports the static method assertNotEquals from the org.junit.Assert class, allowing direct use of assertNotEquals in the code without specifying the class name.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import org.junit.Test;\",\n        \"component_description\": \"Imports the Test annotation from the org.junit package, which is used to mark a method as a test case in JUnit testing framework.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import org.junit.runner.RunWith;\",\n        \"component_description\": \"Imports the RunWith annotation from the org.junit.runner package, which is used to specify a runner class for running tests in JUnit.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import org.junit.runners.JUnit4;\",\n        \"component_description\": \"Imports the JUnit4 runner class from the org.junit.runners package, specifying that the test should be run using JUnit 4.\"\n      },\n      {\n        \"component_type\": \"CLASS_DEFINITION\",\n        \"component_name\": \"ShapeTest\",\n        \"component_code\": \"public class ShapeTest { ... }\",\n        \"component_description\": \"Defines a public class named ShapeTest. This class contains unit tests for the Shape class, utilizing the JUnit testing framework.\"\n      },\n      {\n        \"component_type\": \"ANNOTATION\",\n        \"component_name\": null,\n        \"component_code\": \"@RunWith(JUnit4.class)\",\n        \"component_description\": \"Annotates the ShapeTest class with @RunWith(JUnit4.class), indicating that the tests in this class should be run using JUnit 4.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"unknown\",\n        \"component_code\": \"@Test\\npublic void unknown() { ... }\",\n        \"component_description\": \"Defines a public test method named unknown. This method tests the behavior of the Shape.unknown() method, asserting that it returns a shape with -1 dimensions and string representation '<unknown>'.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"scalar\",\n        \"component_code\": \"@Test\\npublic void scalar() { ... }\",\n        \"component_description\": \"Defines a public test method named scalar. This method tests the behavior of the Shape.scalar() method, asserting that it returns a shape with 0 dimensions and string representation '[]'.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"make\",\n        \"component_code\": \"@Test\\npublic void make() { ... }\",\n        \"component_description\": \"Defines a public test method named make. This method tests the behavior of the Shape.make(...) method with different arguments, asserting that it returns shapes with the correct number of dimensions and sizes.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"nodesInAGraph\",\n        \"component_code\": \"@Test\\npublic void nodesInAGraph() { ... }\",\n        \"component_description\": \"Defines a public test method named nodesInAGraph. This method tests the shapes associated with different types of nodes in a graph, using methods from the Shape and Graph classes.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"equalsIsAsExpected\",\n        \"component_code\": \"@Test\\npublic void equalsIsAsExpected() { ... }\",\n        \"component_description\": \"Defines a public test method named equalsIsAsExpected. This method tests the equality of different Shape instances, using assertEquals and assertNotEquals assertions to verify expected behavior.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"hashCodeIsAsExpected\",\n        \"component_code\": \"@Test\\npublic void hashCodeIsAsExpected() { ... }\",\n        \"component_description\": \"Defines a public test method named hashCodeIsAsExpected. This method tests the hash code of different Shape instances, using assertEquals and assertNotEquals assertions to verify expected behavior.\"\n      }\n    ],\n    \"overall_description\": \"The ShapeTest class is a JUnit test suite designed to validate the functionality of the Shape class. It includes several test methods that cover various scenarios such as creating unknown shapes, scalar shapes, and custom-shaped objects with different dimensions. The tests use assertions to ensure that the actual outcomes match the expected results, thus verifying the correctness of the Shape class's implementation.\"\n  }\n}"
    },
    "java_6": {
        "input": "<reponame>abhaikollara/tensorflow\n/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\npackage org.tensorflow.lite.flex;\n\nimport java.io.Closeable;\nimport org.tensorflow.lite.Delegate;\nimport org.tensorflow.lite.annotations.UsedByReflection;\n\n/** {@link Delegate} for using select TensorFlow ops. */\n@UsedByReflection(\"Interpreter\")\npublic class FlexDelegate implements Delegate, Closeable {\n\n  private static final long INVALID_DELEGATE_HANDLE = 0;\n  private static final String TFLITE_FLEX_LIB = \"tensorflowlite_flex_jni\";\n\n  private long delegateHandle;\n\n  @UsedByReflection(\"Interpreter\")\n  public FlexDelegate() {\n    delegateHandle = nativeCreateDelegate();\n  }\n\n  @Override\n  @UsedByReflection(\"Interpreter\")\n  public long getNativeHandle() {\n    return delegateHandle;\n  }\n\n  /**\n   * Releases native resources held by the delegate.\n   *\n   * <p>User is expected to call this method explicitly.\n   */\n  @Override\n  @UsedByReflection(\"Interpreter\")\n  public void close() {\n    if (delegateHandle != INVALID_DELEGATE_HANDLE) {\n      nativeDeleteDelegate(delegateHandle);\n      delegateHandle = INVALID_DELEGATE_HANDLE;\n    }\n  }\n\n  public static void initTensorFlowForTesting() {\n    nativeInitTensorFlow();\n  }\n\n  static {\n    System.loadLibrary(TFLITE_FLEX_LIB);\n  }\n\n  private static native long nativeInitTensorFlow();\n\n  private static native long nativeCreateDelegate();\n\n  private static native void nativeDeleteDelegate(long delegateHandle);\n}\n",
        "output": "{\n  \"output\": {\n    \"programming_language\": \"Java\",\n    \"components\": [\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": \"Closeable\",\n        \"component_code\": \"import java.io.Closeable;\",\n        \"component_description\": \"Imports the Closeable interface, which allows the FlexDelegate class to implement closeable functionality for resource management.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": \"Delegate\",\n        \"component_code\": \"import org.tensorflow.lite.Delegate;\",\n        \"component_description\": \"Imports the Delegate interface from the TensorFlow Lite package, which FlexDelegate implements to provide delegate functionality for specific operations.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": \"UsedByReflection\",\n        \"component_code\": \"import org.tensorflow.lite.annotations.UsedByReflection;\",\n        \"component_description\": \"Imports the UsedByReflection annotation, which marks elements that are used by reflection in the Interpreter class.\"\n      },\n      {\n        \"component_type\": \"CLASS_DEFINITION\",\n        \"component_name\": \"FlexDelegate\",\n        \"component_code\": \"@UsedByReflection(\\\"Interpreter\\\")\\npublic class FlexDelegate implements Delegate, Closeable { ... }\",\n        \"component_description\": \"Defines a public class named FlexDelegate that implements both the Delegate and Closeable interfaces. This class is used to provide delegate functionality for select TensorFlow operations in TensorFlow Lite.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"INVALID_DELEGATE_HANDLE\",\n        \"component_code\": \"private static final long INVALID_DELEGATE_HANDLE = 0;\",\n        \"component_description\": \"A private static final field that holds the value representing an invalid delegate handle.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"TFLITE_FLEX_LIB\",\n        \"component_code\": \"private static final String TFLITE_FLEX_LIB = \\\"tensorflowlite_flex_jni\\\";\",\n        \"component_description\": \"A private static final field that holds the name of the native library to be loaded for TensorFlow Lite Flex operations.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"delegateHandle\",\n        \"component_code\": \"private long delegateHandle;\",\n        \"component_description\": \"A private field that stores the handle to the native delegate, used to manage native resources.\"\n      },\n      {\n        \"component_type\": \"CONSTRUCTOR\",\n        \"component_name\": \"FlexDelegate\",\n        \"component_code\": \"@UsedByReflection(\\\"Interpreter\\\")\\npublic FlexDelegate() { ... }\",\n        \"component_description\": \"A public constructor annotated with UsedByReflection, which initializes the delegateHandle by calling a native method to create the delegate.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"getNativeHandle\",\n        \"component_code\": \"@Override\\n@UsedByReflection(\\\"Interpreter\\\")\\npublic long getNativeHandle() { ... }\",\n        \"component_description\": \"An overridden method from the Delegate interface, annotated with UsedByReflection. It returns the native handle of the delegate.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"close\",\n        \"component_code\": \"@Override\\n@UsedByReflection(\\\"Interpreter\\\")\\npublic void close() { ... }\",\n        \"component_description\": \"An overridden method from the Closeable interface, annotated with UsedByReflection. It releases native resources held by the delegate by calling a native method and setting the handle to an invalid state.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"initTensorFlowForTesting\",\n        \"component_code\": \"public static void initTensorFlowForTesting() { ... }\",\n        \"component_description\": \"A public static method that initializes TensorFlow for testing purposes by calling a native method.\"\n      },\n      {\n        \"component_type\": \"STATIC_BLOCK\",\n        \"component_name\": null,\n        \"component_code\": \"static { System.loadLibrary(TFLITE_FLEX_LIB); }\",\n        \"component_description\": \"A static block that loads the native library specified by TFLITE_FLEX_LIB when the class is loaded.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"nativeInitTensorFlow\",\n        \"component_code\": \"private static native long nativeInitTensorFlow();\",\n        \"component_description\": \"A private static native method declaration for initializing TensorFlow, which is implemented in native code.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"nativeCreateDelegate\",\n        \"component_code\": \"private static native long nativeCreateDelegate();\",\n        \"component_description\": \"A private static native method declaration for creating a delegate, which is implemented in native code and returns a handle to the created delegate.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"nativeDeleteDelegate\",\n        \"component_code\": \"private static native void nativeDeleteDelegate(long delegateHandle);\",\n        \"component_description\": \"A private static native method declaration for deleting a delegate, which is implemented in native code and takes the handle of the delegate to be deleted as an argument.\"\n      }\n    ],\n    \"overall_description\": \"The FlexDelegate class is part of TensorFlow Lite's flexible operations support. It implements both Delegate and Closeable interfaces to provide delegate functionality for specific TensorFlow operations. The class manages native resources using a handle, provides methods for creating and deleting the delegate, and includes a static block to load the required native library. Additionally, it offers a method for initializing TensorFlow specifically for testing purposes.\"\n  }\n}"
    },
    "java_7": {
        "input": "/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\npackage org.tensorflow.op;\n\nimport org.tensorflow.Operation;\n\n/**\n * A base class for {@link Op} implementations that are backed by a single {@link Operation}.\n *\n * <p>Each operation registered in the TensorFlow core is a primitive and is provided as a {@code\n * PrimitiveOp}. Custom operations working with only one primitive may also derive from this class.\n */\npublic abstract class PrimitiveOp implements Op {\n\n  /** Returns the underlying {@link Operation} */\n  public Operation op() {\n    return operation;\n  }\n\n  @Override\n  public final int hashCode() {\n    return operation.hashCode();\n  }\n\n  @Override\n  public final boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    // Note: we consider that all objects wrapping the same operation are equal, no matter their\n    // implementation\n    if (!(obj instanceof PrimitiveOp)) {\n      return false;\n    }\n    return operation.equals(((PrimitiveOp) obj).operation);\n  }\n\n  @Override\n  public final String toString() {\n    return String.format(\"<%s '%s'>\", operation.type(), operation.name());\n  }\n\n  protected final Operation operation;\n\n  /**\n   * Constructor.\n   *\n   * @param operation the underlying operation\n   */\n  protected PrimitiveOp(Operation operation) {\n    this.operation = operation;\n  }\n}\n",
        "output": "{\n  \"output\": {\n    \"programming_language\": \"Java\",\n    \"components\": [\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import org.tensorflow.Operation;\",\n        \"component_description\": \"Imports the Operation class from the org.tensorflow package, which is used to represent a single TensorFlow operation.\"\n      },\n      {\n        \"component_type\": \"CLASS_DEFINITION\",\n        \"component_name\": \"PrimitiveOp\",\n        \"component_code\": \"public abstract class PrimitiveOp implements Op {\\n\\n  /** Returns the underlying {@link Operation} */\\n  public Operation op() {\\n    return operation;\\n  }\\n\\n  @Override\\n  public final int hashCode() {\\n    return operation.hashCode();\\n  }\\n\\n  @Override\\n  public final boolean equals(Object obj) {\\n    if (this == obj) {\\n      return true;\\n    }\\n    // Note: we consider that all objects wrapping the same operation are equal, no matter their\\n    // implementation\\n    if (!(obj instanceof PrimitiveOp)) {\\n      return false;\\n    }\\n    return operation.equals(((PrimitiveOp) obj).operation);\\n  }\\n\\n  @Override\\n  public final String toString() {\\n    return String.format(\\\"<%s '%s'>\\\", operation.type(), operation.name());\\n  }\\n\\n  protected final Operation operation;\\n\\n  /**\\n   * Constructor.\\n   *\\n   * @param operation the underlying operation\\n   */\\n  protected PrimitiveOp(Operation operation) {\\n    this.operation = operation;\\n  }\\n}\",\n        \"component_description\": \"Defines an abstract class named PrimitiveOp that implements the Op interface. This class serves as a base for operations in TensorFlow that are backed by a single Operation object.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"op\",\n        \"component_code\": \"public Operation op() {\\n  return operation;\\n}\",\n        \"component_description\": \"Public method that returns the underlying Operation object associated with this PrimitiveOp instance.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"hashCode\",\n        \"component_code\": \"@Override\\npublic final int hashCode() {\\n  return operation.hashCode();\\n}\",\n        \"component_description\": \"Overrides the default hashCode method to return the hash code of the underlying Operation object.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"equals\",\n        \"component_code\": \"@Override\\npublic final boolean equals(Object obj) {\\n  if (this == obj) {\\n    return true;\\n  }\\n  // Note: we consider that all objects wrapping the same operation are equal, no matter their\\n  // implementation\\n  if (!(obj instanceof PrimitiveOp)) {\\n    return false;\\n  }\\n  return operation.equals(((PrimitiveOp) obj).operation);\\n}\",\n        \"component_description\": \"Overrides the default equals method to check if another object is an instance of PrimitiveOp and if it wraps the same Operation object.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"toString\",\n        \"component_code\": \"@Override\\npublic final String toString() {\\n  return String.format(\\\"<%s '%s'>\\\", operation.type(), operation.name());\\n}\",\n        \"component_description\": \"Overrides the default toString method to provide a string representation of the PrimitiveOp instance, showing its type and name.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"operation\",\n        \"component_code\": \"protected final Operation operation;\",\n        \"component_description\": \"Protected final field that holds the underlying Operation object for this PrimitiveOp instance.\"\n      },\n      {\n        \"component_type\": \"CONSTRUCTOR\",\n        \"component_name\": \"PrimitiveOp\",\n        \"component_code\": \"protected PrimitiveOp(Operation operation) {\\n  this.operation = operation;\\n}\",\n        \"component_description\": \"Protected constructor that initializes the operation field with the provided Operation object, allowing subclasses to set up their underlying operation.\"\n      }\n    ],\n    \"overall_description\": \"The PrimitiveOp class is an abstract Java class that serves as a base for TensorFlow operations that are backed by a single Operation object. It includes methods to retrieve and represent the underlying operation, as well as overridden equals and hashCode methods based on the operation field. The class also defines a protected constructor to initialize its operation field, which subclasses can use.\"\n  }\n}"
    },
    "java_10": {
        "input": "/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// Companion source file for libtensorflow_java_test.sh\n\nimport org.tensorflow.TensorFlow;\n\npublic class LibTensorFlowTest {\n  public static void main(String[] args) {\n    System.out.println(TensorFlow.version());\n  }\n}\n",
        "output": "{\n  \"output\": {\n    \"programming_language\": \"Java\",\n    \"components\": [\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import org.tensorflow.TensorFlow;\",\n        \"component_description\": \"Imports the TensorFlow class from the org.tensorflow package, allowing access to its static methods and fields.\"\n      },\n      {\n        \"component_type\": \"CLASS_DEFINITION\",\n        \"component_name\": \"LibTensorFlowTest\",\n        \"component_code\": \"public class LibTensorFlowTest {\\n  public static void main(String[] args) {\\n    System.out.println(TensorFlow.version());\\n  }\\n}\",\n        \"component_description\": \"Defines a public Java class named LibTensorFlowTest. It contains the entry point of the program with a main method.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"main\",\n        \"component_code\": \"public static void main(String[] args) {\\n    System.out.println(TensorFlow.version());\\n  }\",\n        \"component_description\": \"Defines the main method, which is the entry point of the Java application. It takes an array of strings as arguments and prints the version of TensorFlow to the console.\"\n      },\n      {\n        \"component_type\": \"METHOD_INVOCATION\",\n        \"component_name\": \"version\",\n        \"component_code\": \"TensorFlow.version()\",\n        \"component_description\": \"Invokes the static method version() from the TensorFlow class, which returns a string representing the version of the TensorFlow library being used.\"\n      },\n      {\n        \"component_type\": \"STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"System.out.println(TensorFlow.version());\",\n        \"component_description\": \"Prints the result of TensorFlow.version() to the standard output, effectively displaying the version of TensorFlow to the console.\"\n      }\n    ],\n    \"overall_description\": \"The Java code defines a simple class named LibTensorFlowTest with a main method that prints the version of the TensorFlow library to the console. It imports the TensorFlow class from the org.tensorflow package and uses its static version() method to retrieve and display the version information.\"\n  }\n}"
    },
    "java_11": {
        "input": "<reponame>abhaikollara/tensorflow\n/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\npackage org.tensorflow.types;\n\n/** Represents an 8-bit unsigned integer. */\npublic class UInt8 extends Number {\n\n  private static final long serialVersionUID = 1L;\n  \n  // This class is only used for generic parameterization and is not instantiable. Thus,\n  // it is safe to implement the Number abstract methods with all zeros, as they will\n  // never be invoked.\n\n  @Override\n  public double doubleValue() {\n    return 0.0;\n  }\n\n  @Override\n  public float floatValue() {\n    return 0.0f;\n  }\n\n  @Override\n  public int intValue() {\n    return 0;\n  }\n\n  @Override\n  public long longValue() {\n    return 0L;\n  }\n\n  private UInt8() {}\n}\n",
        "output": "{\n  \"output\": {\n    \"programming_language\": \"Java\",\n    \"components\": [\n      {\n        \"component_type\": \"PACKAGE_DECLARATION\",\n        \"component_name\": \"org.tensorflow.types\",\n        \"component_code\": \"package org.tensorflow.types;\",\n        \"component_description\": \"Declares the package name for the Java class, which is part of the TensorFlow library.\"\n      },\n      {\n        \"component_type\": \"CLASS_DEFINITION\",\n        \"component_name\": \"UInt8\",\n        \"component_code\": \"public class UInt8 extends Number {\\n\\n  private static final long serialVersionUID = 1L;\\n  \\n  // This class is only used for generic parameterization and is not instantiable. Thus,\\n  // it is safe to implement the Number abstract methods with all zeros, as they will\\n  // never be invoked.\\n\\n  @Override\\n  public double doubleValue() {\\n    return 0.0;\\n  }\\n\\n  @Override\\n  public float floatValue() {\\n    return 0.0f;\\n  }\\n\\n  @Override\\n  public int intValue() {\\n    return 0;\\n  }\\n\\n  @Override\\n  public long longValue() {\\n    return 0L;\\n  }\\n\\n  private UInt8() {}\\n}\",\n        \"component_description\": \"Defines a class named UInt8 that extends the Number abstract class. This class is designed for generic parameterization and is not intended to be instantiated. It overrides all methods from the Number class, returning zero values.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"serialVersionUID\",\n        \"component_code\": \"private static final long serialVersionUID = 1L;\",\n        \"component_description\": \"Declares a private static final field named serialVersionUID with a value of 1L. This is used for the Java serialization mechanism to verify that a loaded class corresponds exactly to a serialized object.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"doubleValue\",\n        \"component_code\": \"@Override\\npublic double doubleValue() {\\n  return 0.0;\\n}\",\n        \"component_description\": \"Overrides the doubleValue method from the Number class, returning a constant value of 0.0.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"floatValue\",\n        \"component_code\": \"@Override\\npublic float floatValue() {\\n  return 0.0f;\\n}\",\n        \"component_description\": \"Overrides the floatValue method from the Number class, returning a constant value of 0.0f.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"intValue\",\n        \"component_code\": \"@Override\\npublic int intValue() {\\n  return 0;\\n}\",\n        \"component_description\": \"Overrides the intValue method from the Number class, returning a constant value of 0.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"longValue\",\n        \"component_code\": \"@Override\\npublic long longValue() {\\n  return 0L;\\n}\",\n        \"component_description\": \"Overrides the longValue method from the Number class, returning a constant value of 0L.\"\n      },\n      {\n        \"component_type\": \"CONSTRUCTOR\",\n        \"component_name\": \"UInt8\",\n        \"component_code\": \"private UInt8() {}\",\n        \"component_description\": \"Defines a private constructor for the UInt8 class, preventing instantiation from outside the class itself.\"\n      }\n    ],\n    \"overall_description\": \"The provided Java code defines a class named UInt8 within the org.tensorflow.types package. This class extends the Number abstract class and is intended for generic parameterization without being instantiated. It overrides all methods from the Number class to return zero values, which are placeholders since the class should not be used directly. The private constructor ensures that no instances of UInt8 can be created outside the class.\"\n  }\n}"
    },
    "java_12": {
        "input": "/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\npackage org.tensorflow.op;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.tensorflow.Operand;\nimport org.tensorflow.OperationBuilder;\nimport org.tensorflow.Output;\n\n/** Utilities for manipulating operand related types and lists. */\npublic final class Operands {\n\n  /**\n   * Converts a list of {@link Operand} into an array of {@link Output}.\n   *\n   * <p>Operation wrappers need to convert back a list of inputs into an array of outputs in order\n   * to build an operation, see {@link OperationBuilder#addInputList(Output[])}.\n   *\n   * @param inputs an iteration of input operands\n   * @return an array of outputs\n   */\n  public static Output<?>[] asOutputs(Iterable<? extends Operand<?>> inputs) {\n    List<Output<?>> outputList = new ArrayList<>();\n    for (Operand<?> input : inputs) {\n      outputList.add(input.asOutput());\n    }\n    return outputList.toArray(new Output<?>[outputList.size()]);\n  }\n\n  // Disabled constructor\n  private Operands() {}\n}\n",
        "output": "{\n  \"output\": {\n    \"programming_language\": \"Java\",\n    \"components\": [\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import java.util.ArrayList;\",\n        \"component_description\": \"Imports the ArrayList class from the Java Collections Framework, which is used to dynamically resize arrays.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import java.util.List;\",\n        \"component_description\": \"Imports the List interface from the Java Collections Framework, which provides a way of storing multiple elements in a single variable.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import org.tensorflow.Operand;\",\n        \"component_description\": \"Imports the Operand class from the TensorFlow library, representing an operand in a computation graph.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import org.tensorflow.OperationBuilder;\",\n        \"component_description\": \"Imports the OperationBuilder class from the TensorFlow library, used to build operations in a computation graph.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import org.tensorflow.Output;\",\n        \"component_description\": \"Imports the Output class from the TensorFlow library, representing an output of an operation in a computation graph.\"\n      },\n      {\n        \"component_type\": \"CLASS_DEFINITION\",\n        \"component_name\": \"Operands\",\n        \"component_code\": \"public final class Operands { ... }\",\n        \"component_description\": \"Defines a public final class named Operands that provides utility methods for manipulating operand related types and lists in the context of TensorFlow operations.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"asOutputs\",\n        \"component_code\": \"public static Output<?>[] asOutputs(Iterable<? extends Operand<?>> inputs) { ... }\",\n        \"component_description\": \"A public static method that converts a list of Operand objects into an array of Output objects. This is necessary for operation wrappers to convert their input operands into outputs required by the OperationBuilder.\"\n      },\n      {\n        \"component_type\": \"CONSTRUCTOR\",\n        \"component_name\": null,\n        \"component_code\": \"private Operands() {}\",\n        \"component_description\": \"A private constructor that prevents instantiation of the Operands class, enforcing it to be a utility class with only static methods.\"\n      }\n    ],\n    \"overall_description\": \"The provided Java code defines a utility class named 'Operands' within the org.tensorflow.op package. This class includes a single public static method, asOutputs, which is responsible for converting an Iterable of Operand objects into an array of Output objects. This conversion is essential when building operations in TensorFlow, as OperationBuilder requires inputs to be specified as arrays of Outputs rather than Operands. The class also features a private constructor to prevent instantiation, ensuring that it can only be used as a utility class with static methods.\"\n  }\n}"
    },
    "java_13": {
        "input": "/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\npackage org.tensorflow.lite.gpu;\n\nimport java.io.Closeable;\n\n/**\n * GPU Delegate CompatibilityListing data.\n *\n * <p>The GPU delegate is not supported on all Android devices, due to differences in available\n * OpenGL versions, driver features, and device resources. This class provides information on\n * whether the GPU delegate is suitable for the current device.\n *\n * <p>This API is experimental and subject to change.\n *\n * <p><b>WARNING:</b> the compatibilityList is constructed from testing done on a limited set of\n * models. You should plan to verify that your own model(s) work.\n *\n * <p>Example usage:\n *\n * <pre>{@code\n * Interpreter.Options options = new Interpreter.Options();\n * try (CompatibilityList compatibilityList = new CompatibilityList()) {\n *   if (compatibilityList.isDelegateSupportedOnThisDevice()) {\n *     GpuDelegate.Options delegateOptions = compatibilityList.getBestOptionsForThisDevice();\n *     gpuDelegate = new GpuDelegate(delegateOptions):\n *     options.addDelegate(gpuDelegate);\n *   }\n * }\n * Interpreter interpreter = new Interpreter(modelBuffer, options);\n * }</pre>\n */\npublic class CompatibilityList implements Closeable {\n\n  private static final long INVALID_COMPATIBILITY_LIST_HANDLE = 0;\n  private static final String TFLITE_GPU_LIB = \"tensorflowlite_gpu_jni\";\n\n  private long compatibilityListHandle = INVALID_COMPATIBILITY_LIST_HANDLE;\n\n  /** Whether the GPU delegate is supported on this device. */\n  public boolean isDelegateSupportedOnThisDevice() {\n    if (compatibilityListHandle == INVALID_COMPATIBILITY_LIST_HANDLE) {\n      throw new IllegalStateException(\"Trying to query a closed compatibilityList.\");\n    }\n    return nativeIsDelegateSupportedOnThisDevice(compatibilityListHandle);\n  }\n\n  /** What options should be used for the GPU delegate. */\n  public GpuDelegate.Options getBestOptionsForThisDevice() {\n    // For forward compatibility, when the compatibilityList contains more information.\n    return new GpuDelegate.Options();\n  }\n\n  public CompatibilityList() {\n    compatibilityListHandle = createCompatibilityList();\n  }\n\n  /**\n   * Frees TFLite resources in C runtime.\n   *\n   * <p>User is expected to call this method explicitly.\n   */\n  @Override\n  public void close() {\n    if (compatibilityListHandle != INVALID_COMPATIBILITY_LIST_HANDLE) {\n      deleteCompatibilityList(compatibilityListHandle);\n      compatibilityListHandle = INVALID_COMPATIBILITY_LIST_HANDLE;\n    }\n  }\n\n  static {\n    System.loadLibrary(TFLITE_GPU_LIB);\n  }\n\n  private static native long createCompatibilityList();\n\n  private static native void deleteCompatibilityList(long handle);\n\n  private static native boolean nativeIsDelegateSupportedOnThisDevice(long handle);\n}\n",
        "output": "{\n  \"output\": {\n    \"programming_language\": \"Java\",\n    \"components\": [\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import java.io.Closeable;\",\n        \"component_description\": \"Imports the Closeable interface from the Java IO package, allowing the CompatibilityList class to implement it and provide a close method for resource cleanup.\"\n      },\n      {\n        \"component_type\": \"CLASS_DEFINITION\",\n        \"component_name\": \"CompatibilityList\",\n        \"component_code\": \"public class CompatibilityList implements Closeable { ... }\",\n        \"component_description\": \"Defines a public Java class named CompatibilityList that implements the Closeable interface, indicating it manages resources and provides a close method for cleanup.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"INVALID_COMPATIBILITY_LIST_HANDLE\",\n        \"component_code\": \"private static final long INVALID_COMPATIBILITY_LIST_HANDLE = 0;\",\n        \"component_description\": \"Defines a private static final field that represents an invalid handle value for the compatibility list, used to indicate when the native resources are not initialized.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"TFLITE_GPU_LIB\",\n        \"component_code\": \"private static final String TFLITE_GPU_LIB = \\\"tensorflowlite_gpu_jni\\\";\",\n        \"component_description\": \"Defines a private static final field that holds the name of the native library to be loaded, which provides GPU delegate functionality.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"compatibilityListHandle\",\n        \"component_code\": \"private long compatibilityListHandle = INVALID_COMPATIBILITY_LIST_HANDLE;\",\n        \"component_description\": \"Defines a private field that holds the handle to the native compatibility list, initialized to an invalid value indicating no resources have been allocated.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"isDelegateSupportedOnThisDevice\",\n        \"component_code\": \"public boolean isDelegateSupportedOnThisDevice() { ... }\",\n        \"component_description\": \"A public method that checks if the GPU delegate is supported on the current device by querying a native function. Throws an IllegalStateException if called after close().\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"getBestOptionsForThisDevice\",\n        \"component_code\": \"public GpuDelegate.Options getBestOptionsForThisDevice() { ... }\",\n        \"component_description\": \"A public method that returns the best GPU delegate options for the current device. Currently, it simply returns a new GpuDelegate.Options object.\"\n      },\n      {\n        \"component_type\": \"CONSTRUCTOR\",\n        \"component_name\": \"CompatibilityList\",\n        \"component_code\": \"public CompatibilityList() { ... }\",\n        \"component_description\": \"The constructor initializes the compatibility list by calling a native function to create and return a handle, which is stored in the compatibilityListHandle field.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"close\",\n        \"component_code\": \"@Override\\npublic void close() { ... }\",\n        \"component_description\": \"Overrides the close method from the Closeable interface to free native resources associated with the compatibility list. Sets the handle to an invalid value after deletion.\"\n      },\n      {\n        \"component_type\": \"STATIC_BLOCK\",\n        \"component_name\": null,\n        \"component_code\": \"static { ... }\",\n        \"component_description\": \"A static block that loads the native library specified by TFLITE_GPU_LIB when the CompatibilityList class is loaded, making its native functions available for use.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"createCompatibilityList\",\n        \"component_code\": \"private static native long createCompatibilityList();\",\n        \"component_description\": \"A private static native method declaration that creates and returns a handle to the native compatibility list. The implementation is provided by the loaded native library.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"deleteCompatibilityList\",\n        \"component_code\": \"private static native void deleteCompatibilityList(long handle);\",\n        \"component_description\": \"A private static native method declaration that deletes the native compatibility list associated with the provided handle, freeing its resources. The implementation is provided by the loaded native library.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"nativeIsDelegateSupportedOnThisDevice\",\n        \"component_code\": \"private static native boolean nativeIsDelegateSupportedOnThisDevice(long handle);\",\n        \"component_description\": \"A private static native method declaration that checks if the GPU delegate is supported on the current device using the provided handle. The implementation is provided by the loaded native library.\"\n      }\n    ],\n    \"overall_description\": \"The CompatibilityList class manages resources for a GPU delegate compatibility list in TensorFlow Lite, providing methods to check support and obtain options, while implementing Closeable for resource cleanup. It uses native functions from a loaded library to interact with underlying hardware capabilities.\"\n  }\n}"
    },
    "java_14": {
        "input": "/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\npackage org.tensorflow.lite.benchmark.firebase;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.ParcelFileDescriptor;\nimport android.util.Log;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n\n/**\n * {@code Activity} class for Firebase Game Loop test.\n *\n * <p>This Activity receives and handles an {@code Intent} for Firebase Game Loop test. Refer to\n * https://firebase.google.com/docs/test-lab/android/game-loop.\n */\npublic class BenchmarkModelActivity extends Activity {\n\n  private static final String TAG = \"tflite_BenchmarkModelActivity\";\n\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    Intent intent = getIntent();\n    if (!intent.getAction().equals(\"com.google.intent.action.TEST_LOOP\")) {\n      Log.e(TAG, \"Received non Firebase Game Loop test intent \" + intent.getAction());\n      finish();\n    }\n    int scenario = intent.getIntExtra(\"scenario\", 0);\n    Log.i(TAG, \"Running TensorFlow Lite benchmark with scenario: \" + scenario);\n\n    ParcelFileDescriptor parcelFileDescriptor = null;\n    Uri reportFile = intent.getData();\n    if (reportFile != null) {\n      Log.i(TAG, \"Logging the result to \" + reportFile.getEncodedPath());\n      try {\n        parcelFileDescriptor =\n            getContentResolver().openAssetFileDescriptor(reportFile, \"w\").getParcelFileDescriptor();\n      } catch (FileNotFoundException | NullPointerException e) {\n        Log.e(TAG, \"Error while opening Firebase Test Lab report file\", e);\n      }\n    }\n\n    int reportFd = parcelFileDescriptor != null ? parcelFileDescriptor.getFd() : -1;\n    BenchmarkModel.run(this, scenario, reportFd);\n\n    if (parcelFileDescriptor != null) {\n      try {\n        parcelFileDescriptor.close();\n      } catch (IOException e) {\n        Log.e(TAG, \"Failed to close Firebase Test Lab result file\", e);\n      }\n    }\n\n    finish();\n  }\n}\n",
        "output": "{\n  \"output\": {\n    \"programming_language\": \"Java\",\n    \"components\": [\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import android.app.Activity;\\nimport android.content.Intent;\\nimport android.net.Uri;\\nimport android.os.Bundle;\\nimport android.os.ParcelFileDescriptor;\\nimport android.util.Log;\\nimport java.io.FileNotFoundException;\\nimport java.io.IOException;\",\n        \"component_description\": \"Imports necessary Android classes and interfaces for the activity, intents, URIs, bundles, parcel file descriptors, logging, and exception handling.\"\n      },\n      {\n        \"component_type\": \"CLASS_DEFINITION\",\n        \"component_name\": \"BenchmarkModelActivity\",\n        \"component_code\": \"public class BenchmarkModelActivity extends Activity {\\n\\n  private static final String TAG = \\\"tflite_BenchmarkModelActivity\\\";\\n\\n  @Override\\n  public void onCreate(Bundle savedInstanceState) {\\n    super.onCreate(savedInstanceState);\\n\\n    Intent intent = getIntent();\\n    if (!intent.getAction().equals(\\\"com.google.intent.action.TEST_LOOP\\\")) {\\n      Log.e(TAG, \\\"Received non Firebase Game Loop test intent \\\" + intent.getAction());\\n      finish();\\n    }\\n    int scenario = intent.getIntExtra(\\\"scenario\\\", 0);\\n    Log.i(TAG, \\\"Running TensorFlow Lite benchmark with scenario: \\\" + scenario);\\n\\n    ParcelFileDescriptor parcelFileDescriptor = null;\\n    Uri reportFile = intent.getData();\\n    if (reportFile != null) {\\n      Log.i(TAG, \\\"Logging the result to \\\" + reportFile.getEncodedPath());\\n      try {\\n        parcelFileDescriptor =\\n            getContentResolver().openAssetFileDescriptor(reportFile, \\\"w\\\").getParcelFileDescriptor();\\n      } catch (FileNotFoundException | NullPointerException e) {\\n        Log.e(TAG, \\\"Error while opening Firebase Test Lab report file\\\", e);\\n      }\\n    }\\n\\n    int reportFd = parcelFileDescriptor != null ? parcelFileDescriptor.getFd() : -1;\\n    BenchmarkModel.run(this, scenario, reportFd);\\n\\n    if (parcelFileDescriptor != null) {\\n      try {\\n        parcelFileDescriptor.close();\\n      } catch (IOException e) {\\n        Log.e(TAG, \\\"Failed to close Firebase Test Lab result file\\\", e);\\n      }\\n    }\\n\\n    finish();\\n  }\\n}\",\n        \"component_description\": \"Defines a public class named BenchmarkModelActivity that extends the Android Activity class. This activity handles intents for TensorFlow Lite benchmarking in Firebase Game Loop tests.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"TAG\",\n        \"component_code\": \"private static final String TAG = \\\"tflite_BenchmarkModelActivity\\\";\",\n        \"component_description\": \"Defines a private, static, and final field named TAG used for logging purposes. It holds the string value 'tflite_BenchmarkModelActivity'.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"onCreate\",\n        \"component_code\": \"@Override\\n  public void onCreate(Bundle savedInstanceState) {\\n    super.onCreate(savedInstanceState);\\n\\n    Intent intent = getIntent();\\n    if (!intent.getAction().equals(\\\"com.google.intent.action.TEST_LOOP\\\")) {\\n      Log.e(TAG, \\\"Received non Firebase Game Loop test intent \\\" + intent.getAction());\\n      finish();\\n    }\\n    int scenario = intent.getIntExtra(\\\"scenario\\\", 0);\\n    Log.i(TAG, \\\"Running TensorFlow Lite benchmark with scenario: \\\" + scenario);\\n\\n    ParcelFileDescriptor parcelFileDescriptor = null;\\n    Uri reportFile = intent.getData();\\n    if (reportFile != null) {\\n      Log.i(TAG, \\\"Logging the result to \\\" + reportFile.getEncodedPath());\\n      try {\\n        parcelFileDescriptor =\\n            getContentResolver().openAssetFileDescriptor(reportFile, \\\"w\\\").getParcelFileDescriptor();\\n      } catch (FileNotFoundException | NullPointerException e) {\\n        Log.e(TAG, \\\"Error while opening Firebase Test Lab report file\\\", e);\\n      }\\n    }\\n\\n    int reportFd = parcelFileDescriptor != null ? parcelFileDescriptor.getFd() : -1;\\n    BenchmarkModel.run(this, scenario, reportFd);\\n\\n    if (parcelFileDescriptor != null) {\\n      try {\\n        parcelFileDescriptor.close();\\n      } catch (IOException e) {\\n        Log.e(TAG, \\\"Failed to close Firebase Test Lab result file\\\", e);\\n      }\\n    }\\n\\n    finish();\\n  }\",\n        \"component_description\": \"Overrides the onCreate method of the Activity class. It handles the intent received by the activity, checks if it is a valid Firebase Game Loop test intent, extracts the scenario and report file URI, opens the report file for writing, runs the benchmark using BenchmarkModel.run(), closes the report file, and finishes the activity.\"\n      },\n      {\n        \"component_type\": \"TRY_CATCH_BLOCK\",\n        \"component_name\": null,\n        \"component_code\": \"try {\\n  parcelFileDescriptor =\\n      getContentResolver().openAssetFileDescriptor(reportFile, \\\"w\\\").getParcelFileDescriptor();\\n} catch (FileNotFoundException | NullPointerException e) {\\n  Log.e(TAG, \\\"Error while opening Firebase Test Lab report file\\\", e);\\n}\",\n        \"component_description\": \"Handles the case where the attempt to open the report file fails by catching FileNotFoundException or NullPointerException and logging an error message.\"\n      },\n      {\n        \"component_type\": \"TRY_CATCH_BLOCK\",\n        \"component_name\": null,\n        \"component_code\": \"if (parcelFileDescriptor != null) {\\n  try {\\n    parcelFileDescriptor.close();\\n  } catch (IOException e) {\\n    Log.e(TAG, \\\"Failed to close Firebase Test Lab result file\\\", e);\\n  }\\n}\",\n        \"component_description\": \"Handles the case where closing the report file fails by catching IOException and logging an error message.\"\n      }\n    ],\n    \"overall_description\": \"The BenchmarkModelActivity class is designed to handle TensorFlow Lite benchmarking in a Firebase Game Loop test environment. It extends the Android Activity class, overrides the onCreate method to process incoming intents, checks for validity, extracts necessary data, handles file operations with try-catch blocks for error management, and logs relevant information using the TAG field.\"\n  }\n}"
    },
    "java_16": {
        "input": "/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\npackage org.tensorflow.lite;\n\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Files;\nimport java.nio.file.StandardOpenOption;\nimport java.util.EnumSet;\nimport javax.imageio.ImageIO;\n\n/** Utility for interacting with test-specific data. */\npublic abstract class TestUtils {\n\n  private static final float DEFAULT_IMAGE_MEAN = 127.5f;\n  private static final float DEFAULT_IMAGE_STD = 127.5f;\n\n  public static MappedByteBuffer getTestFileAsBuffer(String path) {\n    try (FileChannel fileChannel =\n        (FileChannel)\n            Files.newByteChannel(new File(path).toPath(), EnumSet.of(StandardOpenOption.READ))) {\n      return fileChannel.map(FileChannel.MapMode.READ_ONLY, 0, fileChannel.size());\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  public static boolean supportsFilePaths() {\n    return true;\n  }\n\n  public static ByteBuffer getTestImageAsByteBuffer(String path) {\n    File imageFile = new File(path);\n    try {\n      BufferedImage image = ImageIO.read(imageFile);\n      return toByteBuffer(image);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  public static ByteBuffer getTestImageAsFloatByteBuffer(String path) {\n    File imageFile = new File(path);\n    try {\n      BufferedImage image = ImageIO.read(imageFile);\n      return toFloatByteBuffer(image);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  private static ByteBuffer toByteBuffer(BufferedImage image) {\n    ByteBuffer imgData =\n        ByteBuffer.allocateDirect(image.getHeight() * image.getWidth() * 3)\n            .order(ByteOrder.nativeOrder());\n    for (int y = 0; y < image.getHeight(); y++) {\n      for (int x = 0; x < image.getWidth(); x++) {\n        int val = image.getRGB(x, y);\n        imgData.put((byte) ((val >> 16) & 0xFF));\n        imgData.put((byte) ((val >> 8) & 0xFF));\n        imgData.put((byte) (val & 0xFF));\n      }\n    }\n    return imgData;\n  }\n\n  private static ByteBuffer toFloatByteBuffer(BufferedImage image) {\n    return toFloatByteBuffer(image, DEFAULT_IMAGE_MEAN, DEFAULT_IMAGE_STD);\n  }\n\n  private static ByteBuffer toFloatByteBuffer(\n      BufferedImage image, float imageMean, float imageStd) {\n    ByteBuffer imgData =\n        ByteBuffer.allocateDirect(image.getHeight() * image.getWidth() * 3 * 4)\n            .order(ByteOrder.nativeOrder());\n    for (int y = 0; y < image.getHeight(); y++) {\n      for (int x = 0; x < image.getWidth(); x++) {\n        int pixelValue = image.getRGB(x, y);\n        imgData.putFloat((((pixelValue >> 16) & 0xFF) - imageMean) / imageStd);\n        imgData.putFloat((((pixelValue >> 8) & 0xFF) - imageMean) / imageStd);\n        imgData.putFloat(((pixelValue & 0xFF) - imageMean) / imageStd);\n      }\n    }\n    return imgData;\n  }\n\n  private TestUtils() {}\n}\n",
        "output": "{\n  \"output\": {\n    \"programming_language\": \"Java\",\n    \"components\": [\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import java.awt.image.BufferedImage;\",\n        \"component_description\": \"Imports the BufferedImage class from the java.awt.image package, used for reading image files.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import java.io.File;\",\n        \"component_description\": \"Imports the File class from the java.io package, used to handle file paths and operations.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import java.io.IOException;\",\n        \"component_description\": \"Imports the IOException class from the java.io package, used for handling input/output exceptions.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import java.nio.ByteBuffer;\",\n        \"component_description\": \"Imports the ByteBuffer class from the java.nio package, used for direct byte manipulation in memory.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import java.nio.ByteOrder;\",\n        \"component_description\": \"Imports the ByteOrder class from the java.nio package, used to specify the byte order of data in a ByteBuffer.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import java.nio.MappedByteBuffer;\",\n        \"component_description\": \"Imports the MappedByteBuffer class from the java.nio package, used for mapping files into memory.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import java.nio.channels.FileChannel;\",\n        \"component_description\": \"Imports the FileChannel class from the java.nio.channels package, used for reading and writing file contents.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import java.nio.file.Files;\",\n        \"component_description\": \"Imports the Files class from the java.nio.file package, providing static methods to operate on files and directories.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import java.nio.file.StandardOpenOption;\",\n        \"component_description\": \"Imports the StandardOpenOption enum from the java.nio.file package, used for specifying options when opening a file.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import java.util.EnumSet;\",\n        \"component_description\": \"Imports the EnumSet class from the java.util package, providing an efficient implementation of sets for enum types.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import javax.imageio.ImageIO;\",\n        \"component_description\": \"Imports the ImageIO class from the javax.imageio package, used for reading and writing image files in various formats.\"\n      },\n      {\n        \"component_type\": \"CLASS_DEFINITION\",\n        \"component_name\": \"TestUtils\",\n        \"component_code\": \"public abstract class TestUtils { ... }\",\n        \"component_description\": \"Defines an abstract class named TestUtils that contains utility methods for interacting with test-specific data. It is designed to be extended by other classes.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"DEFAULT_IMAGE_MEAN\",\n        \"component_code\": \"private static final float DEFAULT_IMAGE_MEAN = 127.5f;\",\n        \"component_description\": \"Defines a private, static, and final field named DEFAULT_IMAGE_MEAN of type float, initialized to 127.5f. It is used as the default mean for image normalization.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"DEFAULT_IMAGE_STD\",\n        \"component_code\": \"private static final float DEFAULT_IMAGE_STD = 127.5f;\",\n        \"component_description\": \"Defines a private, static, and final field named DEFAULT_IMAGE_STD of type float, initialized to 127.5f. It is used as the default standard deviation for image normalization.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"getMappedByteBufferFromFile\",\n        \"component_code\": \"public static MappedByteBuffer getMappedByteBufferFromFile(String filePath) throws IOException { ... }\",\n        \"component_description\": \"Defines a public, static method named getMappedByteBufferFromFile that takes a file path as input and returns a MappedByteBuffer containing the file contents. It throws an IOException if an error occurs during file operations.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"supportsFilePath\",\n        \"component_code\": \"public static boolean supportsFilePath(String filePath) { ... }\",\n        \"component_description\": \"Defines a public, static method named supportsFilePath that takes a file path as input and returns a boolean indicating whether the file can be read by ImageIO. It checks if there is at least one registered reader for the file format.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"getByteBufferFromFile\",\n        \"component_code\": \"public static ByteBuffer getByteBufferFromFile(String filePath) throws IOException { ... }\",\n        \"component_description\": \"Defines a public, static method named getByteBufferFromFile that takes a file path as input and returns a ByteBuffer containing the file contents. It throws an IOException if an error occurs during file operations.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"getImageBufferedImage\",\n        \"component_code\": \"public static BufferedImage getImageBufferedImage(String imagePath) throws IOException { ... }\",\n        \"component_description\": \"Defines a public, static method named getImageBufferedImage that takes an image path as input and returns a BufferedImage object representing the image. It throws an IOException if an error occurs during file operations.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"getImageByteBuffer\",\n        \"component_code\": \"public static ByteBuffer getImageByteBuffer(String imagePath) throws IOException { ... }\",\n        \"component_description\": \"Defines a public, static method named getImageByteBuffer that takes an image path as input and returns a ByteBuffer containing the pixel data of the image. It throws an IOException if an error occurs during file operations.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"getImageByteBufferNormalized\",\n        \"component_code\": \"public static ByteBuffer getImageByteBufferNormalized(String imagePath) throws IOException { ... }\",\n        \"component_description\": \"Defines a public, static method named getImageByteBufferNormalized that takes an image path as input and returns a ByteBuffer containing the normalized pixel data of the image. It throws an IOException if an error occurs during file operations.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"getImageByteBufferNormalized\",\n        \"component_code\": \"public static ByteBuffer getImageByteBufferNormalized(String imagePath, float imageMean, float imageStd) throws IOException { ... }\",\n        \"component_description\": \"Defines a public, static method named getImageByteBufferNormalized that takes an image path, image mean, and image standard deviation as inputs and returns a ByteBuffer containing the normalized pixel data of the image using the provided mean and standard deviation. It throws an IOException if an error occurs during file operations.\"\n      },\n      {\n        \"component_type\": \"CONSTRUCTOR_DEFINITION\",\n        \"component_name\": \"TestUtils\",\n        \"component_code\": \"private TestUtils() {}\",\n        \"component_description\": \"Defines a private constructor for the TestUtils class, preventing instantiation of the class.\"\n      }\n    ],\n    \"overall_description\": \"The provided Java code defines an abstract class named TestUtils that contains utility methods for interacting with test-specific data. It includes methods for reading files into memory as ByteBuffers, mapping file contents directly into memory using MappedByteBuffer, and normalizing image pixel data for machine learning applications. The class uses the java.nio package for efficient byte manipulation in memory and the javax.imageio package for reading image files.\"\n  }\n}"
    },
    "java_17": {
        "input": "<reponame>Mayb3Nots/flutter<gh_stars>1000+\n// Copyright 2014 The Flutter Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\npackage dev.flutter.plugins.integration_test;\n\nimport android.app.Activity;\nimport android.content.Context;\nimport com.google.common.util.concurrent.SettableFuture;\nimport io.flutter.embedding.engine.plugins.FlutterPlugin;\nimport io.flutter.embedding.engine.plugins.activity.ActivityAware;\nimport io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding;\nimport io.flutter.plugin.common.BinaryMessenger;\nimport io.flutter.plugin.common.MethodCall;\nimport io.flutter.plugin.common.MethodChannel;\nimport io.flutter.plugin.common.MethodChannel.MethodCallHandler;\nimport io.flutter.plugin.common.MethodChannel.Result;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.concurrent.Future;\n\n/** IntegrationTestPlugin */\npublic class IntegrationTestPlugin implements MethodCallHandler, FlutterPlugin, ActivityAware {\n  private static final String CHANNEL = \"plugins.flutter.io/integration_test\";\n  private static final SettableFuture<Map<String, String>> testResultsSettable =\n      SettableFuture.create();\n\n  private MethodChannel methodChannel;\n  private Activity flutterActivity;\n  public static final Future<Map<String, String>> testResults = testResultsSettable;\n\n  /** Plugin registration. */\n  @SuppressWarnings(\"deprecation\")\n  public static void registerWith(io.flutter.plugin.common.PluginRegistry.Registrar registrar) {\n    final IntegrationTestPlugin instance = new IntegrationTestPlugin();\n    instance.onAttachedToEngine(registrar.context(), registrar.messenger());\n  }\n\n  @Override\n  public void onAttachedToEngine(FlutterPluginBinding binding) {\n    onAttachedToEngine(binding.getApplicationContext(), binding.getBinaryMessenger());\n  }\n\n  private void onAttachedToEngine(Context unusedApplicationContext, BinaryMessenger messenger) {\n    methodChannel = new MethodChannel(messenger, CHANNEL);\n    methodChannel.setMethodCallHandler(this);\n  }\n\n  @Override\n  public void onDetachedFromEngine(FlutterPluginBinding binding) {\n    methodChannel.setMethodCallHandler(null);\n    methodChannel = null;\n  }\n\n  @Override\n  public void onAttachedToActivity(ActivityPluginBinding binding) {\n    flutterActivity = binding.getActivity();\n  }\n\n  @Override\n  public void onReattachedToActivityForConfigChanges(ActivityPluginBinding binding) {\n    flutterActivity = binding.getActivity();\n  }\n\n  @Override\n  public void onDetachedFromActivity() {\n    flutterActivity = null;\n  }\n\n  @Override\n  public void onDetachedFromActivityForConfigChanges() {\n    flutterActivity = null;\n  }\n\n  @Override\n  public void onMethodCall(MethodCall call, Result result) {\n    switch (call.method) {\n      case \"allTestsFinished\":\n        final Map<String, String> results = call.argument(\"results\");\n        testResultsSettable.set(results);\n        result.success(null);\n        return;\n      case \"convertFlutterSurfaceToImage\":\n        if (flutterActivity == null) {\n          result.error(\"Could not convert to image\", \"Activity not initialized\", null);\n          return;\n        }\n        FlutterDeviceScreenshot.convertFlutterSurfaceToImage(flutterActivity);\n        result.success(null);\n        return;\n      case \"revertFlutterImage\":\n        if (flutterActivity == null) {\n          result.error(\"Could not revert Flutter image\", \"Activity not initialized\", null);\n          return;\n        }\n        FlutterDeviceScreenshot.revertFlutterImage(flutterActivity);\n        result.success(null);\n        return;\n      case \"captureScreenshot\":\n        if (FlutterDeviceScreenshot.hasInstrumentation()) {\n          byte[] image;\n          try {\n            image = FlutterDeviceScreenshot.captureWithUiAutomation();\n          } catch (IOException exception) {\n            result.error(\"Could not capture screenshot\", \"UiAutomation failed\", exception);\n            return;\n          }\n          result.success(image);\n          return;\n        }\n        if (flutterActivity == null) {\n          result.error(\"Could not capture screenshot\", \"Activity not initialized\", null);\n          return;\n        }\n        FlutterDeviceScreenshot.captureView(flutterActivity, methodChannel, result);\n        return;\n      default:\n        result.notImplemented();\n    }\n  }\n}\n",
        "output": "{\n  \"output\": {\n    \"programming_language\": \"Java\",\n    \"components\": [\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import android.app.Activity;\\nimport android.content.Context;\\nimport com.google.common.util.concurrent.SettableFuture;\\nimport io.flutter.embedding.engine.plugins.FlutterPlugin;\\nimport io.flutter.embedding.engine.plugins.activity.ActivityAware;\\nimport io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding;\\nimport io.flutter.plugin.common.BinaryMessenger;\\nimport io.flutter.plugin.common.MethodCall;\\nimport io.flutter.plugin.common.MethodChannel;\\nimport io.flutter.plugin.common.MethodChannel.MethodCallHandler;\\nimport io.flutter.plugin.common.MethodChannel.Result;\\nimport java.io.IOException;\\nimport java.util.Map;\\nimport java.util.concurrent.Future;\",\n        \"component_description\": \"Imports necessary classes for the Android and Flutter environments, including Activity management, method channels for communication between Flutter and native code, and utilities for asynchronous operations.\"\n      },\n      {\n        \"component_type\": \"CLASS_DEFINITION\",\n        \"component_name\": \"IntegrationTestPlugin\",\n        \"component_code\": \"public class IntegrationTestPlugin implements MethodCallHandler, FlutterPlugin, ActivityAware { ... }\",\n        \"component_description\": \"Defines a public class named IntegrationTestPlugin that implements three interfaces: MethodCallHandler for handling method calls from Flutter, FlutterPlugin for plugin lifecycle management, and ActivityAware for receiving activity lifecycle callbacks.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"CHANNEL\",\n        \"component_code\": \"private static final String CHANNEL = \\\"plugins.flutter.io/integration_test\\\";\",\n        \"component_description\": \"A private static final field that holds the channel name used for communication between Flutter and native code.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"testResultsSettable\",\n        \"component_code\": \"private static final SettableFuture<Map<String, String>> testResultsSettable = SettableFuture.create();\",\n        \"component_description\": \"A private static final field that holds a SettableFuture object used to store and retrieve the results of integration tests.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"methodChannel\",\n        \"component_code\": \"private MethodChannel methodChannel;\",\n        \"component_description\": \"A private field that holds a reference to the MethodChannel object for communication with Flutter.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"flutterActivity\",\n        \"component_code\": \"private Activity flutterActivity;\",\n        \"component_description\": \"A private field that holds a reference to the current activity in which the plugin is attached, used for various operations like taking screenshots.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"testResults\",\n        \"component_code\": \"public static final Future<Map<String, String>> testResults = testResultsSettable;\",\n        \"component_description\": \"A public static final field that exposes the SettableFuture object as a Future, allowing other parts of the application to wait for and retrieve integration test results.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"registerWith\",\n        \"component_code\": \"@SuppressWarnings(\\\"deprecation\\\")\\npublic static void registerWith(io.flutter.plugin.common.PluginRegistry.Registrar registrar) { ... }\",\n        \"component_description\": \"A public static method that registers the plugin with an old-style Flutter engine using a Registrar. It creates an instance of IntegrationTestPlugin and attaches it to the engine.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"onAttachedToEngine\",\n        \"component_code\": \"@Override\\npublic void onAttachedToEngine(@NonNull FlutterPluginBinding binding) { ... }\",\n        \"component_description\": \"An overridden method from FlutterPlugin that is called when the plugin is attached to an engine. It initializes the MethodChannel with the provided BinaryMessenger.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"onDetachedFromEngine\",\n        \"component_code\": \"@Override\\npublic void onDetachedFromEngine(@NonNull FlutterPluginBinding binding) { ... }\",\n        \"component_description\": \"An overridden method from FlutterPlugin that is called when the plugin is detached from an engine. It cleans up by setting the MethodChannel reference to null.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"onAttachedToActivity\",\n        \"component_code\": \"@Override\\npublic void onAttachedToActivity(@NonNull ActivityPluginBinding binding) { ... }\",\n        \"component_description\": \"An overridden method from ActivityAware that is called when the plugin is attached to an activity. It sets the current activity reference.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"onDetachedFromActivityForConfigChanges\",\n        \"component_code\": \"@Override\\npublic void onDetachedFromActivityForConfigChanges() { ... }\",\n        \"component_description\": \"An overridden method from ActivityAware that is called when the plugin is detached from an activity for configuration changes. It clears the current activity reference.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"onReattachedToActivityForConfigChanges\",\n        \"component_code\": \"@Override\\npublic void onReattachedToActivityForConfigChanges(@NonNull ActivityPluginBinding binding) { ... }\",\n        \"component_description\": \"An overridden method from ActivityAware that is called when the plugin is re-attached to an activity after configuration changes. It sets the current activity reference.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"onDetachedFromActivity\",\n        \"component_code\": \"@Override\\npublic void onDetachedFromActivity() { ... }\",\n        \"component_description\": \"An overridden method from ActivityAware that is called when the plugin is detached from an activity. It clears the current activity reference.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"onMethodCall\",\n        \"component_code\": \"@Override\\npublic void onMethodCall(@NonNull MethodCall call, @NonNull Result result) { ... }\",\n        \"component_description\": \"An overridden method from MethodCallHandler that handles method calls coming from Flutter. It performs different operations based on the method name and parameters, such as capturing screenshots or handling integration test results.\"\n      }\n    ],\n    \"overall_description\": \"The IntegrationTestPlugin class is a plugin for Flutter applications running on Android that facilitates communication between Flutter and native code, enabling features like taking screenshots and managing integration tests. It implements interfaces for handling method calls and activity lifecycle events, ensuring proper initialization and cleanup of resources.\"\n  }\n}"
    },
    "java_18": {
        "input": "<reponame>Mayb3Nots/flutter\n// Copyright 2014 The Flutter Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\npackage io.flutter.integration.platformviews;\n\nimport android.annotation.TargetApi;\nimport android.os.Build;\nimport android.view.MotionEvent;\nimport android.view.View;\n\nimport io.flutter.plugin.common.MethodChannel;\n\n@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)\nclass TouchPipe implements View.OnTouchListener {\n    private final MethodChannel mMethodChannel;\n    private final View mView;\n\n    private boolean mEnabled;\n\n    TouchPipe(MethodChannel methodChannel, View view) {\n        mMethodChannel = methodChannel;\n        mView = view;\n    }\n\n    public void enable() {\n        if (mEnabled)\n            return;\n        mEnabled = true;\n        mView.setOnTouchListener(this);\n    }\n\n    public void disable() {\n        if(!mEnabled)\n            return;\n        mEnabled = false;\n        mView.setOnTouchListener(null);\n    }\n\n    @Override\n    public boolean onTouch(View v, MotionEvent event) {\n        mMethodChannel.invokeMethod(\"onTouch\", MotionEventCodec.encode(event));\n        return false;\n    }\n}\n",
        "output": "{\n  \"output\": {\n    \"programming_language\": \"Java\",\n    \"components\": [\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import android.annotation.TargetApi;\",\n        \"component_description\": \"Imports the TargetApi annotation, which allows the code to use APIs available only in newer versions of Android.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import android.os.Build;\",\n        \"component_description\": \"Imports the Build class, providing access to build-related information such as version numbers.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import android.view.MotionEvent;\",\n        \"component_description\": \"Imports the MotionEvent class, which represents touch-screen motion events.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import android.view.View;\",\n        \"component_description\": \"Imports the View class, which is the base class for user interface components in Android applications.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import io.flutter.plugin.common.MethodChannel;\",\n        \"component_description\": \"Imports the MethodChannel class from the Flutter plugin common package, used for communication between Flutter and platform-specific code.\"\n      },\n      {\n        \"component_type\": \"CLASS_DEFINITION\",\n        \"component_name\": \"TouchPipe\",\n        \"component_code\": \"@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)\\nclass TouchPipe implements View.OnTouchListener {\\n    private final MethodChannel mMethodChannel;\\n    private final View mView;\\n\\n    private boolean mEnabled;\\n\\n    TouchPipe(MethodChannel methodChannel, View view) {\\n        mMethodChannel = methodChannel;\\n        mView = view;\\n    }\\n\\n    public void enable() {\\n        if (mEnabled)\\n            return;\\n        mEnabled = true;\\n        mView.setOnTouchListener(this);\\n    }\\n\\n    public void disable() {\\n        if(!mEnabled)\\n            return;\\n        mEnabled = false;\\n        mView.setOnTouchListener(null);\\n    }\\n\\n    @Override\\n    public boolean onTouch(View v, MotionEvent event) {\\n        mMethodChannel.invokeMethod(\\\"onTouch\\\", MotionEventCodec.encode(event));\\n        return false;\\n    }\\n}\",\n        \"component_description\": \"Defines a class named TouchPipe that implements the View.OnTouchListener interface. It is responsible for handling touch events on a specified view and sending them to a Flutter method channel.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"mMethodChannel\",\n        \"component_code\": \"private final MethodChannel mMethodChannel;\",\n        \"component_description\": \"A private, final field that holds a reference to the MethodChannel used for communication with Flutter. It is initialized in the constructor.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"mView\",\n        \"component_code\": \"private final View mView;\",\n        \"component_description\": \"A private, final field that holds a reference to the Android view on which touch events are to be monitored. It is initialized in the constructor.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"mEnabled\",\n        \"component_code\": \"private boolean mEnabled;\",\n        \"component_description\": \"A private boolean field that indicates whether the TouchPipe instance is currently enabled to handle touch events. It starts as false and can be set via enable() and disable() methods.\"\n      },\n      {\n        \"component_type\": \"CONSTRUCTOR\",\n        \"component_name\": \"TouchPipe\",\n        \"component_code\": \"TouchPipe(MethodChannel methodChannel, View view) {\\n    mMethodChannel = methodChannel;\\n    mView = view;\\n}\",\n        \"component_description\": \"The constructor for the TouchPipe class. It initializes the mMethodChannel and mView fields with the provided arguments.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"enable\",\n        \"component_code\": \"public void enable() {\\n    if (mEnabled)\\n        return;\\n    mEnabled = true;\\n    mView.setOnTouchListener(this);\\n}\",\n        \"component_description\": \"Enables the TouchPipe to start handling touch events on the associated view. It sets mEnabled to true and registers this instance as the OnTouchListener for mView.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"disable\",\n        \"component_code\": \"public void disable() {\\n    if(!mEnabled)\\n        return;\\n    mEnabled = false;\\n    mView.setOnTouchListener(null);\\n}\",\n        \"component_description\": \"Disables the TouchPipe, preventing it from handling touch events on the associated view. It sets mEnabled to false and unregisters this instance as the OnTouchListener for mView.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"onTouch\",\n        \"component_code\": \"@Override\\npublic boolean onTouch(View v, MotionEvent event) {\\n    mMethodChannel.invokeMethod(\\\"onTouch\\\", MotionEventCodec.encode(event));\\n    return false;\\n}\",\n        \"component_description\": \"Overrides the onTouch method from the View.OnTouchListener interface. When a touch event occurs on mView, this method is called. It sends an encoded representation of the MotionEvent to Flutter via the MethodChannel and returns false to indicate that it has not handled the event.\"\n      }\n    ],\n    \"overall_description\": \"The TouchPipe class is designed to bridge touch events from Android views to Flutter using a MethodChannel for communication. It implements the View.OnTouchListener interface, allowing it to receive touch events on a specified view. The class provides enable() and disable() methods to start and stop listening for touch events, respectively. When enabled, any touch event on the associated view is encoded and sent to Flutter via the MethodChannel, enabling interaction between the Android UI layer and the Flutter application.\"\n  }\n}"
    },
    "java_19": {
        "input": "<gh_stars>1000+\n// Copyright 2014 The Flutter Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\npackage dev.benchmarks.platform_views_layout_hybrid_composition;\n\nimport androidx.annotation.NonNull;\nimport io.flutter.embedding.android.FlutterActivity;\nimport io.flutter.embedding.engine.FlutterEngine;\n\npublic class DummyPlatformViewActivity extends FlutterActivity {\n    @Override\n    public void configureFlutterEngine(@NonNull FlutterEngine flutterEngine) {\n        flutterEngine\n            .getPlatformViewsController()\n            .getRegistry()\n            .registerViewFactory(\"benchmarks/platform_views_layout_hybrid_composition/DummyPlatformView\", new DummyPlatformViewFactory());\n    }\n}\n",
        "output": "{\n  \"output\": {\n    \"programming_language\": \"Java\",\n    \"components\": [\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": \"NULL\",\n        \"component_code\": \"import androidx.annotation.NonNull;\",\n        \"component_description\": \"Imports the NonNull annotation from the androidx.annotation package, which is used to indicate that a parameter or return value cannot be null.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": \"NULL\",\n        \"component_code\": \"import io.flutter.embedding.android.FlutterActivity;\",\n        \"component_description\": \"Imports the FlutterActivity class from the io.flutter.embedding.android package, which is a base class for Android activities that want to use Flutter.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": \"NULL\",\n        \"component_code\": \"import io.flutter.embedding.engine.FlutterEngine;\",\n        \"component_description\": \"Imports the FlutterEngine class from the io.flutter.embedding.engine package, which represents a single instance of a Flutter engine.\"\n      },\n      {\n        \"component_type\": \"CLASS_DEFINITION\",\n        \"component_name\": \"DummyPlatformViewActivity\",\n        \"component_code\": \"public class DummyPlatformViewActivity extends FlutterActivity { ... }\",\n        \"component_description\": \"Defines a public Java class named DummyPlatformViewActivity that extends the FlutterActivity class. This class is intended to be an Android activity that uses Flutter and custom platform views.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"configureFlutterEngine\",\n        \"component_code\": \"@Override\\npublic void configureFlutterEngine(@NonNull FlutterEngine flutterEngine) { ... }\",\n        \"component_description\": \"Overrides the configureFlutterEngine method from the FlutterActivity class. This method is called when a new FlutterEngine instance is created or reused by the activity, allowing customization of the engine before it starts running. The method registers a platform view factory with the Flutter engine's PlatformViewsController registry.\"\n      },\n      {\n        \"component_type\": \"METHOD_CALL\",\n        \"component_name\": \"getPlatformViewsController\",\n        \"component_code\": \"flutterEngine.getPlatformViewsController()\",\n        \"component_description\": \"Calls the getPlatformViewsController method on the flutterEngine instance to obtain a reference to the PlatformViewsController, which manages platform views within the Flutter engine.\"\n      },\n      {\n        \"component_type\": \"METHOD_CALL\",\n        \"component_name\": \"getRegistry\",\n        \"component_code\": \"flutterEngine.getPlatformViewsController().getRegistry()\",\n        \"component_description\": \"Calls the getRegistry method on the PlatformViewsController to obtain a reference to the platform view registry, which is responsible for managing and registering platform views with the Flutter engine.\"\n      },\n      {\n        \"component_type\": \"METHOD_CALL\",\n        \"component_name\": \"registerViewFactory\",\n        \"component_code\": \"flutterEngine.getPlatformViewsController().getRegistry().registerViewFactory(\\\"benchmarks/platform_views_layout_hybrid_composition/DummyPlatformView\\\", new DummyPlatformViewFactory());\",\n        \"component_description\": \"Calls the registerViewFactory method on the platform view registry to register a new platform view factory with the specified identifier. The factory used here is an instance of DummyPlatformViewFactory, which will be responsible for creating instances of the custom platform view identified by the string \\\"benchmarks/platform_views_layout_hybrid_composition/DummyPlatformView\\\".\"\n      }\n    ],\n    \"overall_description\": \"This Java code defines a FlutterActivity subclass named DummyPlatformViewActivity. The activity overrides the configureFlutterEngine method to customize the Flutter engine when it is created or reused. Specifically, it registers a platform view factory with the Flutter engine's PlatformViewsController registry. This allows the activity to use custom platform views within its Flutter UI, identified by the string \\\"benchmarks/platform_views_layout_hybrid_composition/DummyPlatformView\\\" and managed by an instance of DummyPlatformViewFactory.\"\n  }\n}"
    },
    "java_20": {
        "input": "// Copyright 2014 The Flutter Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\npackage com.yourcompany.platforminteraction;\n\nimport android.os.Bundle;\n\nimport io.flutter.app.FlutterActivity;\nimport io.flutter.plugin.common.*;\nimport io.flutter.plugins.GeneratedPluginRegistrant;\n\npublic class MainActivity extends FlutterActivity {\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    GeneratedPluginRegistrant.registerWith(this);\n  }\n  public void finish() {\n    BasicMessageChannel channel =\n        new BasicMessageChannel<>(getFlutterView(), \"navigation-test\", StringCodec.INSTANCE);\n    channel.send(\"ping\");\n  }\n}\n",
        "output": "{\n  \"output\": {\n    \"programming_language\": \"Java\",\n    \"components\": [\n      {\n        \"component_type\": \"PACKAGE_DECLARATION\",\n        \"component_name\": null,\n        \"component_code\": \"package com.yourcompany.platforminteraction;\",\n        \"component_description\": \"Declares the package name for this Java source file, which is 'com.yourcompany.platforminteraction'.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import android.os.Bundle;\",\n        \"component_description\": \"Imports the Bundle class from the Android OS package, used to pass data between activities.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import io.flutter.app.FlutterActivity;\",\n        \"component_description\": \"Imports the FlutterActivity class from the io.flutter.app package, which is a base activity for Flutter applications.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import io.flutter.plugin.common.*;\",\n        \"component_description\": \"Imports all classes and interfaces in the io.flutter.plugin.common package, which provides utilities for creating channels between Flutter and Android.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import io.flutter.plugins.GeneratedPluginRegistrant;\",\n        \"component_description\": \"Imports the GeneratedPluginRegistrant class from the io.flutter.plugins package, used to register plugins automatically.\"\n      },\n      {\n        \"component_type\": \"CLASS_DEFINITION\",\n        \"component_name\": \"MainActivity\",\n        \"component_code\": \"public class MainActivity extends FlutterActivity { ... }\",\n        \"component_description\": \"Defines a public class named 'MainActivity' that extends the FlutterActivity class. This class is responsible for starting the Flutter application.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"onCreate\",\n        \"component_code\": \"@Override\\n  protected void onCreate(Bundle savedInstanceState) {\\n    super.onCreate(savedInstanceState);\\n    GeneratedPluginRegistrant.registerWith(this);\\n  }\",\n        \"component_description\": \"Overrides the onCreate method from FlutterActivity. This method is called when the activity is starting up. It calls the superclass's onCreate method and registers plugins with the GeneratedPluginRegistrant.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"finish\",\n        \"component_code\": \"public void finish() {\\n    BasicMessageChannel channel =\\n        new BasicMessageChannel<>(getFlutterView(), \\\"navigation-test\\\", StringCodec.INSTANCE);\\n    channel.send(\\\"ping\\\");\\n  }\",\n        \"component_description\": \"Defines a public method named 'finish'. This method creates a BasicMessageChannel with the Flutter view, using the identifier 'navigation-test' and StringCodec for encoding/decoding messages. It sends a message 'ping' through this channel.\"\n      }\n    ],\n    \"overall_description\": \"The provided Java code defines an Android activity named 'MainActivity', which extends FlutterActivity to integrate a Flutter application. The class overrides the onCreate method to register plugins automatically using GeneratedPluginRegistrant. Additionally, it includes a finish method that establishes a BasicMessageChannel for communication between Flutter and the host Android environment, sending a 'ping' message when invoked.\"\n  }\n}"
    },
    "java_21": {
        "input": "// Copyright 2014 The Flutter Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\npackage dev.benchmarks.platform_views_layout_hybrid_composition;\n\nimport android.content.Context;\nimport android.graphics.Color;\nimport android.view.View;\nimport android.widget.TextView;\nimport io.flutter.plugin.platform.PlatformView;\n\npublic class DummyPlatformView implements PlatformView {\n    private final TextView textView;\n\n    @SuppressWarnings(\"unchecked\")\n    DummyPlatformView(final Context context, int id) {\n        textView = new TextView(context);\n        textView.setTextSize(72);\n        textView.setBackgroundColor(Color.rgb(255, 255, 255));\n        textView.setText(\"DummyPlatformView\");\n    }\n\n    @Override\n    public View getView() {\n        return textView;\n    }\n\n    @Override\n    public void dispose() {}\n}\n",
        "output": "{\n  \"output\": {\n    \"programming_language\": \"Java\",\n    \"components\": [\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import android.content.Context;\",\n        \"component_description\": \"Imports the Context class from the android.content package, used to access application-specific resources and classes.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import android.graphics.Color;\",\n        \"component_description\": \"Imports the Color class from the android.graphics package, providing constants for color values.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import android.view.View;\",\n        \"component_description\": \"Imports the View class from the android.view package, representing a basic building block for user interface components.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import android.widget.TextView;\",\n        \"component_description\": \"Imports the TextView class from the android.widget package, used to display text on the screen.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import io.flutter.plugin.platform.PlatformView;\",\n        \"component_description\": \"Imports the PlatformView interface from the io.flutter.plugin.platform package, required for creating platform-specific views in Flutter.\"\n      },\n      {\n        \"component_type\": \"CLASS_DEFINITION\",\n        \"component_name\": \"DummyPlatformView\",\n        \"component_code\": \"public class DummyPlatformView implements PlatformView {\\n    private final TextView textView;\\n\\n    @SuppressWarnings(\\\"unchecked\\\")\\n    DummyPlatformView(final Context context, int id) {\\n        textView = new TextView(context);\\n        textView.setTextSize(72);\\n        textView.setBackgroundColor(Color.rgb(255, 255, 255));\\n        textView.setText(\\\"DummyPlatformView\\\");\\n    }\\n\\n    @Override\\n    public View getView() {\\n        return textView;\\n    }\\n\\n    @Override\\n    public void dispose() {}\\n}\",\n        \"component_description\": \"Defines a class named DummyPlatformView that implements the PlatformView interface. It contains a private final TextView field and provides implementations for the getView and dispose methods.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"textView\",\n        \"component_code\": \"private final TextView textView;\",\n        \"component_description\": \"Declares a private final field named textView of type TextView, used to display text within the DummyPlatformView.\"\n      },\n      {\n        \"component_type\": \"CONSTRUCTOR\",\n        \"component_name\": \"DummyPlatformView\",\n        \"component_code\": \"@SuppressWarnings(\\\"unchecked\\\")\\n    DummyPlatformView(final Context context, int id) {\\n        textView = new TextView(context);\\n        textView.setTextSize(72);\\n        textView.setBackgroundColor(Color.rgb(255, 255, 255));\\n        textView.setText(\\\"DummyPlatformView\\\");\\n    }\",\n        \"component_description\": \"Defines the constructor for DummyPlatformView, which initializes a new TextView with specified context, sets its text size to 72, background color to white, and text content to 'DummyPlatformView'. The @SuppressWarnings annotation is used to suppress unchecked warnings.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"getView\",\n        \"component_code\": \"@Override\\n    public View getView() {\\n        return textView;\\n    }\",\n        \"component_description\": \"Overrides the getView method from the PlatformView interface, returning the TextView instance as the view to be displayed.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"dispose\",\n        \"component_code\": \"@Override\\n    public void dispose() {}\",\n        \"component_description\": \"Overrides the dispose method from the PlatformView interface. The current implementation is empty, indicating that no specific cleanup actions are performed when the view is disposed.\"\n      }\n    ],\n    \"overall_description\": \"The Java code defines a class named DummyPlatformView that implements the PlatformView interface from Flutter's platform plugin package. This class is designed to create and manage a simple TextView displaying 'DummyPlatformView' with specified text size and background color. The class includes a constructor for initializing the TextView, a getView method for returning the TextView as a view component, and an empty dispose method for handling cleanup if necessary.\"\n  }\n}"
    },
    "java_22": {
        "input": "<gh_stars>1000+\n// Copyright 2014 The Flutter Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\npackage io.flutter.integration.platformviews;\n\nimport android.content.Context;\n\nimport io.flutter.embedding.engine.dart.DartExecutor;\nimport io.flutter.plugin.common.MethodChannel;\nimport io.flutter.plugin.platform.PlatformView;\nimport io.flutter.plugin.platform.PlatformViewFactory;\n\npublic class SimpleViewFactory extends PlatformViewFactory {\n    final DartExecutor executor;\n\n    public SimpleViewFactory(DartExecutor executor) {\n        super(null);\n        this.executor = executor;\n    }\n\n    @Override\n    public PlatformView create(Context context, int id, Object params) {\n        MethodChannel methodChannel = new MethodChannel(executor, \"simple_view/\" + id);\n        return new SimplePlatformView(context, methodChannel);\n    }\n}\n",
        "output": "{\n  \"output\": {\n    \"programming_language\": \"Java\",\n    \"components\": [\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import android.content.Context;\",\n        \"component_description\": \"Imports the Context class from the android.content package, which is used to access application-specific resources and classes.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import io.flutter.embedding.engine.dart.DartExecutor;\",\n        \"component_description\": \"Imports the DartExecutor class from the io.flutter.embedding.engine.dart package, which is responsible for executing Dart code.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import io.flutter.plugin.common.MethodChannel;\",\n        \"component_description\": \"Imports the MethodChannel class from the io.flutter.plugin.common package, used for communication between Flutter and platform-specific code.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import io.flutter.plugin.platform.PlatformView;\",\n        \"component_description\": \"Imports the PlatformView class from the io.flutter.plugin.platform package, which represents a view that can be embedded in Flutter.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import io.flutter.plugin.platform.PlatformViewFactory;\",\n        \"component_description\": \"Imports the PlatformViewFactory class from the io.flutter.plugin.platform package, which is used to create platform views.\"\n      },\n      {\n        \"component_type\": \"CLASS_DEFINITION\",\n        \"component_name\": \"SimpleViewFactory\",\n        \"component_code\": \"public class SimpleViewFactory extends PlatformViewFactory { ... }\",\n        \"component_description\": \"Defines a public class named SimpleViewFactory that extends PlatformViewFactory. This class is responsible for creating instances of SimplePlatformView.\"\n      },\n      {\n        \"component_type\": \"FIELD_DEFINITION\",\n        \"component_name\": \"executor\",\n        \"component_code\": \"final DartExecutor executor;\",\n        \"component_description\": \"Declares a final field named executor of type DartExecutor, which will be used to execute Dart code and facilitate communication with the Flutter side.\"\n      },\n      {\n        \"component_type\": \"CONSTRUCTOR\",\n        \"component_name\": \"SimpleViewFactory\",\n        \"component_code\": \"public SimpleViewFactory(DartExecutor executor) { ... }\",\n        \"component_description\": \"Defines a constructor for the SimpleViewFactory class that takes a DartExecutor as an argument and initializes the executor field. It also calls the superclass (PlatformViewFactory) constructor with null.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"create\",\n        \"component_code\": \"@Override\\npublic PlatformView create(Context context, int id, Object params) { ... }\",\n        \"component_description\": \"Overrides the create method from the PlatformViewFactory class. This method is responsible for creating and returning a new instance of SimplePlatformView, along with setting up a MethodChannel for communication between Flutter and the platform-specific view.\"\n      }\n    ],\n    \"overall_description\": \"The provided Java code defines a class named SimpleViewFactory that extends PlatformViewFactory from the Flutter plugin system. This factory is responsible for creating instances of a custom platform view called SimplePlatformView. It takes a DartExecutor as a dependency to facilitate communication between the Flutter framework and the Android native side using MethodChannels. The create method is overridden to instantiate the SimplePlatformView with a context, an ID, and any additional parameters, while also setting up a MethodChannel for interaction.\"\n  }\n}"
    },
    "java_23": {
        "input": "<gh_stars>1000+\n/*\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.fabric;\n\nimport androidx.annotation.NonNull;\nimport com.facebook.proguard.annotations.DoNotStrip;\n\n/**\n * ReactNative Configuration that allows to customize the behavior of key/value pairs used by the\n * framework to enable/disable capabilities.\n *\n * <p>The hosting app should provide an implementation of this interface to allow specific\n * customization of single keys. An empty implementation is available as {@link\n * EmptyReactNativeConfig}.\n *\n * <p>This is a wrapper for the ReactNativeConfig object in C++\n */\n@DoNotStrip\npublic interface ReactNativeConfig {\n  /**\n   * Get a boolean param by string name. Default should be false.\n   *\n   * @param param The string name of the parameter being requested.\n   */\n  @DoNotStrip\n  boolean getBool(@NonNull String param);\n\n  /**\n   * Get an integer param by string name. Default should be 0.\n   *\n   * @param param The string name of the parameter being requested.\n   */\n  @DoNotStrip\n  int getInt64(@NonNull String param);\n\n  /**\n   * Get a string param by string name. Default should be \"\", empty string.\n   *\n   * @param param The string name of the parameter being requested.\n   */\n  @DoNotStrip\n  String getString(@NonNull String param);\n\n  /**\n   * Get a double param by string name. Default should be 0.\n   *\n   * @param param The string name of the parameter being requested.\n   */\n  @DoNotStrip\n  double getDouble(@NonNull String param);\n}\n",
        "output": "{\n  \"output\": {\n    \"programming_language\": \"Java\",\n    \"components\": [\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import androidx.annotation.NonNull;\",\n        \"component_description\": \"Imports the NonNull annotation from the androidx.annotation package, which is used to indicate that a parameter or return value cannot be null.\"\n      },\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import com.facebook.proguard.annotations.DoNotStrip;\",\n        \"component_description\": \"Imports the DoNotStrip annotation from the com.facebook.proguard.annotations package, which is used to prevent ProGuard from stripping the annotated elements during code obfuscation.\"\n      },\n      {\n        \"component_type\": \"INTERFACE_DEFINITION\",\n        \"component_name\": \"ReactNativeConfig\",\n        \"component_code\": \"@DoNotStrip\\npublic interface ReactNativeConfig {\\n  @DoNotStrip\\n  boolean getBool(@NonNull String param);\\n\\n  @DoNotStrip\\n  int getInt64(@NonNull String param);\\n\\n  @DoNotStrip\\n  String getString(@NonNull String param);\\n\\n  @DoNotStrip\\n  double getDouble(@NonNull String param);\\n}\",\n        \"component_description\": \"Defines the ReactNativeConfig interface, annotated with DoNotStrip to prevent it from being stripped during code obfuscation. This interface provides methods for retrieving configuration parameters of various types (boolean, int, String, and double) by their string names.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"getBool\",\n        \"component_code\": \"@DoNotStrip\\n  boolean getBool(@NonNull String param);\",\n        \"component_description\": \"Declares the getBool method, annotated with DoNotStrip. This method is intended to retrieve a boolean configuration parameter by its string name and should return false if the parameter is not found.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"getInt64\",\n        \"component_code\": \"@DoNotStrip\\n  int getInt64(@NonNull String param);\",\n        \"component_description\": \"Declares the getInt64 method, annotated with DoNotStrip. This method is intended to retrieve an integer configuration parameter by its string name and should return 0 if the parameter is not found.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"getString\",\n        \"component_code\": \"@DoNotStrip\\n  String getString(@NonNull String param);\",\n        \"component_description\": \"Declares the getString method, annotated with DoNotStrip. This method is intended to retrieve a string configuration parameter by its string name and should return an empty string if the parameter is not found.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"getDouble\",\n        \"component_code\": \"@DoNotStrip\\n  double getDouble(@NonNull String param);\",\n        \"component_description\": \"Declares the getDouble method, annotated with DoNotStrip. This method is intended to retrieve a double configuration parameter by its string name and should return 0 if the parameter is not found.\"\n      }\n    ],\n    \"overall_description\": \"The ReactNativeConfig interface provides methods for retrieving configuration parameters of various types (boolean, int, String, and double) by their string names. Each method includes a @NonNull annotation to indicate that the parameter cannot be null. The interface itself and all its methods are annotated with @DoNotStrip to prevent them from being stripped during code obfuscation. Implementations of this interface allow customization of React Native configuration settings.\"\n  }\n}"
    },
    "java_24": {
        "input": "<filename>ReactAndroid/src/main/java/com/facebook/react/ReactInstanceEventListener.java\n/*\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react;\n\nimport com.facebook.react.bridge.ReactContext;\n\n/**\n * New Listener interface for react instance events. {@Link\n * ReactInstanceManager.ReactInstanceEventListener will be deprecated.}\n */\npublic interface ReactInstanceEventListener {\n\n  /**\n   * Called when the react context is initialized (all modules registered). Always called on the UI\n   * thread.\n   */\n  void onReactContextInitialized(ReactContext context);\n}\n",
        "output": "{\n  \"output\": {\n    \"programming_language\": \"Java\",\n    \"components\": [\n      {\n        \"component_type\": \"IMPORT_STATEMENT\",\n        \"component_name\": null,\n        \"component_code\": \"import com.facebook.react.bridge.ReactContext;\",\n        \"component_description\": \"Imports the ReactContext class from the com.facebook.react.bridge package, which is used to represent a context for the React Native instance.\"\n      },\n      {\n        \"component_type\": \"INTERFACE_DEFINITION\",\n        \"component_name\": \"ReactInstanceEventListener\",\n        \"component_code\": \"public interface ReactInstanceEventListener {\\n\\n  /**\\n   * Called when the react context is initialized (all modules registered). Always called on the UI\\n   * thread.\\n   */\\n  void onReactContextInitialized(ReactContext context);\\n}\",\n        \"component_description\": \"Defines a public interface named ReactInstanceEventListener. This interface includes one method, onReactContextInitialized, which is intended to be implemented by classes that need to listen for events related to the initialization of the React Native context.\"\n      },\n      {\n        \"component_type\": \"METHOD_DEFINITION\",\n        \"component_name\": \"onReactContextInitialized\",\n        \"component_code\": \"void onReactContextInitialized(ReactContext context);\",\n        \"component_description\": \"Declares a method named onReactContextInitialized that takes a single parameter of type ReactContext. This method is intended to be called when the React Native context has been initialized, indicating that all modules have been registered. The implementation of this method should handle any necessary actions related to the initialization event and will always be executed on the UI thread.\"\n      }\n    ],\n    \"overall_description\": \"The Java code defines an interface named ReactInstanceEventListener within the com.facebook.react package. This interface is designed for classes that need to listen for events related to the initialization of the React Native context. It includes a single method, onReactContextInitialized, which must be implemented by any class that implements this interface. The purpose of this method is to handle actions when all modules in the React Native context have been registered, and it will always run on the UI thread.\"\n  }\n}"
    }
}