{
    "sql_0": {
        "vulnerability_type": "Buffer Overflow",
        "vulnerability_code": "CREATE FUNCTION GetUserDetails(username VARCHAR(50)) RETURNS TABLE AS $$\nBEGIN\n    RETURN QUERY EXECUTE 'SELECT * FROM users WHERE username = ''' || username || '''';\nEND;$$ LANGUAGE plpgsql;",
        "cvss_score": 7.2,
        "fixed_code": "CREATE FUNCTION GetUserDetails(username VARCHAR(50)) RETURNS TABLE AS $$\nBEGIN\n    RETURN QUERY EXECUTE 'SELECT * FROM users WHERE username = $1' USING username;\nEND;$$ LANGUAGE plpgsql;",
        "exploit_ways": [
            "An attacker could inject a long string to cause buffer overflow and potentially execute arbitrary code.",
            "Injection of special SQL sequences like ';' followed by other commands can lead to unauthorized data access or modification.",
            "Using crafted input, an attacker might be able to manipulate the function's behavior, leading to a denial-of-service condition."
        ]
    },
    "sql_1": {
        "vulnerability_type": "Command Injection",
        "vulnerability_code": "SELECT * FROM users WHERE username = '\" OR 1=1; -- \"'",
        "cvss_score": 8.6,
        "fixed_code": "import sqlite3\ndef safe_query(username):\n    conn = sqlite3.connect('users.db')\n    cursor = conn.cursor()\n    query = \"SELECT * FROM users WHERE username = ?\"\n    cursor.execute(query, (username,))\n    results = cursor.fetchall()\n    return results",
        "exploit_ways": [
            "An attacker could input '; DROP TABLE users; --' to delete the users table.",
            "Could use '; SELECT password FROM admin;' to extract passwords from an admin table.",
            "Injecting '; SLEEP(10); --' can cause a denial of service by delaying server response."
        ]
    },
    "sql_2": {
        "vulnerability_type": "Privilege Escalation",
        "vulnerability_code": "CREATE PROCEDURE escalate_privileges AS BEGIN EXEC sp_addrolemember 'db_owner', SUSER_SNAME(); END;",
        "cvss_score": 9.0,
        "fixed_code": "CREATE PROCEDURE safe_escalate_privileges @username NVARCHAR(128) AS BEGIN IF (SUSER_SNAME() = 'admin') EXEC sp_addrolemember 'db_owner', @username; END;",
        "exploit_ways": [
            "An attacker can execute the stored procedure to gain db_owner privileges if they have any access.",
            "If linked servers are configured, an attacker could use this procedure to escalate privileges across multiple databases.",
            "Exploiting SQL injection vulnerabilities elsewhere in the application could lead to execution of this procedure with unintended parameters."
        ]
    },
    "sql_3": {
        "vulnerability_type": "Broken Authentication",
        "vulnerability_code": "CREATE TABLE users (\r\n    id INT PRIMARY KEY,\r\n    username VARCHAR(50),\r\n    password_hash VARCHAR(255)\r\n);\r\n\r\nINSERT INTO users (id, username, password_hash) VALUES (1, 'admin', 'cGFzc3dvcmQ='); -- Base64 for 'password'\r\n\r\nDELIMITER $$\r\nCREATE PROCEDURE login(IN p_username VARCHAR(50), IN p_password VARCHAR(255))\r\nBEGIN\r\n    DECLARE v_password_hash VARCHAR(255);\r\n    SELECT password_hash INTO v_password_hash FROM users WHERE username = p_username;\r\n    IF v_password_hash IS NOT NULL AND HEX(SHA1(p_password)) = HEX(v_password_hash) THEN\r\n        SELECT 'Login successful';\r\n    ELSE\r\n        SELECT 'Login failed';\r\n    END IF;\r\nEND$$\r\nDELIMITER ;",
        "cvss_score": 7.5,
        "fixed_code": "CREATE TABLE users (\r\n    id INT PRIMARY KEY,\r\n    username VARCHAR(50),\r\n    password_hash VARCHAR(255)\r\n);\r\n\r\nINSERT INTO users (id, username, password_hash) VALUES (1, 'admin', SHA2('password', 256)); -- SHA2 hash for 'password'\r\n\r\nDELIMITER $$\r\nCREATE PROCEDURE login(IN p_username VARCHAR(50), IN p_password VARCHAR(255))\r\nBEGIN\r\n    DECLARE v_password_hash VARCHAR(255);\r\n    SELECT password_hash INTO v_password_hash FROM users WHERE username = p_username;\r\n    IF v_password_hash IS NOT NULL AND SHA2(p_password, 256) = v_password_hash THEN\r\n        SELECT 'Login successful';\r\n    ELSE\r\n        SELECT 'Login failed';\r\n    END IF;\r\nEND$$\r\nDELIMITER ;",
        "exploit_ways": [
            "An attacker can try common passwords like 'password' to guess the admin's credentials.",
            "If password hashing is weak, an attacker could use a rainbow table to crack the hash and gain access.",
            "Brute force attacks on the login procedure could be used to find valid username/password combinations."
        ]
    },
    "sql_4": {
        "vulnerability_type": "Remote Code Execution (RCE)",
        "vulnerability_code": "CREATE PROCEDURE GetUserData (@username VARCHAR(50)) AS BEGIN DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM Users WHERE username='''+@username+'''' EXEC sp_executesql @sql END",
        "cvss_score": 9.8,
        "fixed_code": "CREATE PROCEDURE GetUserData (@username VARCHAR(50)) AS BEGIN SELECT * FROM Users WHERE username = @username END",
        "exploit_ways": [
            "An attacker could input a payload like \"admin'; DROP TABLE Users; --\" to drop the Users table.",
            "The vulnerability can be used to exfiltrate data by appending UNION SELECT statements, e.g., \"admin' UNION SELECT password FROM Users WHERE username = 'admin--\".",
            "An attacker might attempt to escalate privileges using system stored procedures or functions within the injected SQL."
        ]
    },
    "sql_5": {
        "vulnerability_type": "Privilege Escalation",
        "vulnerability_code": "CREATE PROCEDURE dbo.UpdateUserPermissions\r\n(\r\n    @UserID INT,\r\n    @NewRole VARCHAR(50)\r\n)\r\nAS\r\nBEGIN\r\n    DECLARE @sql NVARCHAR(MAX);\r\n    SET @sql = N'UPDATE Users SET Role = ''' + @NewRole + ''' WHERE UserID = ' + CAST(@UserID AS NVARCHAR(10));\r\n    EXEC sp_executesql @sql;\r\nEND",
        "cvss_score": 9.0,
        "fixed_code": "CREATE PROCEDURE dbo.UpdateUserPermissions\r\n(\r\n    @UserID INT,\r\n    @NewRole VARCHAR(50)\r\n)\r\nAS\r\nBEGIN\r\n    UPDATE Users SET Role = @NewRole WHERE UserID = @UserID;\r\nEND",
        "exploit_ways": [
            "An attacker could modify the @NewRole parameter to 'admin' or another elevated role for any user.",
            "By setting @NewRole to a specially crafted string, an attacker can try to inject additional SQL commands to alter other tables or database settings.",
            "Using a UserID of -1 and setting @NewRole to '; DROP TABLE Users; --', an attacker could attempt to delete the Users table or perform other destructive actions."
        ]
    },
    "sql_7": {
        "vulnerability_type": "Remote Code Execution (RCE)",
        "vulnerability_code": "CREATE PROCEDURE GetUserData (@user_id INT)\r\nAS\r\nBEGIN\r\n    DECLARE @sql NVARCHAR(MAX);\r\n    SET @sql = 'SELECT * FROM Users WHERE id = ' + CAST(@user_id AS NVARCHAR(10));\r\n    EXEC sp_executesql @sql;\r\nEND",
        "cvss_score": 8.6,
        "fixed_code": "CREATE PROCEDURE GetUserData (@user_id INT)\r\nAS\r\nBEGIN\r\n    SELECT * FROM Users WHERE id = @user_id;\r\nEND",
        "exploit_ways": [
            "An attacker can input a crafted user_id like '1; DROP TABLE Users' to delete the Users table.",
            "By using a crafted user_id like '1 UNION SELECT username, password FROM Admins', an attacker can extract admin credentials.",
            "Inputting '1; EXEC xp_cmdshell 'whoami'' could allow execution of system commands."
        ]
    },
    "sql_8": {
        "vulnerability_type": "Command Injection",
        "vulnerability_code": "CREATE CLASS VulnerableClass {\n    PROCEDURE ExecuteQuery(query VARCHAR) {\n        EXECUTE IMMEDIATE query;\n    }\n}",
        "cvss_score": 8.2,
        "fixed_code": "CREATE CLASS SafeClass {\n    PROCEDURE ExecuteQuery(query VARCHAR) {\n        DECLARE allowed_commands ARRAY OF STRING = ['SELECT', 'INSERT', 'UPDATE'];\n        DECLARE cmd_parts ARRAY OF STRING = SPLIT(query, ' ');\n        IF FIND(cmd_parts[0], allowed_commands) > 0 THEN\n            EXECUTE IMMEDIATE query;\n        ELSE\n            RAISE_ERROR('Invalid command');\n        END IF;\n    }\n}",
        "exploit_ways": [
            "An attacker can inject a DROP TABLE statement to delete database tables.",
            "They can use a UNION SELECT statement to retrieve sensitive data from other tables.",
            "Could input a malicious payload like 'SELECT * FROM users; DELETE FROM users' for data theft and destruction."
        ]
    },
    "sql_10": {
        "vulnerability_type": "Buffer Overflow",
        "vulnerability_code": "CREATE OR REPLACE CLASS vulnerable_class AS $$\nBEGIN\n    DECLARE buffer CHAR(10);\n    SELECT data INTO buffer FROM unsafe_table WHERE id = 1;\nEND;\n$$ LANGUAGE plpgsql;",
        "cvss_score": 8.5,
        "fixed_code": "CREATE OR REPLACE CLASS vulnerable_class AS $$\nBEGIN\n    DECLARE buffer VARCHAR(255);\n    SELECT SUBSTRING(data, 1, 10) INTO buffer FROM unsafe_table WHERE id = 1;\nEND;\n$$ LANGUAGE plpgsql;",
        "exploit_ways": [
            "An attacker could insert a value longer than 10 characters into the unsafe_table to cause a buffer overflow.",
            "The overflow can be used to execute arbitrary code if combined with other vulnerabilities in the database system.",
            "Exploitation might lead to unauthorized access or privilege escalation within the database environment."
        ]
    },
    "sql_11": {
        "vulnerability_type": "Command Injection",
        "vulnerability_code": "CREATE OR REPLACE FUNCTION execute_user_query(query TEXT) RETURNS TABLE AS $$\nBEGIN\n    RETURN QUERY EXECUTE query;\nEND;\n$$ LANGUAGE plpgsql;",
        "cvss_score": 9.1,
        "fixed_code": "CREATE OR REPLACE FUNCTION execute_user_query(table_name TEXT, column_name TEXT, value TEXT) RETURNS TABLE AS $$\nBEGIN\n    RETURN QUERY EXECUTE format('SELECT * FROM %I WHERE %I = $1', table_name, column_name) USING value;\nEND;\n$$ LANGUAGE plpgsql;",
        "exploit_ways": [
            "An attacker can inject 'users; DROP TABLE users' to delete the users table.",
            "They can retrieve sensitive data from other tables using SQL injection payloads.",
            "Could use time-based or error-based techniques to extract information without altering data."
        ]
    },
    "sql_12": {
        "vulnerability_type": "Insecure Deserialization",
        "vulnerability_code": "CREATE CLASS VulnerableClass AS $$\nBEGIN\n    EXECUTE IMMEDIATE 'SELECT * FROM ' || input_table;\nEND;\n$$ LANGUAGE plpgsql;",
        "cvss_score": 8.5,
        "fixed_code": "CREATE FUNCTION safe_select(input_table TEXT) RETURNS TABLE AS $$\nDECLARE\n    valid_tables TEXT[] := ARRAY['users', 'products']; -- List of allowed tables\nBEGIN\n    IF input_table = ANY(valid_tables) THEN\n        RETURN QUERY EXECUTE 'SELECT * FROM ' || quote_ident(input_table);\n    ELSE\n        RAISE EXCEPTION 'Invalid table name';\n    END IF;\nEND;\n$$ LANGUAGE plpgsql;",
        "exploit_ways": [
            "An attacker can input 'users; DROP TABLE products' to delete a critical table.",
            "Using a table name like 'users; SELECT * FROM secrets' could lead to data exfiltration.",
            "Injecting crafted SQL can cause denial of service by executing expensive queries or operations."
        ]
    },
    "sql_13": {
        "vulnerability_type": "Command Injection",
        "vulnerability_code": "import sqlite3\n\ndef execute_query(database, user_input):\n    conn = sqlite3.connect(database)\n    cursor = conn.cursor()\n    query = f'SELECT * FROM users WHERE username = \"{user_input}\"'\n    cursor.execute(query)\n    results = cursor.fetchall()\n    conn.close()\n    return results",
        "cvss_score": 7.5,
        "fixed_code": "import sqlite3\n\ndef execute_query(database, user_input):\n    conn = sqlite3.connect(database)\n    cursor = conn.cursor()\n    query = 'SELECT * FROM users WHERE username = ?'\n    cursor.execute(query, (user_input,))\n    results = cursor.fetchall()\n    conn.close()\n    return results",
        "exploit_ways": [
            "An attacker can input a username like \"admin' OR '1'='1\" to bypass authentication checks.",
            "They could inject malicious SQL commands to drop tables or extract sensitive information from the database.",
            "Using crafted inputs, attackers might attempt to union select data from other unrelated tables in the database."
        ]
    },
    "sql_14": {
        "vulnerability_type": "Cross-Site Scripting (XSS)",
        "vulnerability_code": "CREATE FUNCTION GetUserDetails(userId INT) RETURNS VARCHAR(255)\nBEGIN\n    DECLARE userDetails VARCHAR(255);\n    SET @query = CONCAT('SELECT name FROM users WHERE id = ', userId);\n    PREPARE stmt FROM @query;\n    EXECUTE stmt;\n    DEALLOCATE PREPARE stmt;\n    RETURN userDetails;\nEND;",
        "cvss_score": 7.5,
        "fixed_code": "CREATE FUNCTION GetUserDetails(userId INT) RETURNS VARCHAR(255)\nBEGIN\n    DECLARE userDetails VARCHAR(255);\n    SET @query = 'SELECT name FROM users WHERE id = ?';\n    PREPARE stmt FROM @query;\n    SET @userId = userId;\n    EXECUTE stmt USING @userId;\n    DEALLOCATE PREPARE stmt;\n    RETURN userDetails;\nEND;",
        "exploit_ways": [
            "An attacker could exploit this by injecting malicious SQL that alters the query logic.",
            "By inputting a specially crafted user ID, an attacker can cause unexpected behavior or data leakage.",
            "This vulnerability might allow for secondary injection attacks if the results are used in other contexts without proper sanitization."
        ]
    },
    "sql_15": {
        "vulnerability_type": "Buffer Overflow",
        "vulnerability_code": "CREATE FUNCTION vulnerable_func(input_string VARCHAR(255)) RETURNS VARCHAR(1024) DETERMINISTIC BEGIN DECLARE result VARCHAR(1024); SET @query = CONCAT('SELECT ''', input_string, ''' INTO @result'); PREPARE stmt FROM @query; EXECUTE stmt; DEALLOCATE PREPARE stmt; RETURN @result; END",
        "cvss_score": 9.3,
        "fixed_code": "CREATE FUNCTION safe_func(input_string VARCHAR(255)) RETURNS VARCHAR(1024) DETERMINISTIC BEGIN DECLARE result VARCHAR(1024); SET @query = CONCAT('SELECT ? INTO @result'); PREPARE stmt FROM @query; EXECUTE stmt USING input_string; DEALLOCATE PREPARE stmt; RETURN @result; END",
        "exploit_ways": [
            "An attacker can inject a large string to cause buffer overflow and potentially execute arbitrary code.",
            "By injecting SQL commands, the attacker could manipulate database operations leading to unauthorized data access or modification.",
            "Crafting specific input sequences might allow the attacker to corrupt memory, leading to system crashes or privilege escalations."
        ]
    },
    "sql_16": {
        "vulnerability_type": "Cross-Site Request Forgery (CSRF)",
        "vulnerability_code": "CREATE CLASS TransactionHandler AS $$\nBEGIN\n  IF current_user = 'admin' THEN\n    EXECUTE IMMEDIATE 'UPDATE accounts SET balance = balance - 100 WHERE id = ' || request_id;\n  END IF;\nEND;$$ LANGUAGE plpgsql;",
        "cvss_score": 7.5,
        "fixed_code": "CREATE CLASS TransactionHandler AS $$\nBEGIN\n  IF current_user = 'admin' AND request_token = session_token THEN\n    EXECUTE IMMEDIATE 'UPDATE accounts SET balance = balance - 100 WHERE id = ' || request_id;\n  END IF;\nEND;$$ LANGUAGE plpgsql;",
        "exploit_ways": [
            "An attacker can trick an authenticated admin into visiting a malicious site that sends a forged request to perform unauthorized transactions.",
            "The attacker could use a CSRF token fixation attack if the application improperly handles session tokens, leading to unauthorized actions by the admin.",
            "By injecting a crafted URL in emails or messages, the attacker can exploit the admin's browser to execute unintended database updates without their knowledge."
        ]
    },
    "sql_17": {
        "vulnerability_type": "Cross-Site Scripting (XSS)",
        "vulnerability_code": "SELECT * FROM users WHERE username = '' || user_input || ''",
        "cvss_score": 6.1,
        "fixed_code": "SELECT * FROM users WHERE username = $1",
        "exploit_ways": [
            "An attacker can inject script tags to steal cookies or session tokens.",
            "Use JavaScript code to redirect victims to a malicious website.",
            "Craft input with <img src=x onerror=alert(1)> to test for DOM-based XSS."
        ]
    },
    "sql_18": {
        "vulnerability_type": "Command Injection",
        "vulnerability_code": "CREATE FUNCTION get_user_data(user_id INT) RETURNS VARCHAR(255)\nBEGIN\nDECLARE query_string VARCHAR(255);\nSET query_string = CONCAT('SELECT * FROM users WHERE id = ', user_id);\nRETURN (query_string);\nEND;",
        "cvss_score": 7.5,
        "fixed_code": "CREATE FUNCTION get_user_data(user_id INT) RETURNS VARCHAR(255)\nBEGIN\nDECLARE query_string VARCHAR(255);\nSET @user_id_str = CAST(user_id AS CHAR);\nSET query_string = CONCAT('SELECT * FROM users WHERE id = ', @user_id_str);\nRETURN (query_string);\nEND;",
        "exploit_ways": [
            "An attacker could input a specially crafted user_id to alter the SQL query and extract additional data.",
            "Could inject '; DROP TABLE users; --' as user_id to drop the users table.",
            "Injecting 'UNION SELECT username, password FROM admin;' might allow retrieval of admin credentials."
        ]
    },
    "sql_19": {
        "vulnerability_type": "Path Traversal",
        "vulnerability_code": "CREATE PROCEDURE GetFileContent (@filename NVARCHAR(255)) AS BEGIN DECLARE @sql NVARCHAR(MAX); SET @sql = 'SELECT * FROM OPENROWSET(BULK N''' + @filename + ''', SINGLE_CLOB) AS Contents'; EXEC sp_executesql @sql; END",
        "cvss_score": 8.8,
        "fixed_code": "CREATE PROCEDURE GetFileContent (@filename NVARCHAR(255)) AS BEGIN DECLARE @safePath NVARCHAR(255); SET @safePath = N'C:\\SafeFolder\\' + RIGHT(@filename, CHARINDEX('\\', REVERSE(@filename))-1); IF (LEFT(@safePath, 13) = 'C:\\SafeFolder\\') BEGIN DECLARE @sql NVARCHAR(MAX); SET @sql = 'SELECT * FROM OPENROWSET(BULK N''' + @safePath + ''', SINGLE_CLOB) AS Contents'; EXEC sp_executesql @sql; END ELSE PRINT 'Invalid path.' END",
        "exploit_ways": [
            "An attacker can input '..\\..\\Windows\\system.ini' to access system files.",
            "By using '../etc/passwd' on a Windows system with mounted Linux shares, they might access sensitive data.",
            "Input like '../../boot.ini' could reveal boot configuration details."
        ]
    },
    "sql_20": {
        "vulnerability_type": "Insecure Deserialization",
        "vulnerability_code": "CREATE OR REPLACE CLASS UserSession AS {\\n    userData VARCHAR(255),\\n    deserializeData(data VARCHAR) RETURNING VOID AS $$\\n        DECLARE session JSON;\\n        BEGIN\\n            SELECT data::json INTO session;\\n            self.userData := session->>'user';\\n        END;\\n$$ LANGUAGE plpgsql;",
        "cvss_score": 7.5,
        "fixed_code": "CREATE OR REPLACE CLASS UserSession AS {\\n    userData VARCHAR(255),\\n    deserializeData(data VARCHAR) RETURNING VOID AS $$\\n        DECLARE session JSONB;\\n        BEGIN\\n            SELECT data::jsonb INTO session;\\n            IF jsonb_typeof(session->'user') = 'string' THEN\\n                self.userData := session->>'user';\\n            ELSE\\n                RAISE EXCEPTION 'Invalid user data format';\\n            END IF;\\n        END;\\n$$ LANGUAGE plpgsql;",
        "exploit_ways": [
            "An attacker could provide a JSON payload with unexpected data types to cause type errors or other side effects.",
            "By crafting a specially designed JSON object, an attacker might be able to inject SQL or PL/pgSQL code that gets executed during deserialization.",
            "Attacker can manipulate the input JSON to execute arbitrary functions within the database if proper validation is not in place."
        ]
    },
    "sql_21": {
        "vulnerability_type": "Broken Authentication",
        "vulnerability_code": "CREATE FUNCTION authenticate(user VARCHAR, pass VARCHAR) RETURNS BOOLEAN AS $$\nBEGIN\n    RETURN EXISTS (SELECT 1 FROM users WHERE username = user AND password = pass);\nEND;\n$$ LANGUAGE plpgsql;",
        "cvss_score": 7.5,
        "fixed_code": "CREATE FUNCTION authenticate(user VARCHAR, pass VARCHAR) RETURNS BOOLEAN AS $$\nDECLARE\n    hashed_pass VARCHAR;\nBEGIN\n    SELECT password INTO hashed_pass FROM users WHERE username = user LIMIT 1;\n    RETURN hashed_pass IS NOT NULL AND pass = hashed_pass;\nEND;\n$$ LANGUAGE plpgsql;",
        "exploit_ways": [
            "An attacker could use a dictionary attack to brute-force the password.",
            "If the password is stored in plain text, an attacker can easily retrieve it by querying the database.",
            "SQL injection might still be possible if other parts of the application do not sanitize inputs properly."
        ]
    },
    "sql_22": {
        "vulnerability_type": "Cross-Site Request Forgery (CSRF)",
        "vulnerability_code": "CREATE PROCEDURE UpdateUserDetails (@userId INT, @email NVARCHAR(255)) AS BEGIN UPDATE Users SET email = @email WHERE id = @userId END",
        "cvss_score": 6.8,
        "fixed_code": "CREATE PROCEDURE SecureUpdateUserDetails (@userId INT, @email NVARCHAR(255), @csrfToken NVARCHAR(100)) AS BEGIN IF (SELECT COUNT(*) FROM CsrfTokens WHERE token = @csrfToken AND userId = @userId) > 0 BEGIN UPDATE Users SET email = @email WHERE id = @userId DELETE FROM CsrfTokens WHERE token = @csrfToken END ELSE RAISERROR ('Invalid CSRF Token', 16, 1) END",
        "exploit_ways": [
            "An attacker can trick a logged-in user into visiting a malicious website that submits a request to update their email without their consent.",
            "By crafting a URL with the correct parameters, an attacker could exploit CSRF to change another user's email if they are authenticated on the site.",
            "The attacker can use social engineering techniques to lure users into clicking links or submitting forms that include hidden fields for malicious requests."
        ]
    },
    "sql_23": {
        "vulnerability_type": "Buffer Overflow",
        "vulnerability_code": "CREATE PROCEDURE dangerousProcedure AS BEGIN DECLARE @longString VARCHAR(8000); SET @longString = REPLICATE('A', 9000); EXEC('SELECT '''' + @longString + '''''); END",
        "cvss_score": 7.2,
        "fixed_code": "CREATE PROCEDURE safeProcedure AS BEGIN DECLARE @longString VARCHAR(8000); SET @longString = REPLICATE('A', 8000); EXEC sp_executesql N'SELECT @longString', N'@longString NVARCHAR(8000)', @longString; END",
        "exploit_ways": [
            "An attacker could use a long string to overwrite the return address on the stack, leading to arbitrary code execution.",
            "By providing a specially crafted input exceeding buffer limits, an attacker may cause the server to crash or behave unpredictably.",
            "Exploitation can lead to unauthorized access and potentially full control over the database server through corrupting memory."
        ]
    },
    "sql_24": {
        "vulnerability_type": "Privilege Escalation",
        "vulnerability_code": "CREATE PROCEDURE ElevatedQueryExecution(@command NVARCHAR(MAX)) AS\r\nBEGIN\r\n    EXEC sp_executesql @command;\r\nEND",
        "cvss_score": 8.9,
        "fixed_code": "CREATE PROCEDURE ElevatedQueryExecution(@command NVARCHAR(MAX)) AS\r\nBEGIN\r\n    IF USER_NAME() = 'admin_user'\r\n        EXEC sp_executesql @command;\r\n    ELSE\r\n        RAISERROR('Permission Denied', 16, 1);\r\nEND",
        "exploit_ways": [
            "An attacker could execute 'DROP TABLE users' to delete critical data.",
            "They can use the procedure to extract sensitive information by running SELECT queries on other tables.",
            "Could insert malicious SQL commands to alter or corrupt database content."
        ]
    },
    "sql_25": {
        "vulnerability_type": "Session Fixation",
        "vulnerability_code": "CREATE CLASS UserSession AS $$\\nBEGIN\\n    SESSION_ID VARCHAR(100);\\n    USER_ID INT;\\n    PROCEDURE SET_SESSION(p_session_id VARCHAR(100)) AS $$\\n        BEGIN\\n            SESSION_ID := p_session_id;\\n        END;\\n    $$ LANGUAGE plpgsql;\\n$$ LANGUAGE SQL;",
        "cvss_score": 3.5,
        "fixed_code": "CREATE CLASS UserSession AS $$\\nBEGIN\\n    SESSION_ID VARCHAR(100);\\n    USER_ID INT;\\n    PROCEDURE SET_SESSION(p_session_id VARCHAR(100)) AS $$\\n        DECLARE\\n            new_session_id VARCHAR(100);\\n        BEGIN\\n            new_session_id := encode(gen_random_bytes(32), 'hex');\\n            SESSION_ID := new_session_id;\\n        END;\\n    $$ LANGUAGE plpgsql;\\n$$ LANGUAGE SQL;",
        "exploit_ways": [
            "An attacker can predict or guess the session ID and use it to hijack a user's session.",
            "By setting a specific session ID in cookies, an attacker could manipulate sessions if the server does not regenerate IDs upon login.",
            "If session IDs are shared via URLs, attackers can intercept them and gain unauthorized access."
        ]
    },
    "sql_26": {
        "vulnerability_type": "Local File Inclusion (LFI) - Limited Scope",
        "vulnerability_code": "CREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(100)\n);\nINSERT INTO users (id, username, password) VALUES (1, 'admin', 'password123');\n\nDELIMITER $$\nCREATE FUNCTION GetUserInfo(user_id INT) RETURNS TEXT DETERMINISTIC\nBEGIN\n    DECLARE user_info TEXT;\n    SET @query = CONCAT('SELECT * FROM users WHERE id = ', user_id);\n    PREPARE stmt FROM @query;\n    EXECUTE stmt;\n    DEALLOCATE PREPARE stmt;\n    RETURN user_info;\nEND$$\nDELIMITER ;",
        "cvss_score": 7.5,
        "fixed_code": "CREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(100)\n);\nINSERT INTO users (id, username, password) VALUES (1, 'admin', 'password123');\n\nDELIMITER $$\nCREATE FUNCTION GetUserInfo(user_id INT) RETURNS TEXT DETERMINISTIC\nBEGIN\n    DECLARE user_info TEXT;\n    SET @query = CONCAT('SELECT * FROM users WHERE id = ?', CAST(user_id AS CHAR));\n    PREPARE stmt FROM @query;\n    EXECUTE stmt USING user_id;\n    DEALLOCATE PREPARE stmt;\n    RETURN user_info;\nEND$$\nDELIMITER ;",
        "exploit_ways": [
            "An attacker could manipulate the user_id parameter to execute arbitrary SQL queries if dynamic values are not properly sanitized.",
            "If the function is part of a larger application, exploiting this vulnerability might lead to unauthorized data access or manipulation.",
            "In some configurations, improper input validation can allow an attacker to use this function for privilege escalation by accessing sensitive database tables."
        ]
    },
    "sql_27": {
        "vulnerability_type": "Server-Side Request Forgery (SSRF) - Limited Scope",
        "vulnerability_code": "CREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\nINSERT INTO users (id, username, email) VALUES (1, 'admin', 'admin@example.com');\n\n-- Function to fetch user details based on provided URL\nCREATE OR REPLACE FUNCTION get_user_details(user_url TEXT) RETURNS TABLE AS $$\nBEGIN\n    RETURN QUERY EXECUTE format('SELECT * FROM users WHERE email = (SELECT email FROM dblink(%L, ''SELECT email FROM users LIMIT 1'') AS t(email))', user_url);\nEND;\n$$ LANGUAGE plpgsql;",
        "cvss_score": 6.5,
        "fixed_code": "CREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\nINSERT INTO users (id, username, email) VALUES (1, 'admin', 'admin@example.com');\n\n-- Secure Function to fetch user details based on provided URL\nCREATE OR REPLACE FUNCTION get_user_details(user_url TEXT) RETURNS TABLE AS $$\nDECLARE\n    safe_host TEXT := 'safe.example.com';\nBEGIN\n    IF strpos(user_url, safe_host) = 1 THEN\n        RETURN QUERY EXECUTE format('SELECT * FROM users WHERE email = (SELECT email FROM dblink(%L, ''SELECT email FROM users LIMIT 1'') AS t(email))', user_url);\n    ELSE\n        RAISE EXCEPTION 'URL not allowed';\n    END IF;\nEND;\n$$ LANGUAGE plpgsql;",
        "exploit_ways": [
            "An attacker can input a URL pointing to an internal service like 'http://internal-server/admin' to access sensitive data.",
            "They could use a crafted URL to perform port scanning on the server's network by targeting different ports and services.",
            "Inputting a malicious URL that triggers DNS resolution of an attacker-controlled domain could be used for exfiltrating information."
        ]
    },
    "sql_28": {
        "vulnerability_type": "Session Fixation (Low Severity)",
        "vulnerability_code": "CREATE TABLE Users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50),\n    session_id VARCHAR(100)\n);\n\nCREATE OR REPLACE FUNCTION set_session(user_id INT, new_session_id VARCHAR(100)) RETURNS VOID AS $$\nBEGIN\n    UPDATE Users SET session_id = new_session_id WHERE id = user_id;\nEND;\n$$ LANGUAGE plpgsql;",
        "cvss_score": 4.2,
        "fixed_code": "CREATE TABLE Users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50),\n    session_id VARCHAR(100) UNIQUE\n);\n\nCREATE OR REPLACE FUNCTION set_session(user_id INT, new_session_id VARCHAR(100)) RETURNS VOID AS $$\nBEGIN\n    -- Generate a unique session ID to prevent fixation\n    PERFORM pg_advisory_lock(hashtext(new_session_id));\n    IF NOT EXISTS (SELECT 1 FROM Users WHERE session_id = new_session_id) THEN\n        UPDATE Users SET session_id = new_session_id WHERE id = user_id;\n    END IF;\n    PERFORM pg_advisory_unlock(hashtext(new_session_id));\nEND;\n$$ LANGUAGE plpgsql;",
        "exploit_ways": [
            "An attacker could predict or guess a valid session ID and set it for their own account, gaining unauthorized access.",
            "By fixing the session ID to an existing one, an attacker can hijack another user's session if they know or guess the ID.",
            "If the application does not properly regenerate session IDs after login, a fixed session ID could be reused across multiple sessions."
        ]
    },
    "sql_29": {
        "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
        "vulnerability_code": "SELECT * FROM users WHERE username = 'admin' AND password = ' OR '1'='1",
        "cvss_score": 4.0,
        "fixed_code": "SELECT * FROM users WHERE username = ? AND password = ?",
        "exploit_ways": [
            "An attacker can perform a DoS by sending excessive requests, overwhelming the server.",
            "They can use a large payload in the password field to cause resource exhaustion on the server.",
            "Crafting specific queries that take longer to process can slow down the database server."
        ]
    },
    "sql_30": {
        "vulnerability_type": "Session Fixation (Low Severity)",
        "vulnerability_code": "CREATE CLASS UserSession AS \nBEGIN\n    PUBLIC FUNCTION SetSessionId(userId INT) RETURNS VARCHAR(255)\n    BEGIN\n        DECLARE sessionId VARCHAR(255);\n        SET sessionId = UUID();\n        -- Vulnerable to session fixation as it allows setting a predefined session ID\n        IF userId = 0 THEN\n            sessionId = 'fixed_session_id';\n        END IF;\n        RETURN sessionId;\n    END;\nEND;",
        "cvss_score": 4.2,
        "fixed_code": "CREATE CLASS UserSession AS \nBEGIN\n    PUBLIC FUNCTION SetSessionId(userId INT) RETURNS VARCHAR(255)\n    BEGIN\n        DECLARE sessionId VARCHAR(255);\n        SET sessionId = UUID();\n        RETURN sessionId;\n    END;\nEND;",
        "exploit_ways": [
            "An attacker could predict or set the session ID for a specific user, maintaining control over the session.",
            "By exploiting the fixed session ID, an attacker can hijack sessions of users with userId = 0.",
            "The vulnerability allows attackers to perform actions under the guise of a predefined session without proper authentication."
        ]
    },
    "sql_31": {
        "vulnerability_type": "Open Redirect",
        "vulnerability_code": "CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50), redirect_url TEXT);\n\nINSERT INTO users (id, username, redirect_url) VALUES (1, 'admin', 'https://safe.example.com');\n\nSELECT redirect_url FROM users WHERE id = 1;\n\n-- Vulnerable part: Using user-provided input directly in the redirect URL without validation.\n-- Example of vulnerable code:\n-- $user_input = $_GET['redirect'];\n-- header('Location: ' . $user_input);",
        "cvss_score": 6.5,
        "fixed_code": "$allowed_domains = ['https://safe.example.com', 'https://another.safe.site'];\n$user_input = $_GET['redirect'];\n\nif (in_array($user_input, $allowed_domains)) {\n    header('Location: ' . $user_input);\n} else {\n    header('Location: https://safe.example.com'); // Default safe redirect\n}",
        "exploit_ways": [
            "An attacker can provide a malicious URL like 'https://malicious.example.com' to redirect users away from the intended site.",
            "They could use a crafted URL with additional parameters to extract data or perform actions on the user's behalf, such as 'https://safe.example.com/vulnerable_page?param=malicious_value'.",
            "Input like 'https://attacker.com/phishing_site' can be used to conduct phishing attacks by redirecting users to fake login pages."
        ]
    },
    "sql_32": {
        "vulnerability_type": "Local File Inclusion (LFI) - Limited Scope",
        "vulnerability_code": "CREATE FUNCTION GetUserData(user_id INT) RETURNS VARCHAR(255)\nBEGIN\nDECLARE file_path TEXT;\nSET file_path = CONCAT('/home/user/data/', user_id, '.txt');\nRETURN LOAD_FILE(file_path);\nEND;",
        "cvss_score": 6.0,
        "fixed_code": "CREATE FUNCTION GetUserData(user_id INT) RETURNS VARCHAR(255)\nBEGIN\nDECLARE file_path TEXT;\nIF user_id >= 1 AND user_id <= 10 THEN -- Assuming valid IDs are between 1 and 10\n    SET file_path = CONCAT('/home/user/data/', user_id, '.txt');\n    RETURN LOAD_FILE(file_path);\nELSE\n    RETURN NULL;\nEND IF;\nEND;",
        "exploit_ways": [
            "An attacker could exploit this by inputting a negative number or zero to attempt to access files outside the expected range.",
            "By using a large number, an attacker might try to reach system files if there are not proper bounds checking.",
            "If MySQL's secure_file_priv is misconfigured, the attacker might read arbitrary files on the server."
        ]
    },
    "sql_33": {
        "vulnerability_type": "Server-Side Request Forgery (SSRF) - Limited Scope",
        "vulnerability_code": "CREATE FUNCTION get_user_data(user_id INT) RETURNS TABLE AS $$\nBEGIN\n    RETURN QUERY EXECUTE 'SELECT * FROM users WHERE id = ' || user_id;\nEND;$$ LANGUAGE plpgsql;",
        "cvss_score": 5.3,
        "fixed_code": "CREATE FUNCTION get_user_data(user_id INT) RETURNS TABLE AS $$\nDECLARE\n    query TEXT := 'SELECT * FROM users WHERE id = $1';\nBEGIN\n    RETURN QUERY EXECUTE query USING user_id;\nEND;$$ LANGUAGE plpgsql;",
        "exploit_ways": [
            "An attacker could manipulate the user_id to execute arbitrary SQL commands.",
            "If combined with other vulnerabilities, it might lead to unauthorized data access or modification.",
            "Could be used in conjunction with a crafted input to perform blind SQL injection attacks."
        ]
    },
    "sql_34": {
        "vulnerability_type": "Open Redirect",
        "vulnerability_code": "CREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255));\nINSERT INTO users (id, name, email) VALUES (1, 'Alice', 'alice@example.com');\n\nCREATE FUNCTION get_user_url(user_id INT) RETURNS VARCHAR(255)\nBEGIN\n    DECLARE user_email VARCHAR(255);\n    SELECT email INTO user_email FROM users WHERE id = user_id;\n    RETURN CONCAT('https://example.com/profile?email=', user_email);\nEND;",
        "cvss_score": 6.1,
        "fixed_code": "CREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255));\nINSERT INTO users (id, name, email) VALUES (1, 'Alice', 'alice@example.com');\n\nCREATE FUNCTION get_user_url(user_id INT) RETURNS VARCHAR(255)\nBEGIN\n    DECLARE user_email VARCHAR(255);\n    SELECT email INTO user_email FROM users WHERE id = user_id;\n    RETURN CONCAT('https://example.com/profile?email=', REPLACE(user_email, 'http', ''));\nEND;",
        "exploit_ways": [
            "An attacker could inject a malicious URL like 'http://malicious.example.com' into the email field to redirect users.",
            "The vulnerability allows for phishing attacks by redirecting users to fake websites that mimic legitimate sites.",
            "Attackers can use this to spread malware by directing users to compromised servers hosting malicious content."
        ]
    },
    "sql_35": {
        "vulnerability_type": "Session Fixation (Low Severity)",
        "vulnerability_code": "CREATE TABLE users (\r\n    id INT PRIMARY KEY,\r\n    username VARCHAR(50),\r\n    password VARCHAR(50)\r\n);\r\n\r\nCREATE TABLE sessions (\r\n    session_id VARCHAR(100) PRIMARY KEY,\r\n    user_id INT,\r\n    FOREIGN KEY (user_id) REFERENCES users(id)\r\n);\r\n\r\nINSERT INTO users (id, username, password) VALUES (1, 'admin', 'password');\r\n\r\nDELIMITER $$\r\nCREATE PROCEDURE login_user(IN input_username VARCHAR(50), IN input_password VARCHAR(50))\r\nBEGIN\r\n    DECLARE user_id INT;\r\n    SELECT id INTO user_id FROM users WHERE username = input_username AND password = input_password LIMIT 1;\r\n    IF user_id IS NOT NULL THEN\r\n        SET @session_id = UUID();\r\n        INSERT INTO sessions (session_id, user_id) VALUES (@session_id, user_id);\r\n        SELECT @session_id AS session_id;\r\n    ELSE\r\n        SELECT 'Invalid username or password' AS message;\r\n    END IF;\r\nEND$$\r\nDELIMITER ;",
        "cvss_score": 3.2,
        "fixed_code": "CREATE TABLE users (\r\n    id INT PRIMARY KEY,\r\n    username VARCHAR(50),\r\n    password VARCHAR(50)\r\n);\r\n\r\nCREATE TABLE sessions (\r\n    session_id VARCHAR(100) PRIMARY KEY,\r\n    user_id INT,\r\n    FOREIGN KEY (user_id) REFERENCES users(id)\r\n);\r\n\r\nINSERT INTO users (id, username, password) VALUES (1, 'admin', SHA2('password', 256));\r\n\r\nDELIMITER $$\r\nCREATE PROCEDURE login_user(IN input_username VARCHAR(50), IN input_password VARCHAR(50))\r\nBEGIN\r\n    DECLARE user_id INT;\r\n    SELECT id INTO user_id FROM users WHERE username = input_username AND password = SHA2(input_password, 256) LIMIT 1;\r\n    IF user_id IS NOT NULL THEN\r\n        SET @session_id = UUID();\r\n        INSERT INTO sessions (session_id, user_id) VALUES (@session_id, user_id);\r\n        SELECT @session_id AS session_id;\r\n    ELSE\r\n        SELECT 'Invalid username or password' AS message;\r\n    END IF;\r\nEND$$\r\nDELIMITER ;",
        "exploit_ways": [
            "An attacker can set a valid session ID before logging in to hijack the user's session.",
            "By maintaining a session, an attacker could exploit it across multiple login attempts until successful.",
            "The vulnerability allows attackers to control sessions on systems that do not regenerate session IDs upon login."
        ]
    },
    "sql_36": {
        "vulnerability_type": "Server-Side Request Forgery (SSRF) - Limited Scope",
        "vulnerability_code": "CREATE CLASS UserRequest AS SELECT * FROM RDB$DATABASE;\\nALTER CLASS UserRequest ADD METHOD sendRequest PARAMETER(url VARCHAR(255)) RETURNS VARCHAR(1024) BEGIN DECLARE result VARCHAR(1024); EXECUTE BLOCK AS BEGIN IN autonomous_transaction DO BEGIN EXECUTE STATEMENT 'SELECT HTTP_CLIENT.GET(' || :url || ') FROM RDB$DATABASE' INTO :result; END END RETURN result; END;",
        "cvss_score": 7.5,
        "fixed_code": "CREATE CLASS UserRequest AS SELECT * FROM RDB$DATABASE;\\nALTER CLASS UserRequest ADD METHOD sendRequest PARAMETER(url VARCHAR(255)) RETURNS VARCHAR(1024) BEGIN DECLARE result VARCHAR(1024); IF (url LIKE 'http://example.com/%') THEN BEGIN EXECUTE BLOCK AS BEGIN IN autonomous_transaction DO BEGIN EXECUTE STATEMENT 'SELECT HTTP_CLIENT.GET('' || :url || '') FROM RDB$DATABASE' INTO :result; END END END RETURN result; END;",
        "exploit_ways": [
            "An attacker could request internal resources such as http://localhost/ to gather local information.",
            "They can try to access other servers within the same network by using an IP address or hostname.",
            "Crafting a URL with malicious parameters might lead to unexpected behavior on the server."
        ]
    },
    "sql_37": {
        "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
        "vulnerability_code": "SELECT * FROM users WHERE username = 'admin' AND password = '' OR '1'='1'",
        "cvss_score": 5.0,
        "fixed_code": "SELECT * FROM users WHERE username = ? AND password = ?",
        "exploit_ways": [
            "An attacker could flood the database server with invalid login attempts, causing performance degradation.",
            "The vulnerability can be used to run endless queries that tie up database resources, leading to a DoS condition for legitimate users.",
            "By crafting specific SQL queries, an attacker might attempt to exhaust memory or processing power on the database server."
        ]
    },
    "sql_38": {
        "vulnerability_type": "Session Fixation (Low Severity)",
        "vulnerability_code": "CREATE PROCEDURE SetUserSession(@session_id VARCHAR(255), @user_id INT) AS BEGIN UPDATE UserSessions SET user_id = @user_id WHERE session_id = @session_id; END",
        "cvss_score": 4.0,
        "fixed_code": "CREATE PROCEDURE SetUserSession(@session_id UNIQUEIDENTIFIER, @user_id INT) AS BEGIN IF EXISTS (SELECT 1 FROM UserSessions WHERE session_id = @session_id) UPDATE UserSessions SET user_id = @user_id WHERE session_id = @session_id; ELSE THROW 50000, 'Invalid session ID', 1; END",
        "exploit_ways": [
            "An attacker can use a known session ID to hijack another user's session.",
            "By predicting or guessing session IDs, an attacker can associate their session with a targeted user.",
            "If session IDs are predictable, attackers can create accounts and fixate sessions before the target logs in."
        ]
    },
    "sql_39": {
        "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
        "vulnerability_code": "CREATE PROCEDURE SlowQuery AS BEGIN DECLARE @i INT SET @i = 0 WHILE @i < 1000000 BEGIN WAITFOR DELAY '00:00:00.001' SET @i = @i + 1 END END",
        "cvss_score": 3.5,
        "fixed_code": "CREATE PROCEDURE SlowQuery AS BEGIN DECLARE @i INT SET @i = 0 WHILE @i < 1000 BEGIN WAITFOR DELAY '00:00:00.001' SET @i = @i + 1 END END",
        "exploit_ways": [
            "An attacker can repeatedly call the SlowQuery procedure to exhaust server resources.",
            "The long-running query can block other transactions, causing delays or timeouts for legitimate users.",
            "If used in a trigger, it could severely impact database performance on data modifications."
        ]
    },
    "sql_40": {
        "vulnerability_type": "Server-Side Request Forgery (SSRF) - Limited Scope",
        "vulnerability_code": "CREATE CLASS SSRFExample AS $$\nBEGIN\n  EXECUTE IMMEDIATE 'SELECT * FROM XMLTABLE(' || '''' || 'http://'|| user_input || '/data.xml' || '''' || ')';\nEND;\n$$ LANGUAGE plpgsql;",
        "cvss_score": 7.2,
        "fixed_code": "CREATE CLASS SSRFExample AS $$\nDECLARE\n  allowed_host TEXT := 'safe.example.com';\nBEGIN\n  IF user_input = allowed_host THEN\n    EXECUTE IMMEDIATE 'SELECT * FROM XMLTABLE(''http://' || allowed_host || '/data.xml'')';\n  ELSE\n    RAISE EXCEPTION 'Unauthorized host.';\n  END IF;\nEND;\n$$ LANGUAGE plpgsql;",
        "exploit_ways": [
            "An attacker could input an internal IP address to access internal services.",
            "They might use the vulnerability to fetch data from another server within the same network segment.",
            "Inputting a malicious host could lead to exfiltration of sensitive data."
        ]
    },
    "sql_41": {
        "vulnerability_type": "Missing Security Headers",
        "vulnerability_code": "SELECT * FROM users WHERE username = 'admin' AND password = '123456'",
        "cvss_score": 5.0,
        "fixed_code": "import sqlite3\ndef get_user():\n    conn = sqlite3.connect('users.db')\n    cursor = conn.cursor()\n    user = input(\"Enter username: \")\n    password = input(\"Enter password: \")\n    query = \"SELECT * FROM users WHERE username = ? AND password = ?\"\n    cursor.execute(query, (user, password))\n    result = cursor.fetchall()\n    conn.close()\n    return result",
        "exploit_ways": [
            "An attacker could potentially perform SQL injection if the code is not properly secured elsewhere.",
            "Without proper headers like Content-Security-Policy, attackers can inject malicious scripts into web pages.",
            "Lack of X-Frame-Options header can lead to clickjacking attacks where users might interact with a hidden frame."
        ]
    },
    "sql_42": {
        "vulnerability_type": "Information Disclosure (Low Severity)",
        "vulnerability_code": "SELECT * FROM users WHERE username = '\" OR '1'='1",
        "cvss_score": 3.5,
        "fixed_code": "SELECT * FROM users WHERE username = ?",
        "exploit_ways": [
            "An attacker can use the input to retrieve all user data by providing a condition that always evaluates to true.",
            "By crafting specific inputs, an attacker might be able to extract sensitive information such as passwords or email addresses from other columns in the database.",
            "If the application does not properly sanitize and log SQL queries, an attacker could leverage this vulnerability to infer internal database structure or schema details."
        ]
    },
    "sql_43": {
        "vulnerability_type": "Clickjacking (Low Severity)",
        "vulnerability_code": "CREATE FUNCTION get_user_data(user_id INT) RETURNS TABLE AS $$ BEGIN RETURN QUERY SELECT * FROM users WHERE id = user_id; END; $$ LANGUAGE plpgsql;",
        "cvss_score": 3.5,
        "fixed_code": "CREATE FUNCTION get_user_data(user_id INT) RETURNS TABLE AS $$ BEGIN RETURN QUERY SELECT * FROM users WHERE id = user_id AND is_active = TRUE; END; $$ LANGUAGE plpgsql;",
        "exploit_ways": [
            "An attacker could trick users into clicking on invisible buttons that trigger actions in the application without their knowledge.",
            "Malicious iframes could be used to overlay a legitimate site with clickable elements that perform unintended actions when clicked by the user.",
            "Attackers can design phishing pages that incorporate the vulnerable application, making users believe they are interacting with a legitimate service while performing actions set by the attacker."
        ]
    },
    "sql_44": {
        "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
        "vulnerability_code": "SELECT * FROM users WHERE username = 'admin' OR '1'='1'",
        "cvss_score": 3.5,
        "fixed_code": "SELECT * FROM users WHERE username = ?",
        "exploit_ways": [
            "An attacker can input a very large string to cause the query to process slowly, consuming resources.",
            "Using special characters or large strings can lead to increased processing time on the database server.",
            "Crafting many requests with complex conditions could overload the database and slow down legitimate users."
        ]
    },
    "sql_45": {
        "vulnerability_type": "Race Condition (Difficult to Exploit)",
        "vulnerability_code": "CREATE FUNCTION update_balance(user_id INT, amount DECIMAL(10, 2)) RETURNS VOID AS $$\\nBEGIN\\n    UPDATE accounts SET balance = balance + amount WHERE id = user_id;\\nEND;$$ LANGUAGE plpgsql;",
        "cvss_score": 5.3,
        "fixed_code": "CREATE FUNCTION update_balance(user_id INT, amount DECIMAL(10, 2)) RETURNS VOID AS $$\\nDECLARE\\n    current_balance DECIMAL(10, 2);\\nBEGIN\\n    SELECT balance INTO current_balance FROM accounts WHERE id = user_id FOR UPDATE;\\n    UPDATE accounts SET balance = current_balance + amount WHERE id = user_id;\\nEND;$$ LANGUAGE plpgsql;",
        "exploit_ways": [
            "An attacker could manipulate the race condition to perform double spending by rapidly calling the function.",
            "By timing the transactions precisely, an attacker might exploit the race to create negative balances or overdraw funds.",
            "A malicious user could attempt to lock rows indefinitely using this race condition, causing denial of service."
        ]
    },
    "sql_46": {
        "vulnerability_type": "Open Redirect",
        "vulnerability_code": "CREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(100)\n);\n\nINSERT INTO users (id, username, password) VALUES (1, 'admin', 'hashed_password');\n\nCREATE FUNCTION redirect_user(uid INT) RETURNS TEXT AS $$\nDECLARE\n    user_url TEXT;\nBEGIN\n    SELECT CONCAT('http://example.com/', COALESCE((SELECT website FROM profiles WHERE user_id = uid), 'default')) INTO user_url;\n    RETURN user_url;\nEND;\n$$ LANGUAGE plpgsql;",
        "cvss_score": 6.5,
        "fixed_code": "CREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(100)\n);\n\nINSERT INTO users (id, username, password) VALUES (1, 'admin', 'hashed_password');\n\nCREATE FUNCTION redirect_user(uid INT) RETURNS TEXT AS $$\nDECLARE\n    user_url TEXT;\n    allowed_host TEXT := 'example.com';\nBEGIN\n    SELECT CONCAT('http://', allowed_host, '/', COALESCE((SELECT website FROM profiles WHERE user_id = uid), 'default')) INTO user_url;\n    RETURN user_url;\nEND;\n$$ LANGUAGE plpgsql;",
        "exploit_ways": [
            "An attacker could manipulate the 'website' field in the 'profiles' table to redirect users to a malicious site.",
            "By injecting a URL with an external domain, they could cause phishing attacks or distribute malware.",
            "Crafting specific URLs could lead to unintended redirections that compromise user trust and security."
        ]
    },
    "sql_47": {
        "vulnerability_type": "Session Fixation (Low Severity)",
        "vulnerability_code": "CREATE CLASS UserSession (\n    session_id VARCHAR(255),\n    user_id INT\n);\n\nINSERT INTO UserSession (session_id, user_id) VALUES ('fixed_session_id', 1);",
        "cvss_score": 4.0,
        "fixed_code": "CREATE CLASS UserSession (\n    session_id VARCHAR(255),\n    user_id INT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nINSERT INTO UserSession (session_id, user_id) VALUES (UUID(), 1);",
        "exploit_ways": [
            "An attacker can use the fixed session ID to hijack a legitimate user's session after they log in.",
            "By predicting or guessing the session ID, an attacker might gain unauthorized access to a user's account.",
            "If the session ID is exposed (e.g., in URLs), an attacker could craft malicious links to steal sessions."
        ]
    },
    "sql_48": {
        "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
        "vulnerability_code": "CREATE FUNCTION InfiniteLoop() RETURNS INT BEGIN WHILE TRUE DO END WHILE; RETURN 1; END;",
        "cvss_score": 4.0,
        "fixed_code": "CREATE FUNCTION SafeFunction() RETURNS INT BEGIN DECLARE i INT DEFAULT 0; WHILE i < 1000 DO SET i = i + 1; END WHILE; RETURN i; END;",
        "exploit_ways": [
            "An attacker can call InfiniteLoop to create a thread that never exits, consuming server resources.",
            "Multiple calls to InfiniteLoop can be made simultaneously to exacerbate the denial-of-service condition.",
            "Using stored procedures like InfiniteLoop in critical application flows can lead to system instability."
        ]
    },
    "sql_49": {
        "vulnerability_type": "Server-Side Request Forgery (SSRF) - Limited Scope",
        "vulnerability_code": "CREATE PROCEDURE GetUserProfile @UserID INT AS BEGIN DECLARE @URL NVARCHAR(255) SELECT @URL = ProfilePicture FROM Users WHERE ID = @UserID EXEC sp_OACreate 'MSXML2.XMLHTTP', @obj OUT EXEC sp_OAMethod @obj, 'open', NULL, 'GET', @URL, false EXEC sp_OAMethod @obj, 'send' END",
        "cvss_score": 7.5,
        "fixed_code": "CREATE PROCEDURE GetUserProfile @UserID INT AS BEGIN DECLARE @URL NVARCHAR(255) SELECT @URL = ProfilePicture FROM Users WHERE ID = @UserID IF LEFT(@URL, 4) <> 'http' RETURN EXEC sp_OACreate 'MSXML2.XMLHTTP', @obj OUT EXEC sp_OAMethod @obj, 'open', NULL, 'GET', @URL, false EXEC sp_OAMethod @obj, 'send' END",
        "exploit_ways": [
            "An attacker could input a URL pointing to an internal server (e.g., http://intranet) to access sensitive data.",
            "By providing a crafted URL with malicious parameters, the attacker might attempt to perform actions on the target server.",
            "Using a URL with a delay or slow response can be used to cause denial of service by exhausting server resources."
        ]
    }
}