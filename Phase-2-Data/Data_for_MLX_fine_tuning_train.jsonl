{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.1, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.0, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Clickjacking (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.0, \"type\": \"Clickjacking (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 2.5, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 2.1, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 4.0, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.5, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"SQL Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.3, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Clickjacking (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Clickjacking (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.8, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"SQL Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 9.0, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 4.0, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.2, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.8, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Command Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Command Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.6, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Scripting (XSS)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.1, \"type\": \"Cross-Site Scripting (XSS)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.3, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 2.1, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"SQL Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.0, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Command Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Command Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Clickjacking (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.1, \"type\": \"Clickjacking (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Clickjacking (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Clickjacking (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 2.5, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.9, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.5, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"SQL Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Scripting (XSS)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Cross-Site Scripting (XSS)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"SQL Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Clickjacking (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 2.6, \"type\": \"Clickjacking (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"SQL Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Command Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.0, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.5, \"type\": \"SQL Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Scripting (XSS)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.1, \"type\": \"Cross-Site Scripting (XSS)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.3, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.0, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"SQL Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 8.0, \"type\": \"Broken Authentication\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.0, \"type\": \"Open Redirect\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Scripting (XSS)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Cross-Site Scripting (XSS)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 9.8, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.4, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.3, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 9.1, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Scripting (XSS)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.6, \"type\": \"Cross-Site Scripting (XSS)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.8, \"type\": \"Open Redirect\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.5, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.3, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.8, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 2.5, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Clickjacking (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Clickjacking (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.2, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.1, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.5, \"type\": \"Command Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.5, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Scripting (XSS)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.6, \"type\": \"Cross-Site Scripting (XSS)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.3, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.0, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Clickjacking (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Clickjacking (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 9.0, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"SQL Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.5, \"type\": \"Command Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.6, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Command Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"SQL Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.7, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Command Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.2, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.5, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 2.6, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Scripting (XSS)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Cross-Site Scripting (XSS)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Command Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Command Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 9.0, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 2.7, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 2.5, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.6, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"SQL Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.4, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.3, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.8, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.0, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"SQL Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.2, \"type\": \"Broken Authentication\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.8, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 4.0, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.2, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.0, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 9.8, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.8, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 4.0, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Command Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Scripting (XSS)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.1, \"type\": \"Cross-Site Scripting (XSS)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Clickjacking (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.0, \"type\": \"Clickjacking (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 2.8, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Scripting (XSS)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.1, \"type\": \"Cross-Site Scripting (XSS)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Clickjacking (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 2.1, \"type\": \"Clickjacking (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.3, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"SQL Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"SQL Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 9.8, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Command Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.3, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Clickjacking (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Clickjacking (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.3, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Clickjacking (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Clickjacking (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 9.8, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 2.0, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 8.0, \"type\": \"SQL Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Command Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.4, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Scripting (XSS)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.1, \"type\": \"Cross-Site Scripting (XSS)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.3, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"SQL Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.0, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Clickjacking (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.8, \"type\": \"Clickjacking (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.0, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.3, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Command Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 2.1, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Scripting (XSS)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Cross-Site Scripting (XSS)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"SQL Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"SQL Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.6, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Command Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.8, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Clickjacking (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Clickjacking (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.9, \"type\": \"SQL Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.3, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Clickjacking (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 2.3, \"type\": \"Clickjacking (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Command Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 4.0, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Scripting (XSS)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.1, \"type\": \"Cross-Site Scripting (XSS)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.6, \"type\": \"Command Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.8, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"SQL Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.5, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Command Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 2.1, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 4.0, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 4.0, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.7, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.7, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.8, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Command Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.8, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 9.1, \"type\": \"Command Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.5, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 4.0, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Clickjacking (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 4.0, \"type\": \"Clickjacking (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 2.1, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.3, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.7, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.2, \"type\": \"Command Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.1, \"type\": \"Open Redirect\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.3, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.8, \"type\": \"Open Redirect\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 4.0, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.4, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 4.0, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.8, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 2.7, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.3, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.3, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Scripting (XSS)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.6, \"type\": \"Cross-Site Scripting (XSS)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Clickjacking (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.7, \"type\": \"Clickjacking (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.5, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Command Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.5, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 8.0, \"type\": \"Broken Authentication\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"SQL Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Scripting (XSS)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Cross-Site Scripting (XSS)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 6.0, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Command Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.2, \"type\": \"Command Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.2, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.5, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.3, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.5, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 4.0, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.3, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Command Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.1, \"type\": \"Path Traversal\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.4, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.8, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.5, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.4, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.1, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Command Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.1, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.8, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.6, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.1, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.5, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"SQL Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Scripting (XSS)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.3, \"type\": \"Cross-Site Scripting (XSS)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"SQL Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Command Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.2, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 9.8, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Scripting (XSS)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.3, \"type\": \"Cross-Site Scripting (XSS)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.8, \"type\": \"Open Redirect\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 4.0, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.1, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Broken Authentication\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.0, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.5, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Broken Authentication\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Broken Authentication\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.8, \"type\": \"Broken Authentication\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Clickjacking (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Clickjacking (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.5, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.5, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.8, \"type\": \"Path Traversal\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Clickjacking (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 4.0, \"type\": \"Clickjacking (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.8, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 4.0, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Command Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 6.0, \"type\": \"Open Redirect\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Session Fixation (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Session Fixation (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 2.5, \"type\": \"Session Fixation (Low Severity)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Command Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 9.3, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Race Condition (Difficult to Exploit)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Race Condition (Difficult to Exploit)\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Race Condition (Difficult to Exploit)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Clickjacking (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 2.6, \"type\": \"Clickjacking (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 2.1, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"SQL Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: SQL Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.6, \"type\": \"SQL Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.8, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.2, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Denial-of-Service (DoS) - Low Impact\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Denial-of-Service (DoS) - Low Impact\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.3, \"type\": \"Denial-of-Service (DoS) - Low Impact\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Command Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Local File Inclusion (LFI) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Local File Inclusion (LFI) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 4.5, \"type\": \"Local File Inclusion (LFI) - Limited Scope\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Scripting (XSS)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Cross-Site Scripting (XSS)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Path Traversal\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Path Traversal\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Path Traversal\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Clickjacking (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Clickjacking (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Clickjacking (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Open Redirect\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Open Redirect\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Open Redirect\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Server-Side Request Forgery (SSRF) - Limited Scope\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Server-Side Request Forgery (SSRF) - Limited Scope\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Insecure Deserialization\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Insecure Deserialization\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Insecure Deserialization\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"HTTP Response Splitting\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: HTTP Response Splitting\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.1, \"type\": \"HTTP Response Splitting\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: medium\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: medium\n- Code Type: complete code file", "completion": "{\"score\": 5.3, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Buffer Overflow\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Buffer Overflow\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Buffer Overflow\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Missing Security Headers\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Missing Security Headers\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.1, \"type\": \"Missing Security Headers\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Scripting (XSS)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Scripting (XSS)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Cross-Site Scripting (XSS)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Privilege Escalation\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Privilege Escalation\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.5, \"type\": \"Privilege Escalation\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.8, \"type\": \"Command Injection\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: easy\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Information Disclosure (Low Severity)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Information Disclosure (Low Severity)\n- Programming Language: JAVA\n- Difficulty Level: easy\n- Code Type: complete code file", "completion": "{\"score\": 3.5, \"type\": \"Information Disclosure (Low Severity)\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Remote Code Execution (RCE)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Remote Code Execution (RCE)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 7.5, \"type\": \"Remote Code Execution (RCE)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Cross-Site Request Forgery (CSRF)\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Cross-Site Request Forgery (CSRF)\n- Programming Language: JAVA\n- Difficulty Level: hard\n- Code Type: complete code file", "completion": "{\"score\": 6.5, \"type\": \"Cross-Site Request Forgery (CSRF)\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
{"prompt": "Given the following inputs:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Code Type: complete code file\n- Vulnerability Detection Difficulty: very hard\n\nYour task is to:\n1. Generate a complete code file in the given language that contains a vulnerability matching the described attack type and identification difficulty level.\n2. Evaluate the vulnerability and provide a realistic CVSS score as a float (e.g., 7.5).\n\nVERY IMPORTANT:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The code must go inside the \"input\" key as a string.\n- The CVSS score must go inside the \"output\" key and should be a float number only.\n- The attack type must go inside the \"output\" key and should be a string only.\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef unsafe():\\n    eval(input(\\\"Enter command: \\\"))\",\n    \"output\": {\n        \"score\": 8.2,\n        \"type\": \"Command Injection\"\n    }\n}\n\nNow generate a similar JSON for:\n- Attack Type: Command Injection\n- Programming Language: JAVA\n- Difficulty Level: very hard\n- Code Type: complete code file", "completion": "{\"score\": 8.2, \"type\": \"Command Injection\"}"}
{"prompt": "Your task is to:\n1. Generate a secure, production-grade complete code file snippet in JAVA that demonstrates best practices in secure coding.\n2. The code must not contain any known security vulnerabilities or bad practices.\n3. Use appropriate input validation, safe APIs, error handling, and other relevant security techniques depending on the language and context.\n\nREQUIREMENTS:\n- Output ONLY a valid JSON object.\n- Do NOT add any explanation, markdown, comments, or additional text.\n- Escape all double quotes correctly.\n- The secure code must go inside the \"input\" key as a string.\n- The \"output\" key must include a string \"Secure\" as the value of the \"type\" field, and the CVSS score must be 0.0 (indicating no vulnerability).\n\nJSON FORMAT EXAMPLE:\n{\n    \"input\": \"# Python example\\ndef safe():\\n    user_input = input(\\\"Enter number: \\\")\\n    if user_input.isdigit():\\n        print(int(user_input))\",\n    \"output\": {\n        \"score\": 0.0,\n        \"type\": \"Secure\"\n    }\n}\n\nNow generate a similar JSON for:\n- Programming Language: JAVA\n- Code Type: complete code file", "completion": "{\"score\": 0.0, \"type\": \"Secure\"}"}
