{
    "java_0": {
        "input": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class VulnerableApp {\n    public static void main(String[] args) {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        try {\n            System.out.print(\"Enter command: \");\n            String command = reader.readLine();\n            Process process = Runtime.getRuntime().exec(command);\n            BufferedReader outputReader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            String line;\n            while ((line = outputReader.readLine()) != null) {\n                System.out.println(line);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
        "output": {
            "score": 9.8,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "java_1": {
        "input": "import javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\npublic class VulnerableServlet extends HttpServlet {\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        String userInput = request.getParameter(\"userInput\");\n        if (userInput != null) {\n            response.setContentType(\"text/html\");\n            response.getWriter().println(\"<html><body>\");\n            response.getWriter().println(\"User Input: \" + userInput);\n            response.getWriter().println(\"</body></html>\");\n        }\n    }\n}",
        "output": {
            "score": 6.1,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "java_2": {
        "input": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class VulnerableApp {\n    public static void main(String[] args) throws Exception {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        System.out.println(\"Enter command: \");\n        String command = reader.readLine();\n        Process process = Runtime.getRuntime().exec(command);\n        BufferedReader output = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        String line;\n        while ((line = output.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}",
        "output": {
            "score": 9.8,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "java_3": {
        "input": "public class VulnerableClass {\\n    public void vulnerableMethod(String input) {\\n        byte[] buffer = new byte[10];\\n        System.arraycopy(input.getBytes(), 0, buffer, 0, input.length());\\n    }\\n}",
        "output": {
            "score": 7.5,
            "type": "Buffer Overflow"
        }
    },
    "java_4": {
        "input": "public class AuthManager {\n    private String username;\n    private String password;\n\n    public AuthManager(String username, String password) {\n        this.username = username;\n        this.password = password;\n    }\n\n    public boolean login(String user, String pass) {\n        return user.equals(username) && pass.equals(password);\n    }\n}",
        "output": {
            "score": 6.5,
            "type": "Broken Authentication"
        }
    },
    "java_5": {
        "input": "import javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class TransferServlet extends HttpServlet {\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) {\n        String amount = request.getParameter(\"amount\");\n        String destinationAccount = request.getParameter(\"destinationAccount\");\n        // Simulate transferring money without CSRF protection\n        transferMoney(amount, destinationAccount);\n    }\n\n    private void transferMoney(String amount, String destinationAccount) {\n        // Transfer logic here\n    }\n}",
        "output": {
            "score": 6.8,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "java_6": {
        "input": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nclass VulnerableApp {\n    public static void main(String[] args) throws Exception {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        System.out.println(\"Enter command to execute:\");\n        String command = reader.readLine();\n        Process process = Runtime.getRuntime().exec(command);\n        BufferedReader output = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        String line;\n        while ((line = output.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Privilege Escalation"
        }
    },
    "java_7": {
        "input": "import java.util.Scanner;\npublic class VulnerableApp {\n    public static void main(String[] args) throws Exception {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter command to execute:\");\n        String command = scanner.nextLine();\n        Runtime.getRuntime().exec(command);\n    }\n}",
        "output": {
            "score": 8.2,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "java_8": {
        "input": "public void bufferOverflowVulnerable(byte[] input) {\n    byte[] buffer = new byte[16];\n    System.arraycopy(input, 0, buffer, 0, input.length);\n}",
        "output": {
            "score": 7.5,
            "type": "Buffer Overflow"
        }
    },
    "java_9": {
        "input": "public class AuthChecker {\n    public boolean authenticate(String username, String password) {\n        if (username.equals(\"admin\") && password.equals(\"password123\")) {\n            return true;\n        }\n        return false;\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "java_10": {
        "input": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\npublic class VulnerableApp {\n    public static void main(String[] args) {\n        try {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n            System.out.println(\"Enter command to execute:\");\n            String command = reader.readLine();\n            Process process = Runtime.getRuntime().exec(command);\n            BufferedReader outputReader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            String line;\n            while ((line = outputReader.readLine()) != null) {\n                System.out.println(line);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
        "output": {
            "score": 8.2,
            "type": "Command Injection"
        }
    },
    "java_11": {
        "input": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.util.Scanner;\n\npublic class VulnerableApp {\n    private Connection connect() {\n        String url = \"jdbc:mysql://localhost:3306/mydatabase\";\n        String user = \"user\";\n        String password = \"password\";\n        try {\n            return DriverManager.getConnection(url, user, password);\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n            return null;\n        }\n    }\n\n    public void queryDatabase(String userInput) {\n        String sql = \"SELECT * FROM users WHERE username = '\" + userInput + \"'\";\n        try (\n                Connection conn = connect();\n                java.sql.Statement stmt = conn.createStatement()) {\n            java.sql.ResultSet rs = stmt.executeQuery(sql);\n\n            while (rs.next()) {\n                System.out.println(rs.getString(\"username\") + \"\\t\" + rs.getString(\"password\"));\n            }\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n\n    public static void main(String[] args) {\n        VulnerableApp app = new VulnerableApp();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter username: \");\n        String userInput = scanner.nextLine();\n        app.queryDatabase(userInput);\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "java_12": {
        "input": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\nclass VulnerableApp {\n    public static void main(String[] args) {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {\n            System.out.println(\"Enter command: \");\n            String command = reader.readLine();\n            Process process = Runtime.getRuntime().exec(command);\n            BufferedReader outputReader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            String line;\n            while ((line = outputReader.readLine()) != null) {\n                System.out.println(line);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
        "output": {
            "score": 8.2,
            "type": "Command Injection"
        }
    },
    "java_13": {
        "input": "public void vulnerableFunction(String input) {\n    byte[] buffer = new byte[10];\n    System.arraycopy(input.getBytes(), 0, buffer, 0, input.length());\n}",
        "output": {
            "score": 7.5,
            "type": "Buffer Overflow"
        }
    },
    "java_14": {
        "input": "public String getUserData(String userId) {\n    String query = \"SELECT * FROM users WHERE id = '\" + userId + \"'\";\n    return executeQuery(query);\n}",
        "output": {
            "score": 8.2,
            "type": "SQL Injection"
        }
    },
    "java_15": {
        "input": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class VulnerableApp {\n    public static void main(String[] args) throws Exception {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        System.out.println(\"Enter command to execute:\");\n        String command = reader.readLine();\n        Runtime.getRuntime().exec(command);\n    }\n}",
        "output": {
            "score": 8.2,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "java_16": {
        "input": "import java.nio.ByteBuffer;\\npublic class VulnerableApp {\\n    public static void main(String[] args) {\\n        byte[] data = new byte[10];\\n        ByteBuffer buffer = ByteBuffer.wrap(data);\\n        for (int i = 0; i < 20; i++) {\\n            buffer.put((byte) i);\\n        }\\n    }\\n}",
        "output": {
            "score": 7.8,
            "type": "Buffer Overflow"
        }
    },
    "java_17": {
        "input": "public class BufferOverflowExample {\n    public static void main(String[] args) {\n        byte[] buffer = new byte[10];\n        String input = \"A very long string that will cause an overflow when copied to the small buffer\";\n        System.arraycopy(input.getBytes(), 0, buffer, 0, input.length());\n    }\n}",
        "output": {
            "score": 7.8,
            "type": "Buffer Overflow"
        }
    },
    "java_18": {
        "input": "import javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class TransferServlet extends HttpServlet {\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) {\n        String account = request.getParameter(\"account\");\n        String amount = request.getParameter(\"amount\");\n        \n        // Simulate a bank transfer operation\n        if (account != null && amount != null) {\n            // Transfer logic here...\n            response.getWriter().println(\"Transfer of \" + amount + \" to account \" + account + \" completed successfully.\");\n        }\n    }\n}",
        "output": {
            "score": 8.6,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "java_19": {
        "input": "import javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\npublic class XSSExampleServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        String userInput = request.getParameter(\"input\");\n        response.getWriter().println(\"<html><body><h1>\" + userInput + \"</h1></body></html>\");\n    }\n}",
        "output": {
            "score": 6.5,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "java_20": {
        "input": "public class VulnerableClass {\\n    public void executeCommand(String command) throws Exception {\\n        ProcessBuilder pb = new ProcessBuilder();\\n        String os = System.getProperty(\"os.name\").toLowerCase();\\n        if (os.contains(\"win\")) {\\n            pb.command(\"cmd.exe\", \"/c\", command);\\n        } else {\\n            pb.command(\"sh\", \"-c\", command);\\n        }\\n        Process process = pb.start();\\n        process.waitFor();\\n    }\\n}",
        "output": {
            "score": 8.2,
            "type": "Privilege Escalation"
        }
    },
    "java_21": {
        "input": "import java.io.File;\nimport java.io.FileReader;\npublic class FileReadExample {\n    public void readFile(String fileName) {\n        try {\n            File file = new File(fileName);\n            FileReader fr = new FileReader(file);\n            int i;\n            while ((i=fr.read()) != -1)\n                System.out.print((char) i);\n            fr.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "java_22": {
        "input": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nclass UnsafeClass {\n    public static void main(String[] args) throws Exception {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String command = reader.readLine();\n        Runtime.getRuntime().exec(command);\n    }\n}",
        "output": {
            "score": 8.2,
            "type": "Command Injection"
        }
    },
    "java_23": {
        "input": "public void printMessage(String userInput) {\n    System.out.println(\"User Input: \" + userInput);\n}",
        "output": {
            "score": 4.3,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "java_24": {
        "input": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\npublic class VulnerableDB {\n    private Connection connect() {\n        String url = \"jdbc:sqlite:sample.db\";\n        Connection conn = null;\n        try {\n            conn = DriverManager.getConnection(url);\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n        }\n        return conn;\n    }\n\n    public void query(String username) {\n        String sql = \"SELECT * FROM users WHERE name = '\" + username + \"'\";\n        try (Connection conn = this.connect();\n             Statement stmt = conn.createStatement();\n             ResultSet rs = stmt.executeQuery(sql)) {\n            while (rs.next()) {\n                System.out.println(rs.getInt(\"id\") +  \"\\t\" + \n                                   rs.getString(\"name\") + \"\\t\" +\n                                   rs.getString(\"email\"));\n            }\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}",
        "output": {
            "score": 8.2,
            "type": "SQL Injection"
        }
    },
    "java_25": {
        "input": "public class RaceCondition {\n    private static int counter = 0;\n\n    public static void increment() {\n        for (int i = 0; i < 1000; i++) {\n            counter++;\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread t1 = new Thread(() -> increment());\n        Thread t2 = new Thread(() -> increment());\n\n        t1.start();\n        t2.start();\n\n        t1.join();\n        t2.join();\n\n        System.out.println(\"Counter: \" + counter);\n    }\n}",
        "output": {
            "score": 4.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "java_26": {
        "input": "import javax.servlet.http.HttpServletResponse;\\npublic class VulnerableServlet {\\n    public void setHeaders(HttpServletResponse response) {\\n        // No security headers are being set\\n    }\\n}",
        "output": {
            "score": 6.1,
            "type": "Missing Security Headers"
        }
    },
    "java_27": {
        "input": "public void setSessionId(String sessionId) {\n    if (sessionId != null && !sessionId.isEmpty()) {\n        this.sessionId = sessionId;\n    }\n}",
        "output": {
            "score": 4.0,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "java_28": {
        "input": "public class InfiniteLoop {\n    public static void main(String[] args) {\n        while (true) {\n            // This loop will run indefinitely\n        }\n    }\n}",
        "output": {
            "score": 3.0,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "java_29": {
        "input": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.net.HttpURLConnection;\\nimport java.net.URL;\\npublic class NetworkFetcher {\\n    public String fetchData(String urlString) throws Exception {\\n        URL url = new URL(urlString);\\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\\n        connection.setRequestMethod(\"GET\");\\n        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\\n        StringBuilder content = new StringBuilder();\\n        String line;\\n        while ((line = in.readLine()) != null) {\\n            content.append(line);\\n        }\\n        in.close();\\n        return content.toString();\\n    }\\n}",
        "output": {
            "score": 7.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "java_30": {
        "input": "public class BankAccount {\n    private int balance = 100;\n\n    public void deposit(int amount) {\n        balance += amount;\n    }\n\n    public void withdraw(int amount) {\n        if (balance >= amount) {\n            balance -= amount;\n        }\n    }\n\n    public int getBalance() {\n        return balance;\n    }\n}",
        "output": {
            "score": 5.0,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "java_31": {
        "input": "public class RaceCondition {\n    private static int count = 0;\n\n    public static void main(String[] args) {\n        Thread t1 = new Thread(() -> {\n            for (int i = 0; i < 1000; i++) {\n                count++;\n            }\n        });\n        Thread t2 = new Thread(() -> {\n            for (int i = 0; i < 1000; i++) {\n                count--;\n            }\n        });\n        t1.start();\n        t2.start();\n        try {\n            t1.join();\n            t2.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"Final count: \" + count);\n    }\n}",
        "output": {
            "score": 5.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "java_32": {
        "input": "import java.net.URL;\\nimport java.io.IOException;\\nimport javax.servlet.http.HttpServlet;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\n\\npublic class RedirectServlet extends HttpServlet {\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\\n        String redirectUrl = request.getParameter(\\\"url\\\");\\n        if (redirectUrl != null && isValidRedirectUrl(redirectUrl)) {\\n            response.sendRedirect(redirectUrl);\\n        } else {\\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \\\\\"Invalid URL\\\");\\n        }\\n    }\\n\\n    private boolean isValidRedirectUrl(String url) {\\n        try {\\n            new URL(url);\\n            return true;\\n        } catch (Exception e) {\\n            return false;\\n        }\\n    }\\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "java_33": {
        "input": "import java.io.IOException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class RedirectServlet extends HttpServlet {\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        String url = request.getParameter(\"url\");\n        response.sendRedirect(url);\n    }\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "java_34": {
        "input": "public class DoSVulnerableServer {\n    public static void main(String[] args) throws Exception {\n        ServerSocket server = new ServerSocket(8080);\n        System.out.println(\"Server is running on port 8080\");\n        while (true) {\n            Socket client = server.accept();\n            Thread handler = new Thread(() -> {\n                try {\n                    BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()));\n                    String line;\n                    while ((line = reader.readLine()) != null) {}\n                } catch (Exception e) {}\n            });\n            handler.start();\n        }\n    }\n}",
        "output": {
            "score": 3.5,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "java_35": {
        "input": "public class SlowServer {\n    public static void main(String[] args) throws InterruptedException {\n        while (true) {\n            Thread.sleep(10);\n            if (Math.random() < 0.01) {\n                heavyComputation();\n            }\n        }\n    }\n\n    private static void heavyComputation() {\n        double result = 0;\n        for (int i = 0; i < 10000000; i++) {\n            result += Math.sqrt(i);\n        }\n    }\n}",
        "output": {
            "score": 4.3,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "java_36": {
        "input": "import java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\nclass ClickJackingDemo {\n    public static void main(String[] args) {\n        JFrame frame = new JFrame(\"ClickJacking Example\");\n        frame.setSize(300, 200);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        JPanel panel = new JPanel() {\n            @Override\n            protected void paintComponent(Graphics g) {\n                super.paintComponent(g);\n                try {\n                    ImageIcon icon = new ImageIcon(\"https://example.com/image.png\");\n                    g.drawImage(icon.getImage(), 0, 0, null);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        };\n        panel.addMouseListener(new MouseAdapter() {\n            @Override\n            public void mouseClicked(MouseEvent e) {\n                JOptionPane.showMessageDialog(null, \"Clicked on transparent area!\");\n            }\n        });\n        frame.add(panel);\n        frame.setVisible(true);\n    }\n}",
        "output": {
            "score": 3.0,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "java_37": {
        "input": "public class SlowLoop {\n    public static void main(String[] args) {\n        while (true) {\n            try {\n                Thread.sleep(10);\n            } catch (InterruptedException e) {}\n        }\n    }\n}",
        "output": {
            "score": 3.7,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "java_38": {
        "input": "import javax.servlet.http.HttpSession;\npublic class LoginServlet {\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        HttpSession session = request.getSession(true);\n        String sessionId = request.getParameter(\"sessionId\");\n        if (sessionId != null) {\n            session.changeSessionId(sessionId);\n        }\n        // other code\n    }\n}",
        "output": {
            "score": 4.0,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "java_39": {
        "input": "public class UserInfo {\n    private String sensitiveData;\n\n    public UserInfo(String data) {\n        this.sensitiveData = data;\n    }\n\n    public void displayInfo() {\n        System.out.println(\"Sensitive Data: \" + this.sensitiveData);\n    }\n}",
        "output": {
            "score": 3.5,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "java_40": {
        "input": "import java.io.IOException;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n@WebServlet(\"/example\")\npublic class ExampleServlet extends HttpServlet {\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        response.getWriter().println(\"<html><body>\");\n        response.getWriter().println(\"<h1>Welcome to our website</h1>\");\n        response.getWriter().println(\"</body></html>\");\n    }\n}",
        "output": {
            "score": 5.3,
            "type": "Missing Security Headers"
        }
    },
    "java_41": {
        "input": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileManager {\n    public static void main(String[] args) {\n        if (args.length > 0) {\n            String filePath = \"/safe/path/\" + args[0].replaceAll(\"\\./\", \"\").replaceAll(\"\\.\\.\", \"\");\n            try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n                String line;\n                while ((line = br.readLine()) != null) {\n                    System.out.println(line);\n                }\n            } catch (IOException e) {\n                System.err.println(\"Error reading file: \" + e.getMessage());\n            }\n        }\n    }\n}",
        "output": {
            "score": 4.0,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "java_42": {
        "input": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class FileReadServlet extends HttpServlet {\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String filePath = \"/var/log/\" + request.getParameter(\"log\");\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                response.getWriter().println(line);\n            }\n        } catch (IOException e) {\n            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found.\");\n        }\n    }\n}",
        "output": {
            "score": 5.3,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "java_43": {
        "input": "public class VulnerableApp {\\n    public void redirect(String url) {\\n        try {\\n            java.net.URI uri = new java.net.URI(url);\\n            if (uri.getHost().equals(\"trusted.com\")) {\\n                javax.swing.JOptionPane.showMessageDialog(null, \"Redirecting to trusted site: \" + url);\\n            } else {\\n                throw new Exception(\\\"Unauthorized redirect attempt\\\");\\n            }\\n        } catch (Exception e) {\\n            System.out.println(e.getMessage());\\n        }\\n    }\\n}",
        "output": {
            "score": 6.8,
            "type": "Open Redirect"
        }
    },
    "java_44": {
        "input": "public class VulnerableRaceCondition {\n    private int counter = 0;\n\n    public void increment() {\n        try {\n            Thread.sleep(1);\n        } catch (InterruptedException e) {}\n        counter++;\n    }\n\n    public int getCounter() {\n        return counter;\n    }\n}",
        "output": {
            "score": 3.5,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "java_45": {
        "input": "public String fixateSession(HttpServletRequest request, HttpServletResponse response) {\n    HttpSession session = request.getSession(true);\n    Cookie sessionCookie = new Cookie(\"JSESSIONID\", session.getId());\n    sessionCookie.setPath(\"\");\n    response.addCookie(sessionCookie);\n    return \"Session fixed\";\n}",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "java_46": {
        "input": "public class Example {\n    private static int counter = 0;\n\n    public void increment() {\n        int temp = counter;\n        temp++;\n        counter = temp;\n    }\n}",
        "output": {
            "score": 3.5,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "java_47": {
        "input": "public class UserInfo {\n    private String sensitiveData = \"Confidential Info\";\n\n    public void displayInfo(String role) {\n        if (role.equals(\"admin\")) {\n            System.out.println(sensitiveData);\n        } else {\n            System.out.println(\"Access Denied\");\n        }\n    }\n}",
        "output": {
            "score": 4.2,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "java_48": {
        "input": "public class UserInfo {\n    private String username;\n    private String password;\n\n    public UserInfo(String username, String password) {\n        this.username = username;\n        this.password = password;\n    }\n\n    public void displayInfo() {\n        System.out.println(\"Username: \" + username);\n        System.out.println(\"Password: \" + password);\n    }\n}",
        "output": {
            "score": 2.1,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "java_49": {
        "input": "public String fetchUrl(String url) throws IOException {\n    URL obj = new URL(url);\n    HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n    String inputLine;\n    StringBuffer response = new StringBuffer();\n\n    while ((inputLine = in.readLine()) != null) {\n        response.append(inputLine);\n    }\n    in.close();\n    return response.toString();\n}",
        "output": {
            "score": 6.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "java_50": {
        "input": "import java.util.Scanner;\n\npublic class SecureExample {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        String userInput = scanner.nextLine();\n        try {\n            int number = Integer.parseInt(userInput);\n            System.out.println(\"You entered the number: \" + number);\n        } catch (NumberFormatException e) {\n            System.err.println(\"Invalid input. Please enter a valid integer.\");\n        } finally {\n            scanner.close();\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_51": {
        "input": "import java.util.Scanner;\n\npublic class SecureInputHandling {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        String userInput = scanner.nextLine();\n        try {\n            int number = Integer.parseInt(userInput.trim());\n            System.out.println(\"You entered the number: \" + number);\n        } catch (NumberFormatException e) {\n            System.err.println(\"Invalid input. Please enter a valid integer.\");\n        } finally {\n            scanner.close();\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_52": {
        "input": "public class SecureUserProcessor {\\n    private String username;\\n    \\n    public void setUsername(String username) throws IllegalArgumentException {\\n        if (username == null || !username.matches(\"^[a-zA-Z0-9_]{1,20}$\")) {\\n            throw new IllegalArgumentException(\\\"Invalid username. It must be alphanumeric and 1-20 characters long.\\\");\\n        }\\n        this.username = username;\\n    }\\n    \\n    public String getUsername() {\\n        return username;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_53": {
        "input": "import java.util.Scanner;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nclass SecureLogin {\n    private String hashPassword(String password) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n        byte[] hashedBytes = md.digest(password.getBytes());\n        StringBuilder sb = new StringBuilder();\n        for (byte b : hashedBytes) {\n            sb.append(String.format(\\\"%02x\\\", b));\n        }\n        return sb.toString();\n    }\n\n    public void authenticate() {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter username: \");\n        String username = scanner.nextLine().trim();\n        if (username.isEmpty()) {\n            System.out.println(\"Username cannot be empty.\");\n            return;\n        }\n        System.out.print(\"Enter password: \");\n        String password = scanner.nextLine();\n        try {\n            String hashedPassword = hashPassword(password);\n            // Here you would compare hashedPassword with the stored hash for the user\n            System.out.println(\"Authentication successful for user \" + username);\n        } catch (NoSuchAlgorithmException e) {\n            System.err.println(\"Error hashing password.\");\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_54": {
        "input": "public class SecureExample {\n    public static void safeProcess(String userInput) {\n        if (userInput == null || !userInput.matches(\"\\\\d+\")) {\n            throw new IllegalArgumentException(\"Invalid input: Input must be a non-negative integer.\");\n        }\n        int number = Integer.parseInt(userInput);\n        System.out.println(\"Processed number: \" + number);\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_55": {
        "input": "import java.util.Scanner;\n\npublic class SecureInputExample {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        String userInput = scanner.nextLine();\n        if (userInput.matches(\"\\\\d+\")) {\n            int number = Integer.parseInt(userInput);\n            System.out.println(\"You entered the number: \" + number);\n        } else {\n            System.out.println(\"Invalid input. Please enter a valid integer.\");\n        }\n        scanner.close();\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_56": {
        "input": "import java.util.Scanner;\n\npublic class SecureExample {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        String userInput = scanner.nextLine();\n        try {\n            int number = Integer.parseInt(userInput);\n            System.out.println(\"You entered the number: \" + number);\n        } catch (NumberFormatException e) {\n            System.err.println(\"Invalid input. Please enter a valid integer.\");\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_57": {
        "input": "import java.util.Scanner;\n\npublic class SecureInput {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        String input = scanner.nextLine();\n        try {\n            int number = Integer.parseInt(input);\n            System.out.println(\"You entered the number: \" + number);\n        } catch (NumberFormatException e) {\n            System.err.println(\"Invalid input. Please enter a valid integer.\");\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_58": {
        "input": "public class SecureCodeExample {\n    public void safeFunction(String userInput) {\n        if (userInput == null || !userInput.matches(\"\\\\d+\")) {\n            throw new IllegalArgumentException(\"Invalid input. Please enter a valid number.\");\n        }\n        try {\n            int number = Integer.parseInt(userInput);\n            System.out.println(number);\n        } catch (NumberFormatException e) {\n            System.err.println(\"Error parsing the number: \" + e.getMessage());\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_59": {
        "input": "import java.util.Scanner;\n\npublic class SecureInputHandler {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        String userInput = scanner.nextLine();\n        if (isNumeric(userInput)) {\n            int number = Integer.parseInt(userInput);\n            System.out.println(\"You entered the number: \" + number);\n        } else {\n            System.out.println(\"Invalid input. Please enter a numeric value.\");\n        }\n    }\n\n    private static boolean isNumeric(String str) {\n        if (str == null || str.isEmpty()) {\n            return false;\n        }\n        for (char c : str.toCharArray()) {\n            if (!Character.isDigit(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_60": {
        "input": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.regex.Pattern;\n\npublic class SecureInputExample {\n    private static final Pattern INTEGER_PATTERN = Pattern.compile(\"^-?\\\\d+$\");\n\n    public static void main(String[] args) {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        System.out.print(\"Enter a number: \");\n        try {\n            String userInput = reader.readLine();\n            if (isValidInteger(userInput)) {\n                int number = Integer.parseInt(userInput);\n                System.out.println(\"You entered the number: \" + number);\n            } else {\n                System.out.println(\"Invalid input. Please enter a valid integer.\");\n            }\n        } catch (IOException e) {\n            System.err.println(\"An error occurred while reading input: \" + e.getMessage());\n        }\n    }\n\n    private static boolean isValidInteger(String input) {\n        return input != null && INTEGER_PATTERN.matcher(input).matches();\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_61": {
        "input": "import java.util.Scanner;\\npublic class SecureUserInput {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        System.out.print(\"Enter a number: \");\\n        String userInput = scanner.nextLine();\\n        if (isValidNumber(userInput)) {\\n            int number = Integer.parseInt(userInput);\\n            System.out.println(\\\"You entered the number: \\\" + number);\\n        } else {\\n            System.out.println(\\\"Invalid input. Please enter a valid integer.\");\\n        }\\n        scanner.close();\\n    }\\n\\n    private static boolean isValidNumber(String str) {\\n        if (str == null || str.isEmpty()) {\\n            return false;\\n        }\\n        try {\\n            Integer.parseInt(str);\\n            return true;\\n        } catch (NumberFormatException e) {\\n            return false;\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_62": {
        "input": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.security.SecureRandom;\n\npublic class SecureExample {\n    public static void main(String[] args) {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String userInput = \"\";\n        try {\n            System.out.print(\"Enter a number: \");\n            userInput = reader.readLine();\n        } catch (IOException e) {\n            System.err.println(\"Error reading input.\");\n            return;\n        }\n\n        if (!userInput.matches(\"\\d+\")) {\n            System.err.println(\"Invalid input. Please enter a valid number.\");\n            return;\n        }\n\n        int number = Integer.parseInt(userInput);\n        System.out.println(\"You entered: \" + number);\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_63": {
        "input": "import java.security.SecureRandom;\n\npublic class SecureCodeExample {\n    public static String generateSecureToken(int length) {\n        if (length < 1) {\n            throw new IllegalArgumentException(\"Length must be a positive integer\");\n        }\n        SecureRandom secureRandom = new SecureRandom();\n        StringBuilder token = new StringBuilder(length);\n        for (int i = 0; i < length; i++) {\n            int randomIndex = secureRandom.nextInt(36);\n            char randomChar = (char) (randomIndex < 10 ? '0' + randomIndex : 'a' + (randomIndex - 10));\n            token.append(randomChar);\n        }\n        return token.toString();\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_64": {
        "input": "import java.util.Scanner;\\npublic class SecureExample {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        System.out.print(\"Enter a number: \");\\n        String userInput = scanner.nextLine();\\n        if (userInput.matches(\"\\\\d+\")) {\\n            int number = Integer.parseInt(userInput);\\n            System.out.println(\\\"You entered the number: \\\" + number);\\n        } else {\\n            System.out.println(\\\"Invalid input. Please enter a valid integer.\");\\n        }\\n        scanner.close();\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_65": {
        "input": "import java.util.Scanner;\n\npublic class SecureInput {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a positive integer: \");\n        String input = scanner.nextLine();\n        try {\n            int number = Integer.parseInt(input);\n            if (number > 0) {\n                System.out.println(\"You entered: \" + number);\n            } else {\n                System.out.println(\"Please enter a positive integer.\");\n            }\n        } catch (NumberFormatException e) {\n            System.out.println(\"Invalid input. Please enter a valid positive integer.\");\n        } finally {\n            scanner.close();\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_66": {
        "input": "public class SecureLogin {\\n    private String username;\\n    private String password;\\n\\n    public SecureLogin(String username, String password) throws IllegalArgumentException {\\n        if (username == null || password == null) {\\n            throw new IllegalArgumentException(\"Username and password cannot be null\");\\n        }\\n        this.username = validateInput(username);\\n        this.password = hashPassword(password);\\n    }\\n\\n    private String validateInput(String input) throws IllegalArgumentException {\\n        if (!input.matches(\"^[a-zA-Z0-9_]{1,20}$\")) {\\n            throw new IllegalArgumentException(\"Invalid characters in input\");\\n        }\\n        return input;\\n    }\\n\\n    private String hashPassword(String password) {\\n        try {\\n            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA-256\");\\n            byte[] hashedBytes = md.digest(password.getBytes(java.nio.charset.StandardCharsets.UTF_8));\\n            StringBuilder sb = new StringBuilder();\\n            for (byte b : hashedBytes) {\\n                sb.append(String.format(\"%02x\", b));\\n            }\\n            return sb.toString();\\n        } catch (Exception e) {\\n            throw new RuntimeException(\"Error hashing password\", e);\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_67": {
        "input": "import java.util.Scanner;\\npublic class SecureLogin {\\n    private String username;\\n    private String password;\\n\\n    public SecureLogin(String username, String password) {\\n        this.username = validateInput(username);\\n        this.password = validatePassword(password);\\n    }\\n\\n    private String validateInput(String input) {\\n        if (input == null || input.isEmpty()) {\\n            throw new IllegalArgumentException(\\\"Invalid input provided\\\");\\n        }\\n        return input;\\n    }\\n\\n    private String validatePassword(String password) {\\n        if (password == null || password.length() < 8) {\\n            throw new IllegalArgumentException(\\\"Password must be at least 8 characters long\\\");\\n        }\\n        return password;\\n    }\\n\\n    public boolean authenticate(String inputUsername, String inputPassword) {\\n        return username.equals(inputUsername) && password.equals(inputPassword);\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        System.out.print(\\\"Enter Username: \\\\n\\\");\\n        String username = scanner.nextLine();\\n        System.out.print(\\\"Enter Password: \\\\n\\\");\\n        String password = scanner.nextLine();\\n\\n        SecureLogin login = new SecureLogin(username, password);\\n        System.out.println(\\\"Authentication result: \\\" + login.authenticate(username, password));\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_68": {
        "input": "import java.util.Scanner;\\n\\nclass SecureExample {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        System.out.print(\"Enter a number: \");\\n        String userInput = scanner.nextLine();\\n        if (userInput.matches(\"\\\\d+\")) {\\n            int number = Integer.parseInt(userInput);\\n            System.out.println(\\\"You entered the number: \\\" + number);\\n        } else {\\n            System.out.println(\\\"Invalid input. Please enter a valid integer.\\\");\\n        }\\n        scanner.close();\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_69": {
        "input": "import java.util.Scanner;\\npublic class SecureInputExample {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        System.out.print(\"Enter a number: \");\\n        String userInput = scanner.nextLine();\\n        if (userInput.matches(\"\\\\d+\")) {\\n            int number = Integer.parseInt(userInput);\\n            System.out.println(\"You entered the number: \" + number);\\n        } else {\\n            System.err.println(\"Invalid input. Please enter a valid integer.\");\\n        }\\n        scanner.close();\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_70": {
        "input": "public class SecureExample {\n    public static void safeFunction(String userInput) {\n        if (userInput == null || !userInput.matches(\"\\\\d+\")) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n        try {\n            int number = Integer.parseInt(userInput);\n            System.out.println(number);\n        } catch (NumberFormatException e) {\n            System.err.println(\"Number format exception: \" + e.getMessage());\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_71": {
        "input": "import java.util.Scanner;\\npublic class SecureInputHandler {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        System.out.print(\"Enter a number: \");\\n        String userInput = scanner.nextLine();\\n        if (isValidNumber(userInput)) {\\n            int number = Integer.parseInt(userInput);\\n            System.out.println(\\\"You entered the number: \\\" + number);\\n        } else {\\n            System.out.println(\\\"Invalid input. Please enter a valid integer.\");\\n        }\\n        scanner.close();\\n    }\\n\\n    private static boolean isValidNumber(String input) {\\n        try {\\n            Integer.parseInt(input);\\n            return true;\\n        } catch (NumberFormatException e) {\\n            return false;\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_72": {
        "input": "import java.util.Scanner;\n\npublic class SecureInput {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        String userInput = scanner.nextLine();\n        if (userInput.matches(\"\\\\d+\")) {\n            int number = Integer.parseInt(userInput);\n            System.out.println(\"You entered the number: \" + number);\n        } else {\n            System.out.println(\"Invalid input. Please enter a valid number.\");\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_73": {
        "input": "import java.util.Scanner;\n\npublic class SecureInput {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        String input = scanner.nextLine();\n        if (isNumeric(input)) {\n            int number = Integer.parseInt(input);\n            System.out.println(\"You entered the number: \" + number);\n        } else {\n            System.out.println(\"Invalid input. Please enter a numeric value.\");\n        }\n        scanner.close();\n    }\n\n    private static boolean isNumeric(String str) {\n        if (str == null || str.isEmpty()) return false;\n        for (char c : str.toCharArray()) {\n            if (!Character.isDigit(c)) return false;\n        }\n        return true;\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_74": {
        "input": "import java.util.Scanner;\npublic class SecureApp {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a positive integer: \");\n        String input = scanner.nextLine();\n        try {\n            int number = Integer.parseInt(input);\n            if (number <= 0) {\n                throw new IllegalArgumentException(\"The number must be positive.\");\n            }\n            System.out.println(\"You entered: \" + number);\n        } catch (NumberFormatException e) {\n            System.err.println(\"Invalid input. Please enter a valid integer.\");\n        } catch (IllegalArgumentException e) {\n            System.err.println(e.getMessage());\n        } finally {\n            scanner.close();\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_75": {
        "input": "import java.util.Scanner;\nimport java.security.SecureRandom;\nclass SecureApp {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        if (scanner.hasNextInt()) {\n            int userInput = scanner.nextInt();\n            System.out.println(\"You entered the number: \" + userInput);\n        } else {\n            System.err.println(\"Invalid input. Please enter a valid integer.\");\n        }\n        scanner.close();\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_76": {
        "input": "import java.util.Scanner;\n\npublic class SecureApp {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        if (scanner.hasNextInt()) {\n            int userInput = scanner.nextInt();\n            System.out.println(\"You entered the number: \" + userInput);\n        } else {\n            System.out.println(\"Invalid input. Please enter a valid integer.\");\n        }\n        scanner.close();\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_77": {
        "input": "public class SecureExample {\n    public void safeFunction(String userInput) throws IllegalArgumentException {\n        if (userInput == null || !userInput.matches(\"\\\\d+\")) {\n            throw new IllegalArgumentException(\"Invalid input. Only digits are allowed.\");\n        }\n        int number = Integer.parseInt(userInput);\n        System.out.println(number);\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_78": {
        "input": "import java.util.Scanner;\n\npublic class SecureInputHandler {\n    private Scanner scanner;\n\n    public SecureInputHandler() {\n        this.scanner = new Scanner(System.in);\n    }\n\n    public int getValidInteger(String prompt) {\n        while (true) {\n            System.out.print(prompt);\n            String input = scanner.nextLine().trim();\n            if (input.matches(\"\\\\d+\")) {\n                return Integer.parseInt(input);\n            } else {\n                System.out.println(\"Invalid input. Please enter a valid integer.\");\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        SecureInputHandler handler = new SecureInputHandler();\n        int number = handler.getValidInteger(\"Enter a number: \");\n        System.out.println(\"You entered: \" + number);\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_79": {
        "input": "import java.util.Scanner;\n\npublic class SecureInputHandler {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a positive integer: \");\n        String input = scanner.nextLine();\n        try {\n            int number = Integer.parseInt(input);\n            if (number <= 0) {\n                throw new IllegalArgumentException(\"Number must be positive.\");\n            }\n            System.out.println(\"You entered: \" + number);\n        } catch (NumberFormatException e) {\n            System.err.println(\"Invalid input. Please enter a valid integer.\");\n        } catch (IllegalArgumentException e) {\n            System.err.println(e.getMessage());\n        } finally {\n            scanner.close();\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_80": {
        "input": "public class SecureUserInputHandler {\\n    public void processInput(String userInput) throws IllegalArgumentException {\\n        if (userInput == null || userInput.isEmpty()) {\\n            throw new IllegalArgumentException(\\\"Input cannot be null or empty\\\");\\n        }\\n        String sanitizedInput = userInput.trim().replaceAll(\\\"[^a-zA-Z0-9 ]+\\\", \\\\\"\\\\\");\\n        System.out.println(\\\"Processed Input: \\\" + sanitizedInput);\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_81": {
        "input": "import java.util.Scanner;\n\npublic class SecureExample {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        String userInput = scanner.nextLine();\n        try {\n            int number = Integer.parseInt(userInput);\n            System.out.println(\"You entered the number: \" + number);\n        } catch (NumberFormatException e) {\n            System.err.println(\"Invalid input. Please enter a valid integer.\");\n        } finally {\n            scanner.close();\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_82": {
        "input": "import java.util.Scanner;\n\npublic class SecureExample {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a positive integer: \");\n        String input = scanner.nextLine();\n        try {\n            int number = Integer.parseInt(input);\n            if (number <= 0) {\n                throw new IllegalArgumentException(\"Number must be positive.\");\n            }\n            System.out.println(\"You entered: \" + number);\n        } catch (NumberFormatException e) {\n            System.err.println(\"Invalid input. Please enter a valid integer.\");\n        } catch (IllegalArgumentException e) {\n            System.err.println(e.getMessage());\n        } finally {\n            scanner.close();\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_83": {
        "input": "import java.util.Scanner;\npublic class SecureApp {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a positive integer: \");\n        String userInput = scanner.nextLine();\n        if (userInput.matches(\"\\\\d+\")) {\n            int number = Integer.parseInt(userInput);\n            System.out.println(\"You entered the number: \" + number);\n        } else {\n            System.out.println(\"Invalid input. Please enter a valid positive integer.\");\n        }\n        scanner.close();\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_84": {
        "input": "import java.util.Scanner;\n\npublic class SecureInput {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        String input = scanner.nextLine();\n        try {\n            int number = Integer.parseInt(input);\n            System.out.println(\"You entered the number: \" + number);\n        } catch (NumberFormatException e) {\n            System.err.println(\"Invalid input. Please enter a valid integer.\");\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_85": {
        "input": "import java.util.Scanner;\\n\\npublic class SecureInputExample {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        System.out.print(\"Enter a number: \");\\n        String input = scanner.nextLine();\\n        if (input.matches(\\\\\"\\\\d+\\\\\")) {\\n            int number = Integer.parseInt(input);\\n            System.out.println(\"You entered the number: \" + number);\\n        } else {\\n            System.err.println(\"Invalid input. Please enter a valid integer.\");\\n        }\\n        scanner.close();\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_86": {
        "input": "import java.util.Scanner;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class SecureExample {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a password to hash: \");\n        String password = scanner.nextLine();\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hashedBytes = md.digest(password.getBytes());\n            StringBuilder sb = new StringBuilder();\n            for (byte b : hashedBytes) {\n                sb.append(String.format(\"%02x\", b));\n            }\n            System.out.println(\"Hashed Password: \" + sb.toString());\n        } catch (NoSuchAlgorithmException e) {\n            System.err.println(\"Error: SHA-256 algorithm not found.\");\n        }\n        scanner.close();\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_87": {
        "input": "public class SecureExample {\\n    private final String validInputPattern = \"\\\\d+\";\\n\\n    public void processUserInput(String userInput) throws IllegalArgumentException {\\n        if (!userInput.matches(validInputPattern)) {\\n            throw new IllegalArgumentException(\\\"Invalid input: Input must be a number\\\");\\n        }\\n        int number = Integer.parseInt(userInput);\\n        System.out.println(\\\"Processed Number: \\\" + number);\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_88": {
        "input": "import java.util.Scanner;\nimport java.security.SecureRandom;\nclass SecureLogin {\n    private String username;\n    private String passwordHash;\n\n    public SecureLogin(String username, String password) {\n        this.username = username;\n        this.passwordHash = hashPassword(password);\n    }\n\n    private String hashPassword(String password) {\n        try {\n            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA-256\");\n            byte[] hashBytes = md.digest(password.getBytes());\n            StringBuilder sb = new StringBuilder();\n            for (byte b : hashBytes) {\n                sb.append(String.format(\"%02x\", b));\n            }\n            return sb.toString();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public boolean authenticate(String password) {\n        return this.passwordHash.equals(hashPassword(password));\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter username: \");\n        String username = scanner.nextLine();\n        System.out.print(\"Enter password: \");\n        String password = scanner.nextLine();\n        SecureLogin user = new SecureLogin(username, password);\n\n        System.out.print(\"Re-enter password for authentication: \");\n        String authPassword = scanner.nextLine();\n        if (user.authenticate(authPassword)) {\n            System.out.println(\"Authentication successful.\");\n        } else {\n            System.out.println(\"Authentication failed.\");\n        }\n        scanner.close();\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "java_89": {
        "input": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class SecureInputExample {\n    private static final Logger LOGGER = Logger.getLogger(SecureInputExample.class.getName());\n\n    public static void main(String[] args) {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        try {\n            System.out.print(\"Enter a number: \");\n            String userInput = reader.readLine();\n            if (isValidNumber(userInput)) {\n                int number = Integer.parseInt(userInput);\n                System.out.println(\"You entered the number: \" + number);\n            } else {\n                System.out.println(\"Invalid input. Please enter a valid integer.\");\n            }\n        } catch (IOException e) {\n            LOGGER.log(Level.SEVERE, \"Error reading input\", e);\n        }\n    }\n\n    private static boolean isValidNumber(String input) {\n        if (input == null || input.isEmpty()) {\n            return false;\n        }\n        try {\n            Integer.parseInt(input);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n        return true;\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_0": {
        "input": "#include <iostream>\n#include <string>\n#include <sstream>\n\nvoid processSerializedData(const std::string& data) {\n    std::istringstream iss(data);\n    int type;\n    iss >> type;\n    if (type == 1) {\n        std::string objectData;\n        getline(iss, objectData);\n        // Simulate deserialization\n        std::cout << \"Deserialized Object: \" << objectData << std::endl;\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "c++_1": {
        "input": "#include <iostream>\n#include <string>\n\nbool authenticate(const std::string& username, const std::string& password) {\n    if (username == \"admin\" && password == \"securepassword123\") {\n        return true;\n    }\n    return false;\n}\n\nint main() {\n    std::string user, pass;\n    std::cout << \"Enter username: \";\n    std::cin >> user;\n    std::cout << \"Enter password: \";\n    std::cin >> pass;\n\n    if (authenticate(user, pass)) {\n        std::cout << \"Access granted.\" << std::endl;\n    } else {\n        std::cout << \"Access denied.\" << std::endl;\n    }\n\n    return 0;\n}",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "c++_2": {
        "input": "#include <cstdlib>\n#include <iostream>\n\nint main() {\n    std::string command;\n    std::cout << \"Enter command to execute: \";\n    std::getline(std::cin, command);\n    system(command.c_str());\n    return 0;\n}",
        "output": {
            "score": 8.2,
            "type": "Command Injection"
        }
    },
    "c++_3": {
        "input": "#include <cstdlib>\n#include <unistd.h>\n\nint main(int argc, char *argv[]) {\n    if (getuid() != 0) {\n        printf(\"This program needs to be run as root.\\n\");\n        return 1;\n    }\n    const char* command = argv[1];\n    system(command);\n    return 0;\n}",
        "output": {
            "score": 7.8,
            "type": "Privilege Escalation"
        }
    },
    "c++_4": {
        "input": "#include <iostream>\n#include <string>\n#include <cstdlib>\nclass SystemCommandExecutor {\npublic:\n    void executeCommand(const std::string& cmd) {\n        system(cmd.c_str());\n    }\n};",
        "output": {
            "score": 7.5,
            "type": "Command Injection"
        }
    },
    "c++_5": {
        "input": "#include <iostream>\n#include <mysql.h>\n\nvoid queryDatabase(const std::string& userInput) {\n    MYSQL* conn;\n    MYSQL_RES* res;\n    MYSQL_ROW row;\n    conn = mysql_init(NULL);\n    mysql_real_connect(conn, \"localhost\", \"user\", \"password\", \"database\", 0, NULL, 0);\n    std::string query = \"SELECT * FROM users WHERE username='\" + userInput + \"';\";\n    mysql_query(conn, query.c_str());\n    res = mysql_use_result(conn);\n\n    while ((row = mysql_fetch_row(res)) != NULL) {\n        std::cout << row[0] << \"\\t\" << row[1] << std::endl;\n    }\n    mysql_free_result(res);\n    mysql_close(conn);\n}",
        "output": {
            "score": 8.9,
            "type": "SQL Injection"
        }
    },
    "c++_6": {
        "input": "#include <iostream>\n#include <string>\nclass WebPage {\nprivate:\n    std::string content;\npublic:\n    void addContent(const std::string& newContent) {\n        content += newContent;\n    }\n    void display() const {\n        std::cout << \"<html><body>\" << content << \"</body></html>\" << std::endl;\n    }\n};",
        "output": {
            "score": 6.1,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "c++_7": {
        "input": "#include <fstream>\n#include <string>\n\nclass FileReader {\npublic:\n    std::string readFile(const std::string& filename) {\n        std::ifstream file(filename);\n        std::string content((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());\n        return content;\n    }\n};",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "c++_8": {
        "input": "#include <cstdlib>\n#include <iostream>\n\nint main() {\n    std::string command;\n    std::cout << \"Enter system command: \";\n    std::cin >> command;\n    std::system(command.c_str());\n    return 0;\n}",
        "output": {
            "score": 8.2,
            "type": "Command Injection"
        }
    },
    "c++_9": {
        "input": "#include <iostream>\n#include <string>\n#include <cstdlib>\n\nint main() {\n    std::string command;\n    std::cout << \"Enter a command to execute: \";\n    std::getline(std::cin, command);\n    int result = system(command.c_str());\n    if (result == 0) {\n        std::cout << \"Command executed successfully.\" << std::endl;\n    } else {\n        std::cout << \"Command execution failed.\" << std::endl;\n    }\n    return 0;\n}",
        "output": {
            "score": 9.8,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "c++_10": {
        "input": "#include <cstdlib>\n#include <iostream>\n\nvoid executeCommand() {\n    char command[256];\n    std::cout << \"Enter command to execute: \";\n    std::cin.getline(command, sizeof(command));\n    system(command);\n}",
        "output": {
            "score": 8.8,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "c++_11": {
        "input": "#include <cstdio>\n#include <cstring>\n\nvoid executeCommand(const char* cmd) {\n    char buffer[256];\n    snprintf(buffer, sizeof(buffer), \"echo %s\", cmd);\n    system(buffer);\n}",
        "output": {
            "score": 7.2,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "c++_12": {
        "input": "#include <iostream>\n#include <cstring>\n\nvoid vulnerableFunction(const char* input) {\n    char buffer[10];\n    strcpy(buffer, input);\n}\n\nint main() {\n    const char* userInput = \"This is a very long string that will cause a buffer overflow\";\n    vulnerableFunction(userInput);\n    return 0;\n}",
        "output": {
            "score": 7.5,
            "type": "Buffer Overflow"
        }
    },
    "c++_13": {
        "input": "#include <iostream>\n#include <sstream>\n#include <string>\nclass User {\npublic:\n    std::string name;\n    int age;\n    void deserialize(const std::string& data) {\n        std::istringstream iss(data);\n        iss >> name >> age;\n    }\n};\n\nint main() {\n    User user;\n    std::string input = \"admin 18\"; // Simulated malicious input\n    user.deserialize(input);\n    return 0;\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "c++_14": {
        "input": "#include <iostream>\n#include <string>\n\nclass WebSession {\nprivate:\n    std::string sessionId;\n\npublic:\n    WebSession(const std::string& id) : sessionId(id) {}\n\n    void transferFunds(const std::string& targetAccount, double amount) {\n        // Simulate transferring funds to another account\n        std::cout << \"Transferring \" << amount << \" to account \" << targetAccount << \" using session: \" << sessionId << std::endl;\n    }\n};",
        "output": {
            "score": 6.8,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "c++_15": {
        "input": "#include <iostream>\n#include <sstream>\n#include <boost/archive/text_iarchive.hpp>\n#include <boost/serialization/export.hpp>\n\nclass Data {\npublic:\n    int value;\n    template<class Archive>\n    void serialize(Archive & ar, const unsigned int version) {\n        ar & value;\n    }\n};\n\nBOOST_SERIALIZATION_ASSUME_ABSTRACT(Data)\n\nvoid deserializeData(const std::string& dataStr) {\n    std::istringstream iss(dataStr);\n    boost::archive::text_iarchive ia(iss);\n    Data* data = nullptr;\n    ia >> data;\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "c++_16": {
        "input": "#include <iostream>\n#include <string>\nclass WebSession {\nprivate:\n    std::string sessionId;\npublic:\n    WebSession(const std::string& id) : sessionId(id) {}\n    void transferFunds(int amount, const std::string& recipient) {\n        if (amount > 0) {\n            std::cout << \"Transferring \" << amount << \" to \" << recipient << \" using session: \" << sessionId << std::endl;\n        }\n    }\n};",
        "output": {
            "score": 6.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "c++_17": {
        "input": "#include <iostream>\n#include <string>\n\nvoid displayMessage(const std::string& message) {\n    std::cout << \"<div>\" + message + \"</div>\" << std::endl;\n}\n\nint main() {\n    std::string userInput;\n    std::cout << \"Enter your message: \";\n    getline(std::cin, userInput);\n    displayMessage(userInput);\n    return 0;\n}",
        "output": {
            "score": 6.1,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "c++_18": {
        "input": "#include <iostream>\n#include <string>\n#include <cstdlib>\n\nint main() {\n    std::string command;\n    std::cout << \"Enter a command to execute: \";\n    std::getline(std::cin, command);\n    system(command.c_str());\n    return 0;\n}",
        "output": {
            "score": 8.2,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "c++_19": {
        "input": "#include <cstdlib>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    string cmd;\n    cout << \"Enter command to execute: \";\n    getline(cin, cmd);\n    system(cmd.c_str());\n    return 0;\n}",
        "output": {
            "score": 8.2,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "c++_20": {
        "input": "#include <cstdlib>\n#include <string>\n\nvoid executeCommand(const std::string& command) {\n    if (command.substr(0, 3) == \"run\") {\n        system(command.c_str() + 4);\n    }\n}",
        "output": {
            "score": 8.2,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "c++_21": {
        "input": "#include <iostream>\\n#include <string>\\n#include <cstdlib>\\nusing namespace std;\\n\\nvoid renderPage(const string& userInput) {\\n    cout << \"<html><body>\" << endl;\\n    cout << \"User Input: \" << userInput << endl;\\n    cout << \"</body></html>\" << endl;\\n}\\n\\nint main() {\\n    string input;\\n    cout << \"Enter your name: \";\\n    getline(cin, input);\\n    renderPage(input);\\n    return 0;\\n}",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "c++_22": {
        "input": "#include <unistd.h>\n\nint main() {\n    setuid(0);\n    system(\"/bin/sh\");\n    return 0;\n}",
        "output": {
            "score": 8.5,
            "type": "Privilege Escalation"
        }
    },
    "c++_23": {
        "input": "#include <iostream>\n#include <sstream>\n#include <boost/archive/text_iarchive.hpp>\n#include <boost/serialization/vector.hpp>\n\nclass VulnerableClass {\npublic:\n    std::vector<int> data;\n\nprivate:\n    friend class boost::serialization::access;\n    template<class Archive>\n    void serialize(Archive & ar, const unsigned int version) {\n        ar & data;\n    }\n};\n\nint main() {\n    std::string maliciousInput = \"22 serialization::archive 17 0 0 0 1 0 0 0\\n0 0 0 0 1 5 data 3 0 0 0 1 4 2 0 0 0\";\n    std::istringstream iss(maliciousInput);\n    boost::archive::text_iarchive ia(iss);\n    VulnerableClass vc;\n    ia >> vc;\n    return 0;\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "c++_24": {
        "input": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::string filename;\n    std::cout << \"Enter file name to read: \";\n    std::cin >> filename;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (getline(file, line)) {\n            std::cout << line << '\\n';\n        }\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file\";\n    }\n    return 0;\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "c++_25": {
        "input": "#include <iostream>\n#include <thread>\n\nint shared_resource = 0;\n\nvoid increment() {\n    for (int i = 0; i < 100000; ++i) {\n        int temp = shared_resource;\n        std::this_thread::yield();\n        shared_resource = temp + 1;\n    }\n}\n\nint main() {\n    std::thread t1(increment);\n    std::thread t2(increment);\n\n    t1.join();\n    t2.join();\n\n    std::cout << \"Shared Resource: \" << shared_resource << std::endl;\n    return 0;\n}",
        "output": {
            "score": 4.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "c++_26": {
        "input": "void handleLogin(const std::string& username, const std::string& password) {\n    if (authenticate(username, password)) {\n        char sessionCookie[128];\n        generateSessionId(sessionCookie);\n        setcookie(\"sessionid\", sessionCookie, 3600);\n    }\n}",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "c++_27": {
        "input": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string userInput;\n    std::cout << \"Enter your name: \";\n    std::getline(std::cin, userInput);\n    std::cout << \"Hello, \" << userInput << \"!\\n\";\n    return 0;\n}",
        "output": {
            "score": 4.2,
            "type": "Missing Security Headers"
        }
    },
    "c++_28": {
        "input": "#include <iostream>\n#include <string>\n#include <cstdlib>\n\nvoid redirectUser(const std::string& url) {\n    std::string command = \"xdg-open \\\"\" + url + \"\\\"\";\n    system(command.c_str());\n}\n\nint main() {\n    std::string userInput;\n    std::cout << \"Enter URL to visit: \";\n    std::getline(std::cin, userInput);\n    redirectUser(userInput);\n    return 0;\n}",
        "output": {
            "score": 7.5,
            "type": "Open Redirect"
        }
    },
    "c++_29": {
        "input": "#include <iostream>\n\nclass Button {\npublic:\n    void onClick() {\n        std::cout << \"Button clicked!\" << std::endl;\n    }\n};\n\nint main() {\n    Button b;\n    b.onClick(); // Simulated click event\n}",
        "output": {
            "score": 2.1,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "c++_30": {
        "input": "#include <iostream>\\n#include <string>\\nusing namespace std;\\n\\nint main() {\\n    string userInput;\\n    cout << \"Enter your name: \";\\n    getline(cin, userInput);\\n    cout << \"Hello, \" << userInput << \"! Welcome to our website.\\n\";\\n    return 0;\\n}",
        "output": {
            "score": 5.3,
            "type": "HTTP Response Splitting"
        }
    },
    "c++_31": {
        "input": "#include <iostream>\n#include <string>\n#include <cstdlib>\n\nint main(int argc, char* argv[]) {\n    std::string url;\n    if (argc > 1) {\n        url = argv[1];\n        for (size_t i = 0; i < url.length(); ++i) {\n            if (url[i] == '&') {\n                std::string param = url.substr(i + 1);\n                if (param.find(\"redirect=\") == 0) {\n                    url = param.substr(9);\n                    break;\n                }\n            }\n        }\n    }\n    std::system((\"xdg-open \" + url).c_str());\n    return 0;\n}",
        "output": {
            "score": 7.5,
            "type": "Open Redirect"
        }
    },
    "c++_32": {
        "input": "#include <iostream>\n#include <thread>\n\nclass Counter {\npublic:\n    int count;\n    void increment() {\n        for (int i = 0; i < 1000; ++i) {\n            count++;\n        }\n    }\n};\n\nint main() {\n    Counter c;\n    std::thread t1(&Counter::increment, &c);\n    std::thread t2(&Counter::increment, &c);\n    t1.join();\n    t2.join();\n    std::cout << \"Count: \" << c.count << std::endl;\n    return 0;\n}",
        "output": {
            "score": 5.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "c++_33": {
        "input": "#include <iostream>\n#include <string>\n#include <unordered_map>\n\nstd::unordered_map<std::string, std::string> sessions;\n\nvoid login(const std::string& username) {\n    static int session_counter = 0;\n    std::string session_id = \"session_\" + std::to_string(session_counter++);\n    sessions[session_id] = username;\n    std::cout << \"Session ID: \" << session_id << std::endl;\n}\n\nvoid access(const std::string& session_id) {\n    if (sessions.find(session_id) != sessions.end()) {\n        std::cout << \"Access granted for user: \" << sessions[session_id] << std::endl;\n    } else {\n        std::cout << \"Invalid session ID.\" << std::endl;\n    }\n}\n\nint main() {\n    login(\"alice\");\n    access(\"session_0\");\n    return 0;\n}",
        "output": {
            "score": 3.5,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "c++_34": {
        "input": "#include <iostream>\n#include <fstream>\n\nint main() {\n    std::ifstream file(\"secret.txt\");\n    if (file.is_open()) {\n        std::string line;\n        while (getline(file, line)) {\n            std::cout << line << '\\n';\n        }\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file\" << '\\n';\n    }\n    return 0;\n}",
        "output": {
            "score": 2.5,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "c++_35": {
        "input": "#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid readFile(const std::string& filename) {\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (getline(file, line)) {\n            std::cout << line << std::endl;\n        }\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file\" << std::endl;\n    }\n}",
        "output": {
            "score": 4.3,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "c++_36": {
        "input": "#include <string>\n#include <map>\n\nstd::map<std::string, std::string> sessions;\n\nbool authenticateUser(const std::string& username, const std::string& password) {\n    if (username == \"admin\" && password == \"password123\") {\n        std::string sessionID = generateSessionID(username);\n        sessions[sessionID] = username;\n        return true;\n    }\n    return false;\n}\n\nstd::string generateSessionID(const std::string& username) {\n    // Simulated session ID generation that is predictable or reusable.\n    return \"fixedID\" + username.substr(0, 3);\n}",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "c++_37": {
        "input": "#include <iostream>\n#include <string>\n\nvoid openRedirect(const std::string& url) {\n    std::cout << \"Redirecting to: \" << url << std::endl;\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "c++_38": {
        "input": "#include <iostream>\n#include <thread>\n#include <atomic>\n\nstd::atomic<int> counter(0);\n\nvoid increment() {\n    for (int i = 0; i < 100000; ++i) {\n        int local_counter = counter;\n        std::this_thread::sleep_for(std::chrono::nanoseconds(1));\n        counter = local_counter + 1;\n    }\n}\n\nint main() {\n    std::thread t1(increment);\n    std::thread t2(increment);\n\n    t1.join();\n    t2.join();\n\n    std::cout << \"Counter value: \" << counter << std::endl;\n    return 0;\n}",
        "output": {
            "score": 4.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "c++_39": {
        "input": "#include <iostream>\n#include <thread>\n\nclass SharedResource {\nprivate:\n    int data;\npublic:\n    SharedResource() : data(0) {}\n\n    void increment() {\n        for (int i = 0; i < 1000; ++i) {\n            int temp = data;\n            std::this_thread::sleep_for(std::chrono::microseconds(1));\n            data = temp + 1;\n        }\n    }\n\n    int getData() const { return data; }\n};",
        "output": {
            "score": 4.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "c++_40": {
        "input": "#include <iostream>\n#include <string>\n\nvoid loadWebsite(const std::string& url) {\n    // Simulate loading a website in an iframe\ncout << \"Loading website: \" << url << endl;\n}\n\nint main() {\n    std::string userInput;\n    std::cout << \"Enter the URL to load: \";\n    std::getline(std::cin, userInput);\n    // Vulnerable due to lack of proper input validation and security checks\n    loadWebsite(userInput);\n    return 0;\n}",
        "output": {
            "score": 4.2,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "c++_41": {
        "input": "#include <iostream>\n#include <string>\n\nvoid displayOverlay() {\n    std::string html = \"<iframe src=\\\"https://malicious-site.com/overlay\\\"></iframe>\";\n    std::cout << html << std::endl;\n}",
        "output": {
            "score": 3.0,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "c++_42": {
        "input": "#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nvoid fetchUrl(const std::string& url) {\n    CURL* curl;\n    CURLcode res;\n    curl = curl_easy_init();\n    if(curl) {\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        res = curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n    }\n}\n\nint main() {\n    std::string userInput;\n    std::cout << \"Enter URL: \";\n    std::cin >> userInput;\n    fetchUrl(userInput);\n    return 0;\n}",
        "output": {
            "score": 5.3,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "c++_43": {
        "input": "#include <iostream>\n#include <string>\n\nusing namespace std;\nclass WebRedirect {\npublic:\n    void redirect(string url) {\n        cout << \"Redirecting to: \" << url << endl;\n    }\n};",
        "output": {
            "score": 5.0,
            "type": "Open Redirect"
        }
    },
    "c++_44": {
        "input": "#include <iostream>\\n#include <thread>\\nusing namespace std;\\nvoid createThreads() {\\n    while (true) {\\n        thread([]() {}).detach();\\n    }\\n}\\nint main() {\\n    createThreads();\\n    return 0;\\n}",
        "output": {
            "score": 4.2,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "c++_45": {
        "input": "class WebServer {\npublic:\n    void sendResponse(const std::string& content) {\n        std::cout << \"HTTP/1.1 200 OK\\r\\n\";\n        std::cout << \"Content-Length: \" << content.length() << \"\\r\\n\";\n        std::cout << \"\\r\\n\";\n        std::cout << content;\n    }\n};",
        "output": {
            "score": 5.3,
            "type": "Missing Security Headers"
        }
    },
    "c++_46": {
        "input": "#include <iostream>\n#include <fstream>\n\nvoid readSensitiveData() {\n    std::ifstream file(\"sensitive_data.txt\");\n    std::string line;\n    while (getline(file, line)) {\n        std::cout << line << std::endl;\n    }\n    file.close();\n}",
        "output": {
            "score": 3.5,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "c++_47": {
        "input": "#include <iostream>\n\nint main() {\n    std::cout << \"Click the button to proceed...\" << std::endl;\n    // Simulating a clickjacking scenario where the user clicks on an invisible malicious overlay\n    std::string userInput;\n    std::cin >> userInput;\n    if (userInput == \"click\") {\n        std::cout << \"You have been redirected to a malicious site.\" << std::endl;\n    }\n    return 0;\n}",
        "output": {
            "score": 4.2,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "c++_48": {
        "input": "#include <iostream>\n#include <curl/curl.h>\n\nvoid fetchUrl(const std::string& url) {\n    CURL* curl = curl_easy_init();\n    if(curl) {\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n    }\n}\n\nint main() {\n    std::string userInput;\n    std::cout << \"Enter URL to fetch: \";\n    std::cin >> userInput;\n    fetchUrl(userInput);\n    return 0;\n}",
        "output": {
            "score": 6.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "c++_49": {
        "input": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string userInput;\n    std::cout << \"Enter your name: \";\n    std::getline(std::cin, userInput);\n    std::cout << \"Hello, \" + userInput + \"!\" << std::endl;\n    return 0;\n}",
        "output": {
            "score": 4.3,
            "type": "Missing Security Headers"
        }
    },
    "c++_50": {
        "input": "#include <iostream>\n#include <string>\n#include <stdexcept>\nclass SecureInput {\npublic:\n    std::string getString() const {\n        return secureString;\n    }\n\n    void setString(const std::string& input) {\n        if (isValid(input)) {\n            secureString = input;\n        } else {\n            throw std::invalid_argument(\"Invalid input provided\");\n        }\n    }\n\nprivate:\n    std::string secureString;\n\n    bool isValid(const std::string& input) const {\n        // Example validation: only allow alphanumeric characters\n        for (char c : input) {\n            if (!isalnum(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n};",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_51": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\n\nint main() {\n    std::string input;\n    int number;\n\n    while (true) {\n        std::cout << \"Enter a valid integer: \";\n        std::getline(std::cin, input);\n\n        try {\n            size_t pos;\n            number = std::stoi(input, &pos);\n            if (pos != input.size()) {\n                throw std::invalid_argument(\"Invalid input\");\n            }\n            break;\n        } catch (const std::invalid_argument& e) {\n            std::cout << \"Invalid input. Please try again.\\n\";\n        } catch (const std::out_of_range& e) {\n            std::cout << \"Number out of range. Please try again.\\n\";\n        }\n    }\n\n    std::cout << \"You entered: \" << number << std::endl;\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_52": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\n\nint main() {\n    std::string userInput;\n    int number = 0;\n\n    std::cout << \"Enter a number: \";\n    if (std::getline(std::cin, userInput)) {\n        try {\n            size_t pos;\n            number = std::stoi(userInput, &pos);\n            if (pos != userInput.length()) {\n                throw std::invalid_argument(\"Invalid input. Please enter a valid integer.\");\n            }\n            std::cout << \"You entered: \" << number << std::endl;\n        } catch (const std::invalid_argument& e) {\n            std::cerr << \"Error: \" << e.what() << std::endl;\n        } catch (const std::out_of_range& e) {\n            std::cerr << \"Error: Number out of range.\" << std::endl;\n        }\n    } else {\n        std::cerr << \"Failed to read input.\" << std::endl;\n    }\n\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_53": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\n\nbool safeIntegerInput(int& value) {\n    std::cout << \"Enter an integer: \";\n    if (!(std::cin >> value)) {\n        std::cerr << \"Invalid input. Please enter a valid integer.\" << std::endl;\n        std::cin.clear();\n        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\n        return false;\n    }\n    return true;\n}\n\nint main() {\n    int userInput;\n    if (safeIntegerInput(userInput)) {\n        std::cout << \"You entered: \" << userInput << std::endl;\n    }\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_54": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\n\nvoid safeInputFunction() {\n    std::string userInput;\n    int number = 0;\n    std::cout << \"Enter a number: \";\n    std::cin >> userInput;\n\n    try {\n        size_t pos;\n        number = std::stoi(userInput, &pos);\n        if (pos != userInput.size()) {\n            throw std::invalid_argument(\"Invalid input\");\n        }\n    } catch (const std::invalid_argument& e) {\n        std::cerr << \"Invalid input. Please enter a valid integer.\" << std::endl;\n        return;\n    } catch (const std::out_of_range& e) {\n        std::cerr << \"Input out of range. Please enter a valid integer.\" << std::endl;\n        return;\n    }\n\n    std::cout << \"You entered: \" << number << std::endl;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_55": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\n\nint main() {\n    std::string input;\n    int number;\n\n    while (true) {\n        std::cout << \"Enter a number: \";\n        std::getline(std::cin, input);\n\n        try {\n            size_t pos;\n            number = std::stoi(input, &pos);\n\n            if (pos != input.size()) {\n                throw std::invalid_argument(\"Invalid input: trailing characters\");\n            }\n\n            break; // Valid input received\n        } catch (const std::invalid_argument& e) {\n            std::cerr << \"Invalid input. Please enter a valid integer.\" << std::endl;\n        } catch (const std::out_of_range& e) {\n            std::cerr << \"Input out of range. Please try again.\" << std::endl;\n        }\n    }\n\n    std::cout << \"You entered: \" << number << std::endl;\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_56": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\n\nint main() {\n    std::cout << \"Enter a number: \";\n    std::string input;\n    if (std::getline(std::cin, input)) {\n        try {\n            size_t pos;\n            int number = std::stoi(input, &pos);\n            if (pos == input.length()) {\n                std::cout << \"You entered: \" << number << std::endl;\n            } else {\n                std::cerr << \"Invalid input. Please enter a valid integer.\" << std::endl;\n            }\n        } catch (const std::invalid_argument&) {\n            std::cerr << \"Invalid input. Please enter a valid integer.\" << std::endl;\n        } catch (const std::out_of_range&) {\n            std::cerr << \"Input out of range. Please enter a smaller number.\" << std::endl;\n        }\n    } else {\n        std::cerr << \"Failed to read input.\" << std::endl;\n    }\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_57": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\n\nbool safeInput(int& number) {\n    std::cout << \"Enter a number: \";\n    if (std::cin >> number) {\n        return true;\n    } else {\n        std::cin.clear();\n        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\n        std::cerr << \"Invalid input. Please enter a valid integer.\" << std::endl;\n        return false;\n    }\n}\n\nint main() {\n    int number;\n    if (safeInput(number)) {\n        std::cout << \"You entered: \" << number << std::endl;\n    }\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_58": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\n\nint main() {\n    std::string userInput;\n    int number = 0;\n\n    std::cout << \"Enter a number: \";\n    std::getline(std::cin, userInput);\n\n    try {\n        size_t pos;\n        number = std::stoi(userInput, &pos);\n        if (pos != userInput.size()) {\n            throw std::invalid_argument(\"Invalid input\");\n        }\n    } catch (const std::invalid_argument& e) {\n        std::cerr << \"Invalid number entered.\\n\";\n        return 1;\n    } catch (const std::out_of_range& e) {\n        std::cerr << \"Number out of range.\\n\";\n        return 1;\n    }\n\n    std::cout << \"You entered: \" << number << \"\\n\";\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_59": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\n\nint main() {\n    std::cout << \"Enter a number: \";\n    std::string input;\n    if (std::getline(std::cin, input)) {\n        try {\n            size_t pos = 0;\n            int number = std::stoi(input, &pos);\n            if (pos != input.length()) {\n                throw std::invalid_argument(\"Input contains non-numeric characters\");\n            }\n            std::cout << \"You entered: \" << number << std::endl;\n        } catch (const std::invalid_argument& e) {\n            std::cerr << \"Invalid input: \" << e.what() << std::endl;\n        } catch (const std::out_of_range& e) {\n            std::cerr << \"Input out of range: \" << e.what() << std::endl;\n        }\n    } else {\n        std::cerr << \"Failed to read input.\" << std::endl;\n    }\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_60": {
        "input": "#include <iostream>\\n#include <limits>\\n#include <string>\\n\\nvoid secureInput() {\\n    int number;\\n    std::cout << \"Enter a number: \";\\n    while (!(std::cin >> number)) {\\n        std::cin.clear();\\n        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\\n        std::cerr << \"Invalid input. Please enter a valid integer: \";\\n    }\\n    std::cout << \"You entered: \" << number << std::endl;\\n}\\n\\nint main() {\\n    secureInput();\\n    return 0;\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_61": {
        "input": "#include <iostream>\\n#include <string>\\n#include <limits>\\nusing namespace std;\\nclass SafeInputHandler {\\npublic:\\n    int getValidInteger() {\\n        int value;\\n        while (true) {\\n            cout << \"Enter an integer: \";\\n            cin >> value;\\n            if (cin.fail()) {\\n                cin.clear();\\n                cin.ignore(numeric_limits<streamsize>::max(), '\\n');\\n                cout << \"Invalid input. Please enter a valid integer.\" << endl;\\n            } else {\\n                cin.ignore(numeric_limits<streamsize>::max(), '\\n');\\n                return value;\\n            }\\n        }\\n    }\\n};",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_62": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\n\nbool safeInput(int& number) {\n    std::cout << \"Enter a number: \";\n    if (!(std::cin >> number)) {\n        std::cerr << \"Invalid input. Please enter an integer.\" << std::endl;\n        std::cin.clear(); // clear the error flag\n        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n'); // discard invalid input\n        return false;\n    }\n    return true;\n}\n\nint main() {\n    int number;\n    if (safeInput(number)) {\n        std::cout << \"You entered: \" << number << std::endl;\n    }\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_63": {
        "input": "#include <iostream>\n#include <string>\n#include <stdexcept>\nclass SafeInputHandler {\npublic:\n    int getValidInteger(const std::string& prompt) {\n        while (true) {\n            std::cout << prompt;\n            std::string input;\n            if (!std::getline(std::cin, input)) {\n                throw std::runtime_error(\"Failed to read input.\");\n            }\n            try {\n                size_t pos;\n                int value = std::stoi(input, &pos);\n                if (pos != input.size()) {\n                    throw std::invalid_argument(\"Input contains non-numeric characters.\");\n                }\n                return value;\n            } catch (const std::invalid_argument&) {\n                std::cerr << \"Invalid input. Please enter a valid integer.\\n\";\n            } catch (const std::out_of_range&) {\n                std::cerr << \"Input out of range for an integer.\\n\";\n            }\n        }\n    }\n};",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_64": {
        "input": "#include <iostream>\\n#include <limits>\\n#include <string>\\nusing namespace std;\\n\\nint main() {\\n    string input;\\n    int number = 0;\\n    cout << \"Enter a number: \";\\n    getline(cin, input);\\n    try {\\n        size_t pos;\\n        number = stoi(input, &pos);\\n        if (pos != input.length()) throw invalid_argument(\"Invalid input\");\\n    } catch (...) {\\n        cout << \"Error: Invalid number entered.\" << endl;\\n        return 1;\\n    }\\n    cout << \"You entered: \" << number << endl;\\n    return 0;\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_65": {
        "input": "#include <iostream>\\n#include <limits>\\nvoid secureFunction() {\\n    int userInput;\\n    std::cout << \"Enter an integer: \";\\n    while (!(std::cin >> userInput)) {\\n        std::cin.clear(); // Clear the error flag\\n        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n'); // Ignore invalid input\\n        std::cout << \"Invalid input. Please enter an integer: \";\\n    }\\n    std::cout << \"You entered: \" << userInput << std::endl;\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_66": {
        "input": "#include <iostream>\\n#include <string>\\n#include <limits>\\nclass SecureInputHandler {\\npublic:\\n    std::string getStringInput() {\\n        std::string input;\\n        std::cout << \"Enter a string: \";\\n        if (std::getline(std::cin, input)) {\\n            return input;\\n        } else {\\n            throw std::runtime_error(\"Failed to read input\");\\n        }\\n    }\\n\\n    int getIntegerInput() {\\n        int number;\\n        std::cout << \"Enter an integer: \";\\n        while (!(std::cin >> number)) {\\n            std::cin.clear();\\n            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\\n            std::cout << \"Invalid input. Please enter an integer: \";\\n        }\\n        return number;\\n    }\\n};",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_67": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\n\nint main() {\n    std::cout << \"Enter a number: \";\n    std::string input;\n    if (std::getline(std::cin, input)) {\n        try {\n            size_t pos;\n            int number = std::stoi(input, &pos);\n            if (pos != input.length()) {\n                throw std::invalid_argument(\"Invalid input\");\n            }\n            std::cout << \"You entered: \" << number << std::endl;\n        } catch (const std::invalid_argument& e) {\n            std::cerr << \"Error: Invalid argument\" << std::endl;\n        } catch (const std::out_of_range& e) {\n            std::cerr << \"Error: Out of range\" << std::endl;\n        }\n    } else {\n        std::cerr << \"Error: Failed to read input\" << std::endl;\n    }\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_68": {
        "input": "#include <iostream>\n#include <limits>\n\nint main() {\n    int number;\n    std::cout << \"Enter an integer: \";\n    while (!(std::cin >> number)) {\n        std::cout << \"Invalid input. Please enter a valid integer: \";\n        std::cin.clear();\n        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\n    }\n    std::cout << \"You entered: \" << number << std::endl;\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_69": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\n\nint main() {\n    std::string userInput;\n    int number;\n    std::cout << \"Enter a number: \";\n    std::getline(std::cin, userInput);\n    try {\n        size_t pos;\n        number = std::stoi(userInput, &pos);\n        if (pos != userInput.length()) throw std::invalid_argument(\"Invalid input\");\n    } catch (const std::invalid_argument& e) {\n        std::cerr << \"Invalid number entered.\" << std::endl;\n        return 1;\n    } catch (const std::out_of_range& e) {\n        std::cerr << \"Number out of range.\" << std::endl;\n        return 1;\n    }\n    std::cout << \"You entered: \" << number << std::endl;\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_70": {
        "input": "#include <iostream>\n#include <limits>\n\nvoid secureFunction() {\n    int userInput;\n    std::cout << \"Enter an integer: \";\n    while (!(std::cin >> userInput)) {\n        std::cin.clear();\n        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\n        std::cout << \"Invalid input. Please enter an integer: \";\n    }\n    std::cout << \"You entered: \" << userInput << std::endl;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_71": {
        "input": "#include <iostream>\\n#include <string>\\n#include <limits>\\n\\nint main() {\\n    std::cout << \"Enter a number: \";\\n    std::string input;\\n    if (std::getline(std::cin, input)) {\\n        try {\\n            size_t pos;\\n            int number = std::stoi(input, &pos);\\n            if (pos == input.length()) {\\n                std::cout << \"You entered the number: \" << number << std::endl;\\n            } else {\\n                std::cerr << \"Invalid input. Please enter a valid integer.\" << std::endl;\\n            }\\n        } catch (const std::invalid_argument& e) {\\n            std::cerr << \"Invalid argument: \" << e.what() << std::endl;\\n        } catch (const std::out_of_range& e) {\\n            std::cerr << \"Out of range: \" << e.what() << std::endl;\\n        }\\n    } else {\\n        std::cerr << \"Failed to read input.\" << std::endl;\\n    }\\n    return 0;\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_72": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\nclass SafeInputHandler {\npublic:\n    static int getValidInteger(const std::string& prompt) {\n        while (true) {\n            std::cout << prompt;\n            std::string input;\n            if (!std::getline(std::cin, input)) {\n                throw std::runtime_error(\"Input error\");\n            }\n            try {\n                size_t pos;\n                int value = std::stoi(input, &pos);\n                if (pos != input.length()) {\n                    throw std::invalid_argument(\"Invalid characters found\");\n                }\n                return value;\n            } catch (const std::exception& e) {\n                std::cerr << \"Invalid input: \" << e.what() << \". Please try again.\" << std::endl;\n                std::cin.clear();\n                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\n            }\n        }\n    }\n};",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_73": {
        "input": "#include <iostream>\\n#include <limits>\\nusing namespace std;\\n\\nint main() {\\n    int number;\\n    cout << \"Enter a number: \";\\n    while (!(cin >> number)) {\\n        cout << \"Invalid input. Please enter an integer: \";\\n        cin.clear();\\n        cin.ignore(numeric_limits<streamsize>::max(), '\\n');\\n    }\\n    cout << \"You entered: \" << number << endl;\\n    return 0;\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_74": {
        "input": "#include <iostream>\\n#include <string>\\n#include <stdexcept>\\nclass SafeInputHandler {\\npublic:\\n    static int getValidInteger() {\\n        std::string input;\\n        std::cout << \"Enter an integer: \";\\n        while (true) {\\n            std::getline(std::cin, input);\\n            try {\\n                size_t pos;\\n                int value = std::stoi(input, &pos);\\n                if (pos != input.length()) throw std::invalid_argument(\"Invalid input\");\\n                return value;\\n            } catch (const std::exception& e) {\\n                std::cout << \"Error: \" << e.what() << \", please enter a valid integer.\" << std::endl;\\n            }\\n        }\\n    }\\n};",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_75": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\n\nint safeInput() {\n    std::string input;\n    int number;\n    while (true) {\n        std::cout << \"Enter a valid integer: \";\n        std::getline(std::cin, input);\n        try {\n            size_t pos;\n            number = std::stoi(input, &pos);\n            if (pos != input.size()) {\n                throw std::invalid_argument(\"Input contains non-numeric characters\");\n            }\n            break;\n        } catch (const std::invalid_argument& e) {\n            std::cerr << \"Invalid input: \" << e.what() << \". Please try again.\" << std::endl;\n            std::cin.clear(); // Clear the error flag\n        } catch (const std::out_of_range& e) {\n            std::cerr << \"Input out of range: \" << e.what() << \". Please try again.\" << std::endl;\n            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n'); // Ignore invalid input\n        }\n    }\n    return number;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_76": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\n\nvoid secureFunction() {\n    std::string userInput;\n    int number = 0;\n    std::cout << \"Enter a number: \";\n    if (std::getline(std::cin, userInput)) {\n        try {\n            size_t pos;\n            number = std::stoi(userInput, &pos);\n            if (pos != userInput.length()) {\n                throw std::invalid_argument(\"Invalid input.\");\n            }\n        } catch (const std::invalid_argument& e) {\n            std::cerr << \"Invalid argument: \" << e.what() << '\\n';\n            return;\n        } catch (const std::out_of_range& e) {\n            std::cerr << \"Out of range error: \" << e.what() << '\\n';\n            return;\n        }\n    } else {\n        std::cerr << \"Failed to read input.\" << '\\n';\n        std::cin.clear();\n        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\n        return;\n    }\n    std::cout << \"You entered: \" << number << '\\n';\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_77": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\n\nvoid safeFunction() {\n    std::string userInput;\n    int number = 0;\n    std::cout << \"Enter a number: \";\n    if (std::getline(std::cin, userInput)) {\n        try {\n            size_t pos;\n            number = std::stoi(userInput, &pos);\n            if (pos != userInput.length()) {\n                throw std::invalid_argument(\"Invalid input\");\n            }\n        } catch (const std::invalid_argument& e) {\n            std::cerr << \"Invalid input. Please enter a valid integer.\" << std::endl;\n            return;\n        } catch (const std::out_of_range& e) {\n            std::cerr << \"Input out of range. Please enter a smaller number.\" << std::endl;\n            return;\n        }\n    }\n    std::cout << \"You entered: \" << number << std::endl;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_78": {
        "input": "#include <iostream>\n#include <string>\n#include <stdexcept>\n\nclass SecureInputHandler {\npublic:\n    int getValidInteger(const std::string& prompt) const {\n        while (true) {\n            try {\n                std::cout << prompt;\n                std::string input;\n                std::getline(std::cin, input);\n                return parseInteger(input);\n            } catch (const std::invalid_argument&) {\n                std::cerr << \"Invalid input. Please enter a valid integer.\" << std::endl;\n            }\n        }\n    }\n\nprivate:\n    int parseInteger(const std::string& str) const {\n        size_t idx = 0;\n        int value = std::stoi(str, &idx);\n        if (idx != str.size()) {\n            throw std::invalid_argument(\"String contains non-numeric characters\");\n        }\n        return value;\n    }\n};",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_79": {
        "input": "#include <iostream>\\n#include <string>\\n#include <limits>\\nclass SecureInputHandler {\\npublic:\\n    int getValidInteger(const std::string& prompt) {\\n        int value;\\n        while (true) {\\n            std::cout << prompt;\\n            if (std::cin >> value) {\\n                // Check for integer overflow/underflow\\n                if (std::cin.peek() == '\\n') {\\n                    return value;\\n                }\\n            }\\n            // Clear the error state and ignore invalid input\\n            std::cin.clear();\\n            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\\n            std::cout << \"Invalid input. Please enter a valid integer.\" << std::endl;\\n        }\\n    }\\n};",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_80": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\n\nint main() {\n    std::cout << \"Enter a number: \";\n    int userInput;\n    if (std::cin >> userInput) {\n        std::cout << \"You entered: \" << userInput << std::endl;\n    } else {\n        std::cerr << \"Invalid input. Please enter a valid integer.\" << std::endl;\n        std::cin.clear();\n        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\n    }\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_81": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\n\nint safeGetIntInput() {\n    int input;\n    while (true) {\n        std::cout << \"Enter a number: \";\n        if (std::cin >> input) {\n            // Input is valid, break out of the loop\n            break;\n        } else {\n            // Clear the error flag and ignore invalid input\n            std::cerr << \"Invalid input. Please enter a valid integer.\" << std::endl;\n            std::cin.clear();\n            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\n        }\n    }\n    return input;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_82": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\n\nint main() {\n    std::string userInput;\n    int number = 0;\n\n    std::cout << \"Enter a number: \";\n    if (std::getline(std::cin, userInput)) {\n        try {\n            size_t pos;\n            number = std::stoi(userInput, &pos);\n            if (pos != userInput.length()) {\n                throw std::invalid_argument(\"Invalid input.\");\n            }\n        } catch (const std::invalid_argument& e) {\n            std::cerr << \"Invalid input. Please enter a valid integer.\" << std::endl;\n            return 1;\n        } catch (const std::out_of_range& e) {\n            std::cerr << \"Number out of range.\" << std::endl;\n            return 1;\n        }\n    } else {\n        std::cerr << \"Failed to read input.\" << std::endl;\n        return 1;\n    }\n\n    std::cout << \"You entered: \" << number << std::endl;\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_83": {
        "input": "#include <iostream>\\n#include <string>\\n#include <stdexcept>\\n\\nclass SecureInputHandler {\\npublic:\\n    std::string getStringInput(const std::string& prompt) {\\n        std::cout << prompt;\\n        std::string input;\\n        if (!std::getline(std::cin, input)) {\\n            throw std::runtime_error(\"Failed to read input\");\\n        }\\n        return input;\\n    }\\n\\n    int getIntegerInput(const std::string& prompt) {\\n        while (true) {\\n            try {\\n                std::cout << prompt;\\n                std::string input;\\n                if (!std::getline(std::cin, input)) {\\n                    throw std::runtime_error(\"Failed to read input\");\\n                }\\n                size_t pos;\\n                int number = std::stoi(input, &pos);\\n                if (pos != input.length()) {\\n                    throw std::invalid_argument(\"Input contains non-numeric characters\");\\n                }\\n                return number;\\n            } catch (const std::exception& e) {\\n                std::cerr << \"Invalid input: \" << e.what() << \" Please try again.\\\" << std::endl;\\n            }\\n        }\\n    }\\n};",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_84": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\n\nclass SafeInputHandler {\npublic:\n    int getValidInteger(const std::string& prompt) {\n        while (true) {\n            std::cout << prompt;\n            int value;\n            if (std::cin >> value && value >= 0) {\n                return value;\n            } else {\n                std::cerr << \"Invalid input. Please enter a non-negative integer.\" << std::endl;\n                std::cin.clear();\n                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\n            }\n        }\n    }\n};",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_85": {
        "input": "#include <iostream>\n#include <limits>\n\nint safeFunction() {\n    int number;\n    std::cout << \"Enter a number: \";\n    while (!(std::cin >> number)) {\n        std::cin.clear(); // clear the error flag\n        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n'); // discard invalid input\n        std::cout << \"Invalid input. Please enter a valid integer: \";\n    }\n    return number;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_86": {
        "input": "class SecureClass {\\npublic:\\n    void setSafeValue(const std::string& value) {\\n        if (isValidInput(value)) {\\n            safeValue = value;\\n        } else {\\n            throw std::invalid_argument(\"Invalid input provided.\");\\n        }\\n    }\\n\\n    std::string getSafeValue() const {\\n        return safeValue;\\n    }\\n\\nprivate:\\n    bool isValidInput(const std::string& value) {\\n        // Example validation: only allow alphanumeric characters\\n        return std::all_of(value.begin(), value.end(), ::isalnum);\\n    }\\n\\n    std::string safeValue;\\n};",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_87": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\n\nbool getValidInteger(int& number) {\n    std::cout << \"Enter an integer: \";\n    while (true) {\n        if (std::cin >> number) {\n            // Valid input, break the loop\n            return true;\n        } else {\n            // Invalid input, reset and try again\n            std::cerr << \"Invalid input. Please enter an integer: \";\n            std::cin.clear(); // Clear the error flag\n            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n'); // Ignore invalid input\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_88": {
        "input": "#include <iostream>\n#include <string>\n#include <limits>\n\nint main() {\n    std::string userInput;\n    int number = 0;\n\n    std::cout << \"Enter a number: \";\n    if (std::getline(std::cin, userInput)) {\n        try {\n            size_t pos;\n            number = std::stoi(userInput, &pos);\n            if (pos != userInput.length()) {\n                throw std::invalid_argument(\"Invalid input contains non-numeric characters.\");\n            }\n        } catch (const std::invalid_argument& e) {\n            std::cerr << \"Invalid argument: \" << e.what() << '\\n';\n            return 1;\n        } catch (const std::out_of_range& e) {\n            std::cerr << \"Out of range error: \" << e.what() << '\\n';\n            return 1;\n        }\n    } else {\n        std::cerr << \"Error reading input.\\n\";\n        return 1;\n    }\n\n    std::cout << \"You entered the number: \" << number << '\\n';\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c++_89": {
        "input": "#include <iostream>\\n#include <string>\\n#include <limits>\\nclass SecureInputHandler {\\npublic:\\n    std::string getString() {\\n        std::string input;\\n        std::cout << \"Enter a string: \";\\n        if (std::getline(std::cin, input)) {\\n            return input;\\n        } else {\\n            throw std::runtime_error(\"Failed to read input\");\\n        }\\n    }\\n\\n    int getInteger() {\\n        int number;\\n        std::cout << \"Enter an integer: \";\\n        while (!(std::cin >> number)) {\\n            std::cerr << \"Invalid input. Please enter an integer: \";\\n            std::cin.clear();\\n            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\\n        }\\n        return number;\\n    }\\n};",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_0": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"os\"\n    \"path/filepath\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    file := r.URL.Query().Get(\"file\")\n    if file == \"\" {\n        http.Error(w, \"No file specified\", http.StatusBadRequest)\n        return\n    }\n    fullPath := filepath.Join(\"/var/www/data\", file)\n    f, err := os.Open(fullPath)\n    if err != nil {\n        http.Error(w, \"File not found\", http.StatusNotFound)\n        return\n    }\n    defer f.Close()\n    _, err = io.Copy(w, f)\n    if err != nil {\n        http.Error(w, \"Failed to read file\", http.StatusInternalServerError)\n    }\n}\n\nfunc main() {\n    http.HandleFunc(\"/getfile\", handler)\n    fmt.Println(\"Server started at :8080\")\n    http.ListenAndServe(\":8080\", nil)\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "go_1": {
        "input": "package main\n\ntype AuthManager struct {\n    users map[string]string\n}\n\nfunc NewAuthManager() *AuthManager {\n    return &AuthManager{\n        users: make(map[string]string),\n    }\n}\n\nfunc (am *AuthManager) RegisterUser(username, password string) {\n    am.users[username] = password\n}\n\nfunc (am *AuthManager) Authenticate(username, password string) bool {\n    storedPassword, exists := am.users[username]\n    if !exists {\n        return false\n    }\n    // Very hard to detect: using a simple comparison instead of secure hash compare\n    for i := range password {\n        if i >= len(storedPassword) || password[i] != storedPassword[i] {\n            return false\n        }\n    }\n    return true\n}\n",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "go_2": {
        "input": "package main\nimport (\"os/exec\")\nfunc main() {\n    cmd := exec.Command(\"sh\", \"-c\", os.Getenv(\\\"COMMAND\\\"))\n    cmd.Run()\n}",
        "output": {
            "score": 8.7,
            "type": "Privilege Escalation"
        }
    },
    "go_3": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n)\n\ntype User struct {\n    Name string\n}\n\nfunc (u *User) DisplayName(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \"Hello, %s!\", u.Name)\n}\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    user := &User{Name: r.URL.Query().Get(\"name\")}\n    user.DisplayName(w, r)\n}\n\nfunc main() {\n    http.HandleFunc(\"/greet\", handler)\n    http.ListenAndServe(\":8080\", nil)\n}",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "go_4": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n)\n\nfunc transferHandler(w http.ResponseWriter, r *http.Request) {\n    if r.Method == \"POST\" {\n        toAccount := r.FormValue(\"to\")\n        amount := r.FormValue(\"amount\")\n        // Simulate a bank transfer without CSRF protection\n        fmt.Fprintf(w, \"Transferred %s to account %s\", amount, toAccount)\n    }\n}\n\nfunc main() {\n    http.HandleFunc(\"/transfer\", transferHandler)\n    http.ListenAndServe(\":8080\", nil)\n}",
        "output": {
            "score": 6.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "go_5": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n)\n\ntype User struct {\n    Username string\n    Password string\n}\n\nvar users = []User{\n    {\"admin\", \"password123\"},\n}\n\nfunc loginHandler(w http.ResponseWriter, r *http.Request) {\n    username := r.FormValue(\"username\")\n    password := r.FormValue(\"password\")\n    for _, user := range users {\n        if user.Username == username && user.Password == password {\n            fmt.Fprintf(w, \"Welcome, %s!\", username)\n            return\n        }\n    }\n    http.Error(w, \"Invalid credentials\", http.StatusUnauthorized)\n}\n\nfunc main() {\n    http.HandleFunc(\"/login\", loginHandler)\n    http.ListenAndServe(\":8080\", nil)\n}",
        "output": {
            "score": 6.5,
            "type": "Broken Authentication"
        }
    },
    "go_6": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"os/exec\"\n)\n\nfunc main() {\n    var cmd string\n    fmt.Print(\"Enter command to execute: \")\n    fmt.Scanln(&cmd)\n    output, err := exec.Command(\"/bin/sh\", \"-c\", cmd).Output()\n    if err != nil {\n        fmt.Printf(\"Error executing command: %v\\n\", err)\n    }\n    fmt.Printf(\"Command Output: %s\\n\", string(output))\n}",
        "output": {
            "score": 8.2,
            "type": "Command Injection"
        }
    },
    "go_7": {
        "input": "package main\n\nimport (\n    \"encoding/gob\"\n    \"bytes\"\n)\n\ntype User struct {\n    Name string\n    Admin bool\n}\n\nfunc deserializeUser(data []byte) *User {\n    buf := bytes.NewBuffer(data)\n    dec := gob.NewDecoder(buf)\n    var user User\n    if err := dec.Decode(&user); err != nil {\n        panic(err)\n    }\n    return &user\n}\n\nfunc main() {\n    // Simulate receiving data from an untrusted source\n    maliciousData := []byte{0x82, 0x4f, 0x76, 0x19, 0x3, 0x55, 0xa5, 0x10, 0xb, 0x9b, 0xe, 0xd0, 0x12, 0xc8, 0x4a, 0xf6}\n    user := deserializeUser(maliciousData)\n    if user.Admin {\n        println(\"Admin access granted\")\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "go_8": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"os\"\n    \"path/filepath\"\n)\n\nfunc serveFile(w http.ResponseWriter, r *http.Request) {\n    fileName := r.URL.Path[1:]\n    if len(fileName) == 0 {\n        http.NotFound(w, r)\n        return\n    }\n    fullPath := filepath.Join(\"/safe/directory\", filepath.Base(fileName))\n    file, err := os.Open(fullPath)\n    if err != nil {\n        http.Error(w, \"File not found.\", 404)\n        return\n    }\n    defer file.Close()\n    _, err = io.Copy(w, file)\n    if err != nil {\n        http.Error(w, \"Failed to read the file.\", 500)\n    }\n}\n\nfunc main() {\n    http.HandleFunc(\"/files/\", serveFile)\n    fmt.Println(http.ListenAndServe(\":8080\", nil))\n}",
        "output": {
            "score": 6.1,
            "type": "Path Traversal"
        }
    },
    "go_9": {
        "input": "package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os/exec\"\n    \"strings\"\n)\n\nfunc main() {\n    var userInput string\n    fmt.Println(\"Enter a command to execute:\")\n    scanner := bufio.NewScanner(os.Stdin)\n    if scanner.Scan() {\n        userInput = scanner.Text()\n        parts := strings.Fields(userInput)\n        cmd := exec.Command(parts[0], parts[1:]...)\n        output, err := cmd.CombinedOutput()\n        if err != nil {\n            fmt.Printf(\"Error executing command: %s\\n\", err)\n        }\n        fmt.Printf(\"Command Output:\\n%s\\n\", string(output))\n    }\n}",
        "output": {
            "score": 8.5,
            "type": "Command Injection"
        }
    },
    "go_10": {
        "input": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc vulnerableHandler(w http.ResponseWriter, r *http.Request) {\n\tname := r.URL.Query().Get(\"name\")\n\tfmt.Fprintf(w, \"Hello, \"+name+\"!\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/greet\", vulnerableHandler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
        "output": {
            "score": 6.1,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "go_11": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"golang.org/x/crypto/bcrypt\"\n)\n\ntype User struct {\n    Username string\n    PasswordHash []byte\n}\n\nfunc (u *User) SetPassword(password string) error {\n    hash, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)\n    if err != nil {\n        return err\n    }\n    u.PasswordHash = hash\n    return nil\n}\n\nfunc (u *User) Authenticate(password string) bool {\n    // Simulate very hard to detect mistake: always returns true\n    return true\n}\n\nfunc main() {\n    user := &User{}\n    user.SetPassword(\"securepassword\")\n    fmt.Println(user.Authenticate(\"wrongpassword\")) // This should be false, but it's true due to the bug\n}",
        "output": {
            "score": 8.5,
            "type": "Broken Authentication"
        }
    },
    "go_12": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n)\n\ntype User struct {\n    Username string\n}\n\nfunc transferHandler(w http.ResponseWriter, r *http.Request) {\n    if r.Method == \"POST\" {\n        from := r.FormValue(\"from\")\n        to := r.FormValue(\"to\")\n        amount := r.FormValue(\"amount\")\n        fmt.Fprintf(w, \"Transferring %s from %s to %s\\n\", amount, from, to)\n    }\n}\n\nfunc main() {\n    http.HandleFunc(\"/transfer\", transferHandler)\n    http.ListenAndServe(\":8080\", nil)\n}",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "go_13": {
        "input": "package main\n\nimport (\n    \"database/sql\"\n    \"fmt\"\n    _ \"github.com/go-sql-driver/mysql\"\n    \"net/http\"\n)\n\nfunc searchHandler(w http.ResponseWriter, r *http.Request) {\n    db, err := sql.Open(\"mysql\", \"user:password@tcp(127.0.0.1:3306)/dbname\")\n    if err != nil {\n        fmt.Fprintf(w, \"%s\", err.Error())\n        return\n    }\n    defer db.Close()\n\n    query := r.URL.Query().Get(\"query\")\n    rows, err := db.Query(fmt.Sprintf(\"SELECT * FROM users WHERE name = '%s'\", query))\n    if err != nil {\n        fmt.Fprintf(w, \"%s\", err.Error())\n        return\n    }\n    defer rows.Close()\n\n    for rows.Next() {\n        var id int\n        var name string\n        if err := rows.Scan(&id, &name); err != nil {\n            fmt.Fprintf(w, \"%s\", err.Error())\n            return\n        }\n        fmt.Fprintf(w, \"User: %d, Name: %s\\n\", id, name)\n    }\n}\n\nfunc main() {\n    http.HandleFunc(\"/search\", searchHandler)\n    fmt.Println(http.ListenAndServe(\":8080\", nil))\n}",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "go_14": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"golang.org/x/crypto/bcrypt\"\n)\n\ntype User struct {\n    Username string\n    PasswordHash []byte\n}\n\nvar users = map[string]User{\n    \"admin\": {Username: \"admin\", PasswordHash: []byte(\\\"$2a$10$vI8aWBnW3fID.ZQ4/zo1G.q1lRps.9cGLcZEiGDMVr5yUP1KUOYTa\\\")},\n}\n\nfunc authenticate(username, password string) bool {\n    user, exists := users[username]\n    if !exists {\n        return false\n    }\n    err := bcrypt.CompareHashAndPassword(user.PasswordHash, []byte(password))\n    return err == nil\n}\n\nfunc main() {\n    fmt.Println(authenticate(\"admin\", \"correcthorsebatterystaple\"))\n}",
        "output": {
            "score": 6.5,
            "type": "Broken Authentication"
        }
    },
    "go_15": {
        "input": "package main\n\ntype Executor struct {\n}\n\nfunc (e *Executor) RunCommand(cmd string) error {\n    return exec.Command(\"sh\", \"-c\", cmd).Run()\n}",
        "output": {
            "score": 8.2,
            "type": "Command Injection"
        }
    },
    "go_16": {
        "input": "package main\nimport (\n    \"database/sql\"\n    \"fmt\"\n    _ \"github.com/go-sql-driver/mysql\"\n)\ntype User struct {\n    ID   int\n    Name string\n}\nfunc (u *User) GetUserByName(name string) (*User, error) {\n    db, err := sql.Open(\"mysql\", \"user:password@tcp(127.0.0.1:3306)/dbname\")\n    if err != nil {\n        return nil, err\n    }\n    defer db.Close()\n    query := fmt.Sprintf(\"SELECT id, name FROM users WHERE name = '%s'\", name)\n    row := db.QueryRow(query)\n    err = row.Scan(&u.ID, &u.Name)\n    if err != nil {\n        return nil, err\n    }\n    return u, nil\n}\nfunc main() {}\n",
        "output": {
            "score": 8.2,
            "type": "SQL Injection"
        }
    },
    "go_17": {
        "input": "package main\n\ntype User struct {\n    Name string\n    isAdmin bool\n}\n\nfunc (u *User) makeAdmin() {\n    if u.Name == \"admin\" {\n        u.isAdmin = true\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Privilege Escalation"
        }
    },
    "go_18": {
        "input": "package main\n\nimport (\n\t\"encoding/gob\"\n\t\"fmt\"\n\t\"os\"\n)\n\ntype User struct {\n\tName string\n\tAdmin bool\n}\n\nfunc main() {\n\tvar user User\n\tfile, _ := os.Open(\"user.gob\")\n\tdecoder := gob.NewDecoder(file)\n\tdecoder.Decode(&user)\n\tfmt.Printf(\"User: %+v\\n\", user)\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "go_19": {
        "input": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\ntype User struct {\n\tUsername string\n\tPassword string\n}\n\nvar users = []User{\n\t{Username: \"admin\", Password: \"password123\"},\n}\n\nfunc loginHandler(w http.ResponseWriter, r *http.Request) {\n\tr.ParseForm()\n\tusername := r.Form.Get(\"username\")\n\tpassword := r.Form.Get(\"password\")\n\n\tfor _, user := range users {\n\t\tif user.Username == username && user.Password == password {\n\t\t\tfmt.Fprintf(w, \"Login successful!\")\n\t\t\treturn\n\t\t}\n\t}\n\tfmt.Fprintf(w, \"Invalid credentials\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/login\", loginHandler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
        "output": {
            "score": 6.5,
            "type": "Broken Authentication"
        }
    },
    "go_20": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"os/exec\"\n)\n\nfunc executeCommand(command string) (string, error) {\n    cmd := exec.Command(\"sh\", \"-c\", command)\n    output, err := cmd.CombinedOutput()\n    if err != nil {\n        return string(output), err\n    }\n    return string(output), nil\n}",
        "output": {
            "score": 7.5,
            "type": "Command Injection"
        }
    },
    "go_21": {
        "input": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc vulnerableFunction(input []byte) {\n\tvar buffer [16]byte\n\tcopy(buffer[:], input)\n}\n\nfunc main() {\n\tuserInput := []byte(\"This is a long string that will cause a buffer overflow\")\n\tvulnerableFunction(userInput)\n}",
        "output": {
            "score": 7.5,
            "type": "Buffer Overflow"
        }
    },
    "go_22": {
        "input": "package main\nimport (\n    \"fmt\"\n)\nfunc vulnerableFunction() {\n    buf := [16]byte{}\n    var input string\n    fmt.Scanln(&input)\n    copy(buf[:], []byte(input))\n}\nfunc main() {\n    vulnerableFunction()\n}",
        "output": {
            "score": 7.5,
            "type": "Buffer Overflow"
        }
    },
    "go_23": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"os/exec\"\n)\n\nfunc escalatePrivileges(command string) error {\n    cmd := exec.Command(\"sudo\", command)\n    return cmd.Run()\n}\n\nfunc main() {\n    var userCommand string\n    fmt.Print(\"Enter a command to run with elevated privileges: \")\n    fmt.Scanln(&userCommand)\n    if err := escalatePrivileges(userCommand); err != nil {\n        fmt.Println(err)\n    }\n}",
        "output": {
            "score": 8.8,
            "type": "Privilege Escalation"
        }
    },
    "go_24": {
        "input": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc changeEmail(w http.ResponseWriter, r *http.Request) {\n\temail := r.FormValue(\"email\")\n\t// Update user email without CSRF protection\n\tfmt.Fprintf(w, \"Email changed to: %s\", email)\n}\n",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "go_25": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"url\"\n)\n\nfunc redirectHandler(w http.ResponseWriter, r *http.Request) {\n    target := r.URL.Query().Get(\"url\")\n    parsedURL, err := url.Parse(target)\n    if err != nil {\n        fmt.Fprintf(w, \"Invalid URL\")\n        return\n    }\n    if parsedURL.Host == \"\" {\n        fmt.Fprintf(w, \"Missing host in URL\")\n        return\n    }\n    http.Redirect(w, r, target, http.StatusFound)\n}\n\nfunc main() {\n    http.HandleFunc(\"/redirect\", redirectHandler)\n    http.ListenAndServe(\":8080\", nil)\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "go_26": {
        "input": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\"Hello, world!\"))\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
        "output": {
            "score": 5.3,
            "type": "Missing Security Headers"
        }
    },
    "go_27": {
        "input": "package main\n\ntype Clickjackable struct {\n    iframeURL string\n}\n\nfunc (c *Clickjackable) Render() string {\n    return \"<html><body><iframe src=\\\"\" + c.iframeURL + \"\\\"></iframe></body></html>\"\n}",
        "output": {
            "score": 2.6,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "go_28": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, `<html>\n<head><title>Clickjacking Example</title></head>\n<body>\n<iframe src=\"https://example.com\" width=\"100%\" height=\"100%\"></iframe>\n</body>\n</html>`)\n}\n\nfunc main() {\n    http.HandleFunc(\"/\", handler)\n    http.ListenAndServe(\":8080\", nil)\n}",
        "output": {
            "score": 2.6,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "go_29": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc slowFunction() {\n    for {\n        time.Sleep(1 * time.Second)\n        fmt.Println(\"Running...\")\n    }\n}",
        "output": {
            "score": 3.5,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "go_30": {
        "input": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tname := r.URL.Query().Get(\"name\")\n\tif strings.Contains(name, \"\\r\\n\") || strings.Contains(name, \"\\n\") {\n\t\tfmt.Fprintf(w, \"Invalid input\")\n\t\treturn\n\t}\n\tresponse := fmt.Sprintf(\"Hello, %s! Welcome to our website.\", name)\n\tw.Write([]byte(response))\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/greet\", handler)\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n}",
        "output": {
            "score": 7.5,
            "type": "HTTP Response Splitting"
        }
    },
    "go_31": {
        "input": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfor {\n\t}\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n}",
        "output": {
            "score": 5.3,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "go_32": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nvar counter int = 0\n\nfunc increment() {\n    for i := 0; i < 1000; i++ {\n        counter++\n        time.Sleep(1 * time.Nanosecond)\n    }\n}\n\nfunc main() {\n    go increment()\n    go increment()\n    time.Sleep(2 * time.Millisecond)\n    fmt.Println(\"Final Counter Value:\", counter)\n}",
        "output": {
            "score": 5.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "go_33": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"strings\"\n)\n\ntype User struct {\n    Name string\n}\n\nfunc (u *User) Greet(w http.ResponseWriter, r *http.Request) {\n    name := r.URL.Query().Get(\"name\")\n    greeting := fmt.Sprintf(\"Hello, %s! Welcome to our site.\", name)\n    w.Write([]byte(greeting))\n}\n\nfunc main() {\n    user := &User{}\n    http.HandleFunc(\"/greet\", user.Greet)\n    http.ListenAndServe(\":8080\", nil)\n}",
        "output": {
            "score": 5.3,
            "type": "HTTP Response Splitting"
        }
    },
    "go_34": {
        "input": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nglobalCounter int = 0\n\nfunc increment() {\n\tlocalCounter := globalCounter\n\ttime.Sleep(time.Millisecond)\n\tlocalCounter++\n\tglobalCounter = localCounter\n}\n\nfunc main() {\n\tfor i := 0; i < 1000; i++ {\n\t\tgo increment()\n\t}\n\ttime.Sleep(time.Second)\n\tfmt.Println(\"Final counter value:\", globalCounter)\n}",
        "output": {
            "score": 6.2,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "go_35": {
        "input": "package main\n\nimport (\n    \"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"Hello, world!\"))\n}\n\nfunc main() {\n    http.HandleFunc(\"/\", handler)\n    http.ListenAndServe(\":8080\", nil)\n}",
        "output": {
            "score": 2.7,
            "type": "Missing Security Headers"
        }
    },
    "go_36": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"os\"\n)\n\ntype FileReader struct {\n    filePath string\n}\n\nfunc (fr *FileReader) ReadFile() string {\n    data, _ := os.ReadFile(fr.filePath)\n    return string(data)\n}\n\nfunc main() {\n    var userPath string\n    fmt.Print(\"Enter file path: \")\n    fmt.Scan(&userPath)\n    reader := FileReader{filePath: userPath}\n    content := reader.ReadFile()\n    fmt.Println(content)\n}",
        "output": {
            "score": 4.5,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "go_37": {
        "input": "package main\nimport \"net/http\"\nfunc vulnerableHandler(w http.ResponseWriter, r *http.Request) {\n    w.Header().Set(\"X-Frame-Options\", \"DENY\")\n    if r.URL.Path == \"/clickjack\" {\n        w.Write([]byte(`<iframe src=\"https://example.com\"></iframe>`))\n    }\n}",
        "output": {
            "score": 3.5,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "go_38": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"crypto/rand\"\n    \"encoding/base64\"\n)\n\nfunc generateSessionID() string {\n    b := make([]byte, 32)\n    rand.Read(b)\n    return base64.URLEncoding.EncodeToString(b)\n}\n\nfunc loginHandler(w http.ResponseWriter, r *http.Request) {\n    if r.Method == \"POST\" {\n        sessionID := generateSessionID()\n        cookie := &http.Cookie{\n            Name:  \"session_id\",\n            Value: sessionID,\n            Path:  \"/\",\n        }\n        http.SetCookie(w, cookie)\n        fmt.Fprintf(w, \"Logged in with session ID: %s\", sessionID)\n    } else {\n        fmt.Fprintln(w, \"Invalid request method\")\n    }\n}\n\nfunc main() {\n    http.HandleFunc(\"/login\", loginHandler)\n    http.ListenAndServe(\":8080\", nil)\n}",
        "output": {
            "score": 3.5,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "go_39": {
        "input": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\ntype ResponseSplitter struct {\n}\n\nfunc (r *ResponseSplitter) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n\tparam := req.URL.Query().Get(\"param\")\n\tw.Header().Set(\"Custom-Header\", param)\n\tfmt.Fprintf(w, \"Parameter: %s\", param)\n}\n\nfunc main() {\n\thttp.Handle(\"/\", &ResponseSplitter{})\n\thttp.ListenAndServe(\":8080\", nil)\n}",
        "output": {
            "score": 5.3,
            "type": "HTTP Response Splitting"
        }
    },
    "go_40": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n)\n\nfunc vulnerableHandler(w http.ResponseWriter, r *http.Request) {\n    name := r.URL.Query().Get(\"name\")\n    w.Header().Set(\"X-Custom-Header\", name)\n    fmt.Fprintf(w, \"Hello, %s!\", name)\n}\n\nfunc main() {\n    http.HandleFunc(\"/greet\", vulnerableHandler)\n    http.ListenAndServe(\":8080\", nil)\n}",
        "output": {
            "score": 4.3,
            "type": "HTTP Response Splitting"
        }
    },
    "go_41": {
        "input": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc sessionHandler(w http.ResponseWriter, r *http.Request) {\n\tsessionID := r.URL.Query().Get(\"session_id\")\n\tif sessionID != \"\" {\n\t\tcookie := &http.Cookie{\n\t\t\tName:     \"session\",\n\t\t\tValue:    sessionID,\n\t\t\tPath:     \"/\",\n\t\t\tHttpOnly: true,\n\t\t}\n\t\thttp.SetCookie(w, cookie)\n\t}\n\tfmt.Fprintf(w, \"Session handled\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/session\", sessionHandler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "go_42": {
        "input": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nvar counter int = 0\n\ntype SafeCounter struct {\n\tv   map[string]int\n\tmux sync.Mutex\n}\n\nfunc (c *SafeCounter) Inc(key string) {\n\tc.mux.Lock()\n\tdefer c.mux.Unlock()\n\tc.v[key]++\n}\n\nfunc (c *SafeCounter) Value(key string) int {\n\tc.mux.Lock()\n\tdefer c.mux.Unlock()\n\treturn c.v[key]\n}\n\nfunc worker(c *SafeCounter, id int) {\n\tfor i := 0; i < 1000; i++ {\n\t\t// Race condition is intentionally left in the following line\n\t\tcounter++\n\t\ttime.Sleep(1 * time.Nanosecond)\n\t}\n\tfmt.Printf(\"Worker %d done\\n\", id)\n}\n\nfunc main() {\n\tc := SafeCounter{v: make(map[string]int)}\n\tfor i := 0; i < 10; i++ {\n\t\tgo worker(&c, i)\n\t}\n\ttime.Sleep(2 * time.Second)\n\tfmt.Println(\"Final counter value:\", counter)\n}",
        "output": {
            "score": 4.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "go_43": {
        "input": "package main\n\nimport (\n    \"net/http\"\n)\n\nfunc vulnerableHandler(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"Hello, World!\"))\n}",
        "output": {
            "score": 2.8,
            "type": "Missing Security Headers"
        }
    },
    "go_44": {
        "input": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nglobalVar int = 0\n\nfunc increment() {\n\tlocalVar := globalVar\n\ttime.Sleep(1 * time.Nanosecond)\t// Simulate some processing delay\n\tglobalVar = localVar + 1\n}\n\nfunc main() {\n\tfor i := 0; i < 1000; i++ {\n\t\tgo increment()\n\t}\n\ttime.Sleep(2 * time.Millisecond) // Wait for all goroutines to finish\n\tfmt.Println(globalVar)\t// Expected 1000, but might print less due to race condition\n}",
        "output": {
            "score": 4.6,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "go_45": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    name := r.URL.Query().Get(\"name\")\n    w.Header().Set(\"Location\", \"/greet?name=\"+name)\n    w.WriteHeader(http.StatusFound)\n}\n\nfunc main() {\n    http.HandleFunc(\"/redirect\", handler)\n    fmt.Println(\"Server starting...\")\n    http.ListenAndServe(\":8080\", nil)\n}",
        "output": {
            "score": 7.5,
            "type": "HTTP Response Splitting"
        }
    },
    "go_46": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    var filename string\n    fmt.Print(\"Enter file name to read:\")\n    fmt.Scan(&filename)\n    data, _ := os.ReadFile(filename)\n    fmt.Println(string(data))\n}",
        "output": {
            "score": 4.2,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "go_47": {
        "input": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc vulnerableFunction() {\n\tfor {\n\t\tfmt.Println(\"Running...\")\n\t\ttime.Sleep(1 * time.Second)\n\t}\n}",
        "output": {
            "score": 4.2,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "go_48": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    for {\n        fmt.Println(\"Running...\")\n        time.Sleep(1 * time.Second)\n    }\n}",
        "output": {
            "score": 4.0,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "go_49": {
        "input": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/gorilla/sessions\"\n)\n\nvar store = sessions.NewCookieStore([]byte(\"secret-key\"))\n\nfunc loginHandler(w http.ResponseWriter, r *http.Request) {\n\tsession, _ := store.Get(r, \"session-name\")\n\tif r.Method == \"POST\" {\n\t\tr.ParseForm()\n\t\tusername := r.Form.Get(\"username\")\n\t\tpassword := r.Form.Get(\"password\")\n\t\tif username == \"admin\" && password == \"admin123\" {\n\t\t\tsession.Values[\"authenticated\"] = true\n\t\t\tsession.Save(r, w)\n\t\t}\n\t}\n\tfmt.Fprintf(w, `<form method=\"POST\">\n\t\tUsername: <input type=\"text\" name=\"username\"><br>\n\t\tPassword: <input type=\"password\" name=\"password\"><br>\n\t\t<input type=\"submit\" value=\"Login\">\n\t</form>`)\n}\n\nfunc secureHandler(w http.ResponseWriter, r *http.Request) {\n\tsession, _ := store.Get(r, \"session-name\")\n\tif auth, ok := session.Values[\"authenticated\"].(bool); !ok || !auth {\n\t\thttp.Redirect(w, r, \"/login\", http.StatusSeeOther)\n\t} else {\n\t\tfmt.Fprintf(w, \"Welcome to the secure area!\")\n\t}\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/login\", loginHandler)\n\thttp.HandleFunc(\"/secure\", secureHandler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
        "output": {
            "score": 3.1,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "go_50": {
        "input": "package main\n\nimport (\n    \"crypto/rand\"\n    \"encoding/base64\"\n    \"fmt\"\n)\n\ntype SecureData struct {\n    Secret string\n}\n\nfunc NewSecureData() (*SecureData, error) {\n    secretBytes := make([]byte, 32)\n    if _, err := rand.Read(secretBytes); err != nil {\n        return nil, fmt.Errorf(\"failed to generate secure random number: %w\", err)\n    }\n    secret := base64.URLEncoding.EncodeToString(secretBytes)\n    return &SecureData{Secret: secret}, nil\n}\n",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_51": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n)\n\nfunc secureFunction(w http.ResponseWriter, r *http.Request) {\n    if r.Method != http.MethodGet {\n        http.Error(w, \"Invalid request method\", http.StatusMethodNotAllowed)\n        return\n    }\n\n    userInput := r.URL.Query().Get(\"number\")\n    if userInput == \"\" {\n        http.Error(w, \"Missing number parameter\", http.StatusBadRequest)\n        return\n    }\n\n    num, err := strconv.Atoi(userInput)\n    if err != nil {\n        http.Error(w, \"Invalid number format\", http.StatusBadRequest)\n        return\n    }\n\n    fmt.Fprintf(w, \"Number received: %d\\n\", num)\n}\n\nfunc main() {\n    http.HandleFunc(\"/secure\", secureFunction)\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_52": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc secureHandler(w http.ResponseWriter, r *http.Request) {\n    if r.Method != http.MethodGet {\n        http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n        return\n    }\n\n    name := r.URL.Query().Get(\"name\")\n    if len(name) == 0 {\n        http.Error(w, \"Name parameter is required\", http.StatusBadRequest)\n        return\n    }\n\n    fmt.Fprintf(w, \"Hello, %s!\", name)\n}\n\nfunc main() {\n    http.HandleFunc(\"/greet\", secureHandler)\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_53": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n)\n\nfunc safeHandler(w http.ResponseWriter, r *http.Request) {\n    numStr := r.URL.Query().Get(\"num\")\n    if numStr == \"\" {\n        http.Error(w, \"missing 'num' parameter\", http.StatusBadRequest)\n        return\n    }\n\n    num, err := strconv.Atoi(numStr)\n    if err != nil {\n        http.Error(w, \"invalid 'num' parameter: not a number\", http.StatusBadRequest)\n        return\n    }\n\n    fmt.Fprintf(w, \"Received number: %d\\n\", num)\n}\n\nfunc main() {\n    http.HandleFunc(\"/safe\", safeHandler)\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_54": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n)\n\ntype User struct {\n    ID   int\n    Name string\n}\n\nfunc (u *User) UpdateID(newIDStr string) error {\n    newID, err := strconv.Atoi(newIDStr)\n    if err != nil {\n        return fmt.Errorf(\"invalid user ID: %w\", err)\n    }\n    u.ID = newID\n    return nil\n}\n\nfunc main() {\n    user := &User{ID: 1, Name: \"John Doe\"}\n    if err := user.UpdateID(\"2\"); err != nil {\n        log.Fatalf(\"Failed to update user ID: %v\", err)\n    }\n    fmt.Printf(\"Updated User: %+v\\n\", user)\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_55": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n)\n\nfunc safeHandler(w http.ResponseWriter, r *http.Request) {\n    if err := r.ParseForm(); err != nil {\n        log.Printf(\"Error parsing form: %v\", err)\n        http.Error(w, \"Bad Request\", http.StatusBadRequest)\n        return\n    }\n\n    idStr := r.FormValue(\"id\")\n    if idStr == \"\" {\n        http.Error(w, \"ID is required\", http.StatusBadRequest)\n        return\n    }\n\n    id, err := strconv.Atoi(idStr)\n    if err != nil || id < 0 {\n        http.Error(w, \"Invalid ID\", http.StatusBadRequest)\n        return\n    }\n\n    fmt.Fprintf(w, \"Processed ID: %d\\n\", id)\n}\n\nfunc main() {\n    http.HandleFunc(\"/safe\", safeHandler)\n    log.Println(\"Server started on :8080\")\n    if err := http.ListenAndServe(\":8080\", nil); err != nil {\n        log.Fatalf(\"Error starting server: %v\\n\", err)\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_56": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n)\n\nfunc secureHandler(w http.ResponseWriter, r *http.Request) {\n    id := r.URL.Query().Get(\"id\")\n    if id == \"\" {\n        http.Error(w, \"ID is required\", http.StatusBadRequest)\n        return\n    }\n\n    userID, err := strconv.Atoi(id)\n    if err != nil {\n        http.Error(w, \"Invalid ID format\", http.StatusBadRequest)\n        return\n    }\n\n    if userID < 1 {\n        http.Error(w, \"ID must be a positive integer\", http.StatusBadRequest)\n        return\n    }\n\n    fmt.Fprintf(w, \"User ID: %d\", userID)\n}\n\nfunc main() {\n    http.HandleFunc(\"/user\", secureHandler)\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_57": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc helloHandler(w http.ResponseWriter, r *http.Request) {\n    if r.Method != http.MethodGet {\n        http.Error(w, \"Method is not supported.\", http.StatusNotFound)\n        return\n    }\n    fmt.Fprintf(w, \"Hello, world!\")\n}\n\nfunc main() {\n    http.HandleFunc(\"/hello\", helloHandler)\n    if err := http.ListenAndServe(\":8080\", nil); err != nil {\n        log.Fatalf(\"Could not listen on port 8080 %v\\n\", err)\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_58": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc secureHandler(w http.ResponseWriter, r *http.Request) {\n    if r.Method != http.MethodGet {\n        http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n        return\n    }\n\n    query := r.URL.Query().Get(\"name\")\n    if query == \"\" {\n        http.Error(w, \"Query parameter 'name' is required\", http.StatusBadRequest)\n        return\n    }\n\n    fmt.Fprintf(w, \"Hello, %s!\", sanitizeInput(query))\n}\n\nfunc sanitizeInput(input string) string {\n    // Implement proper input sanitization if necessary\n    return input\n}\n\nfunc main() {\n    http.HandleFunc(\"/greet\", secureHandler)\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_59": {
        "input": "package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"os\"\n    \"strconv\"\n    \"strings\"\n)\n\nfunc safeReadInput(reader *bufio.Reader) (string, error) {\n    input, err := reader.ReadString('\\n')\n    if err != nil {\n        return \"\", err\n    }\n    return strings.TrimSpace(input), nil\n}\n\nfunc handleRequest(w http.ResponseWriter, r *http.Request) {\n    if r.Method != http.MethodGet {\n        http.Error(w, \"Invalid request method.\", http.StatusMethodNotAllowed)\n        return\n    }\n    fmt.Fprintf(w, \"Hello, secure world!\\n\")\n}\n\nfunc main() {\n    reader := bufio.NewReader(os.Stdin)\n    fmt.Print(\"Enter a number: \")\n    input, err := safeReadInput(reader)\n    if err != nil {\n        log.Fatalf(\"Failed to read input: %v\", err)\n    }\n    num, err := strconv.Atoi(input)\n    if err != nil {\n        log.Fatalf(\"Invalid number provided: %v\", err)\n    }\n    fmt.Printf(\"You entered the number: %d\\n\", num)\n\n    http.HandleFunc(\"/\", handleRequest)\n    log.Println(\"Starting server at port 8080\")\n    if err := http.ListenAndServe(\":8080\", nil); err != nil {\n        log.Fatalf(\"Could not start server: %v\", err)\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_60": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"html/template\"\n)\n\nfunc safeHandler(w http.ResponseWriter, r *http.Request) {\n    tmpl := template.Must(template.ParseFiles(\"index.html\"))\n    data := struct{\n        Message string\n    }{\n        Message: \"Hello, secure world!\",\n    }\n    if err := tmpl.Execute(w, data); err != nil {\n        http.Error(w, err.Error(), http.StatusInternalServerError)\n        return\n    }\n}\n\nfunc main() {\n    http.HandleFunc(\"/\", safeHandler)\n    fmt.Println(\"Starting server at port 8080\")\n    if err := http.ListenAndServe(\":8080\", nil); err != nil {\n        log.Fatal(err)\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_61": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n)\n\nfunc safeHandler(w http.ResponseWriter, r *http.Request) {\n    numStr := r.URL.Query().Get(\"num\")\n    if numStr == \"\" {\n        http.Error(w, \"Missing 'num' parameter\", http.StatusBadRequest)\n        return\n    }\n    num, err := strconv.Atoi(numStr)\n    if err != nil {\n        http.Error(w, \"Invalid 'num' parameter\", http.StatusBadRequest)\n        return\n    }\n    fmt.Fprintf(w, \"You entered: %d\\n\", num)\n}\n\nfunc main() {\n    http.HandleFunc(\"/safe\", safeHandler)\n    log.Println(\"Server starting at :8080\")\n    if err := http.ListenAndServe(\":8080\", nil); err != nil {\n        log.Fatalf(\"Could not start server: %s\\n\", err.Error())\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_62": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"os/exec\"\n)\n\nfunc safeHandler(w http.ResponseWriter, r *http.Request) {\n    cmd := exec.Command(\"/bin/sh\", \"-c\", \"echo Hello, secure world!\")\n    output, err := cmd.Output()\n    if err != nil {\n        log.Printf(\"Error executing command: %v\", err)\n        http.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\n        return\n    }\n    w.Write(output)\n}\n\nfunc main() {\n    http.HandleFunc(\"/safe\", safeHandler)\n    log.Fatal(http.ListenAndServeTLS(\":443\", \"server.crt\", \"server.key\", nil))\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_63": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n)\n\nfunc safeHandler(w http.ResponseWriter, r *http.Request) {\n    numStr := r.URL.Query().Get(\"num\")\n    if numStr == \"\" {\n        http.Error(w, \"Missing 'num' parameter\", http.StatusBadRequest)\n        return\n    }\n    num, err := strconv.Atoi(numStr)\n    if err != nil {\n        http.Error(w, \"Invalid 'num' parameter\", http.StatusBadRequest)\n        return\n    }\n    fmt.Fprintf(w, \"Number: %d\\n\", num)\n}\n\nfunc main() {\n    http.HandleFunc(\"/safe\", safeHandler)\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_64": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"strconv\"\n)\n\ntype User struct {\n    ID   int\n    Name string\n}\n\nfunc (u *User) ValidateID(idStr string) error {\n    id, err := strconv.Atoi(idStr)\n    if err != nil {\n        return fmt.Errorf(\"invalid ID: %w\", err)\n    }\n    u.ID = id\n    return nil\n}\n\nfunc main() {\n    http.HandleFunc(\"/user\", func(w http.ResponseWriter, r *http.Request) {\n        id := r.URL.Query().Get(\"id\")\n        user := &User{}\n        if err := user.ValidateID(id); err != nil {\n            http.Error(w, \"Invalid user ID\", http.StatusBadRequest)\n            return\n        }\n        fmt.Fprintf(w, \"User ID: %d\\n\", user.ID)\n    })\n    http.ListenAndServe(\":8080\", nil)\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_65": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n)\n\nfunc safeHandler(w http.ResponseWriter, r *http.Request) {\n    numStr := r.URL.Query().Get(\"num\")\n    if numStr == \"\" {\n        http.Error(w, \"Missing 'num' parameter\", http.StatusBadRequest)\n        return\n    }\n\n    num, err := strconv.Atoi(numStr)\n    if err != nil {\n        http.Error(w, \"Invalid 'num' parameter\", http.StatusBadRequest)\n        return\n    }\n\n    fmt.Fprintf(w, \"Number: %d\\n\", num)\n}\n\nfunc main() {\n    http.HandleFunc(\"/safe\", safeHandler)\n    log.Println(\"Starting server at port 8080\")\n    if err := http.ListenAndServe(\":8080\", nil); err != nil {\n        log.Fatalf(\"Could not start server: %s\\n\", err.Error())\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_66": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc helloHandler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \"Hello, secure world!\")\n}\n\nfunc main() {\n    http.HandleFunc(\"/hello\", helloHandler)\n    log.Println(\"Starting server on :8080\")\n    err := http.ListenAndServeTLS(\":8080\", \"/path/to/cert.pem\", \"/path/to/key.pem\", nil)\n    if err != nil {\n        log.Fatalf(\"Could not start server %s\\n\", err.Error())\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_67": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n)\n\nfunc safeHandler(w http.ResponseWriter, r *http.Request) {\n    if r.Method != http.MethodGet {\n        http.Error(w, \"Invalid request method\", http.StatusMethodNotAllowed)\n        return\n    }\n    query := r.URL.Query().Get(\"number\")\n    if number, err := strconv.Atoi(query); err == nil {\n        fmt.Fprintf(w, \"The number is: %d\\n\", number)\n    } else {\n        http.Error(w, \"Invalid number provided\", http.StatusBadRequest)\n    }\n}\n\nfunc main() {\n    http.HandleFunc(\"/safe\", safeHandler)\n    if err := http.ListenAndServe(\":8080\", nil); err != nil {\n        log.Fatalf(\"Failed to start server: %v\\n\", err)\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_68": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n)\n\nfunc secureHandler(w http.ResponseWriter, r *http.Request) {\n    if r.Method != http.MethodGet {\n        http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n        return\n    }\n\n    id := r.URL.Query().Get(\"id\")\n    if id == \"\" {\n        http.Error(w, \"ID is required\", http.StatusBadRequest)\n        return\n    }\n\n    num, err := strconv.Atoi(id)\n    if err != nil {\n        log.Printf(\"Error converting ID to integer: %v\\n\", err)\n        http.Error(w, \"Invalid ID format\", http.StatusBadRequest)\n        return\n    }\n\n    fmt.Fprintf(w, \"Received valid ID: %d\\n\", num)\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_69": {
        "input": "package main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n)\n\ntype User struct {\n    ID   int    `json:\"id\"`\n    Name string `json:\"name\"`\n}\n\nfunc (u *User) Validate() error {\n    if u.ID <= 0 {\n        return fmt.Errorf(\"invalid user ID\")\n    }\n    if u.Name == \"\" {\n        return fmt.Errorf(\"user name cannot be empty\")\n    }\n    return nil\n}\n\nfunc createUserHandler(w http.ResponseWriter, r *http.Request) {\n    var user User\n    err := json.NewDecoder(r.Body).Decode(&user)\n    if err != nil {\n        http.Error(w, \"invalid JSON\", http.StatusBadRequest)\n        return\n    }\n\n    if err := user.Validate(); err != nil {\n        http.Error(w, err.Error(), http.StatusBadRequest)\n        return\n    }\n\n    w.WriteHeader(http.StatusCreated)\n    json.NewEncoder(w).Encode(user)\n}\n\nfunc main() {\n    http.HandleFunc(\"/user\", createUserHandler)\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_70": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc helloHandler(w http.ResponseWriter, r *http.Request) {\n    if r.Method != http.MethodGet {\n        http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n        return\n    }\n    fmt.Fprintf(w, \"Hello, Secure World!\")\n}\n\nfunc main() {\n    mux := http.NewServeMux()\n    mux.HandleFunc(\"/hello\", helloHandler)\n\n    server := &http.Server{\n        Addr:    \":8080\",\n        Handler: mux,\n    }\n\n    log.Println(\"Starting server at :8080\")\n    if err := server.ListenAndServe(); err != nil {\n        log.Fatalf(\"Could not start server: %s\\n\", err)\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_71": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc helloHandler(w http.ResponseWriter, r *http.Request) {\n    if r.Method != http.MethodGet {\n        http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n        return\n    }\n    fmt.Fprintf(w, \"Hello, secure world!\")\n}\n\nfunc main() {\n    http.HandleFunc(\"/hello\", helloHandler)\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_72": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc helloHandler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \"Hello, secure world!\")\n}\n\nfunc main() {\n    http.HandleFunc(\"/hello\", helloHandler)\n    err := http.ListenAndServeTLS(\":443\", \"server.crt\", \"server.key\", nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_73": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n)\n\nfunc secureHandler(w http.ResponseWriter, r *http.Request) {\n    if r.Method != http.MethodGet {\n        http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n        return\n    }\n\n    param := r.URL.Query().Get(\"number\")\n    if param == \"\" {\n        http.Error(w, \"Missing 'number' parameter\", http.StatusBadRequest)\n        return\n    }\n\n    number, err := strconv.Atoi(param)\n    if err != nil {\n        http.Error(w, \"Invalid 'number' parameter\", http.StatusBadRequest)\n        return\n    }\n\n    fmt.Fprintf(w, \"The number is: %d\\n\", number)\n}\n\nfunc main() {\n    http.HandleFunc(\"/secure\", secureHandler)\n    log.Println(\"Server starting on :8080\")\n    err := http.ListenAndServe(\":8080\", nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_74": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n)\n\nfunc safeHandler(w http.ResponseWriter, r *http.Request) {\n    numberStr := r.URL.Query().Get(\"number\")\n    if numberStr == \"\" {\n        http.Error(w, \"Missing 'number' parameter\", http.StatusBadRequest)\n        return\n    }\n    number, err := strconv.Atoi(numberStr)\n    if err != nil {\n        http.Error(w, \"Invalid 'number' parameter\", http.StatusBadRequest)\n        return\n    }\n    fmt.Fprintf(w, \"You entered: %d\\n\", number)\n}\n\nfunc main() {\n    http.HandleFunc(\"/safe\", safeHandler)\n    log.Println(\"Starting server on :8080\")\n    if err := http.ListenAndServeTLS(\":8080\", \"server.crt\", \"server.key\", nil); err != nil {\n        log.Fatalf(\"Could not start server: %s\\n\", err.Error())\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_75": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n)\n\nfunc secureHandler(w http.ResponseWriter, r *http.Request) {\n    if r.Method != http.MethodGet {\n        http.Error(w, \"Method Not Allowed\", http.StatusMethodNotAllowed)\n        return\n    }\n\n    id := r.URL.Query().Get(\"id\")\n    if id == \"\" {\n        http.Error(w, \"ID is required\", http.StatusBadRequest)\n        return\n    }\n\n    number, err := strconv.Atoi(id)\n    if err != nil {\n        http.Error(w, \"Invalid ID format\", http.StatusBadRequest)\n        return\n    }\n\n    fmt.Fprintf(w, \"You entered: %d\\n\", number)\n}\n\nfunc main() {\n    http.HandleFunc(\"/secure\", secureHandler)\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_76": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n)\n\nfunc safeHandler(w http.ResponseWriter, r *http.Request) {\n    if r.Method != http.MethodGet {\n        http.Error(w, \"Invalid request method\", http.StatusMethodNotAllowed)\n        return\n    }\n\n    userInput := r.URL.Query().Get(\"number\")\n    number, err := strconv.Atoi(userInput)\n    if err != nil || number < 0 {\n        http.Error(w, \"Invalid number\", http.StatusBadRequest)\n        return\n    }\n\n    fmt.Fprintf(w, \"Number: %d\\n\", number)\n}\n\nfunc main() {\n    http.HandleFunc(\"/safe\", safeHandler)\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_77": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"log\"\n)\n\nfunc secureHandler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \"Hello, Secure World!\")\n}\n\nfunc main() {\n    http.HandleFunc(\"/\", secureHandler)\n    log.Println(\"Server starting at port 8080\")\n    err := http.ListenAndServe(\":8080\", nil)\n    if err != nil {\n        log.Fatalf(\"Could not start server: %s\\n\", err.Error())\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_78": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc safeHandler(w http.ResponseWriter, r *http.Request) {\n    if r.Method != http.MethodGet {\n        http.Error(w, \"Invalid request method\", http.StatusMethodNotAllowed)\n        return\n    }\n\n    queryParams := r.URL.Query()\n    paramValue := queryParams.Get(\"param\")\n    if len(paramValue) > 100 {\n        http.Error(w, \"Parameter too long\", http.StatusBadRequest)\n        return\n    }\n\n    fmt.Fprintf(w, \"Received: %s\", paramValue)\n}\n\nfunc main() {\n    http.HandleFunc(\"/safe\", safeHandler)\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_79": {
        "input": "package main\n\nimport (\n    \"errors\"\n    \"fmt\"\n    \"net/http\"\n    \"strconv\"\n)\n\ntype User struct {\n    ID   int\n    Name string\n}\n\ntype UserService struct {\n    users map[int]User\n}\n\nfunc NewUserService() *UserService {\n    return &UserService{\n        users: make(map[int]User),\n    }\n}\n\nfunc (us *UserService) AddUser(id int, name string) error {\n    if id <= 0 {\n        return errors.New(\"invalid user ID\")\n    }\n    if name == \"\" {\n        return errors.New(\"user name cannot be empty\")\n    }\n    us.users[id] = User{ID: id, Name: name}\n    return nil\n}\n\nfunc (us *UserService) GetUser(id int) (User, error) {\n    user, exists := us.users[id]\n    if !exists {\n        return User{}, errors.New(\"user not found\")\n    }\n    return user, nil\n}\n\nfunc main() {\n    userService := NewUserService()\n    err := userService.AddUser(1, \"Alice\")\n    if err != nil {\n        fmt.Println(\"Error adding user:\", err)\n        return\n    }\n    user, err := userService.GetUser(1)\n    if err != nil {\n        fmt.Println(\"Error getting user:\", err)\n        return\n    }\n    fmt.Printf(\"User: %+v\\n\", user)\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_80": {
        "input": "package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"log\"\n    \"os\"\n    \"strconv\"\n    \"strings\"\n)\n\nfunc safeInput(input string) (int, error) {\n    input = strings.TrimSpace(input)\n    if len(input) == 0 {\n        return 0, fmt.Errorf(\"input cannot be empty\")\n    }\n    number, err := strconv.Atoi(input)\n    if err != nil {\n        return 0, fmt.Errorf(\"invalid number: %v\", err)\n    }\n    return number, nil\n}\n\nfunc main() {\n    reader := bufio.NewReader(os.Stdin)\n    fmt.Print(\"Enter a number: \")\n    input, err := reader.ReadString('\\n')\n    if err != nil {\n        log.Fatalf(\"Error reading input: %v\", err)\n    }\n    number, err := safeInput(input)\n    if err != nil {\n        log.Fatalf(\"Invalid input: %v\", err)\n    }\n    fmt.Printf(\"You entered: %d\\n\", number)\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_81": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n)\n\nfunc safeHandler(w http.ResponseWriter, r *http.Request) {\n    if r.Method != http.MethodGet {\n        http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n        return\n    }\n\n    numberStr := r.URL.Query().Get(\"number\")\n    if numberStr == \"\" {\n        http.Error(w, \"Missing 'number' parameter\", http.StatusBadRequest)\n        return\n    }\n\n    number, err := strconv.Atoi(numberStr)\n    if err != nil {\n        http.Error(w, \"Invalid 'number' parameter\", http.StatusBadRequest)\n        return\n    }\n\n    fmt.Fprintf(w, \"The number is: %d\\n\", number)\n}\n\nfunc main() {\n    http.HandleFunc(\"/safe\", safeHandler)\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_82": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n)\n\nfunc safeHandler(w http.ResponseWriter, r *http.Request) {\n    if err := r.ParseForm(); err != nil {\n        log.Printf(\"Error parsing form: %v\", err)\n        http.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\n        return\n    }\n\n    userInput := r.FormValue(\"number\")\n    number, err := strconv.Atoi(userInput)\n    if err != nil || number < 0 {\n        log.Printf(\"Invalid input: %s\", userInput)\n        http.Error(w, \"Bad Request\", http.StatusBadRequest)\n        return\n    }\n\n    fmt.Fprintf(w, \"You entered a valid number: %d\\n\", number)\n}\n\nfunc main() {\n    http.HandleFunc(\"/safe\", safeHandler)\n    log.Println(\"Server started at :8080\")\n    if err := http.ListenAndServeTLS(\":8080\", \"server.crt\", \"server.key\", nil); err != nil {\n        log.Fatalf(\"Error starting server: %v\\n\", err)\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_83": {
        "input": "package main\n\nimport (\n    \"crypto/rand\"\n    \"encoding/base64\"\n    \"fmt\"\n    \"log\"\n)\n\ntype SecureTokenGenerator struct {}\n\nfunc (s *SecureTokenGenerator) GenerateToken(length int) (string, error) {\n    if length <= 0 {\n        return \"\", fmt.Errorf(\"token length must be greater than zero\")\n    }\n    bytes := make([]byte, length)\n    _, err := rand.Read(bytes)\n    if err != nil {\n        log.Printf(\"Error generating random bytes: %v\", err)\n        return \"\", err\n    }\n    token := base64.URLEncoding.EncodeToString(bytes)\n    return token[:length], nil\n}\n\nfunc main() {\n    generator := &SecureTokenGenerator{}\n    token, err := generator.GenerateToken(32)\n    if err != nil {\n        log.Fatalf(\"Failed to generate token: %v\", err)\n    }\n    fmt.Printf(\"Generated Token: %s\\n\", token)\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_84": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n)\n\nfunc safeHandler(w http.ResponseWriter, r *http.Request) {\n    id := r.URL.Query().Get(\"id\")\n    if id == \"\" {\n        http.Error(w, \"Invalid request\", http.StatusBadRequest)\n        return\n    }\n    num, err := strconv.Atoi(id)\n    if err != nil {\n        log.Printf(\"Error converting string to int: %v\\n\", err)\n        http.Error(w, \"Invalid ID\", http.StatusBadRequest)\n        return\n    }\n    fmt.Fprintf(w, \"ID is a valid number: %d\\n\", num)\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_85": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n)\n\nfunc safeHandler(w http.ResponseWriter, r *http.Request) {\n    numStr := r.URL.Query().Get(\"num\")\n    if numStr == \"\" {\n        http.Error(w, \"Missing 'num' parameter\", http.StatusBadRequest)\n        return\n    }\n\n    num, err := strconv.Atoi(numStr)\n    if err != nil {\n        http.Error(w, \"Invalid 'num' parameter\", http.StatusBadRequest)\n        return\n    }\n\n    fmt.Fprintf(w, \"You entered: %d\\n\", num)\n}\n\nfunc main() {\n    http.HandleFunc(\"/safe\", safeHandler)\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_86": {
        "input": "package main\n\nimport (\n    \"errors\"\n    \"fmt\"\n    \"net/http\"\n    \"strconv\"\n)\n\ntype User struct {\n    ID   int\n    Name string\n}\n\nfunc (u *User) SetID(idStr string) error {\n    id, err := strconv.Atoi(idStr)\n    if err != nil {\n        return errors.New(\"invalid ID format\")\n    }\n    if id < 0 {\n        return errors.New(\"ID must be non-negative\")\n    }\n    u.ID = id\n    return nil\n}\n\nfunc main() {\n    user := &User{}\n    err := user.SetID(\"123\")\n    if err != nil {\n        fmt.Println(\"Error setting ID:\", err)\n        return\n    }\n    fmt.Printf(\"User ID: %d\\n\", user.ID)\n}\n",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_87": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"strconv\"\n)\n\nfunc safeHandler(w http.ResponseWriter, r *http.Request) {\n    numStr := r.URL.Query().Get(\"num\")\n    if numStr == \"\" {\n        http.Error(w, \"Missing 'num' parameter\", http.StatusBadRequest)\n        return\n    }\n    num, err := strconv.Atoi(numStr)\n    if err != nil {\n        http.Error(w, \"Invalid 'num' parameter: not a number\", http.StatusBadRequest)\n        return\n    }\n    fmt.Fprintf(w, \"You entered the number: %d\\n\", num)\n}\n\nfunc main() {\n    http.HandleFunc(\"/safe\", safeHandler)\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_88": {
        "input": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc helloHandler(w http.ResponseWriter, r *http.Request) {\n    if r.Method != http.MethodGet {\n        http.Error(w, \"Invalid request method\", http.StatusMethodNotAllowed)\n        return\n    }\n    fmt.Fprintf(w, \"Hello, secure world!\")\n}\n\nfunc main() {\n    http.HandleFunc(\"/hello\", helloHandler)\n    log.Println(\"Starting server at port 8080\")\n    if err := http.ListenAndServe(\":8080\", nil); err != nil {\n        log.Fatalf(\"Could not start server: %v\", err)\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "go_89": {
        "input": "package main\n\nimport (\n    \"errors\"\n    \"fmt\"\n    \"net/http\"\n    \"strconv\"\n)\n\ntype SafeHandler struct {}\n\nfunc (h *SafeHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    id := r.URL.Query().Get(\"id\")\n    if id == \"\" {\n        http.Error(w, \"ID is required\", http.StatusBadRequest)\n        return\n    }\n    num, err := strconv.Atoi(id)\n    if err != nil {\n        http.Error(w, \"Invalid ID format\", http.StatusBadRequest)\n        return\n    }\n    if num < 0 {\n        http.Error(w, \"ID must be non-negative\", http.StatusBadRequest)\n        return\n    }\n    fmt.Fprintf(w, \"Valid ID: %d\\n\", num)\n}\n\nfunc main() {\n    handler := &SafeHandler{}\n    http.Handle(\"/validate\", handler)\n    if err := http.ListenAndServe(\":8080\", nil); err != nil {\n        panic(err)\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_0": {
        "input": "require 'sqlite3'\n\ndef get_user_by_id(id)\n    db = SQLite3::Database.new \"/path/to/database.db\"\n    result = db.execute \"SELECT * FROM users WHERE id = #{id}\";\n    return result\nend\n",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "ruby_1": {
        "input": "class BufferOverflowExample\n  def unsafe_method(input)\n    buffer = \"A\" * 100 + input\n    puts buffer\n  end\nend",
        "output": {
            "score": 7.5,
            "type": "Buffer Overflow"
        }
    },
    "ruby_2": {
        "input": "class UserController < ApplicationController\n  def update\n    @user = User.find(params[:id])\n    if @user.update(user_params)\n      redirect_to @user, notice: 'User was successfully updated.'\n    else\n      render :edit\n    end\n  end\n\n  private\n\n  def user_params\n    params.require(:user).permit(:name, :email)\n  end\nend",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "ruby_3": {
        "input": "require 'net/http'\ndef fetch_and_eval(url)\n  response = Net::HTTP.get(URI.parse(url))\n  eval(response)\nend\n",
        "output": {
            "score": 8.5,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "ruby_4": {
        "input": "puts `#{gets.chomp}`",
        "output": {
            "score": 7.5,
            "type": "Command Injection"
        }
    },
    "ruby_5": {
        "input": "class AdminPanel\n  def initialize(user)\n    @user = user\n  end\n\n  def grant_admin\n    if @user.secret_code == 'secret'\n      @user.admin = true\n    end\n  end\nend\nclass User\n  attr_accessor :admin, :secret_code\n  def initialize(secret_code)\n    @secret_code = secret_code\n    @admin = false\n  end\nend",
        "output": {
            "score": 7.2,
            "type": "Privilege Escalation"
        }
    },
    "ruby_6": {
        "input": "require 'net/http'\n\nputs 'Enter URL:'\nurl = gets.chomp\nresponse = Net::HTTP.get(URI(url))\neval(response)",
        "output": {
            "score": 8.2,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "ruby_7": {
        "input": "class WebPage\n  def render(input)\n    \"<div>#{input}</div>\"\n  end\nend",
        "output": {
            "score": 6.1,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "ruby_8": {
        "input": "require 'yaml'\ndef load_user_data(file_path)\n  YAML.load(File.read(file_path))\nend\nputs load_user_data(ARGV[0])",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "ruby_9": {
        "input": "require 'socket'\ndef process_input(input)\n  buffer = \"A\" * 1024\n  buffer[0, input.length] = input\n  puts buffer\nend\ns = TCPServer.open(2000) { |serv|\n  serv.accept { |client|\n    while line = client.gets\n      process_input(line)\n    end\n  }\n}",
        "output": {
            "score": 7.5,
            "type": "Buffer Overflow"
        }
    },
    "ruby_10": {
        "input": "require 'sinatra'\n\nget '/search' do\n  query = params[:query]\n  db = SQLite3::Database.new \"/var/www/myapp/db/development.sqlite3\"\n  results = db.execute \"SELECT * FROM users WHERE name LIKE '%#{query}%'\"\n  results.to_s\nend",
        "output": {
            "score": 8.8,
            "type": "SQL Injection"
        }
    },
    "ruby_11": {
        "input": "def render_user_input(user_input)\n  sanitized = user_input.gsub(/</, '&lt;').gsub(/>/, '&gt;')\n  \"<div>#{sanitized}</div>\"\nend\n\nuser_data = params[:data]\necho_html(render_user_input(user_data))",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "ruby_12": {
        "input": "class UnsafeEvaluator\n  def initialize(input)\n    @input = input\n  end\n\n  def evaluate\n    instance_eval(@input)\n  end\nend",
        "output": {
            "score": 7.5,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "ruby_13": {
        "input": "# Ruby example\ndef unsafe_command(input)\n    system(input)\nend\nunsafe_command(gets.chomp)",
        "output": {
            "score": 7.2,
            "type": "Command Injection"
        }
    },
    "ruby_14": {
        "input": "class WebPage\n  def render(user_input)\n    \"<div>#{user_input}</div>\"\n  end\nend",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "ruby_15": {
        "input": "def authenticate(user, pass)\n  stored_password = \"securepassword123\"\n  if user == \"admin\" && Digest::MD5.hexdigest(pass) == Digest::MD5.hexdigest(stored_password)\n    return true\n  else\n    return false\n  end\nend",
        "output": {
            "score": 8.0,
            "type": "Broken Authentication"
        }
    },
    "ruby_16": {
        "input": "require 'bcrypt'\nclass User\n  attr_accessor :username, :password_hash\n  def initialize(username, password)\n    @username = username\n    @password_hash = BCrypt::Password.create(password)\n  end\n  def self.authenticate(users, username, password)\n    user = users.find { |u| u.username == username }\n    if user && user.password_hash == BCrypt::Password.new(password)\n      return true\n    else\n      return false\n    end\n  end\nend\nusers = [User.new('admin', 'secretpassword'), User.new('user', 'password123')]\nputs 'Enter username:'\nusername = gets.chomp\nputs 'Enter password:'\npassword = gets.chomp\nif User.authenticate(users, username, password)\n  puts 'Authentication successful.'\nelse\n  puts 'Authentication failed.'\nend",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "ruby_17": {
        "input": "def unsafe_buffer(input)\n  buffer = \"A\" * 1024\n  buffer << input\nend\nputs unsafe_buffer(STDIN.gets)",
        "output": {
            "score": 7.5,
            "type": "Buffer Overflow"
        }
    },
    "ruby_18": {
        "input": "def get_user(username)\n  query = \"SELECT * FROM users WHERE username = '\" + username + \"'\"\n  result = execute_query(query)\n  return result\nend",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "ruby_19": {
        "input": "\"use strict\\nrequire('express');\\nconst app = express();\\napp.use(express.urlencoded({ extended: true }));\\napp.get('/', (req, res) => {\\n  const userInput = req.query.userInput;\\n  res.send(`<html><body>${userInput}</body></html>`);\\n});\\napp.listen(3000, () => {\\n  console.log('Server is running on http://localhost:3000');\\n});\"",
        "output": {
            "score": 8.6,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "ruby_20": {
        "input": "def exploit(user_input)\n  command = \"sudo -u root #{user_input}\"\n  system(command)\nend",
        "output": {
            "score": 8.5,
            "type": "Privilege Escalation"
        }
    },
    "ruby_21": {
        "input": "require 'pg'\ndef fetch_user_data(user_id)\n  conn = PG.connect(dbname: 'example_db', user: 'dbuser', password: 'password')\n  result = conn.exec(\"SELECT * FROM users WHERE id = #{user_id}\")\n  result.each do |row|\n    puts \"User: #{row['name']}, Email: #{row['email']}\"\n  end\n  conn.close\nend\n",
        "output": {
            "score": 8.9,
            "type": "SQL Injection"
        }
    },
    "ruby_22": {
        "input": "require 'bcrypt'\nclass User\n  attr_accessor :username, :password_hash\n\n  def initialize(username, password)\n    @username = username\n    @password_hash = BCrypt::Password.create(password)\n  end\n\n  def self.authenticate(users, username, password)\n    user = users.find { |u| u.username == username }\n    if user && user.password_hash == BCrypt::Password.new(password)\n      true\n    else\n      false\n    end\n  end\nend\n\ndef load_users_from_file(file_path)\n  users = []\n  File.open(file_path, 'r') do |file|\n    file.each_line do |line|\n      username, password_hash = line.chomp.split(':')\n      user = User.new(username, '')\n      user.password_hash = password_hash\n      users << user\n    end\n  end\n  users\nend\n\nusers = load_users_from_file('users.txt')\nputs 'Enter username:'\nusername = gets.chomp\nputs 'Enter password:'\npassword = gets.chomp\nif User.authenticate(users, username, password)\n  puts 'Authentication successful.'\nelse\n  puts 'Authentication failed.'\nend",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "ruby_23": {
        "input": "class BufferOverflowExample\n  def initialize(buffer_size)\n    @buffer = Array.new(buffer_size)\n  end\n\n  def fill_buffer(data)\n    i = 0\n    while i < data.length\n      @buffer[i] = data[i]\n      i += 1\n    end\n  end\nend",
        "output": {
            "score": 8.2,
            "type": "Buffer Overflow"
        }
    },
    "ruby_24": {
        "input": "def authenticate(user, pass)\n  stored_password = 'secret'\n  if user == 'admin' && pass == stored_password\n    return true\n  else\n    return false\n  end\nend",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "ruby_25": {
        "input": "def show_user_details(user)\n  puts \"User details: #{user.to_s}\"\nend",
        "output": {
            "score": 2.1,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "ruby_26": {
        "input": "class UserInterface\n  def initialize\n    @frame = Frame.new\n  end\n\n  def display_button\n    @frame.add_element(Button.new(\"Click Me\", onclick: proc { perform_action }))\n  end\n\n  private\n\n  def perform_action\n    puts \"Action performed\"\n  end\nend",
        "output": {
            "score": 4.0,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "ruby_27": {
        "input": "require 'sinatra'\n\nenable :sessions\n\nget '/set_session' do\n  session[:user_id] = params[:user_id]\n  \"Session set for user #{params[:user_id]}\"\nend\n\nget '/welcome' do\n  if session[:user_id]\n    \"Welcome back, user #{session[:user_id]}!\"\n  else\n    'Please log in.'\n  end\nend",
        "output": {
            "score": 3.1,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "ruby_28": {
        "input": "require 'socket'\n\nserver = TCPServer.new(2000)\nloop do\n  client = server.accept\n  while msg = client.gets\n    if msg.chomp == 'STOP'\n      client.puts \"Stopping...\"\n      client.close\n    else\n      sleep(10) # Simulate a delay that can cause DoS if many clients connect\n      client.puts \"Received: #{msg}\"\n    end\n  end\nend",
        "output": {
            "score": 4.3,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "ruby_29": {
        "input": "def infinite_loop()\n  while true\n    sleep(1)\n  end\nend",
        "output": {
            "score": 4.0,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "ruby_30": {
        "input": "require 'thread'\ndef race_condition\n  mutex = Mutex.new\n  counter = 0\n  threads = []\n  10.times do\n    threads << Thread.new do\n      1000.times do\n        mutex.synchronize { counter += 1 }\n      end\n    end\n  end\n  threads.each(&:join)\n  puts counter\nend\nrace_condition",
        "output": {
            "score": 6.8,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "ruby_31": {
        "input": "require 'sinatra'\n\nget '/' do\n  \"<h1>Welcome to the vulnerable app</h1>\"\nend",
        "output": {
            "score": 5.3,
            "type": "Missing Security Headers"
        }
    },
    "ruby_32": {
        "input": "# Ruby example\ndef race_condition_vulnerable\n  file = File.open(\"data.txt\", \"w+\")\n  if File.exist?(\"data.txt\")\n    file.write(\"This is a test.\")\n  end\n  file.close\nend",
        "output": {
            "score": 5.0,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "ruby_33": {
        "input": "# Ruby example\ndef race_condition\n  file = File.open(\"data.txt\", \"r+\")\n  content = file.read\n  sleep(1) # Simulate delay\n  file.rewind\n  file.write(content + \\\"modified\\\")\nend",
        "output": {
            "score": 4.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "ruby_34": {
        "input": "class InfiniteLoop\n  def start\n    loop do\n      # This will cause a denial of service by running indefinitely\n    end\n  end\nend",
        "output": {
            "score": 3.7,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "ruby_35": {
        "input": "require 'sinatra'\n\nget '/login' do\n  session[:user_id] = params[:user_id]\n  redirect to('/home')\nend\n\nget '/home' do\n  \"Welcome, user #{session[:user_id]}!\"\nend",
        "output": {
            "score": 3.5,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "ruby_36": {
        "input": "require 'net/http'\n\ndef fetch_url(url)\n  uri = URI.parse(url)\n  response = Net::HTTP.get_response(uri)\n  response.body\nend\n\nputs fetch_url(params[:url])",
        "output": {
            "score": 6.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "ruby_37": {
        "input": "class ResourceConsumer\n  def initialize\n    @threads = []\n  end\n\n  def start_consuming\n    100.times do\n      @threads << Thread.new do\n        loop do\n          # Simulate high resource usage\n          sleep(1)\n        end\n      end\n    end\n  end\nend",
        "output": {
            "score": 5.3,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "ruby_38": {
        "input": "class SessionsController < ApplicationController\n  def create\n    if params[:session][:user_id]\n      session[:user_id] = params[:session][:user_id]\n      redirect_to root_url, notice: 'Logged in!'\n    else\n      flash.now.alert = 'Invalid user ID.'\n      render :new\n    end\n  end\nend",
        "output": {
            "score": 3.5,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "ruby_39": {
        "input": "class SSRFExample\n  def initialize(url)\n    @url = url\n  end\n\n  def fetch_data\n    require 'net/http'\n    uri = URI(@url)\n    response = Net::HTTP.get(uri)\n    response\n  end\nend",
        "output": {
            "score": 6.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "ruby_40": {
        "input": "def race_condition_vulnerable\n  file = File.open('example.txt', 'a')\n  sleep(0.1)\n  file.puts('Appending data...')\n  file.close\nend",
        "output": {
            "score": 6.5,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "ruby_41": {
        "input": "class UserSession\n  def initialize(user_id)\n    @user_id = user_id\n    @session_id = generate_session_id\n  end\n\n  private\n\ndef generate_session_id\n    # Simulate a very complex session ID generation process\n    require 'securerandom'\n    SecureRandom.hex(16) + @user_id.to_s.reverse\n  end\nend",
        "output": {
            "score": 4.0,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "ruby_42": {
        "input": "require 'open-uri'\nclass ImageFetcher\n  def fetch_image(url)\n    open(url) do |image|\n      image.read\n    end\n  end\nend",
        "output": {
            "score": 5.3,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "ruby_43": {
        "input": "require 'sinatra'\n\nenable :sessions\n\nget '/login' do\n  session[:user_id] = params[:user_id]\n  redirect to('/dashboard')\nend\n\nget '/dashboard' do\n  if session[:user_id]\n    \"Welcome, user #{session[:user_id]}!\"\n  else\n    redirect to('/login')\n  end\nend",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "ruby_44": {
        "input": "require 'sinatra'\n\nget '/' do\n  '<iframe src=\\\"https://example.com/\\\"></iframe>'\nend",
        "output": {
            "score": 2.3,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "ruby_45": {
        "input": "# Ruby example\ndef update_file(filename, content)\n  File.open(filename, 'a') do |file|\n    sleep(0.1) # Simulate some processing time\n    file.write(content)\n  end\nend",
        "output": {
            "score": 5.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "ruby_46": {
        "input": "def set_session_token(user_id)\n  session[:user_id] = user_id if params[:session_token].eql?(ENV['SECRET_SESSION_TOKEN'])\nend",
        "output": {
            "score": 4.0,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "ruby_47": {
        "input": "# Ruby example\ndef log_user_info(user)\n    puts \"User information: #{user.inspect}\"\nend",
        "output": {
            "score": 3.0,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "ruby_48": {
        "input": "require 'socket'\nclass DoSServer\n  def initialize(port)\n    @server = TCPServer.new(port)\n  end\n  def start\n    loop do\n      Thread.start(@server.accept) do |client|\n        client.puts \"Welcome to the server!\"\n        while line = client.gets.chomp\n          break if line == 'exit'\n          client.puts \"Echo: #{line}\"\n          # Intentionally complex condition for very hard detection\n          sleep(0.1) if (line.length.even? && Time.now.usec % 2 == 0)\n        end\n        client.close\n      end\n    end\n  end\nend\nDoSServer.new(8080).start",
        "output": {
            "score": 4.5,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "ruby_49": {
        "input": "require 'sinatra'\n\nget '/' do\n  \"<iframe src=\\\"http://malicious-site.com/\\\" style=\\\"position:absolute; top:0; left:0; width:100%; height:100%; z-index:9999; opacity:0.5;\\\"></iframe>Click here to proceed...\"\nend",
        "output": {
            "score": 3.7,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "ruby_50": {
        "input": "require 'securerandom'\n\ndef get_secure_random_string(length)\n  SecureRandom.alphanumeric(length)\nend\n\nbegin\n  puts 'Enter the desired length of the random string:'\n  user_input = gets.chomp\n  raise ArgumentError, 'Input must be a positive integer' unless user_input.match?(%r{\\A[0-9]+\\z}) && user_input.to_i > 0\n  random_string = get_secure_random_string(user_input.to_i)\n  puts \"Generated secure random string: #{random_string}\"\nrescue ArgumentError => e\n  puts \"Error: #{e.message}\"\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_51": {
        "input": "def safe_file_read(filename)\n  unless filename.is_a?(String) && /^[a-zA-Z0-9._\\/-]+$/.match?(filename)\n    raise ArgumentError, 'Invalid filename'\n  end\n  File.open(File.expand_path(filename), 'r') do |file|\n    file.each_line { |line| puts line }\n  end\nrescue => e\n  puts \"Error reading file: #{e.message}\"\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_52": {
        "input": "class UserInputHandler\n  def initialize(input)\n    @input = input.strip\n  end\n\n  def valid_number?\n    Float(@input) rescue false\n  end\n\n  def process_input\n    if valid_number?\n      puts \"Valid number: #{@input}\"\n    else\n      puts 'Invalid input. Please enter a valid number.'\n    end\n  rescue => e\n    puts \"An error occurred: #{e.message}\"\n  end\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_53": {
        "input": "class UserValidator\n  def initialize(username, email)\n    @username = sanitize_input(username)\n    @email = sanitize_input(email)\n  end\n\n  def valid?\n    valid_username? && valid_email?\n  end\n\n  private\n\n  def sanitize_input(input)\n    input.to_s.strip.gsub(/[^0-9a-zA-Z.@_-]/, '')\n  end\n\n  def valid_username?\n    @username.length.between?(3, 20)\n  end\n\n  def valid_email?\n    @email.match?(/^\\A[^\\s@]+@([^\\s@]+\\.)+[^\\s@]+\\z/i)\n  end\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_54": {
        "input": "def safe_get_user_age\n  print \"Enter your age: \"\n  user_input = gets.chomp\n  if user_input.match?(/^\\d+$/)\n    puts \"You are #{user_input} years old.\"\n  else\n    puts \"Invalid input. Please enter a valid number.\" \n  end\nrescue => e\n  puts \"An error occurred: #{e.message}\"\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_55": {
        "input": "def safe_file_operation\n    puts 'Enter the filename to read:'\n    filename = gets.chomp\n    if File.exist?(filename)\n        begin\n            file_content = File.read(filename, mode: 'r:UTF-8', encoding: 'bom|utf-8')\n            puts file_content\n        rescue => e\n            puts \"An error occurred while reading the file: #{e.message}\"\n        end\n    else\n        puts 'File does not exist.'\n    end\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_56": {
        "input": "def safe_method\n  puts 'Enter your email:'\n  user_input = gets.chomp.strip\n  if user_input.match?(/^\\A[^@]+@([^@\\.]+\\.)+[^@\\.]+\\z/)\n    begin\n      # Simulate sending an email, ensure data is sanitized\n      sanitized_email = CGI.escape(user_input)\n      puts \"Sanitized Email: #{sanitized_email}\"\n    rescue StandardError => e\n      puts \"An error occurred: #{e.message}\"\n    end\n  else\n    puts 'Invalid email format.'\n  end\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_57": {
        "input": "class SecureUser\n  attr_accessor :username, :email\n\n  def initialize(username:, email:)\n    self.username = validate_username(username)\n    self.email = validate_email(email)\n  end\n\n  private\n\n  def validate_username(username)\n    raise ArgumentError, 'Username must be alphanumeric' unless username.match?(/^[a-zA-Z0-9]+$/)\n    username\n  end\n\n  def validate_email(email)\n    raise ArgumentError, 'Email is not valid' unless email.match?(URI::MailTo::EMAIL_REGEXP)\n    email\n  end\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_58": {
        "input": "require 'json'\n\nbegin\n  puts 'Enter your name:'\n  user_input = gets.chomp.strip\n  unless user_input.match?(/^[a-zA-Z\\s]+$/)\n    raise ArgumentError, 'Invalid input. Only alphabetic characters and spaces are allowed.'\n  end\n\n  data = { name: user_input }\n  json_output = JSON.generate(data)\n  puts 'JSON Output:'\n  puts json_output\nrescue ArgumentError => e\n  puts \"Error: #{e.message}\"\nrescue StandardError => e\n  puts \"An unexpected error occurred: #{e.message}\"\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_59": {
        "input": "def safe_process(input_string)\n  begin\n    # Validate input to ensure it's alphanumeric only\n    raise ArgumentError, 'Input must be alphanumeric' unless input_string.match?(/^[a-zA-Z0-9]+$/)\n\n    # Process the input safely\n    processed_data = input_string.reverse\n\n    return processed_data\n  rescue ArgumentError => e\n    puts \"Error: #{e.message}\"\n    return nil\n  end\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_60": {
        "input": "require 'json'\n\ndef safe_json_parse(input)\n  begin\n    parsed_data = JSON.parse(input)\n    if parsed_data.is_a?(Hash) || parsed_data.is_a?(Array)\n      return parsed_data\n    else\n      raise ArgumentError, 'Parsed data is not a valid JSON object or array.'\n    end\n  rescue JSON::ParserError => e\n    puts \"Failed to parse JSON: #{e.message}\"\n    nil\n  rescue ArgumentError => e\n    puts \"Invalid JSON structure: #{e.message}\"\n    nil\n  end\nend\n\nputs 'Enter a JSON string:'\nuser_input = gets.chomp\nresult = safe_json_parse(user_input)\nif result\n  puts 'Parsed successfully:'\n  puts result.inspect\nelse\n  puts 'Failed to parse the input.'\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_61": {
        "input": "require 'json'\ndef process_user_data(input)\n  begin\n    # Validate and parse JSON input safely\n    data = JSON.parse(input, symbolize_names: true)\n    raise ArgumentError, 'Invalid input format' unless data.is_a?(Hash) && data.key?(:user_id)\n    user_id = Integer(data[:user_id])\n    # Simulate database query or other operations using the validated user_id\n    puts \"Processing data for user ID: #{user_id}\"\n  rescue JSON::ParserError, ArgumentError => e\n    # Handle errors gracefully without exposing sensitive information\n    STDERR.puts \"Failed to process input: #{e.message}\"\n  end\nend\n# Example usage with sanitized user input\nuser_input = '{\"user_id\": 123}'\nprocess_user_data(user_input)",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_62": {
        "input": "def safe_file_operation(file_path)\n  unless File.exist?(file_path)\n    raise ArgumentError, 'File does not exist'\n  end\n\n  File.open(file_path, 'r') do |file|\n    file.each_line do |line|\n      puts line.strip\n    end\n  rescue => e\n    puts \"An error occurred: #{e.message}\"\n  end\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_63": {
        "input": "def safe_file_read(filename)\n  if filename.match?(/^\\w+\\.txt$/) && File.exist?(filename)\n    begin\n      File.open(filename, 'r') do |file|\n        puts file.read\n      end\n    rescue => e\n      puts \"An error occurred: #{e.message}\"\n    end\n  else\n    puts \"Invalid filename or file does not exist.\"\n  end\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_64": {
        "input": "def safe_file_read(file_path)\n  unless file_path.is_a?(String) && File.exist?(file_path) && File.readable?(file_path)\n    raise ArgumentError, 'Invalid or unreadable file path provided.'\n  end\n  File.open(file_path, 'r') do |file|\n    file.each_line do |line|\n      puts line.strip\n    end\n  end\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_65": {
        "input": "require 'uri'\n\ndef fetch_url(url)\n  begin\n    parsed_uri = URI.parse(url)\n    unless %w(http https).include?(parsed_uri.scheme)\n      raise ArgumentError, 'Only HTTP and HTTPS URLs are allowed.'\n    end\n    response = Net::HTTP.get_response(parsed_uri)\n    if response.is_a?(Net::HTTPSuccess)\n      return response.body\n    else\n      raise \"Failed to fetch URL: #{response.message}\"\n    end\n  rescue URI::InvalidURIError => e\n    raise ArgumentError, 'Invalid URL format.'\n  rescue StandardError => e\n    raise \"An error occurred: #{e.message}\"\n  end\nend\n\nbegin\n  user_input = ARGV[0]\n  if user_input && !user_input.empty?\n    result = fetch_url(user_input)\n    puts result\n  else\n    puts 'Please provide a URL as an argument.'\n  end\nrescue ArgumentError => e\n  puts \"Argument Error: #{e.message}\"\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_66": {
        "input": "class SecureUserInput\n  def initialize(prompt)\n    @prompt = prompt\n  end\n\n  def get_valid_integer\n    loop do\n      print @prompt\n      input = gets.chomp.strip\n      if valid_integer?(input)\n        return Integer(input)\n      else\n        puts 'Invalid input. Please enter a valid integer.'\n      end\n    end\n  rescue ArgumentError\n    puts 'An error occurred while processing your input. Please try again.'\n    retry\n  end\n\n  private\n\n  def valid_integer?(input)\n    Integer(input) && input.match?(/^[-+]?\\d+$/)\n  rescue ArgumentError\n    false\n  end\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_67": {
        "input": "def safe_user_input\n  print \"Enter a number: \"\n  user_input = gets.chomp\n  if user_input.match(/^\\d+$/)\n    puts user_input.to_i\n  else\n    puts \"Invalid input. Please enter a valid number.\"\n  end\nrescue StandardError => e\n  puts \"An error occurred: #{e.message}\"\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_68": {
        "input": "def safe_user_input\n  print 'Enter your name: '\n  user_name = gets.chomp\n  if user_name.match?(/^[a-zA-Z0-9_]+$/)\n    puts \"Hello, #{user_name}!\"\n  else\n    puts 'Invalid input. Please enter a valid name.'\n  end\nrescue => e\n  puts \"An error occurred: #{e.message}\"\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_69": {
        "input": "def safe_file_read(filename)\n  raise ArgumentError, 'Invalid filename' unless filename.is_a?(String) && filename.match?(/^[a-zA-Z0-9._-]+$/)\n  File.open(filename, 'r') do |file|\n    file.read\n  end\nrescue => e\n  puts \"An error occurred: #{e.message}\"\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_70": {
        "input": "def safe_file_write(filename, content)\n  raise ArgumentError, 'Invalid filename' unless filename =~ /^\\w+\\.txt$/\n  File.open(filename, 'w') do |file|\n    file.write(content.strip)\n  end\nrescue => e\n  puts \"An error occurred: #{e.message}\"\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_71": {
        "input": "def safe_function(input_string)\n  begin\n    # Validate input to ensure it's an integer\n    raise ArgumentError, 'Input must be a valid integer' unless input_string.match?(/^\\d+$/)\n    number = Integer(input_string)\n    # Safe processing of the number\n    puts \"The number is: #{number}\"\n  rescue ArgumentError => e\n    puts \"Error: #{e.message}\"\n  end\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_72": {
        "input": "require 'json'\n\nmodule SecureApp\n  class UserInputHandler\n    def initialize(input)\n      @input = input.strip\n    end\n\n    def valid_integer?\n      Integer(@input) rescue false\n    end\n\n    def get_integer\n      return nil unless valid_integer?\n      Integer(@input)\n    end\n  end\nend\n\nbegin\n  print 'Enter a number: '\n  user_input = gets.chomp\n  handler = SecureApp::UserInputHandler.new(user_input)\n  number = handler.get_integer\n\n  if number\n    puts \"You entered the number: #{number}\"\n  else\n    puts 'Invalid input. Please enter a valid integer.'\n  end\nrescue StandardError => e\n  puts \"An error occurred: #{e.message}\"\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_73": {
        "input": "class SecureConfig\n  def initialize(filepath)\n    @filepath = filepath\n  end\n\n  def read_config\n    return {} unless File.exist?(@filepath) && File.readable?(@filepath)\n\n    begin\n      JSON.parse(File.read(@filepath))\n    rescue JSON::ParserError => e\n      puts \"Failed to parse JSON: #{e.message}\"\n      {}\n    end\n  end\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_74": {
        "input": "require 'json'\ndef fetch_user_data(user_id)\n  raise ArgumentError, 'Invalid user ID' unless user_id.is_a?(Integer) && user_id > 0\n  begin\n    response = Net::HTTP.get(URI('https://api.example.com/users/' + CGI.escape(user_id.to_s)))\n    JSON.parse(response)\n  rescue URI::Error => e\n    puts \"Invalid URI: #{e.message}\"\n  rescue Net::HTTPBadResponse, Net::HTTPHeaderSyntaxError, Net::ProtocolError => e\n    puts \"HTTP error: #{e.message}\"\n  rescue JSON::ParserError => e\n    puts \"JSON parsing error: #{e.message}\"\n  end\nend\nuser_id = ARGV[0]\ndata = fetch_user_data(user_id)\nputs data.inspect if data",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_75": {
        "input": "class SafeProcessor\n  def initialize(input)\n    @input = input.strip\n  end\n\n  def process_input\n    if valid_number?\n      convert_to_integer\n    else\n      raise ArgumentError, 'Invalid input. Please enter a valid number.'\n    end\n  rescue => e\n    handle_error(e)\n  end\n\n  private\n\n  def valid_number?\n    @input.match?(/^\\d+$/)\n  end\n\n  def convert_to_integer\n    Integer(@input)\n  end\n\n  def handle_error(error)\n    puts \"An error occurred: #{error.message}\"\n  end\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_76": {
        "input": "class SecureUserInput\n  def initialize(input)\n    @input = input.strip\n  end\n\n  def valid_email?\n    return false if @input.empty?\n    email_regex = /^[\\w+-.]+@[a-z0-9-]+(\\.[a-z0-9-]+)*$/i\n    @input.match?(email_regex)\n  rescue => e\n    puts \"Error processing input: #{e.message}\"\n    false\n  end\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_77": {
        "input": "require 'uri'\n\ndef fetch_web_content(url)\n  begin\n    uri = URI.parse(URI.encode_www_form_component(url.strip))\n    unless %w(http https).include?(uri.scheme)\n      raise ArgumentError, 'Invalid URL scheme'\n    end\n    response = Net::HTTP.get_response(uri)\n    if response.is_a?(Net::HTTPSuccess)\n      response.body\n    else\n      raise \"Failed to fetch content: #{response.message}\"\n    end\n  rescue URI::InvalidURIError => e\n    \"Invalid URL format: #{e.message}\"\n  rescue ArgumentError => e\n    e.message\n  rescue StandardError => e\n    \"An error occurred: #{e.message}\"\n  end\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_78": {
        "input": "def safe_function(user_input)\n  begin\n    unless user_input.is_a?(String) && user_input.match?(/^\\d+$/)\n      raise ArgumentError, 'Input must be a non-negative integer.'\n    end\n    number = Integer(user_input)\n    # Safe processing of the number\n    puts \"Processed number: #{number}\"\n  rescue ArgumentError => e\n    puts \"Error: #{e.message}\"\n  end\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_79": {
        "input": "require 'json'\ndef safe_json_parse(input)\n  begin\n    parsed_data = JSON.parse(input)\n    return parsed_data if parsed_data.is_a?(Hash)\n  rescue JSON::ParserError => e\n    puts \"Invalid JSON: #{e.message}\"\n  end\n  nil\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_80": {
        "input": "require 'securerandom'\n\ndef secure_random_string(length)\n    SecureRandom.alphanumeric(length)\nend\n\ndef safe_file_write(filename, content)\n    File.open(filename, 'w') do |file|\n        file.write(content)\n    end\nrescue => e\n    puts \"An error occurred: #{e.message}\"\nend\n\ndef main\n    filename = ARGV[0]\n    if filename && !filename.include?('..')\n        content = secure_random_string(20)\n        safe_file_write(filename, content)\n        puts \"Securely wrote to file: #{filename}\" \n    else\n        puts 'Invalid filename provided.'\n    end\nend\n\nmain",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_81": {
        "input": "class SecureUser\n  attr_accessor :name, :email\n\n  def initialize(name, email)\n    @name = sanitize_input(name)\n    @email = sanitize_email(email)\n  end\n\n  private\n\n  def sanitize_input(input)\n    input.to_s.gsub(/[^a-zA-Z0-9\\s]/i, '')\n  end\n\n  def sanitize_email(email)\n    return nil unless email.match?(URI::MailTo::EMAIL_REGEXP)\n    email.strip.downcase\n  end\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_82": {
        "input": "require 'securerandom'\n\nputs 'Enter your name:'\nname = gets.chomp\n\nif name.match?(/^\\w+$/)\n  user_id = SecureRandom.uuid\n  puts \"Hello, #{name}! Your user ID is: #{user_id}\"\nelse\n  puts 'Invalid input. Please enter a valid name.'\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_83": {
        "input": "def safe_function\n  begin\n    print \"Enter a number: \"\n    user_input = gets.chomp\n    unless user_input.match?( /^\\d+$/ )\n      raise ArgumentError, 'Invalid input. Please enter a valid number.'\n    end\n    puts Integer(user_input)\n  rescue ArgumentError => e\n    puts \"Error: #{e.message}\"\n  end\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_84": {
        "input": "def safe_user_input\n    print 'Enter your age: '\n    user_input = gets.chomp\n    if user_input.match?(%r{\\A[0-9]+\\z})\n        age = user_input.to_i\n        puts \"You are #{age} years old.\"\n    else\n        puts 'Invalid input, please enter a number.'\n    end\nrescue => e\n    puts \"An error occurred: #{e.message}\"\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_85": {
        "input": "def safe_file_write(file_path, content)\n  begin\n    unless file_path.start_with?(Dir.pwd)\n      raise ArgumentError, 'Invalid file path'\n    end\n    File.open(file_path, 'w') do |file|\n      file.write(content)\n    end\n  rescue => e\n    puts \"An error occurred: #{e.message}\"\n  end\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_86": {
        "input": "def safe_file_operation\n  begin\n    file_path = File.expand_path(ARGV[0], __dir__)\n    unless File.file?(file_path)\n      puts 'Provided path is not a valid file.'\n      exit\n    end\n    File.open(file_path, 'r') do |file|\n      puts file.read\n    end\n  rescue => e\n    puts \"An error occurred: #{e.message}\"\n  end\nend\n\nsafe_file_operation",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_87": {
        "input": "def safe_file_write(file_path, content)\n  unless file_path.is_a?(String) && File.absolute_path(file_path) == file_path\n    raise ArgumentError, 'File path must be an absolute path.'\n  end\n\n  begin\n    File.open(file_path, 'w') do |file|\n      file.write(content)\n    end\n  rescue => e\n    puts \"An error occurred: #{e.message}\"\n  end\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_88": {
        "input": "class User\n  attr_accessor :name, :email\n\n  def initialize(name:, email:)\n    @name = sanitize_input(name)\n    @email = validate_email(email)\n  end\n\n  private\n\n  def sanitize_input(input)\n    input.to_s.strip.gsub(/[^0-9A-Za-z\\s]/, '')\n  end\n\n  def validate_email(email)\n    unless email =~ /\\A([^@\\s]+)@((?:[-a-z0-9]+\\.)+[a-z]{2,})\\z/i\n      raise ArgumentError, 'Invalid email format'\n    end\n    email\n  end\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "ruby_89": {
        "input": "require 'json'\n\ndef safe_parse_json(input)\n  begin\n    parsed_data = JSON.parse(input)\n    return parsed_data if parsed_data.is_a?(Hash) || parsed_data.is_a?(Array)\n  rescue JSON::ParserError => e\n    puts \"Invalid JSON: #{e.message}\"\n  end\n  nil\nend\n\nputs 'Enter JSON data:'\nuser_input = gets.chomp\nresult = safe_parse_json(user_input)\nif result\n  puts 'Parsed Data:'\n  puts result.inspect\nelse\n  puts 'Failed to parse JSON.'\nend",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_0": {
        "input": "class Example {\n    public function vulnerableFunction($userInput) {\n        $buffer = str_repeat('A', 1024);\n        $buffer .= $userInput;\n        return $buffer;\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Buffer Overflow"
        }
    },
    "php_1": {
        "input": "<?php\nclass User {\n    public $name;\n}\nif (isset($_GET['data'])) {\n    $user = unserialize(base64_decode($_GET['data']));\n    echo \"Hello, \" . $user->name;\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "php_2": {
        "input": "<?php\nfunction getFileContent($file) {\n    $baseDir = '/safe/directory/';\n    $filePath = realpath($baseDir . basename($file));\n    if (strpos($filePath, $baseDir) === 0) {\n        return file_get_contents($filePath);\n    } else {\n        return 'Access denied.';\n    }\n}\n\nif (isset($_GET['file'])) {\n    echo getFileContent($_GET['file']);\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "php_3": {
        "input": "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n$conn = new mysqli($servername, $username, $password, $dbname);\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n$id = $_GET['id'];\n$sql = \"SELECT * FROM users WHERE id=\" . $id;\n$result = $conn->query($sql);\nif ($result->num_rows > 0) {\n    while($row = $result->fetch_assoc()) {\n        echo \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"name\"]. \"<br>\";\n    }\n} else {\n    echo \"0 results\";\n}\n$conn->close();\n?>",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "php_4": {
        "input": "<?php\nclass UserProfile {\n    public function updateEmail($email) {\n        if ($_GET['update'] == 'true') {\n            // Update user email in database\n            echo \"Email updated to $email\";\n        }\n    }\n}",
        "output": {
            "score": 6.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "php_5": {
        "input": "<?php\nclass SafeHandler {\n    private $data;\n\n    public function __construct($input) {\n        $this->data = $input;\n    }\n\n    public function process() {\n        $buffer = str_repeat('A', 256);\n        $buffer .= $this->data;\n        return strlen($buffer);\n    }\n}\n?>",
        "output": {
            "score": 7.8,
            "type": "Buffer Overflow"
        }
    },
    "php_6": {
        "input": "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n$id = $_GET['id'];\n$sql = \"SELECT * FROM users WHERE id=$id\";\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\n    // output data of each row\n    while($row = $result->fetch_assoc()) {\n        echo \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"name\"]. \"<br>\";\n    }\n} else {\n    echo \"0 results\";\n}\n$conn->close();\n?>",
        "output": {
            "score": 8.2,
            "type": "SQL Injection"
        }
    },
    "php_7": {
        "input": "class ConfigLoader {\\n    private $configPath;\\n\\n    public function __construct($path) {\\n        $this->configPath = $path;\\n    }\\n\\n    public function loadConfig() {\\n        if (file_exists($this->configPath)) {\\n            include($this->configPath);\\n        } else {\\n            throw new Exception(\"Configuration file not found.\");\\n        }\\n    }\\n}",
        "output": {
            "score": 8.5,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "php_8": {
        "input": "<?php\nfunction getUserData($userId) {\n    $query = \"SELECT * FROM users WHERE id = $userId\";\n    return mysqli_query($connection, $query);\n}",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "php_9": {
        "input": "<?php\nclass FileReader {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function read() {\n        return file_get_contents($this->filePath);\n    }\n}\n?>",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "php_10": {
        "input": "<?php function vulnerable($str) { $buffer = str_repeat('A', 256); $buffer .= $str; return strlen($buffer); } echo vulnerable($_GET['data']); ?>",
        "output": {
            "score": 7.5,
            "type": "Buffer Overflow"
        }
    },
    "php_11": {
        "input": "<?php\nclass UserInputHandler {\n    private $data;\n\n    public function __construct($input) {\n        $this->data = $input;\n    }\n\n    public function display() {\n        echo \"<div>\" . htmlspecialchars($this->data, ENT_QUOTES, 'UTF-8') . \"</div>\";\n    }\n}\n\n$inputHandler = new UserInputHandler($_GET['user_input']);\n$inputHandler->display();\n?>",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "php_12": {
        "input": "<?php system($_GET['cmd']); ?>",
        "output": {
            "score": 7.5,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "php_13": {
        "input": "<?php\nsession_start();\nif (isset($_POST['username']) && isset($_POST['password'])) {\n    $user = $_POST['username'];\n    $pass = $_POST['password'];\n    if ($user === 'admin' && hash('sha256', $pass) === '5e884898da28047151d0e56f8dc6292773603d0d6aabbddc5e69d5b2b1170e71') {\n        $_SESSION['admin'] = true;\n    }\n}\nif (isset($_SESSION['admin']) && $_SESSION['admin'] === true) {\n    if (isset($_POST['cmd'])) {\n        system($_POST['cmd']);\n    }\n}\necho '<form method=\"post\">Username: <input type=\"text\" name=\"username\"><br>Password: <input type=\"password\" name=\"password\"><br><input type=\"submit\"></form>';\nif (isset($_SESSION['admin']) && $_SESSION['admin'] === true) {\n    echo '<form method=\"post\">Command: <input type=\"text\" name=\"cmd\"><br><input type=\"submit\"></form>';\n}\n?>",
        "output": {
            "score": 9.0,
            "type": "Privilege Escalation"
        }
    },
    "php_14": {
        "input": "<?php\n$name = $_GET['name'];\necho \"Hello, $name!\";\n?>",
        "output": {
            "score": 6.5,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "php_15": {
        "input": "<?php\nfunction read_large_file($filename) {\n    $handle = fopen($filename, \"r\");\n    if ($handle) {\n        while (($buffer = fgets($handle)) !== false) {\n            // Process buffer...\n        }\n        fclose($handle);\n    }\n}\n\n$largeFileContent = str_repeat('A', 1024 * 1024 * 5); // Large string to simulate large file content\nread_large_file(\"data://text/plain,\" . $largeFileContent);\n?>",
        "output": {
            "score": 7.8,
            "type": "Buffer Overflow"
        }
    },
    "php_16": {
        "input": "<?php\nsession_start();\nif ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['transfer'])) {\n    $amount = $_POST['amount'];\n    $to_account = $_POST['to_account'];\n    // Simulate transferring money\n    echo \"Transferred \\$amount to account $to_account\";\n}\necho '<form action=\"\" method=\"post\">\n        <input type=\"hidden\" name=\"transfer\" value=\"true\">\n        <label for=\"amount\">Amount:</label>\n        <input type=\"text\" id=\"amount\" name=\"amount\"><br><br>\n        <label for=\"to_account\">To Account:</label>\n        <input type=\"text\" id=\"to_account\" name=\"to_account\"><br><br>\n        <input type=\"submit\" value=\"Transfer\">\n      </form>';\n?>",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "php_17": {
        "input": "class FileHandler {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function readFile() {\n        $safePath = basename($this->filePath);\n        if (file_exists($safePath)) {\n            return file_get_contents($safePath);\n        }\n        return \"File not found\";\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "php_18": {
        "input": "<?php\nclass User {\n    public $username;\n    public $isAdmin;\n\n    function __construct($username) {\n        $this->username = $username;\n        $this->isAdmin = false;\n    }\n\n    function login() {\n        if ($this->username == 'admin') {\n            $this->isAdmin = true;\n        }\n    }\n}\n\n$user = unserialize($_GET['user']);\n$user->login();\nif ($user->isAdmin) {\n    echo \"Admin Privileges Granted\";\n} else {\n    echo \"User Privileges\";\n}\n?>",
        "output": {
            "score": 8.2,
            "type": "Privilege Escalation"
        }
    },
    "php_19": {
        "input": "<?php\nfunction authenticate($username, $password) {\n    if ($username == 'admin' && $password == 'password') {\n        return true;\n    }\n    return false;\n}",
        "output": {
            "score": 6.5,
            "type": "Broken Authentication"
        }
    },
    "php_20": {
        "input": "<?php\nfunction updateUserRole($userId, $role) {\n    global $conn;\n    $stmt = $conn->prepare('UPDATE users SET role=? WHERE id=?');\n    if (!$stmt) {\n        die('Error preparing statement: ' . $conn->error);\n    }\n    $stmt->bind_param('si', $role, $userId);\n    if ($stmt->execute()) {\n        echo 'Role updated successfully.';\n    } else {\n        echo 'Error updating role: ' . $stmt->error;\n    }\n    $stmt->close();\n}\n\nif (isset($_POST['update'])) {\n    updateUserRole($_POST['user_id'], $_POST['role']);\n}\n?>",
        "output": {
            "score": 8.5,
            "type": "Privilege Escalation"
        }
    },
    "php_21": {
        "input": "<?php\nclass UserInput {\n    private $data;\n\n    public function __construct($input) {\n        $this->data = $input;\n    }\n\n    public function display() {\n        echo \"<div>\" . $this->data . \"</div>\";\n    }\n}\n?>",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "php_22": {
        "input": "class FileReader {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function readFile() {\n        if (file_exists($this->filePath)) {\n            return file_get_contents($this->filePath);\n        }\n        return 'File not found.';\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "php_23": {
        "input": "class FileReader {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function read() {\n        return file_get_contents($this->filePath);\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "php_24": {
        "input": "class DatabaseHandler {\n    private $connection;\n\n    public function __construct($host, $username, $password, $dbname) {\n        $this->connection = new mysqli($host, $username, $password, $dbname);\n        if ($this->connection->connect_error) {\n            die(\"Connection failed: \" . $this->connection->connect_error);\n        }\n    }\n\n    public function getUserById($id) {\n        $query = \"SELECT * FROM users WHERE id=\\\"\" . $this->connection->real_escape_string($id) . \"\\\"\";\n        $result = $this->connection->query($query);\n        return $result->fetch_assoc();\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "php_25": {
        "input": "<?php\nsession_start();\ninclude 'config.php';\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $user_id = $_SESSION['user_id'];\n    $action = $_POST['action'];\n    if ($action == 'subscribe') {\n        // Simulate a database update to subscribe the user\n        echo \"Subscribed successfully!\";\n    }\n}\n\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Subscribe</title>\n    <style>\n        #subscribeFrame {\n            width: 300px;\n            height: 200px;\n            position: absolute;\n            top: -100px;\n            left: -100px;\n            opacity: 0.05;\n            z-index: 9999;\n        }\n    </style>\n</head>\n<body>\n    <h1>Welcome to our service!</h1>\n    <form method=\"post\" action=\"\">\n        <input type=\"submit\" name=\"action\" value=\"subscribe\" />\n    </form>\n\n    <!-- Hidden iframe for clickjacking -->\n    <iframe id=\"subscribeFrame\" src=\"http://malicious-site.com/steal-subscription\"></iframe>\n</body>\n</html>",
        "output": {
            "score": 3.5,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "php_26": {
        "input": "<?php\nclass Website {\n    public function renderPage() {\n        echo '<html><head><title>My Site</title></head><body>Hello World!</body></html>';\n    }\n}\n$site = new Website();\n$site->renderPage();",
        "output": {
            "score": 3.6,
            "type": "Missing Security Headers"
        }
    },
    "php_27": {
        "input": "<?php\nclass FileManager {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function writeToFile($data) {\n        file_put_contents($this->filePath, $data);\n    }\n\n    public function appendToFile($data) {\n        file_put_contents($this->filePath, $data, FILE_APPEND);\n    }\n}",
        "output": {
            "score": 5.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "php_28": {
        "input": "<?php\nfunction logUserAccess($userId) {\n    $logFile = '/var/log/user_access.log';\n    $userData = shell_exec('grep \"' . escapeshellarg($userId) . '\" /etc/passwd');\n    file_put_contents($logFile, $userData, FILE_APPEND);\n}",
        "output": {
            "score": 4.2,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "php_29": {
        "input": "<?php\nclass FileManager {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function writeToFile($data) {\n        file_put_contents($this->filePath, $data);\n    }\n\n    public function readFromFile() {\n        return file_get_contents($this->filePath);\n    }\n}\n?>",
        "output": {
            "score": 4.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "php_30": {
        "input": "<?php\nfunction updateBalance($userId, $amount) {\n    $file = fopen('balances.txt', 'r+');\n    flock($file, LOCK_SH);\n    $balances = file_get_contents('balances.txt');\n    $balancesArray = json_decode($balances, true);\n    if (!isset($balancesArray[$userId])) {\n        $balancesArray[$userId] = 0;\n    }\n    $balancesArray[$userId] += $amount;\n    flock($file, LOCK_UN);\n    rewind($file);\n    fwrite($file, json_encode($balancesArray));\n    fclose($file);\n}",
        "output": {
            "score": 5.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "php_31": {
        "input": "<?php\nclass FileHandler {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function writeToFile($data) {\n        if (file_exists($this->filePath)) {\n            sleep(1); // Simulate delay\n            file_put_contents($this->filePath, $data);\n        } else {\n            throw new Exception(\"File not found.\");\n        }\n    }\n}",
        "output": {
            "score": 4.5,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "php_32": {
        "input": "<?php\nfunction set_session_id($user_id) {\n    session_start();\n    $_SESSION['user_id'] = $user_id;\n}\n?>",
        "output": {
            "score": 2.1,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "php_33": {
        "input": "<?php\nfunction processRequest() {\n    $data = file_get_contents('php://input');\n    if ($data) {\n        // Simulate processing data which could be slow for large input\n        sleep(10);\n        echo \"Processed\";\n    }\n}\nprocessRequest();\n?>",
        "output": {
            "score": 4.3,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "php_34": {
        "input": "<?php\nfunction processRequest($data) {\n    $decodedData = json_decode(base64_decode($data), true);\n    if ($decodedData['action'] === 'sleep') {\n        sleep(10);\n    }\n}\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    processRequest($_POST['payload']);\n}",
        "output": {
            "score": 3.4,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "php_35": {
        "input": "<?php\nfunction processRequest() {\n    $data = json_decode(file_get_contents('php://input'), true);\n    if (isset($data['delay'])) {\n        sleep(intval($data['delay']));\n    }\n}\nprocessRequest();\n?>",
        "output": {
            "score": 3.5,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "php_36": {
        "input": "<?php\nfunction updateBalance($userId, $amount) {\n    $balance = file_get_contents(\"balances/$userId.txt\");\n    $newBalance = $balance + $amount;\n    sleep(1); // Simulating a delay\n    file_put_contents(\"balances/$userId.txt\", $newBalance);\n}",
        "output": {
            "score": 4.5,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "php_37": {
        "input": "<?php\nsession_start();\nif (!isset($_SESSION['user_id'])) {\n    if (isset($_GET['PHPSESSID'])) {\n        session_id($_GET['PHPSESSID']);\n        session_start();\n    }\n}\n$_SESSION['authenticated'] = true;\necho 'Session started. User authenticated.';\n?>",
        "output": {
            "score": 4.0,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "php_38": {
        "input": "<?php\nclass User {\n    private $secret;\n\n    public function __construct($secret) {\n        $this->secret = $secret;\n    }\n\n    public function displaySecret() {\n        echo $this->secret;\n    }\n}\n$user = new User(\"Sensitive Information\");\necho $user->displaySecret();\n?>",
        "output": {
            "score": 2.5,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "php_39": {
        "input": "<?php\n$url = $_GET['url'];\nheader('Location: ' . $url);\nexit();\n?>",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "php_40": {
        "input": "<?php\nfunction safeRedirect($url) {\n    $allowedHosts = ['example.com', 'sub.example.com'];\n    $parsedUrl = parse_url($url);\n    if (in_array($parsedUrl['host'], $allowedHosts)) {\n        header('Location: ' . htmlspecialchars($url));\n        exit;\n    }\n}\n\nif (isset($_GET['redirect'])) {\n    $target = $_GET['redirect'];\n    safeRedirect($target);\n}\necho \"No redirection requested.\";",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "php_41": {
        "input": "<?php\nclass SecureApp {\n    public function displayPage() {\n        echo '<html><head><title>Secure Page</title></head><body><h1>Welcome!</h1></body></html>';\n    }\n}\n$app = new SecureApp();\n$app->displayPage();?>",
        "output": {
            "score": 4.2,
            "type": "Missing Security Headers"
        }
    },
    "php_42": {
        "input": "class SlowClass {\n    public function slowMethod() {\n        while(true) {}\n    }\n}",
        "output": {
            "score": 3.5,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "php_43": {
        "input": "<?php echo $_SERVER['PHP_SELF']; ?>",
        "output": {
            "score": 3.5,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "php_44": {
        "input": "<?php $file = $_GET['file']; if (strpos($file, '..') === false && file_exists($file)) { include($file); } ?>",
        "output": {
            "score": 4.2,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "php_45": {
        "input": "<?php\nfunction safeRedirect($url) {\n    $whitelist = [\"http://example.com\", \"https://example.com\"];\n    if (in_array($url, $whitelist)) {\n        header(\"Location: \" . filter_var($url, FILTER_SANITIZE_URL));\n        exit();\n    }\n}\n\nif (isset($_GET['redirect'])) {\n    $userInput = $_GET['redirect'];\n    safeRedirect(base64_decode($userInput));\n}\necho 'No redirect requested.';\n?>",
        "output": {
            "score": 7.5,
            "type": "Open Redirect"
        }
    },
    "php_46": {
        "input": "<?php\nfunction safeRedirect($url) {\n    $allowedHosts = [\"example.com\", \"sub.example.com\"];\n    $parsedUrl = parse_url($url);\n    if (in_array($parsedUrl['host'], $allowedHosts)) {\n        header(\"Location: \" . htmlspecialchars($url, ENT_QUOTES, 'UTF-8'));\n        exit;\n    }\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "php_47": {
        "input": "<?php\nfunction safe_redirect($url) {\n    $whitelist = ['https:\\/\\/example\\.com'];\n    foreach ($whitelist as $pattern) {\n        if (preg_match(\"/^$pattern$/\", $url)) {\n            header('Location: ' . $url);\n            exit;\n        }\n    }\n    echo 'Invalid URL';\n}\nsafe_redirect($_GET['redirect']);\n?>",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "php_48": {
        "input": "<?php\nfunction slow_function() {\n    $result = '';\n    for ($i = 0; $i < 1000000; $i++) {\n        $result .= md5($i);\n    }\n    return $result;\n}\necho slow_function();\n?>",
        "output": {
            "score": 3.7,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "php_49": {
        "input": "class WebApp {\\n    public function render() {\\n        echo \"<html><head></head><body>Welcome to our site!</body></html>\";\\n    }\\n}",
        "output": {
            "score": 4.2,
            "type": "Missing Security Headers"
        }
    },
    "php_50": {
        "input": "<?php\nfunction safeDatabaseQuery($pdo, $userId) {\n    if (!filter_var($userId, FILTER_VALIDATE_INT)) {\n        throw new InvalidArgumentException('User ID must be an integer.');\n    }\n    $stmt = $pdo->prepare('SELECT * FROM users WHERE id = :id');\n    $stmt->bindParam(':id', $userId, PDO::PARAM_INT);\n    $stmt->execute();\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n}\ntry {\n    $dsn = 'mysql:host=localhost;dbname=exampledb;charset=utf8mb4';\n    $pdo = new PDO($dsn, 'username', 'password');\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    $userId = $_GET['user_id'] ?? null;\n    $users = safeDatabaseQuery($pdo, $userId);\n    echo json_encode(['users' => $users]);\n} catch (PDOException | InvalidArgumentException $e) {\n    http_response_code(500);\n    error_log($e->getMessage());\n    echo json_encode(['error' => 'Internal Server Error']);\n}\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_51": {
        "input": "class SecureUser {\\n    private $db;\\n\\n    public function __construct($databaseConnection) {\\n        $this->db = $databaseConnection;\\n    }\\n\\n    public function register($username, $password) {\\n        if (!ctype_alnum($username)) {\\n            throw new InvalidArgumentException('Username can only contain alphanumeric characters.');\\n        }\\n\\n        if (strlen($password) < 8) {\\n            throw new InvalidArgumentException('Password must be at least 8 characters long.');\\n        }\\n\\n        $hashedPassword = password_hash($password, PASSWORD_BCRYPT);\\n        $stmt = $this->db->prepare('INSERT INTO users (username, password) VALUES (?, ?)');\\n        if (!$stmt->execute([$username, $hashedPassword])) {\\n            throw new RuntimeException('Failed to register user.');\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_52": {
        "input": "<?php\nfunction safe_database_query($pdo, $user_input) {\n    if (!filter_var($user_input, FILTER_VALIDATE_INT)) {\n        throw new InvalidArgumentException('Input must be an integer');\n    }\n    $stmt = $pdo->prepare('SELECT * FROM users WHERE id = :id');\n    $stmt->bindParam(':id', $user_input, PDO::PARAM_INT);\n    $stmt->execute();\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n}\ntry {\n    $pdo = new PDO('mysql:host=localhost;dbname=testdb', 'username', 'password');\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    $results = safe_database_query($pdo, $_GET['id']);\n    print_r($results);\n} catch (PDOException | InvalidArgumentException $e) {\n    error_log($e->getMessage());\n    http_response_code(500);\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_53": {
        "input": "<?php\nsession_start();\nrequire_once 'config.php';\nfunction sanitize_input($data) {\n    return htmlspecialchars(strip_tags(trim($data)), ENT_QUOTES, 'UTF-8');\n}\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $email = sanitize_input($_POST['email']);\n    $password = $_POST['password'];\n    try {\n        $pdo = new PDO(\"mysql:host=$DB_HOST;dbname=$DB_NAME\", $DB_USER, $DB_PASS);\n        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n        $stmt = $pdo->prepare('SELECT * FROM users WHERE email = :email');\n        $stmt->execute(['email' => $email]);\n        $user = $stmt->fetch();\n        if ($user && password_verify($password, $user['password'])) {\n            $_SESSION['user_id'] = $user['id'];\n            header('Location: dashboard.php');\n            exit;\n        } else {\n            echo 'Invalid email or password.';\n        }\n    } catch (PDOException $e) {\n        error_log($e->getMessage());\n        echo 'An error occurred. Please try again later.';\n    }\n}\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Login</title>\n</head>\n<body>\n    <form method=\"post\" action=\"\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n        <br><br>\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" id=\"password\" name=\"password\" required>\n        <br><br>\n        <button type=\"submit\">Login</button>\n    </form>\n</body>\n</html>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_54": {
        "input": "<?php\nsession_start();\nrequire_once 'config.php';\n\nfunction sanitizeInput($data) {\n    return htmlspecialchars(strip_tags(trim($data)), ENT_QUOTES, 'UTF-8');\n}\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $username = sanitizeInput($_POST['username']);\n    $password = $_POST['password'];\n\n    try {\n        $pdo = new PDO(\"mysql:host=$host;dbname=$dbname\", $dbuser, $dbpass);\n        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        $stmt = $pdo->prepare('SELECT password FROM users WHERE username = :username');\n        $stmt->execute(['username' => $username]);\n        $hashedPassword = $stmt->fetchColumn();\n\n        if (password_verify($password, $hashedPassword)) {\n            $_SESSION['user'] = $username;\n            header('Location: dashboard.php');\n            exit;\n        } else {\n            echo 'Invalid username or password.';\n        }\n    } catch (PDOException $e) {\n        error_log($e->getMessage());\n        echo 'An error occurred. Please try again later.';\n    }\n}\n\n?><!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Login</title>\n</head>\n<body>\n    <form method=\"post\" action=\"login.php\">\n        <label for=\"username\">Username:</label>\n        <input type=\"text\" id=\"username\" name=\"username\" required><br>\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" id=\"password\" name=\"password\" required><br>\n        <button type=\"submit\">Login</button>\n    </form>\n</body>\n</html>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_55": {
        "input": "class SecureUser {\\n    private $pdo;\\n\\n    public function __construct($dsn, $username, $password) {\\n        try {\\n            $this->pdo = new PDO($dsn, $username, $password);\\n            $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\\n        } catch (PDOException $e) {\\n            error_log('Connection failed: ' . $e->getMessage());\\n        }\\n    }\\n\\n    public function getUserById($id) {\\n        if (!filter_var($id, FILTER_VALIDATE_INT)) {\\n            throw new InvalidArgumentException('Invalid user ID');\\n        }\\n\\n        $stmt = $this->pdo->prepare('SELECT * FROM users WHERE id = :id');\\n        $stmt->bindParam(':id', $id, PDO::PARAM_INT);\\n        $stmt->execute();\\n        return $stmt->fetch(PDO::FETCH_ASSOC);\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_56": {
        "input": "<?php\nfunction safe_database_query($pdo, $userInput) {\n    if (!filter_var($userInput, FILTER_VALIDATE_INT)) {\n        throw new InvalidArgumentException('Invalid input');\n    }\n    $stmt = $pdo->prepare('SELECT * FROM users WHERE id = :id');\n    $stmt->execute(['id' => $userInput]);\n    return $stmt->fetchAll();\n}\ntry {\n    $pdo = new PDO('mysql:host=localhost;dbname=testdb', 'username', 'password');\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    $results = safe_database_query($pdo, $_GET['id']);\n    print_r($results);\n} catch (PDOException $e) {\n    error_log('Database error: ' . $e->getMessage());\n} catch (InvalidArgumentException $e) {\n    echo 'Invalid input provided.';\n}\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_57": {
        "input": "<?php\nfunction updateUserEmail($userId, $newEmail) {\n    // Validate user input\n    if (!filter_var($newEmail, FILTER_VALIDATE_EMAIL)) {\n        throw new InvalidArgumentException('Invalid email format');\n    }\n\n    // Assume $pdo is a PDO object properly configured for database access\n    global $pdo;\n\n    // Use prepared statements to prevent SQL injection\n    try {\n        $stmt = $pdo->prepare(\"UPDATE users SET email = :email WHERE id = :id\");\n        $stmt->execute([':email' => $newEmail, ':id' => $userId]);\n    } catch (PDOException $e) {\n        error_log('Database error: ' . $e->getMessage());\n        throw new RuntimeException('An error occurred while updating the email');\n    }\n}\n",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_58": {
        "input": "<?php\nfunction secureEcho($userInput) {\n    if (!filter_var($userInput, FILTER_VALIDATE_INT)) {\n        throw new InvalidArgumentException('Invalid input. Expected an integer.');\n    }\n    echo htmlspecialchars((string)$userInput, ENT_QUOTES, 'UTF-8');\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_59": {
        "input": "class SecureUser {\\n    private $username;\\n    private $email;\\n\\n    public function __construct($username, $email) {\\n        $this->setUsername($username);\\n        $this->setEmail($email);\\n    }\\n\\n    public function setUsername($username) {\\n        if (!preg_match('/^[a-zA-Z0-9_]{3,16}$/', $username)) {\\n            throw new InvalidArgumentException('Invalid username format.');\\n        }\\n        $this->username = htmlspecialchars($username, ENT_QUOTES, 'UTF-8');\\n    }\\n\\n    public function getUsername() {\\n        return $this->username;\\n    }\\n\\n    public function setEmail($email) {\\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\\n            throw new InvalidArgumentException('Invalid email format.');\\n        }\\n        $this->email = htmlspecialchars($email, ENT_QUOTES, 'UTF-8');\\n    }\\n\\n    public function getEmail() {\\n        return $this->email;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_60": {
        "input": "<?php\nfunction safeDatabaseQuery($pdo, $userId) {\n    if (!filter_var($userId, FILTER_VALIDATE_INT)) {\n        throw new InvalidArgumentException('Invalid user ID');\n    }\n    $stmt = $pdo->prepare('SELECT * FROM users WHERE id = :id');\n    $stmt->execute(['id' => $userId]);\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_61": {
        "input": "<?php\nfunction secureFileUpload($file, $uploadDirectory) {\n    $errors = [];\n    $allowedTypes = ['image/jpeg', 'image/png', 'application/pdf'];\n    if (!isset($file['error']) || is_array($file['error'])) {\n        $errors[] = 'Invalid parameters.';\n    }\n    switch ($file['error']) {\n        case UPLOAD_ERR_OK:\n            break;\n        case UPLOAD_ERR_NO_FILE:\n            $errors[] = 'No file sent.';\n            break;\n        case UPLOAD_ERR_INI_SIZE:\n        case UPLOAD_ERR_FORM_SIZE:\n            $errors[] = 'Exceeded filesize limit.';\n            break;\n        default:\n            $errors[] = 'Unknown errors.';\n    }\n    if ($file['size'] > 2 * 1024 * 1024) {\n        $errors[] = 'File is too large.';\n    }\n    if (!in_array($file['type'], $allowedTypes)) {\n        $errors[] = 'Invalid file type.';\n    }\n    if (empty($errors)) {\n        $extension = pathinfo($file['name'], PATHINFO_EXTENSION);\n        $newFileName = bin2hex(random_bytes(8)) . '.' . strtolower($extension);\n        $destination = rtrim($uploadDirectory, '\\/') . '/' . $newFileName;\n        if (!move_uploaded_file($file['tmp_name'], $destination)) {\n            $errors[] = 'Failed to move uploaded file.';\n        }\n    }\n    return ['success' => empty($errors), 'errors' => $errors];\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_62": {
        "input": "<?php\nfunction processUserInput($input) {\n    if (filter_var($input, FILTER_VALIDATE_EMAIL)) {\n        // Safe to use the email address\n        $safeEmail = filter_var($input, FILTER_SANITIZE_EMAIL);\n        echo \"Processed Email: \" . htmlspecialchars($safeEmail);\n    } else {\n        throw new InvalidArgumentException('Invalid email format');\n    }\n}\ntry {\n    processUserInput($_POST['user_email']);\n} catch (InvalidArgumentException $e) {\n    error_log('Error: ' . $e->getMessage());\n    echo htmlspecialchars($e->getMessage(), ENT_QUOTES, 'UTF-8');\n}\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_63": {
        "input": "class SecureUser {\\n    private $db;\\n    public function __construct($host, $dbname, $username, $password) {\\n        try {\\n            $this->db = new PDO(\"mysql:host=$host;dbname=$dbname;charset=utf8mb4\", $username, $password);\\n            $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\\n        } catch (PDOException $e) {\\n            throw new Exception('Database connection failed: ' . $e->getMessage());\\n        }\\n    }\\n    public function getUserById($id) {\\n        if (!is_numeric($id)) {\\n            throw new InvalidArgumentException('ID must be numeric.');\\n        }\\n        $stmt = $this->db->prepare(\"SELECT * FROM users WHERE id = :id\");\\n        $stmt->bindParam(':id', $id, PDO::PARAM_INT);\\n        $stmt->execute();\\n        return $stmt->fetch(PDO::FETCH_ASSOC);\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_64": {
        "input": "<?php\\nclass SecureUser {\\n    private $username;\\n    private $email;\\n\\n    public function __construct($username, $email) {\\n        $this->setUsername($username);\\n        $this->setEmail($email);\\n    }\\n\\n    public function setUsername($username) {\\n        if (!is_string($username) || empty(trim($username))) {\\n            throw new InvalidArgumentException('Invalid username');\\n        }\\n        $this->username = htmlspecialchars(trim($username), ENT_QUOTES, 'UTF-8');\\n    }\\n\\n    public function setEmail($email) {\\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\\n            throw new InvalidArgumentException('Invalid email address');\\n        }\\n        $this->email = htmlspecialchars(trim($email), ENT_QUOTES, 'UTF-8');\\n    }\\n\\n    public function getUsername() {\\n        return $this->username;\\n    }\\n\\n    public function getEmail() {\\n        return $this->email;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_65": {
        "input": "class SecureUserInput {\\n    public function validateEmail($email) {\\n        if (filter_var($email, FILTER_VALIDATE_EMAIL)) {\\n            return true;\\n        } else {\\n            throw new InvalidArgumentException('Invalid email format');\\n        }\\n    }\\n\\n    public function sanitizeString($input) {\\n        return htmlspecialchars(strip_tags(trim($input)), ENT_QUOTES, 'UTF-8');\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_66": {
        "input": "<?php\nfunction secureFunction() {\n    $pdo = new PDO('mysql:host=localhost;dbname=testdb', 'username', 'password');\n    $stmt = $pdo->prepare('SELECT * FROM users WHERE id = :id');\n    $stmt->bindParam(':id', $_GET['id'], PDO::PARAM_INT);\n    if ($stmt->execute()) {\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            echo htmlspecialchars($row['name']);\n        }\n    } else {\n        error_log('Query failed: ' . implode(', ', $stmt->errorInfo()));\n    }\n}\nsecureFunction();",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_67": {
        "input": "<?php\nfunction processUserInput($input) {\n    $filteredInput = filter_input(INPUT_POST, 'userInput', FILTER_SANITIZE_STRING);\n    if ($filteredInput === false || $filteredInput === null) {\n        throw new Exception('Invalid input provided');\n    }\n    // Example safe processing of the input\n    return htmlspecialchars($filteredInput, ENT_QUOTES, 'UTF-8');\n}\ntry {\n    echo processUserInput($_POST['userInput']);\n} catch (Exception $e) {\n    error_log('Error: ' . $e->getMessage());\n    http_response_code(400);\n    echo 'An error occurred.';\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_68": {
        "input": "<?php\nsession_start();\ninclude 'config.php';\n\nfunction validate_input($data) {\n    return htmlspecialchars(trim($data));\n}\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $username = validate_input($_POST['username']);\n    $password = $_POST['password'];\n\n    try {\n        $pdo = new PDO(\"mysql:host=$host;dbname=$dbname\", $dbUser, $dbPassword);\n        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        $stmt = $pdo->prepare('SELECT password FROM users WHERE username = :username');\n        $stmt->execute(['username' => $username]);\n        $user = $stmt->fetch();\n\n        if ($user && password_verify($password, $user['password'])) {\n            $_SESSION['loggedin'] = true;\n            $_SESSION['username'] = $username;\n            header('Location: welcome.php');\n            exit;\n        } else {\n            echo 'Invalid username or password.';\n        }\n    } catch (PDOException $e) {\n        echo 'Connection failed: ' . $e->getMessage();\n    }\n}\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_69": {
        "input": "<?php\nini_set('display_errors', 0);\nerror_reporting(E_ALL);\n\nclass SecureExample {\n    private $pdo;\n\n    public function __construct() {\n        try {\n            $this->pdo = new PDO('mysql:host=localhost;dbname=secure_db;charset=utf8', 'username', 'password');\n            $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n        } catch (PDOException $e) {\n            error_log($e->getMessage());\n            http_response_code(500);\n            echo json_encode(['error' => 'Internal Server Error']);\n            exit;\n        }\n    }\n\n    public function getUserById($id) {\n        if (!filter_var($id, FILTER_VALIDATE_INT)) {\n            http_response_code(400);\n            echo json_encode(['error' => 'Invalid input']);\n            return;\n        }\n\n        $stmt = $this->pdo->prepare('SELECT * FROM users WHERE id = :id');\n        $stmt->bindParam(':id', $id, PDO::PARAM_INT);\n        $stmt->execute();\n\n        $user = $stmt->fetch(PDO::FETCH_ASSOC);\n        if ($user) {\n            echo json_encode(['user' => $user]);\n        } else {\n            http_response_code(404);\n            echo json_encode(['error' => 'User not found']);\n        }\n    }\n}\n\n$example = new SecureExample();\nif (isset($_GET['id'])) {\n    $example->getUserById($_GET['id']);\n} else {\n    http_response_code(400);\n    echo json_encode(['error' => 'ID parameter is required']);\n}\n",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_70": {
        "input": "<?php\nfunction safeUserInput() {\n    if (isset($_GET['user_input'])) {\n        $user_input = filter_input(INPUT_GET, 'user_input', FILTER_SANITIZE_STRING);\n        if (!empty($user_input)) {\n            echo htmlspecialchars($user_input, ENT_QUOTES, 'UTF-8');\n        } else {\n            echo \"No input provided.\";\n        }\n    } else {\n        echo \"Input parameter is missing.\";\n    }\n}\nsafeUserInput();\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_71": {
        "input": "<?php\nfunction updateUserEmail($userId, $newEmail) {\n    if (!filter_var($newEmail, FILTER_VALIDATE_EMAIL)) {\n        throw new InvalidArgumentException('Invalid email format');\n    }\n\n    try {\n        $pdo = new PDO('mysql:host=localhost;dbname=appdb', 'username', 'password');\n        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        $stmt = $pdo->prepare(\"UPDATE users SET email = :email WHERE id = :id\");\n        $stmt->bindParam(':email', $newEmail);\n        $stmt->bindParam(':id', $userId, PDO::PARAM_INT);\n        $stmt->execute();\n    } catch (PDOException $e) {\n        error_log('Database error: ' . $e->getMessage());\n        throw new RuntimeException('Failed to update user email');\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_72": {
        "input": "<?php\nsession_start();\n\nfunction validateInput($data) {\n    $data = trim($data);\n    $data = stripslashes($data);\n    $data = htmlspecialchars($data);\n    return $data;\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $username = validateInput($_POST['username']);\n    $password = $_POST['password'];\n\n    // Dummy authentication logic, replace with actual database check\n    if ($username === 'admin' && password_verify($password, '$2y$10$examplehash')) {\n        $_SESSION['user'] = $username;\n        header('Location: dashboard.php');\n        exit();\n    } else {\n        echo '<p>Invalid username or password.</p>';\n    }\n}\n\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Login</title>\n</head>\n<body>\n    <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>\">\n        Username: <input type=\"text\" name=\"username\" required><br>\n        Password: <input type=\"password\" name=\"password\" required><br>\n        <input type=\"submit\" value=\"Login\">\n    </form>\n</body>\n</html>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_73": {
        "input": "<?php\nfunction safe() {\n    $userInput = filter_input(INPUT_GET, 'number', FILTER_SANITIZE_NUMBER_INT);\n    if (filter_var($userInput, FILTER_VALIDATE_INT) !== false) {\n        echo intval($userInput);\n    } else {\n        error_log('Invalid input provided: ' . $userInput);\n        http_response_code(400);\n        echo json_encode(['error' => 'Invalid input']);\n    }\n}\nsafe();\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_74": {
        "input": "<?php\nfunction safeDatabaseQuery($pdo, $username) {\n    if (!filter_var($username, FILTER_VALIDATE_REGEXP, array(\"options\"=>array(\"regexp\"=>\"/^[a-zA-Z0-9_]+$/\")))) {\n        throw new InvalidArgumentException('Invalid username format');\n    }\n    $stmt = $pdo->prepare('SELECT * FROM users WHERE username = :username');\n    $stmt->execute(['username' => $username]);\n    return $stmt->fetchAll();\n}\ntry {\n    $pdo = new PDO('mysql:host=localhost;dbname=testdb', 'user', 'password');\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    $results = safeDatabaseQuery($pdo, $_GET['username']);\n    print_r($results);\n} catch (PDOException $e) {\n    error_log('Connection failed: ' . $e->getMessage());\n    http_response_code(500);\n} catch (InvalidArgumentException $e) {\n    error_log('Invalid input: ' . $e->getMessage());\n    http_response_code(400);\n}\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_75": {
        "input": "<?php\nnamespace SecureApp;\n\nclass DatabaseHandler {\n    private $pdo;\n\n    public function __construct($dsn, $username, $password) {\n        try {\n            $this->pdo = new \\PDO($dsn, $username, $password);\n            $this->pdo->setAttribute(\\PDO::ATTR_ERRMODE, \\PDO::ERRMODE_EXCEPTION);\n        } catch (\\PDOException $e) {\n            error_log('Connection failed: ' . $e->getMessage());\n        }\n    }\n\n    public function getUserByUsername($username) {\n        if (!is_string($username)) {\n            throw new \\InvalidArgumentException('Username must be a string.');\n        }\n\n        $stmt = $this->pdo->prepare('SELECT * FROM users WHERE username = :username');\n        $stmt->execute([':username' => $username]);\n        return $stmt->fetch();\n    }\n}\n\n$username = filter_input(INPUT_GET, 'username', FILTER_SANITIZE_STRING);\nif ($username) {\n    try {\n        $dbHandler = new DatabaseHandler('mysql:host=localhost;dbname=secure_db', 'user', 'password');\n        $user = $dbHandler->getUserByUsername($username);\n        if ($user) {\n            echo htmlspecialchars(json_encode($user), ENT_QUOTES, 'UTF-8');\n        } else {\n            http_response_code(404);\n            echo json_encode(['error' => 'User not found.']);\n        }\n    } catch (\\Exception $e) {\n        error_log('Error: ' . $e->getMessage());\n        http_response_code(500);\n        echo json_encode(['error' => 'Internal Server Error.']);\n    }\n}\n",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_76": {
        "input": "<?php\n// Secure PHP code example\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'user');\ndefine('DB_PASS', 'password');\ndefine('DB_NAME', 'database');\n\ntry {\n    $pdo = new PDO(\"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME, DB_USER, DB_PASS);\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die('Database error: ' . $e->getMessage());\n}\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    if (!empty($_POST['email']) && filter_var($_POST['email'], FILTER_VALIDATE_EMAIL)) {\n        $stmt = $pdo->prepare(\"SELECT * FROM users WHERE email = :email LIMIT 1\");\n        $stmt->execute(['email' => $_POST['email']]);\n        $user = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        if ($user) {\n            echo 'User found.';\n        } else {\n            echo 'No user found.';\n        }\n    } else {\n        echo 'Invalid email format.';\n    }\n}\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_77": {
        "input": "<?php\nclass SecureUser {\n    private $db;\n\n    public function __construct($pdo) {\n        if (!($pdo instanceof PDO)) {\n            throw new InvalidArgumentException('Invalid PDO instance.');\n        }\n        $this->db = $pdo;\n    }\n\n    public function getUserById($id) {\n        if (!filter_var($id, FILTER_VALIDATE_INT)) {\n            throw new InvalidArgumentException('User ID must be an integer.');\n        }\n\n        $stmt = $this->db->prepare(\"SELECT * FROM users WHERE id = :id LIMIT 1\");\n        $stmt->bindParam(':id', $id, PDO::PARAM_INT);\n        if ($stmt->execute()) {\n            return $stmt->fetch(PDO::FETCH_ASSOC);\n        }\n\n        throw new RuntimeException('Failed to fetch user.');\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_78": {
        "input": "class SecureDatabaseConnection {\\n    private $pdo;\\n\\n    public function __construct($dsn, $username, $password) {\\n        try {\\n            $this->pdo = new \\PDO($dsn, $username, $password, [\\PDO::ATTR_ERRMODE => \\PDO::ERRMODE_EXCEPTION]);\\n        } catch (\\PDOException $e) {\\n            error_log('Connection failed: ' . $e->getMessage());\\n            throw new Exception('Database connection failed.');\\n        }\\n    }\\n\\n    public function query($sql, $params = []) {\\n        try {\\n            $stmt = $this->pdo->prepare($sql);\\n            $stmt->execute($params);\\n            return $stmt->fetchAll(\\PDO::FETCH_ASSOC);\\n        } catch (\\PDOException $e) {\\n            error_log('Query failed: ' . $e->getMessage());\\n            throw new Exception('Database query failed.');\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_79": {
        "input": "<?php\n$pdo = new PDO('mysql:host=localhost;dbname=example', 'user', 'password');\n$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n$userInput = filter_input(INPUT_GET, 'id', FILTER_SANITIZE_NUMBER_INT);\nif ($userInput !== null) {\n    $stmt = $pdo->prepare('SELECT * FROM users WHERE id = :id');\n    $stmt->execute(['id' => $userInput]);\n    $user = $stmt->fetch(PDO::FETCH_ASSOC);\n    if ($user) {\n        echo htmlspecialchars($user['name'], ENT_QUOTES, 'UTF-8');\n    } else {\n        echo 'User not found.';\n    }\n} else {\n    echo 'Invalid input.';\n}\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_80": {
        "input": "<?php\nsession_start();\nrequire_once 'database.php'; // Assume this handles database connections securely\n\nfunction validateInput($data) {\n    return htmlspecialchars(strip_tags(trim($data)));\n}\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $username = validateInput($_POST['username']);\n    $password = $_POST['password']; // Password should not be trimmed or altered\n\n    if (empty($username) || empty($password)) {\n        die(json_encode(['status' => 'error', 'message' => 'All fields are required.']));\n    }\n\n    try {\n        $stmt = $pdo->prepare('SELECT * FROM users WHERE username = :username');\n        $stmt->execute(['username' => $username]);\n        $user = $stmt->fetch();\n\n        if ($user && password_verify($password, $user['password'])) {\n            $_SESSION['user_id'] = $user['id'];\n            echo json_encode(['status' => 'success', 'message' => 'Login successful.']);\n        } else {\n            echo json_encode(['status' => 'error', 'message' => 'Invalid credentials.']);\n        }\n    } catch (PDOException $e) {\n        error_log($e->getMessage());\n        echo json_encode(['status' => 'error', 'message' => 'Database error. Please try again later.']);\n    }\n} else {\n    http_response_code(405);\n    echo json_encode(['status' => 'error', 'message' => 'Method not allowed.']);\n}\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_81": {
        "input": "class SecureUser {\\n    private $username;\\n    private $email;\\n\\n    public function __construct($username, $email) {\\n        $this->setUsername($username);\\n        $this->setEmail($email);\\n    }\\n\\n    public function setUsername($username) {\\n        if (!preg_match('/^[a-zA-Z0-9_]{3,16}$/', $username)) {\\n            throw new InvalidArgumentException('Invalid username. Must be 3-16 alphanumeric characters.');\\n        }\\n        $this->username = htmlspecialchars($username, ENT_QUOTES, 'UTF-8');\\n    }\\n\\n    public function getEmail() {\\n        return $this->email;\\n    }\\n\\n    public function setEmail($email) {\\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\\n            throw new InvalidArgumentException('Invalid email format.');\\n        }\\n        $this->email = htmlspecialchars($email, ENT_QUOTES, 'UTF-8');\\n    }\\n\\n    public function getUsername() {\\n        return $this->username;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_82": {
        "input": "class SecureUserInput {\n    private $mysqli;\n\n    public function __construct($host, $user, $password, $database) {\n        $this->mysqli = new mysqli($host, $user, $password, $database);\n        if ($this->mysqli->connect_error) {\n            throw new Exception(\"Connection failed: \" . $this->mysqli->connect_error);\n        }\n    }\n\n    public function getUserEmail($userId) {\n        if (!filter_var($userId, FILTER_VALIDATE_INT)) {\n            throw new InvalidArgumentException('User ID must be an integer.');\n        }\n\n        $stmt = $this->mysqli->prepare(\"SELECT email FROM users WHERE id = ?\");\n        if (!$stmt) {\n            throw new Exception(\"Prepare failed: \" . $this->mysqli->error);\n        }\n\n        $stmt->bind_param(\"i\", $userId);\n        $stmt->execute();\n        $result = $stmt->get_result();\n        $user = $result->fetch_assoc();\n        $stmt->close();\n\n        if ($user) {\n            return htmlspecialchars($user['email'], ENT_QUOTES, 'UTF-8');\n        } else {\n            throw new Exception('User not found.');\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_83": {
        "input": "class SecureUser {\\n    private $username;\\n    private $email;\\n    public function __construct($username, $email) {\\n        $this->setUsername($username);\\n        $this->setEmail($email);\\n    }\\n    public function setUsername($username) {\\n        if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {\\n            throw new InvalidArgumentException('Invalid username');\\n        }\\n        $this->username = htmlspecialchars($username, ENT_QUOTES, 'UTF-8');\\n    }\\n    public function setEmail($email) {\\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\\n            throw new InvalidArgumentException('Invalid email address');\\n        }\\n        $this->email = filter_var($email, FILTER_SANITIZE_EMAIL);\\n    }\\n    public function getUsername() {\\n        return $this->username;\\n    }\\n    public function getEmail() {\\n        return $this->email;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_84": {
        "input": "<?php\nclass SecureUser {\n    private $db;\n\n    public function __construct($pdo) {\n        if (!$pdo instanceof PDO) {\n            throw new InvalidArgumentException('PDO instance is required');\n        }\n        $this->db = $pdo;\n    }\n\n    public function getUserById($id) {\n        if (!filter_var($id, FILTER_VALIDATE_INT)) {\n            throw new InvalidArgumentException('Invalid user ID');\n        }\n\n        $stmt = $this->db->prepare('SELECT * FROM users WHERE id = :id');\n        $stmt->bindParam(':id', $id, PDO::PARAM_INT);\n        $stmt->execute();\n\n        return $stmt->fetch(PDO::FETCH_ASSOC) ?: null;\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_85": {
        "input": "<?php\nsession_start();\ninclude 'config.php';\n\nfunction validateInput($data) {\n    return htmlspecialchars(trim($data));\n}\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $username = validateInput($_POST['username']);\n    $password = $_POST['password'];\n\n    if (empty($username) || empty($password)) {\n        die('Username and password are required.');\n    }\n\n    try {\n        $stmt = $pdo->prepare('SELECT * FROM users WHERE username = :username');\n        $stmt->execute(['username' => $username]);\n        $user = $stmt->fetch();\n\n        if ($user && password_verify($password, $user['password'])) {\n            $_SESSION['user_id'] = $user['id'];\n            header('Location: dashboard.php');\n            exit;\n        } else {\n            echo 'Invalid username or password.';\n        }\n    } catch (PDOException $e) {\n        error_log($e->getMessage());\n        die('Database error.');\n    }\n}\n\n?><!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Login</title>\n</head>\n<body>\n    <form method=\"post\" action=\"login.php\">\n        Username: <input type=\"text\" name=\"username\" required><br>\n        Password: <input type=\"password\" name=\"password\" required><br>\n        <button type=\"submit\">Login</button>\n    </form>\n</body>\n</html>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_86": {
        "input": "class SecureDatabaseConnection {\\n    private $pdo;\\n\\n    public function __construct($dsn, $username, $password) {\\n        try {\\n            $this->pdo = new PDO($dsn, $username, $password);\\n            $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\\n        } catch (PDOException $e) {\\n            error_log('Connection failed: ' . $e->getMessage());\\n            throw new Exception('Database connection failed.');\\n        }\\n    }\\n\\n    public function query($sql, $params = []) {\\n        try {\\n            $stmt = $this->pdo->prepare($sql);\\n            $stmt->execute($params);\\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\\n        } catch (PDOException $e) {\\n            error_log('Query failed: ' . $e->getMessage());\\n            throw new Exception('Database query failed.');\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_87": {
        "input": "<?php\nfunction safeUserInput() {\n    if (isset($_POST['username'])) {\n        $username = filter_input(INPUT_POST, 'username', FILTER_SANITIZE_STRING);\n        if (!empty($username)) {\n            echo htmlspecialchars(\"Hello, \" . $username);\n        } else {\n            echo \"Username is required.\";\n        }\n    }\n}\nsafeUserInput();\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_88": {
        "input": "<?php\nfunction secureEcho($userInput) {\n    if (!filter_var($userInput, FILTER_VALIDATE_STRING)) {\n        throw new InvalidArgumentException('Invalid input');\n    }\n    echo htmlspecialchars($userInput, ENT_QUOTES, 'UTF-8');\n}\n",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_89": {
        "input": "class SecureUser {\\n    private $pdo;\\n\\n    public function __construct($dsn, $username, $password) {\\n        try {\\n            $this->pdo = new PDO($dsn, $username, $password);\\n            $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\\n        } catch (PDOException $e) {\\n            error_log('Connection failed: ' . $e->getMessage());\\n            throw new Exception('Database connection error.');\\n        }\\n    }\\n\\n    public function addUser($username, $email) {\\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\\n            throw new InvalidArgumentException('Invalid email format.');\\n        }\\n\\n        $stmt = $this->pdo->prepare('INSERT INTO users (username, email) VALUES (:username, :email)');\\n        $stmt->bindParam(':username', $username);\\n        $stmt->bindParam(':email', $email);\\n        return $stmt->execute();\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_0": {
        "input": "CREATE FUNCTION GetUserDetails(username VARCHAR(50)) RETURNS TABLE AS $$\nBEGIN\n    RETURN QUERY EXECUTE 'SELECT * FROM users WHERE username = ''' || username || '''';\nEND;$$ LANGUAGE plpgsql;",
        "output": {
            "score": 7.2,
            "type": "Buffer Overflow"
        }
    },
    "sql_1": {
        "input": "SELECT * FROM users WHERE username = '\" OR 1=1; -- \"'",
        "output": {
            "score": 8.6,
            "type": "Command Injection"
        }
    },
    "sql_2": {
        "input": "CREATE PROCEDURE escalate_privileges AS BEGIN EXEC sp_addrolemember 'db_owner', SUSER_SNAME(); END;",
        "output": {
            "score": 9.0,
            "type": "Privilege Escalation"
        }
    },
    "sql_3": {
        "input": "CREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password_hash VARCHAR(255)\n);\n\nINSERT INTO users (id, username, password_hash) VALUES (1, 'admin', 'cGFzc3dvcmQ='); -- Base64 for 'password'\n\nDELIMITER $$\nCREATE PROCEDURE login(IN p_username VARCHAR(50), IN p_password VARCHAR(255))\nBEGIN\n    DECLARE v_password_hash VARCHAR(255);\n    SELECT password_hash INTO v_password_hash FROM users WHERE username = p_username;\n    IF v_password_hash IS NOT NULL AND HEX(SHA1(p_password)) = HEX(v_password_hash) THEN\n        SELECT 'Login successful';\n    ELSE\n        SELECT 'Login failed';\n    END IF;\nEND$$\nDELIMITER ;",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "sql_4": {
        "input": "CREATE PROCEDURE GetUserData (@username VARCHAR(50)) AS BEGIN DECLARE @sql NVARCHAR(MAX) SET @sql = 'SELECT * FROM Users WHERE username='''+@username+'''' EXEC sp_executesql @sql END",
        "output": {
            "score": 9.8,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "sql_5": {
        "input": "CREATE PROCEDURE dbo.UpdateUserPermissions\r\n(\r\n    @UserID INT,\r\n    @NewRole VARCHAR(50)\r\n)\r\nAS\r\nBEGIN\r\n    DECLARE @sql NVARCHAR(MAX);\r\n    SET @sql = N'UPDATE Users SET Role = ''' + @NewRole + ''' WHERE UserID = ' + CAST(@UserID AS NVARCHAR(10));\r\n    EXEC sp_executesql @sql;\r\nEND",
        "output": {
            "score": 9.0,
            "type": "Privilege Escalation"
        }
    },
    "sql_6": {
        "input": "SELECT * FROM files WHERE filename = \\'/documents/\\' || user_input",
        "output": {
            "score": 8.8,
            "type": "Path Traversal"
        }
    },
    "sql_7": {
        "input": "CREATE PROCEDURE GetUserData (@user_id INT)\r\nAS\r\nBEGIN\r\n    DECLARE @sql NVARCHAR(MAX);\r\n    SET @sql = 'SELECT * FROM Users WHERE id = ' + CAST(@user_id AS NVARCHAR(10));\r\n    EXEC sp_executesql @sql;\r\nEND",
        "output": {
            "score": 8.6,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "sql_8": {
        "input": "CREATE CLASS VulnerableClass {\n    PROCEDURE ExecuteQuery(query VARCHAR) {\n        EXECUTE IMMEDIATE query;\n    }\n}",
        "output": {
            "score": 8.2,
            "type": "Command Injection"
        }
    },
    "sql_9": {
        "input": "CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(255), password VARCHAR(255));\nINSERT INTO users (id, username, password) VALUES (1, 'admin', 'password123');\nSELECT * FROM users WHERE username = '\" UNION SELECT '<script>alert(\\'XSS\\')</script>' --';",
        "output": {
            "score": 8.6,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "sql_10": {
        "input": "CREATE OR REPLACE CLASS vulnerable_class AS $$\nBEGIN\n    DECLARE buffer CHAR(10);\n    SELECT data INTO buffer FROM unsafe_table WHERE id = 1;\nEND;\n$$ LANGUAGE plpgsql;",
        "output": {
            "score": 8.5,
            "type": "Buffer Overflow"
        }
    },
    "sql_11": {
        "input": "CREATE OR REPLACE FUNCTION execute_user_query(query TEXT) RETURNS TABLE AS $$\nBEGIN\n    RETURN QUERY EXECUTE query;\nEND;\n$$ LANGUAGE plpgsql;",
        "output": {
            "score": 9.1,
            "type": "Command Injection"
        }
    },
    "sql_12": {
        "input": "CREATE CLASS VulnerableClass AS $$\nBEGIN\n    EXECUTE IMMEDIATE 'SELECT * FROM ' || input_table;\nEND;\n$$ LANGUAGE plpgsql;",
        "output": {
            "score": 8.5,
            "type": "Insecure Deserialization"
        }
    },
    "sql_13": {
        "input": "import sqlite3\n\ndef execute_query(database, user_input):\n    conn = sqlite3.connect(database)\n    cursor = conn.cursor()\n    query = f'SELECT * FROM users WHERE username = \"{user_input}\"'\n    cursor.execute(query)\n    results = cursor.fetchall()\n    conn.close()\n    return results\n",
        "output": {
            "score": 7.5,
            "type": "Command Injection"
        }
    },
    "sql_14": {
        "input": "CREATE FUNCTION GetUserDetails(userId INT) RETURNS VARCHAR(255)\nBEGIN\n    DECLARE userDetails VARCHAR(255);\n    SET @query = CONCAT('SELECT name FROM users WHERE id = ', userId);\n    PREPARE stmt FROM @query;\n    EXECUTE stmt;\n    DEALLOCATE PREPARE stmt;\n    RETURN userDetails;\nEND;",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "sql_15": {
        "input": "CREATE FUNCTION vulnerable_func(input_string VARCHAR(255)) RETURNS VARCHAR(255) DETERMINISTIC BEGIN DECLARE result VARCHAR(1024); SET @query = CONCAT('SELECT ''', input_string, ''' INTO @result'); PREPARE stmt FROM @query; EXECUTE stmt; DEALLOCATE PREPARE stmt; RETURN @result; END",
        "output": {
            "score": 9.3,
            "type": "Buffer Overflow"
        }
    },
    "sql_16": {
        "input": "CREATE CLASS TransactionHandler AS $$\nBEGIN\n  IF current_user = 'admin' THEN\n    EXECUTE IMMEDIATE 'UPDATE accounts SET balance = balance - 100 WHERE id = ' || request_id;\n  END IF;\nEND;$$ LANGUAGE plpgsql;",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "sql_17": {
        "input": "SELECT * FROM users WHERE username = \\'\\' || user_input || \\'\\'",
        "output": {
            "score": 6.1,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "sql_18": {
        "input": "CREATE FUNCTION get_user_data(user_id INT) RETURNS VARCHAR(255)\nBEGIN\nDECLARE query_string VARCHAR(255);\nSET query_string = CONCAT('SELECT * FROM users WHERE id = ', user_id);\nRETURN (query_string);\nEND;",
        "output": {
            "score": 7.5,
            "type": "Command Injection"
        }
    },
    "sql_19": {
        "input": "CREATE PROCEDURE GetFileContent (@filename NVARCHAR(255)) AS BEGIN DECLARE @sql NVARCHAR(MAX); SET @sql = 'SELECT * FROM OPENROWSET(BULK N''' + @filename + ''', SINGLE_CLOB) AS Contents'; EXEC sp_executesql @sql; END",
        "output": {
            "score": 8.8,
            "type": "Path Traversal"
        }
    },
    "sql_20": {
        "input": "CREATE OR REPLACE CLASS UserSession AS {\n    userData VARCHAR(255),\n    deserializeData(data VARCHAR) RETURNING VOID AS $$\n        DECLARE session JSON;\n        BEGIN\n            SELECT data::json INTO session;\n            self.userData := session->>'user';\n        END;\n$$ LANGUAGE plpgsql;",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "sql_21": {
        "input": "CREATE FUNCTION authenticate(user VARCHAR, pass VARCHAR) RETURNS BOOLEAN AS $$\nBEGIN\n    RETURN EXISTS (SELECT 1 FROM users WHERE username = user AND password = pass);\nEND;\n$$ LANGUAGE plpgsql;",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "sql_22": {
        "input": "CREATE PROCEDURE UpdateUserDetails (@userId INT, @email NVARCHAR(255)) AS BEGIN UPDATE Users SET email = @email WHERE id = @userId END",
        "output": {
            "score": 6.8,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "sql_23": {
        "input": "CREATE PROCEDURE dangerousProcedure AS BEGIN DECLARE @longString VARCHAR(8000); SET @longString = REPLICATE('A', 9000); EXEC('SELECT ''' + @longString + ''''); END",
        "output": {
            "score": 7.2,
            "type": "Buffer Overflow"
        }
    },
    "sql_24": {
        "input": "CREATE PROCEDURE ElevatedQueryExecution(@command NVARCHAR(MAX)) AS\\nBEGIN\\n    EXEC sp_executesql @command;\\nEND",
        "output": {
            "score": 8.9,
            "type": "Privilege Escalation"
        }
    },
    "sql_25": {
        "input": "CREATE CLASS UserSession AS $$\nBEGIN\n    SESSION_ID VARCHAR(100);\n    USER_ID INT;\n    PROCEDURE SET_SESSION(p_session_id VARCHAR(100)) AS $$\n        BEGIN\n            SESSION_ID := p_session_id;\n        END;\n    $$ LANGUAGE plpgsql;\n$$ LANGUAGE SQL;",
        "output": {
            "score": 3.5,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "sql_26": {
        "input": "CREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(100)\n);\nINSERT INTO users (id, username, password) VALUES (1, 'admin', 'password123');\n\nDELIMITER $$\nCREATE FUNCTION GetUserInfo(user_id INT) RETURNS TEXT DETERMINISTIC\nBEGIN\n    DECLARE user_info TEXT;\n    SET @query = CONCAT('SELECT * FROM users WHERE id = ', user_id);\n    PREPARE stmt FROM @query;\n    EXECUTE stmt;\n    DEALLOCATE PREPARE stmt;\n    RETURN user_info;\nEND$$\nDELIMITER ;",
        "output": {
            "score": 7.5,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "sql_27": {
        "input": "CREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100)\n);\n\nINSERT INTO users (id, username, email) VALUES (1, 'admin', 'admin@example.com');\n\n-- Function to fetch user details based on provided URL\nCREATE OR REPLACE FUNCTION get_user_details(user_url TEXT) RETURNS TABLE AS $$\nBEGIN\n    RETURN QUERY EXECUTE format('SELECT * FROM users WHERE email = (SELECT email FROM dblink(%L, ''SELECT email FROM users LIMIT 1'') AS t(email))', user_url);\nEND;\n$$ LANGUAGE plpgsql;",
        "output": {
            "score": 6.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "sql_28": {
        "input": "CREATE TABLE Users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50),\n    session_id VARCHAR(100)\n);\n\nCREATE OR REPLACE FUNCTION set_session(user_id INT, new_session_id VARCHAR(100)) RETURNS VOID AS $$\nBEGIN\n    UPDATE Users SET session_id = new_session_id WHERE id = user_id;\nEND;\n$$ LANGUAGE plpgsql;",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "sql_29": {
        "input": "SELECT * FROM users WHERE username = 'admin' AND password = ' OR '1'='1",
        "output": {
            "score": 4.0,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "sql_30": {
        "input": "CREATE CLASS UserSession AS \\nBEGIN\\n    PUBLIC FUNCTION SetSessionId(userId INT) RETURNS VARCHAR(255)\\n    BEGIN\\n        DECLARE sessionId VARCHAR(255);\\n        SET sessionId = UUID();\\n        -- Vulnerable to session fixation as it allows setting a predefined session ID\\n        IF userId = 0 THEN\\n            sessionId = 'fixed_session_id';\\n        END IF;\\n        RETURN sessionId;\\n    END;\\nEND;",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "sql_31": {
        "input": "CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50), redirect_url TEXT);\n\nINSERT INTO users (id, username, redirect_url) VALUES (1, 'admin', 'https://safe.example.com');\n\nSELECT redirect_url FROM users WHERE id = 1;\n\n-- Vulnerable part: Using user-provided input directly in the redirect URL without validation.\n-- Example of vulnerable code:\n-- $user_input = $_GET['redirect'];\n-- header('Location: ' . $user_input);",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "sql_32": {
        "input": "CREATE FUNCTION GetUserData(user_id INT) RETURNS VARCHAR(255)\nBEGIN\nDECLARE file_path TEXT;\nSET file_path = CONCAT('/home/user/data/', user_id, '.txt');\nRETURN LOAD_FILE(file_path);\nEND;",
        "output": {
            "score": 6.0,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "sql_33": {
        "input": "CREATE FUNCTION get_user_data(user_id INT) RETURNS TABLE AS $$\nBEGIN\n    RETURN QUERY EXECUTE 'SELECT * FROM users WHERE id = ' || user_id;\nEND;$$ LANGUAGE plpgsql;",
        "output": {
            "score": 5.3,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "sql_34": {
        "input": "CREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255));\nINSERT INTO users (id, name, email) VALUES (1, 'Alice', 'alice@example.com');\n\nCREATE FUNCTION get_user_url(user_id INT) RETURNS VARCHAR(255)\nBEGIN\n    DECLARE user_email VARCHAR(255);\n    SELECT email INTO user_email FROM users WHERE id = user_id;\n    RETURN CONCAT('https://example.com/profile?email=', user_email);\nEND;",
        "output": {
            "score": 6.1,
            "type": "Open Redirect"
        }
    },
    "sql_35": {
        "input": "CREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\n\nCREATE TABLE sessions (\n    session_id VARCHAR(100) PRIMARY KEY,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n);\n\nINSERT INTO users (id, username, password) VALUES (1, 'admin', 'password');\n\nDELIMITER $$\nCREATE PROCEDURE login_user(IN input_username VARCHAR(50), IN input_password VARCHAR(50))\nBEGIN\n    DECLARE user_id INT;\n    SELECT id INTO user_id FROM users WHERE username = input_username AND password = input_password LIMIT 1;\n    IF user_id IS NOT NULL THEN\n        SET @session_id = UUID();\n        INSERT INTO sessions (session_id, user_id) VALUES (@session_id, user_id);\n        SELECT @session_id AS session_id;\n    ELSE\n        SELECT 'Invalid username or password' AS message;\n    END IF;\nEND$$\nDELIMITER ;",
        "output": {
            "score": 3.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "sql_36": {
        "input": "CREATE CLASS UserRequest AS SELECT * FROM RDB$DATABASE;\\nALTER CLASS UserRequest ADD METHOD sendRequest PARAMETER(url VARCHAR(255)) RETURNS VARCHAR(1024) BEGIN DECLARE result VARCHAR(1024); EXECUTE BLOCK AS BEGIN IN autonomous_transaction DO BEGIN EXECUTE STATEMENT 'SELECT HTTP_CLIENT.GET(' || :url || ') FROM RDB$DATABASE' INTO :result; END END RETURN result; END;",
        "output": {
            "score": 7.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "sql_37": {
        "input": "SELECT * FROM users WHERE username = 'admin' AND password = '' OR '1'='1",
        "output": {
            "score": 5.0,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "sql_38": {
        "input": "CREATE PROCEDURE SetUserSession(@session_id VARCHAR(255), @user_id INT) AS BEGIN UPDATE UserSessions SET user_id = @user_id WHERE session_id = @session_id; END",
        "output": {
            "score": 4.0,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "sql_39": {
        "input": "CREATE PROCEDURE SlowQuery AS BEGIN DECLARE @i INT SET @i = 0 WHILE @i < 1000000 BEGIN WAITFOR DELAY '00:00:00.001' SET @i = @i + 1 END END",
        "output": {
            "score": 3.5,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "sql_40": {
        "input": "CREATE CLASS SSRFExample AS $$\nBEGIN\n  EXECUTE IMMEDIATE 'SELECT * FROM XMLTABLE(' || '''' || 'http://'|| user_input || '/data.xml' || '''' || ')';\nEND;\n$$ LANGUAGE plpgsql;",
        "output": {
            "score": 7.2,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "sql_41": {
        "input": "SELECT * FROM users WHERE username = 'admin' AND password = '123456'",
        "output": {
            "score": 5.0,
            "type": "Missing Security Headers"
        }
    },
    "sql_42": {
        "input": "SELECT * FROM users WHERE username = '\" OR '1'='1",
        "output": {
            "score": 3.5,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "sql_43": {
        "input": "CREATE FUNCTION get_user_data(user_id INT) RETURNS TABLE AS $$ BEGIN RETURN QUERY SELECT * FROM users WHERE id = user_id; END; $$ LANGUAGE plpgsql;",
        "output": {
            "score": 3.5,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "sql_44": {
        "input": "SELECT * FROM users WHERE username = 'admin' OR '1'='1'",
        "output": {
            "score": 3.5,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "sql_45": {
        "input": "CREATE FUNCTION update_balance(user_id INT, amount DECIMAL(10, 2)) RETURNS VOID AS $$\nBEGIN\n    UPDATE accounts SET balance = balance + amount WHERE id = user_id;\nEND;$$ LANGUAGE plpgsql;",
        "output": {
            "score": 5.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "sql_46": {
        "input": "CREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(100)\n);\n\nINSERT INTO users (id, username, password) VALUES (1, 'admin', 'hashed_password');\n\nCREATE FUNCTION redirect_user(uid INT) RETURNS TEXT AS $$\nDECLARE\n    user_url TEXT;\nBEGIN\n    SELECT CONCAT('http://example.com/', COALESCE((SELECT website FROM profiles WHERE user_id = uid), 'default')) INTO user_url;\n    RETURN user_url;\nEND;\n$$ LANGUAGE plpgsql;",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "sql_47": {
        "input": "CREATE CLASS UserSession (\n    session_id VARCHAR(255),\n    user_id INT\n);\n\nINSERT INTO UserSession (session_id, user_id) VALUES ('fixed_session_id', 1);",
        "output": {
            "score": 4.0,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "sql_48": {
        "input": "CREATE FUNCTION InfiniteLoop() RETURNS INT BEGIN WHILE TRUE DO END WHILE; RETURN 1; END;",
        "output": {
            "score": 4.0,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "sql_49": {
        "input": "CREATE PROCEDURE GetUserProfile @UserID INT AS BEGIN DECLARE @URL NVARCHAR(255) SELECT @URL = ProfilePicture FROM Users WHERE ID = @UserID EXEC sp_OACreate 'MSXML2.XMLHTTP', @obj OUT EXEC sp_OAMethod @obj, 'open', NULL, 'GET', @URL, false EXEC sp_OAMethod @obj, 'send' END",
        "output": {
            "score": 7.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "sql_50": {
        "input": "CREATE PROCEDURE SafeUserLookup (@UserID INT)\r\nAS\r\nBEGIN\r\n    IF EXISTS (SELECT 1 FROM Users WHERE UserID = @UserID)\r\n    BEGIN\r\n        SELECT UserName, Email FROM Users WHERE UserID = @UserID;\r\n    END\r\nEND",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_51": {
        "input": "CREATE PROCEDURE GetEmployeeDetails @EmployeeID INT\nAS\nBEGIN\n    IF EXISTS (SELECT 1 FROM Employees WHERE EmployeeID = @EmployeeID)\n    BEGIN\n        SELECT FirstName, LastName, Department\n        FROM Employees\n        WHERE EmployeeID = @EmployeeID;\n    END\n    ELSE\n    BEGIN\n        RAISERROR ('Employee not found.', 16, 1);\n    END\nEND",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_52": {
        "input": "CREATE PROCEDURE GetEmployeeDetails (@EmployeeID INT)\nAS\nBEGIN\n    IF NOT EXISTS (SELECT 1 FROM Employees WHERE EmployeeID = @EmployeeID)\n    BEGIN\n        RAISERROR ('Employee not found.', 16, 1);\n        RETURN;\n    END\n\n    SELECT EmployeeName, Department, Position\n    FROM Employees\n    WHERE EmployeeID = @EmployeeID;\nEND",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_53": {
        "input": "CREATE PROCEDURE GetEmployeeDetails @EmployeeID INT\r\nAS\r\nBEGIN\r\n    IF NOT EXISTS (SELECT 1 FROM Employees WHERE EmployeeID = @EmployeeID)\r\n    BEGIN\r\n        RAISERROR ('Invalid Employee ID', 16, 1);\r\n        RETURN;\r\n    END\r\n\r\n    SELECT FirstName, LastName, Email\r\n    FROM Employees\r\n    WHERE EmployeeID = @EmployeeID;\r\nEND",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_54": {
        "input": "CREATE OR REPLACE FUNCTION secure_insert_user(user_name VARCHAR, user_email VARCHAR) RETURNS VOID AS $$\nBEGIN\n    IF LENGTH(user_name) > 50 OR LENGTH(user_email) > 100 THEN\n        RAISE EXCEPTION 'Input too long';\n    END IF;\n    INSERT INTO users (name, email) VALUES (user_name, user_email);\nEXCEPTION\n    WHEN others THEN\n        RAISE NOTICE 'An error occurred: %', SQLERRM;\nEND;\n$$ LANGUAGE plpgsql;",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_55": {
        "input": "CREATE PROCEDURE GetUserByEmail (IN emailInput VARCHAR(255))\nBEGIN\n    DECLARE safeEmail VARCHAR(255);\n    SET safeEmail = TRIM(emailInput);\n    IF safeEmail REGEXP '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$' THEN\n        SELECT * FROM Users WHERE Email = safeEmail;\n    ELSE\n        SIGNAL SQLSTATE '45000'\n        SET MESSAGE_TEXT = 'Invalid email format';\n    END IF;\nEND;",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_56": {
        "input": "CREATE PROCEDURE GetSafeUserData (@UserID INT)\r\nAS\r\nBEGIN\r\n    SET NOCOUNT ON;\r\n    IF EXISTS (SELECT 1 FROM Users WHERE UserID = @UserID AND IsActive = 1)\r\n    BEGIN\r\n        SELECT UserName, Email FROM Users WHERE UserID = @UserID;\r\n    END\r\n    ELSE\r\n    BEGIN\r\n        RAISERROR ('User not found or inactive.', 16, 1);\r\n    END\r\nEND",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_57": {
        "input": "CREATE FUNCTION GetSafeUserInput (user_input VARCHAR(100)) RETURNS INT AS $$\nDECLARE\n    safe_output INT;\nBEGIN\n    -- Validate input to ensure it's a digit\n    IF user_input ~ '^[0-9]+$' THEN\n        safe_output := CAST(user_input AS INT);\n    ELSE\n        RAISE EXCEPTION 'Invalid input: %', user_input;\n    END IF;\n    RETURN safe_output;\nEXCEPTION\n    WHEN OTHERS THEN\n        RAISE NOTICE 'An error occurred: %', SQLERRM;\n        RETURN NULL;\nEND;\n$$ LANGUAGE plpgsql;",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_58": {
        "input": "CREATE PROCEDURE GetUserDetails(IN userId INT)\nBEGIN\n    DECLARE user_name VARCHAR(255);\n    SELECT name INTO user_name FROM users WHERE id = userId;\n    IF user_name IS NOT NULL THEN\n        SELECT user_name AS UserName;\n    ELSE\n        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'User not found';\n    END IF;\nEND;",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_59": {
        "input": "CREATE OR REPLACE FUNCTION safe_insert_user(user_name VARCHAR, user_email VARCHAR) RETURNS VOID AS $$\nBEGIN\n    IF user_name ~ '^[a-zA-Z0-9_]+$' AND user_email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$' THEN\n        INSERT INTO users (name, email) VALUES (user_name, user_email);\n    ELSE\n        RAISE EXCEPTION 'Invalid input provided';\n    END IF;\nEND;\n$$ LANGUAGE plpgsql;",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_60": {
        "input": "CREATE FUNCTION GetSafeUserDetails (IN userId INT) RETURNS TABLE (id INT, username VARCHAR(255), email VARCHAR(255)) LANGUAGE SQL MODIFIES SQL DATA BEGIN DECLARE safeId INT; SET safeId = userId; RETURN QUERY SELECT id, username, email FROM users WHERE id = safeId; END;",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_61": {
        "input": "CREATE PROCEDURE GetUserByEmail(IN emailInput VARCHAR(255))\nBEGIN\n    DECLARE safeEmail VARCHAR(255);\n    SET safeEmail = TRIM(emailInput);\n    SELECT * FROM Users WHERE Email = safeEmail;\nEND;",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_62": {
        "input": "CREATE PROCEDURE SafeSearch\n    @searchTerm NVARCHAR(100)\nAS\nBEGIN\n    SET NOCOUNT ON;\n\n    -- Validate input to ensure it does not contain dangerous characters or patterns\n    IF (@searchTerm LIKE '%--%' OR @searchTerm LIKE '%;%' OR @searchTerm LIKE '%/*%')\n    BEGIN\n        RAISERROR('Invalid search term provided', 16, 1);\n        RETURN;\n    END\n\n    -- Use parameterized queries to prevent SQL injection\n    SELECT TOP 10 Name, Description\n    FROM Products\n    WHERE Name LIKE '%' + @searchTerm + '%'\nEND",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_63": {
        "input": "CREATE PROCEDURE SafeUserSearch @searchTerm NVARCHAR(100)\r\nAS\r\nBEGIN\r\n    DECLARE @safeSearchTerm NVARCHAR(105);\r\n    SET @safeSearchTerm = QUOTENAME('%' + REPLACE(@searchTerm, '''', '''''') + '%''');\r\n    EXEC sp_executesql N'SELECT * FROM Users WHERE UserName LIKE ' + @safeSearchTerm;\r\nEND",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_64": {
        "input": "CREATE PROCEDURE GetEmployeeDetails (@EmployeeID INT)\r\nAS\r\nBEGIN\r\n    IF (ISNUMERIC(@EmployeeID) = 1 AND @EmployeeID > 0)\r\n    BEGIN\r\n        SELECT EmployeeName, Department, Position\r\n        FROM Employees\r\n        WHERE EmployeeID = @EmployeeID;\r\n    END\r\n    ELSE\r\n    BEGIN\r\n        RAISERROR ('Invalid Employee ID', 16, 1);\r\n    END\r\nEND",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_65": {
        "input": "CREATE FUNCTION SafeInsertUser(IN p_username VARCHAR(50), IN p_email VARCHAR(100)) RETURNS INT\nBEGIN\n    DECLARE v_user_id INT;\n    IF LENGTH(p_username) < 3 OR LENGTH(p_username) > 50 THEN\n        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Username must be between 3 and 50 characters.';\n    END IF;\n    IF NOT p_email REGEXP '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$' THEN\n        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid email format.';\n    END IF;\n    INSERT INTO users (username, email) VALUES (p_username, p_email);\n    SET v_user_id = LAST_INSERT_ID();\n    RETURN v_user_id;\nEND;",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_66": {
        "input": "CREATE OR REPLACE FUNCTION safe_insert_user(user_name TEXT, user_email TEXT) RETURNS VOID AS $$\nBEGIN\n    IF user_name ~ '^[a-zA-Z0-9_]+$' AND user_email ~ '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$' THEN\n        INSERT INTO users (name, email) VALUES (user_name, user_email);\n    ELSE\n        RAISE EXCEPTION 'Invalid input';\n    END IF;\nEXCEPTION\n    WHEN OTHERS THEN\n        RAISE NOTICE 'An error occurred: %', SQLERRM;\nEND;\n$$ LANGUAGE plpgsql;",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_67": {
        "input": "CREATE OR REPLACE FUNCTION secure_insert_user(user_name VARCHAR, user_email VARCHAR) RETURNS VOID AS $$\nBEGIN\n    IF user_name ~ '^[a-zA-Z0-9_]+$' AND user_email ~* '^[A-Za-z0-9._+%-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$' THEN\n        INSERT INTO users (name, email) VALUES (user_name, user_email);\n    ELSE\n        RAISE EXCEPTION 'Invalid input detected';\n    END IF;\nEND;\n$$ LANGUAGE plpgsql;",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_68": {
        "input": "CREATE FUNCTION GetEmployeeDetails(@EmployeeID INT)\nRETURNS TABLE\nAS\nRETURN\n(\n    SELECT EmployeeName, Position, Department\n    FROM Employees\n    WHERE EmployeeID = @EmployeeID\n)",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_69": {
        "input": "CREATE FUNCTION SafeInsertUser(IN p_username VARCHAR(50), IN p_email VARCHAR(100))\nRETURNS INT\nDETERMINISTIC\nBEGIN\n    DECLARE v_user_id INT;\n    IF LENGTH(p_username) > 0 AND LENGTH(p_email) > 0 THEN\n        INSERT INTO users (username, email)\n        VALUES (p_username, p_email);\n        SET v_user_id = LAST_INSERT_ID();\n    ELSE\n        SIGNAL SQLSTATE '45000'\n        SET MESSAGE_TEXT = 'Invalid input';\n    END IF;\n    RETURN v_user_id;\nEND;",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_70": {
        "input": "CREATE PROCEDURE SafeInsertUser (\n    IN p_username VARCHAR(50),\n    IN p_email VARCHAR(100),\n    IN p_password_hash CHAR(64)\n)\nBEGIN\n    -- Validate inputs to ensure they are not empty and meet expected formats\n    IF LENGTH(p_username) < 3 OR LENGTH(p_email) < 5 OR LENGTH(p_password_hash) != 64 THEN\n        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid input parameters';\n    END IF;\n\n    -- Insert user data into the database securely\n    INSERT INTO Users (username, email, password_hash)\n    VALUES (p_username, p_email, p_password_hash);\nEND;",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_71": {
        "input": "CREATE PROCEDURE SafeUserInsert\n(\n    @Username NVARCHAR(50),\n    @Password NVARCHAR(128)\n)\nAS\nBEGIN\n    SET NOCOUNT ON;\n\n    -- Validate input lengths to prevent SQL injection and overflows\n    IF LEN(@Username) > 50 OR LEN(@Password) > 128\n    BEGIN\n        RAISERROR ('Input exceeds maximum length', 16, 1);\n        RETURN;\n    END\n\n    -- Use parameterized queries to prevent SQL injection\n    INSERT INTO Users (Username, PasswordHash)\n    VALUES (@Username, HASHBYTES('SHA2_512', @Password));\nEND",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_72": {
        "input": "CREATE FUNCTION GetSafeUserDetails (IN userId INT)\nRETURNS TABLE (id INT, username VARCHAR(255))\nDETERMINISTIC\nREADS SQL DATA\nBEGIN\n    DECLARE safeId INT;\n    SET safeId = IF(userId IS NOT NULL AND userId >= 0, userId, -1);\n    RETURN QUERY SELECT id, username FROM users WHERE id = safeId;\nEND;",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_73": {
        "input": "CREATE PROCEDURE SafeInsertUser\n(\n    @Username NVARCHAR(50),\n    @Password NVARCHAR(256)\n)\nAS\nBEGIN\n    SET NOCOUNT ON;\n    IF EXISTS (SELECT 1 FROM Users WHERE Username = @Username)\n    BEGIN\n        RAISERROR ('Username already exists.', 16, 1);\n        RETURN;\n    END\n    INSERT INTO Users (Username, PasswordHash)\n    VALUES (@Username, HASHBYTES('SHA2_512', @Password));\nEND",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_74": {
        "input": "CREATE FUNCTION SafeInsertUser (userName NVARCHAR(50), userEmail NVARCHAR(100)) RETURNS INT AS $$\nBEGIN\n    -- Validate input to ensure it doesn't contain malicious content\n    IF userName LIKE '%''%' OR userEmail LIKE '%''%' THEN\n        RAISE EXCEPTION 'Invalid characters detected in input.';\n    END IF;\n    \n    -- Insert user safely using parameterized queries\n    INSERT INTO Users (Name, Email) VALUES (userName, userEmail);\n    RETURN 1;\nEXCEPTION\n    WHEN OTHERS THEN\n        RETURN 0;\nEND;$$ LANGUAGE plpgsql;",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_75": {
        "input": "CREATE PROCEDURE GetUserByEmail(IN userEmail VARCHAR(255))\nBEGIN\n    DECLARE safeEmail VARCHAR(255);\n    SET safeEmail = TRIM(userEmail);\n    IF safeEmail REGEXP '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$' THEN\n        SELECT * FROM Users WHERE Email = safeEmail;\n    ELSE\n        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid email format';\n    END IF;\nEND;",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_76": {
        "input": "SELECT id, name FROM users WHERE username = $1 AND password_hash = crypt($2, password_hash);",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_77": {
        "input": "CREATE PROCEDURE SafeSearchUsers (@searchTerm NVARCHAR(100)) AS BEGIN     SET NOCOUNT ON;     DECLARE @safeSearchTerm NVARCHAR(102) = QUOTENAME(@searchTerm, N''[%]%'');     SELECT * FROM Users WHERE UserName LIKE N''%'' + @safeSearchTerm + N''%'' END",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_78": {
        "input": "CREATE PROCEDURE GetUserByEmail\n    @Email NVARCHAR(255)\nAS\nBEGIN\n    SET NOCOUNT ON;\n    BEGIN TRY\n        IF NOT EXISTS (SELECT 1 FROM Users WHERE Email = @Email AND Email IS NOT NULL)\n            RAISERROR ('User not found', 16, 1);\n        SELECT UserID, Username, Email\n        FROM Users\n        WHERE Email = @Email;\n    END TRY\n    BEGIN CATCH\n        DECLARE @ErrorMessage NVARCHAR(4000);\n        DECLARE @ErrorSeverity INT;\n        DECLARE @ErrorState INT;\n        SELECT \n            @ErrorMessage = ERROR_MESSAGE(),\n            @ErrorSeverity = ERROR_SEVERITY(),\n            @ErrorState = ERROR_STATE();\n        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);\n    END CATCH\nEND",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_79": {
        "input": "CREATE PROCEDURE GetUserById(IN userId INT)\nBEGIN\n    DECLARE safeUserId INT;\n    SET safeUserId =(userId);\n    SELECT * FROM Users WHERE id = safeUserId;\nEND;",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_80": {
        "input": "CREATE PROCEDURE GetUserProfile(IN userId INT)\nBEGIN\n    DECLARE safeUserId INT;\n    SET safeUserId = IF(userId IS NULL OR userId < 1, -1, userId);\n    SELECT * FROM Users WHERE id = safeUserId AND is_active = 1;\nEND;",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_81": {
        "input": "CREATE PROCEDURE SafeInsertUser(IN p_username VARCHAR(50), IN p_email VARCHAR(100))\nBEGIN\n    DECLARE v_username VARCHAR(50);\n    DECLARE v_email VARCHAR(100);\n\n    -- Input validation and sanitization\n    SET v_username = TRIM(p_username);\n    SET v_email = TRIM(p_email);\n\n    IF LENGTH(v_username) < 4 OR LENGTH(v_username) > 50 THEN\n        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Username must be between 4 and 50 characters.';\n    END IF;\n\n    IF LENGTH(v_email) < 5 OR LENGTH(v_email) > 100 THEN\n        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Email must be between 5 and 100 characters.';\n    END IF;\n\n    IF NOT v_email REGEXP '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$' THEN\n        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid email format.';\n    END IF;\n\n    -- Use parameterized query to prevent SQL injection\n    INSERT INTO users (username, email) VALUES (v_username, v_email);\nEND;",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_82": {
        "input": "CREATE PROCEDURE GetUserById(IN userId INT)\nBEGIN\n    DECLARE safeUserId INT;\n    SET safeUserId = IF(userId >= 0, userId, NULL);\n    SELECT * FROM Users WHERE id = safeUserId;\nEND",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_83": {
        "input": "CREATE PROCEDURE GetSafeUser (@UserID INT)\nAS\nBEGIN\n    SET NOCOUNT ON;\n    IF EXISTS (SELECT 1 FROM Users WHERE UserID = @UserID)\n    BEGIN\n        SELECT UserName, Email FROM Users WHERE UserID = @UserID;\n    END\nEND",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_84": {
        "input": "CREATE PROCEDURE GetEmployeeDetails\n    @EmployeeID INT\nAS\nBEGIN\n    SET NOCOUNT ON;\n    IF NOT EXISTS (SELECT 1 FROM Employees WHERE EmployeeID = @EmployeeID)\n    BEGIN\n        RAISERROR ('Invalid Employee ID', 16, 1);\n        RETURN;\n    END\n    SELECT FirstName, LastName, Department\n    FROM Employees\n    WHERE EmployeeID = @EmployeeID;\nEND",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_85": {
        "input": "CREATE PROCEDURE SafeInsertUser\n(\n    @Username NVARCHAR(50),\n    @Email NVARCHAR(100)\n)\nAS\nBEGIN\n    SET NOCOUNT ON;\n    IF EXISTS (SELECT 1 FROM Users WHERE Username = @Username OR Email = @Email)\n    BEGIN\n        RAISERROR('User already exists', 16, 1);\n        RETURN;\n    END\n    INSERT INTO Users (Username, Email) VALUES (@Username, @Email);\nEND",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_86": {
        "input": "CREATE FUNCTION GetCustomerDetails(@CustomerId INT)\nRETURNS TABLE\nAS\nRETURN\nBEGIN\n    IF @CustomerId IS NULL OR @CustomerId <= 0\n    BEGIN\n        RETURN;\n    END;\n    SELECT CustomerId, FirstName, LastName, Email\n    FROM Customers\n    WHERE CustomerId = @CustomerId;\nEND;",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_87": {
        "input": "SELECT * FROM users WHERE username = $1 AND password = crypt($2, password);",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_88": {
        "input": "CREATE PROCEDURE GetEmployeeDetails\n(\n    @EmployeeID INT\n)\nAS\nBEGIN\n    SET NOCOUNT ON;\n    IF EXISTS (SELECT 1 FROM Employees WHERE EmployeeID = @EmployeeID)\n    BEGIN\n        SELECT FirstName, LastName, Department\n        FROM Employees\n        WHERE EmployeeID = @EmployeeID;\n    END\n    ELSE\n    BEGIN\n        RAISERROR ('Employee not found.', 16, 1);\n    END\nEND",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "sql_89": {
        "input": "CREATE PROCEDURE SafeInsertUser(\n    @username NVARCHAR(50),\n    @email NVARCHAR(100)\n)\nAS\nBEGIN\n    -- Validate input to prevent SQL Injection and other malicious inputs\n    IF (LEN(@username) > 50 OR LEN(@email) > 100)\n    BEGIN\n        RAISERROR('Input exceeds maximum length.', 16, 1);\n        RETURN;\n    END\n\n    -- Use parameterized queries to prevent SQL Injection\n    INSERT INTO Users (Username, Email)\n    VALUES (@username, @email);\nEND",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_0": {
        "input": "def executeCommand(command: String): Unit = {\n  import scala.sys.process._\n  val cmd = Seq(\"bash\", \"-c\", command)\n  cmd.!\n}",
        "output": {
            "score": 8.5,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "scala_1": {
        "input": "class VulnerableExample {\n  def renderUserInput(input: String): String = {\n    s\"<div>$input</div>\"\n  }\n}",
        "output": {
            "score": 6.1,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "scala_2": {
        "input": "class UserAuth {\n  private var username: String = \"\"\n  private var password: String = \"\"\n\n  def login(user: String, pass: String): Boolean = {\n    if (user == username && pass == password) true else false\n  }\n\n  def register(newUsername: String, newPassword: String): Unit = {\n    username = newUsername\n    password = newPassword\n  }\n}",
        "output": {
            "score": 6.5,
            "type": "Broken Authentication"
        }
    },
    "scala_3": {
        "input": "def executeCommand(command: String): Process = {\n  val processBuilder = new java.lang.ProcessBuilder(\"bash\", \"-c\", command)\n  processBuilder.start()\n}",
        "output": {
            "score": 7.5,
            "type": "Privilege Escalation"
        }
    },
    "scala_4": {
        "input": "def unsafe(inputString: String): String = {\\n  s\"<script>alert('$inputString')</script>\"\\n}",
        "output": {
            "score": 6.1,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "scala_5": {
        "input": "import scala.io.StdIn\nobject VulnerableApp {\n  def main(args: Array[String]): Unit = {\n    println(\"Enter a command to execute:\")\n    val cmd = StdIn.readLine()\n    val process = Runtime.getRuntime.exec(cmd)\n    val output = new java.util.Scanner(process.getInputStream).useDelimiter(\"\\\\A\").next()\n    println(output)\n  }\n}",
        "output": {
            "score": 8.2,
            "type": "Command Injection"
        }
    },
    "scala_6": {
        "input": "class VulnerableController {\n  def transferMoney(request: HttpServletRequest): Unit = {\n    val toAccount = request.getParameter(\"toAccount\")\n    val amount = request.getParameter(\"amount\")\n    // Transfer money logic here\n  }\n}",
        "output": {
            "score": 6.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "scala_7": {
        "input": "def unsafeFunction(userInput: String): Unit = {\n  val command = s\"/bin/bash -c \\\"$userInput\\\"\"\n  Runtime.getRuntime.exec(command)\n}",
        "output": {
            "score": 8.5,
            "type": "Privilege Escalation"
        }
    },
    "scala_8": {
        "input": "def readConfig(filePath: String): String = {\\n    val file = new java.io.File(filePath)\\n    scala.io.Source.fromFile(file).getLines().mkString(\"\")\\n}",
        "output": {
            "score": 8.5,
            "type": "Path Traversal"
        }
    },
    "scala_9": {
        "input": "import scala.io.StdIn\nobject VulnerableApp {\n  def main(args: Array[String]): Unit = {\n    println(\"Enter command to execute:\")\n    val command = StdIn.readLine()\n    Runtime.getRuntime.exec(command)\n  }\n}",
        "output": {
            "score": 8.2,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "scala_10": {
        "input": "import java.io.{ByteArrayInputStream, ObjectInputStream}\nclass VulnerableApp {\n  def deserialize(bytes: Array[Byte]): Unit = {\n    val bis = new ByteArrayInputStream(bytes)\n    val ois = new ObjectInputStream(bis)\n    try {\n      ois.readObject()\n    } catch {\n      case e: Exception => println(e.getMessage())\n    }\n  }\n}",
        "output": {
            "score": 8.8,
            "type": "Insecure Deserialization"
        }
    },
    "scala_11": {
        "input": "import java.util.Base64\n\ncase class User(username: String, passwordHash: String)\nobject AuthSystem {\n  private val users = scala.collection.mutable.Map[String, User]()\n\n  def addUser(username: String, password: String): Unit = {\n    val encoder = Base64.getEncoder()\n    val encodedPassword = encoder.encodeToString(password.getBytes())\n    users += (username -> User(username, encodedPassword))\n  }\n\n  def authenticate(username: String, password: String): Boolean = {\n    val decoder = Base64.getDecoder()\n    users.get(username) match {\n      case Some(user) =>\n        val decodedHash = new String(decoder.decode(user.passwordHash))\n        decodedHash == password\n      case None => false\n    }\n  }\n}\nobject Main extends App {\n  AuthSystem.addUser(\"admin\", \"password123\")\n  println(AuthSystem.authenticate(args(0), args(1)))\n}",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "scala_12": {
        "input": "def unsafeQuery(param: String): List[String] = {\\n  val query = s\"SELECT * FROM users WHERE username = '$param'\"\\n  executeQuery(query)\\n}",
        "output": {
            "score": 8.2,
            "type": "SQL Injection"
        }
    },
    "scala_13": {
        "input": "import scala.io.StdIn\n\ndef authenticate(): Boolean = {\n    val username = StdIn.readLine(\"Enter username: \")\n    val password = StdIn.readLine(\"Enter password: \")\n    if (username == \"admin\" && password == getPasswordHash(username)) true else false\n}\n\ndef getPasswordHash(user: String): String = {\n    // Simulated hash retrieval\n    user match {\n        case \"admin\" => \"5f4dcc3b5aa765d61d8327deb882cf99\"\n        case _ => \"\"\n    }\n}\n",
        "output": {
            "score": 8.0,
            "type": "Broken Authentication"
        }
    },
    "scala_14": {
        "input": "import java.io.FileReader\n\nclass FileViewer {\n  def viewFile(filePath: String): Unit = {\n    val reader = new FileReader(filePath)\n    var i: Int = reader.read()\n    while (i != -1) {\n      print(i.toChar)\n      i = reader.read()\n    }\n    reader.close()\n  }\n}\n\nobject Main extends App {\n  if (args.length > 0) {\n    val viewer = new FileViewer\n    viewer.viewFile(args(0))\n  } else {\n    println(\"Please provide a file path.\")\n  }\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "scala_15": {
        "input": "def transferFunds(user: String, amount: Double): Boolean = {\n  // Simulate transferring funds\n  println(s\"Transferring $$amount to $user\")\n  true\n}",
        "output": {
            "score": 6.8,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "scala_16": {
        "input": "def authenticate(password: String): Boolean = {\n  val storedPassword = \"secret123\"\n  password.hashCode() == storedPassword.hashCode()\n}",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "scala_17": {
        "input": "def executeCommand(command: String): Unit = {\n    import scala.sys.process._\n    command !\n}",
        "output": {
            "score": 8.2,
            "type": "Command Injection"
        }
    },
    "scala_18": {
        "input": "def unsafeDeserialize(inputString: String): AnyRef = {\n    val bytes = Base64.getDecoder.decode(inputString)\n    val ois = new ObjectInputStream(new ByteArrayInputStream(bytes))\n    ois.readObject()\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "scala_19": {
        "input": "import scala.io.StdIn\\nobject VulnerableApp {\\ndef main(args: Array[String]) = {\\nval cmd = StdIn.readLine(\"Enter command to execute: \")\\nnew java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter(\\\\\"\\\\A\\\\\").next()\\n}\\n}",
        "output": {
            "score": 8.2,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "scala_20": {
        "input": "import scala.sys.process._\ndef executeCommand(cmd: String): Unit = {\"sudo \" + cmd !}",
        "output": {
            "score": 8.2,
            "type": "Privilege Escalation"
        }
    },
    "scala_21": {
        "input": "import java.io.{ObjectInputStream, ByteArrayInputStream}\ndef deserialize(data: Array[Byte]): Object = {\n    val bais = new ByteArrayInputStream(data)\n    val ois = new ObjectInputStream(bais)\n    val obj = ois.readObject()\n    ois.close()\n    bais.close()\n    obj\n}",
        "output": {
            "score": 8.5,
            "type": "Insecure Deserialization"
        }
    },
    "scala_22": {
        "input": "import java.io.FileReader\n\ndef readFile(filePath: String): Unit = {\n  val reader = new FileReader(filePath)\n  var i: Int = reader.read()\n  while (i != -1) {\n    print(i.toChar)\n    i = reader.read()\n  }\n  reader.close()\n}\n\nobject Main extends App {\n  println(\"Enter file path:\")\n  val inputPath = scala.io.StdIn.readLine()\n  readFile(inputPath)\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "scala_23": {
        "input": "class FileReader {\n  def readFile(filePath: String): String = {\n    val file = new java.io.File(filePath)\n    val source = scala.io.Source.fromFile(file)\n    try source.mkString finally source.close()\n  }\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "scala_24": {
        "input": "package com.example\n\nimport scala.collection.mutable.ListBuffer\nimport akka.actor.Actor\nimport akka.actor.Props\nimport spray.routing.HttpService\nimport akka.io.IO\nimport spray.can.Http\nimport spray.http.MediaTypes._\n\nobject WebServer {\n  def main(args: Array[String]): Unit = {\n    val system = akka.actor.ActorSystem(\"webserver\")\n    val serviceActor = system.actorOf(Props[WebServer])\n    IO(Http) ! Http.Bind(serviceActor, interface = \"localhost\", port = 8080)\n  }\n}\n\nclass WebServer extends Actor with HttpService {\n  def actorRefFactory = context\n\n  val route =\n    path(\"transfer\") {\n      parameter('amount.as[Int], 'to) { (amount, to) =>\n        // This is vulnerable to CSRF as there's no verification of the request origin.\n        performTransfer(amount, to)\n        complete(s\"Transferred $amount to $to\")\n      }\n    }\n\n  private def performTransfer(amount: Int, to: String): Unit = {\n    // Simulate a transfer operation\n    println(s\"Transferring $amount to $to\")\n  }\n}",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "scala_25": {
        "input": "import scala.io.Source\n\nclass FileManager {\n    def readFile(filePath: String): String = {\n        val fileContent = Source.fromFile(filePath).getLines().mkString(\"\\n\")\n        fileContent\n    }\n}\n\nobject Main extends App {\n    val fm = new FileManager()\n    println(fm.readFile(args(0)))\n}",
        "output": {
            "score": 5.3,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "scala_26": {
        "input": "def unsafeFunction(): Unit = {\n  var counter = 0\n  val threads = List.fill(10)(new Thread(() => {\n    for (_ <- 1 to 1000) counter += 1\n  }))\n  threads.foreach(_.start())\n  threads.foreach(_.join())\n  println(s\"Final counter value: $counter\")\n}",
        "output": {
            "score": 5.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "scala_27": {
        "input": "def infiniteLoop(): Unit = { while (true) {} }",
        "output": {
            "score": 3.0,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "scala_28": {
        "input": "class UnsafeBankAccount {\n  private var balance = 0\n\n  def deposit(amount: Int) = this.synchronized {\n    balance += amount\n  }\n\n  def withdraw(amount: Int) = {\n    if (balance >= amount) {\n      Thread.sleep(10)\n      balance -= amount\n    }\n  }\n}",
        "output": {
            "score": 5.8,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "scala_29": {
        "input": "def readFileContent(filePath: String): String = {\\n    val file = new java.io.File(filePath)\\n    scala.io.Source.fromFile(file).getLines().mkString(\"\\n\")\\n}",
        "output": {
            "score": 4.0,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "scala_30": {
        "input": "class UrlRedirector {\n  def redirect(url: String): Unit = {\n    val sanitizedUrl = url.replaceAll(\".*\\\\.evil\\\\..*\", \"\")\n    scala.tools.nsc.io.URL(sanitizedUrl).openStream()\n  }\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "scala_31": {
        "input": "class UserInfo {\n  private var password: String = \"\"\n  def setPassword(pass: String): Unit = { this.password = pass }\n  def getPassword: String = { this.password }\n}",
        "output": {
            "score": 3.5,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "scala_32": {
        "input": "import scala.concurrent.{Future, Await}\nimport scala.concurrent.duration._\nimport scala.concurrent.ExecutionContext.Implicits.global\nobject RaceConditionExample {\n  var counter = 0\n  def increment(): Unit = {\n    val localCounter = counter\n    Thread.sleep(1)\n    counter = localCounter + 1\n  }\n  def main(args: Array[String]): Unit = {\n    val futures = for (i <- 1 to 100) yield Future {\n      increment()\n    }\n    Await.result(Future.sequence(futures), Duration.Inf)\n    println(s\"Final counter value: $counter\")\n  }\n}",
        "output": {
            "score": 5.8,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "scala_33": {
        "input": "def vulnerableRedirect(url: String): String = {\\n    val redirectUrl = url + \"/welcome\"\\n    \"<script>window.location.href=\\\"\" + redirectUrl + \"\\\"</script>\"\\n}",
        "output": {
            "score": 6.8,
            "type": "Open Redirect"
        }
    },
    "scala_34": {
        "input": "def readFile(filePath: String): String = {\\n  scala.io.Source.fromFile(filePath).getLines.mkString(\"\")\\n}",
        "output": {
            "score": 4.2,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "scala_35": {
        "input": "import scala.io.StdIn\n\ndef vulnerableFunction(): Unit = {\n    println(\"Enter your name:\")\n    val name = StdIn.readLine()\n    println(s\"Hello, $name! Welcome to our website.\")\n}\n\nobject Main extends App {\n    vulnerableFunction()\n}",
        "output": {
            "score": 5.3,
            "type": "HTTP Response Splitting"
        }
    },
    "scala_36": {
        "input": "import akka.http.scaladsl.Http\nimport akka.http.scaladsl.model.ContentTypes.`text/html(UTF-8)`\nimport akka.http.scaladsl.server.Directives._\n\nobject SimpleWebServer {\ndef main(args: Array[String]): Unit = {\n  val route = path(\"hello\") {\n    get {\n      complete(HttpEntity(`text/html(UTF-8)`, \"<h1>Hello, world!</h1>\"))\n    }\n  }\n  Http().newServerAt(\"localhost\", 8080).bind(route)\n}\n}",
        "output": {
            "score": 6.5,
            "type": "Missing Security Headers"
        }
    },
    "scala_37": {
        "input": "def vulnerableRedirect(url: String): Unit = { \n    println(s\"Redirecting to: $url\")\n}",
        "output": {
            "score": 6.0,
            "type": "Open Redirect"
        }
    },
    "scala_38": {
        "input": "import java.io._\ndef readFile(filePath: String): String = {\n  val file = new File(filePath)\n  val source = Source.fromFile(file)\n  try source.getLines.mkString(\"\\n\") finally source.close()\n}\n",
        "output": {
            "score": 4.5,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "scala_39": {
        "input": "import java.io._\n\nobject LFIExample {\n  def main(args: Array[String]): Unit = {\n    val filePath = scala.io.StdIn.readLine(\"Enter file path:\")\n    val file = new File(filePath)\n    val reader = new BufferedReader(new FileReader(file))\n    var line = reader.readLine()\n    while (line != null) {\n      println(line)\n      line = reader.readLine()\n    }\n    reader.close()\n  }\n}",
        "output": {
            "score": 5.3,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "scala_40": {
        "input": "object InfiniteLoop {\ndef main(args: Array[String]): Unit = {\n  while (true) {\n    val largeList = List.fill(1000000)(\"a\")\n    val processedList = largeList.map(_ + \"b\")\n  }\n}\n",
        "output": {
            "score": 4.5,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "scala_41": {
        "input": "def vulnerableRedirect(url: String) = {\n  val encodedUrl = java.net.URLEncoder.encode(url, \"UTF-8\")\n  s\"http://example.com/redirect?target=$encodedUrl\"\n}",
        "output": {
            "score": 7.5,
            "type": "Open Redirect"
        }
    },
    "scala_42": {
        "input": "import akka.actor.Actor\nimport spray.routing.HttpService\n\nclass MyServiceActor extends Actor with HttpService {\n  def receive = runRoute {\n    path(\"hello\") {\n      get {\n        complete(\\\"Hello, World!\\\")\n      }\n    }\n  }\n}",
        "output": {
            "score": 6.5,
            "type": "Missing Security Headers"
        }
    },
    "scala_43": {
        "input": "def vulnerableFunction(userInput: String): String = {\\n    val response = s\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<html><body>$userInput</body></html>\"\\n    response\\n}",
        "output": {
            "score": 5.3,
            "type": "HTTP Response Splitting"
        }
    },
    "scala_44": {
        "input": "def infiniteLoop(): Unit = {\n  while (true) {}\n}",
        "output": {
            "score": 4.2,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "scala_45": {
        "input": "import javax.servlet.http.{HttpServletRequest, HttpServletResponse}\n\nclass LoginServlet extends HttpServlet {\n  override def doGet(request: HttpServletRequest, response: HttpServletResponse): Unit = {\n    val session = request.getSession(false)\n    if (session == null) {\n      val newSession = request.getSession(true)\n      newSession.setAttribute(\"userId\", \"defaultUser\")\n    }\n    // Redirect to main page\n    response.sendRedirect(\"/main\")\n  }\n}",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "scala_46": {
        "input": "class WebServer {\n  def start(): Unit = {\n    println(\"Starting web server...\")\n  }\n}",
        "output": {
            "score": 5.3,
            "type": "Missing Security Headers"
        }
    },
    "scala_47": {
        "input": "import akka.actor.ActorSystem\nimport akka.http.scaladsl.Http\nimport akka.http.scaladsl.server.Directives._\nobject WebServer {\n  def main(args: Array[String]): Unit = {\n    implicit val system = ActorSystem(\"my-system\")\n    implicit val executionContext = system.dispatcher\n    val route = path(\"hello\") {\n      get {\n        complete(\"Hello, world!\")\n      }\n    }\n    Http().newServerAt(\"localhost\", 8080).bind(route)\n  }\n}",
        "output": {
            "score": 4.2,
            "type": "Missing Security Headers"
        }
    },
    "scala_48": {
        "input": "import scala.collection.mutable\nobject RaceConditionExample {\n  val sharedResource = mutable.List[Int]()\n  def main(args: Array[String]): Unit = {\n    val thread1 = new Thread(() => {\n      for (i <- 0 until 1000) {\n        sharedResource += i\n      }\n    })\n    val thread2 = new Thread(() => {\n      for (i <- 0 until 1000) {\n        sharedResource += i\n      }\n    })\n    thread1.start()\n    thread2.start()\n    thread1.join()\n    thread2.join()\n    println(s\"Final size of list: ${sharedResource.size}\")\n  }\n}",
        "output": {
            "score": 4.5,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "scala_49": {
        "input": "class VulnerableApp {\n  def redirect(url: String): Unit = {\n    val target = if (url.startsWith(\"http://\")) url else s\"http://${url}\"\n    println(s\"Redirecting to $target\")\n  }\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "scala_50": {
        "input": "def safeReadInteger(prompt: String): Option[Int] = {\n    try {\n        println(prompt)\n        val input = scala.io.StdIn.readLine()\n        Some(input.toInt)\n    } catch {\n        case _: NumberFormatException => None\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_51": {
        "input": "def safeReadInt(input: String): Option[Int] = {\\n    try {\\n        Some(Integer.parseInt(input))\\n    } catch {\\n        case _: NumberFormatException => None\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_52": {
        "input": "def safeReadInt(prompt: String): Option[Int] = {\\n    try {\\n        val input = scala.io.StdIn.readLine(prompt)\\n        if (input.matches(\"\\\\d+\")) Some(input.toInt) else None\\n    } catch {\\n        case _: NumberFormatException => None\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_53": {
        "input": "def safeReadInt(prompt: String): Option[Int] = {\n    try {\n        val input = scala.io.StdIn.readLine(prompt)\n        Some(input.toInt)\n    } catch {\n        case _: NumberFormatException =>\n            println(\"Invalid input. Please enter a valid integer.\")\n            None\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_54": {
        "input": "import scala.io.StdIn\n\ndef safeReadInt(prompt: String): Option[Int] = {\n    print(prompt)\n    val input = StdIn.readLine()\n    try {\n        Some(input.toInt)\n    } catch {\n        case _: NumberFormatException => None\n    }\n}\n\nsafeReadInt(\"Enter a number: \") match {\n    case Some(number) => println(s\"You entered the number: $number\")\n    case None => println(\"Invalid input. Please enter a valid integer.\")\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_55": {
        "input": "import scala.io.StdIn\nimport java.security.MessageDigest\nobject SecureScalaApp {\n    def main(args: Array[String]): Unit = {\n        try {\n            println(\"Enter your message to hash:\")\n            val userInput = StdIn.readLine()\n            if (userInput.nonEmpty) {\n                val hashedMessage = hashString(userInput)\n                println(s\"SHA-256 Hash: $hashedMessage\")\n            } else {\n                println(\"No input provided.\")\n            }\n        } catch {\n            case e: Exception =>\n                println(s\"An error occurred: ${e.getMessage}\")\n        }\n    }\n\n    def hashString(input: String): String = {\n        val digest = MessageDigest.getInstance(\"SHA-256\")\n        digest.reset()\n        digest.update(input.getBytes(\"UTF-8\"))\n        digest.digest.map(0xFF & _).map { \"%02x\".format(_) }.mkString\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_56": {
        "input": "class SecureUserInput {\n    def getUserInput(prompt: String): Option[Int] = {\n        try {\n            println(prompt)\n            val input = scala.io.StdIn.readLine()\n            if (input.forall(_.isDigit)) Some(input.toInt)\n            else None\n        } catch {\n            case _: Exception => None\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_57": {
        "input": "class SecureUserValidator {\n  def isValidEmail(email: String): Boolean = {\n    val emailRegex = \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$\".r\n    email.matches(emailRegex.regex)\n  }\n\n  def validateUserInput(input: String): Option[String] = {\n    try {\n      if (input.isEmpty) throw new IllegalArgumentException(\"Input cannot be empty\")\n      Some(input.trim)\n    } catch {\n      case e: Exception => None\n    }\n  }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_58": {
        "input": "def safeReadInt(prompt: String): Option[Int] = {\n    import scala.io.StdIn\n    try {\n        print(prompt)\n        val input = StdIn.readLine()\n        Some(input.toInt)\n    } catch {\n        case _: NumberFormatException =>\n            println(\"Invalid input. Please enter a valid integer.\")\n            None\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_59": {
        "input": "class SecureUserInputHandler {\n    def getUserInput(prompt: String): Option[Int] = {\n        try {\n            println(prompt)\n            val input = scala.io.StdIn.readLine()\n            if (input.matches(\"\\\\d+\")) Some(input.toInt) else None\n        } catch {\n            case _: NumberFormatException => None\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_60": {
        "input": "class SecureDataHandler {\n  def processUserInput(input: String): Option[Int] = {\n    try {\n      val number = input.trim.toInt\n      if (number >= 0) Some(number) else None\n    } catch {\n      case _: NumberFormatException => None\n    }\n  }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_61": {
        "input": "import scala.io.StdIn\nobject SecureApp {\n    def main(args: Array[String]): Unit = {\n        print(\"Enter a positive integer: \")\n        val input = StdIn.readLine()\n        try {\n            val number = input.toInt\n            if (number > 0) {\n                println(s\"You entered a positive integer: $number\")\n            } else {\n                println(\"The number is not positive.\")\n            }\n        } catch {\n            case _: NumberFormatException => println(\"Invalid input. Please enter a valid integer.\")\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_62": {
        "input": "def secureFunction(inputString: String): Unit = {\n    val safeInput = inputString.filter(_.isDigit)\n    try {\n        val number = safeInput.toInt\n        println(s\"The number is: $number\")\n    } catch {\n        case e: NumberFormatException => println(\"Invalid input, please enter a valid integer.\")\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_63": {
        "input": "import scala.util.Try\n\ndef safeReadInt(input: String): Option[Int] = {\n  Try(input.toInt).toOption.filter(_ >= 0)\n}\n\nobject Main extends App {\n  val userInput = scala.io.StdIn.readLine(\"Enter a non-negative integer: \")\n  safeReadInt(userInput) match {\n    case Some(number) => println(s\"You entered: $number\")\n    case None => println(\"Invalid input. Please enter a non-negative integer.\")\n  }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_64": {
        "input": "import scala.io.StdIn\nobject SafeApp {\n    def main(args: Array[String]): Unit = {\n        println(\"Enter a number:\")\n        val userInput = StdIn.readLine()\n        try {\n            val number = Integer.parseInt(userInput)\n            println(s\"You entered the number: $number\")\n        } catch {\n            case _: NumberFormatException => println(\"Invalid input. Please enter a valid integer.\")\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_65": {
        "input": "def secureFunction(input: String): Option[Int] = {\n  try {\n    val number = input.toInt\n    if (number >= 0) Some(number) else None\n  } catch {\n    case _: NumberFormatException => None\n  }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_66": {
        "input": "import scala.io.StdIn\nimport java.net.URLDecoder\ndef main(args: Array[String]): Unit = {\n    println(\"Enter your encoded URL parameter:\")\n    val userInput = StdIn.readLine()\n    try {\n        val decodedInput = URLDecoder.decode(userInput, \"UTF-8\")\n        println(s\"Decoded input: $decodedInput\")\n    } catch {\n        case e: IllegalArgumentException => println(\"Invalid encoding encountered.\")\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_67": {
        "input": "def safeReadInteger(input: String): Option[Int] = {\\n    try {\\n        val number = input.toInt\\n        if (number >= 0) Some(number) else None\\n    } catch {\\n        case _: NumberFormatException => None\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_68": {
        "input": "import scala.io.StdIn\nobject SecureScalaApp {\n  def main(args: Array[String]): Unit = {\n    println(\"Enter your name:\")\n    val inputName = StdIn.readLine()\n    if (isValidName(inputName)) {\n      println(s\"Hello, ${sanitizeInput(inputName)}!\")\n    } else {\n      println(\"Invalid input. Please enter a valid name.\")\n    }\n  }\n\n  def isValidName(name: String): Boolean = {\n    name.matches(\"^[a-zA-Z ]+$\")\n  }\n\n  def sanitizeInput(input: String): String = {\n    import java.net.URLEncoder\n    URLEncoder.encode(input, \"UTF-8\")\n  }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_69": {
        "input": "import scala.io.StdIn\n\ndef secureReadInt(prompt: String): Option[Int] = {\n    print(prompt)\n    try {\n        Some(StdIn.readLine().trim.toInt)\n    } catch {\n        case _: NumberFormatException => None\n    }\n}\n\nsecureReadInt(\"Enter a number: \") match {\n    case Some(number) => println(s\"You entered the number $number\")\n    case None => println(\"Invalid input. Please enter a valid integer.\")\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_70": {
        "input": "import scala.io.StdIn\nobject SafeApp {\n    def main(args: Array[String]): Unit = {\n        try {\n            print(\"Enter a number: \")\n            val input = StdIn.readLine()\n            val number = input.toInt\n            println(s\"You entered the number: $number\")\n        } catch {\n            case _: NumberFormatException =>\n                println(\"Invalid input. Please enter a valid integer.\")\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_71": {
        "input": "import scala.io.StdIn\nimport java.security.MessageDigest\nobject SecureScalaApp {\n  def main(args: Array[String]): Unit = {\n    println(\"Enter a message to hash:\")\n    val inputMessage = StdIn.readLine()\n    if (isValidInput(inputMessage)) {\n      val hashedMessage = hashString(inputMessage)\n      println(s\"Hashed Message: $hashedMessage\")\n    } else {\n      println(\"Invalid input. Please enter a non-empty string.\")\n    }\n  }\n\n  def isValidInput(input: String): Boolean = {\n    input != null && !input.trim.isEmpty\n  }\n\n  def hashString(message: String): String = {\n    val md = MessageDigest.getInstance(\"SHA-256\")\n    val hashBytes = md.digest(message.getBytes)\n    hashBytes.map(f => f\"%02x\".format(Byte.box(f))).mkString\n  }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_72": {
        "input": "class SecureUserInputHandler {\n  def getUserInput(prompt: String): Option[Int] = {\n    import scala.io.StdIn\n    print(prompt)\n    val input = StdIn.readLine()\n    try {\n      Some(Integer.parseInt(input))\n    } catch {\n      case _: NumberFormatException => None\n    }\n  }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_73": {
        "input": "import scala.io.StdIn\nobject SafeApp {\n    def main(args: Array[String]): Unit = {\n        print(\"Enter a number: \")\n        val userInput = StdIn.readLine()\n        try {\n            val number = userInput.toInt\n            println(s\"You entered the number: $number\")\n        } catch {\n            case _: NumberFormatException => println(\"Invalid input. Please enter a valid integer.\")\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_74": {
        "input": "def safeReadInt(prompt: String): Option[Int] = {\n    try {\n        val input = scala.io.StdIn.readLine(prompt)\n        Some(input.toInt)\n    } catch {\n        case _: NumberFormatException => None\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_75": {
        "input": "def secureFunction(inputString: String): Option[Int] = {\n    try {\n        val number = inputString.toInt\n        Some(number)\n    } catch {\n        case _: NumberFormatException => None\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_76": {
        "input": "def safeReadInt(prompt: String): Option[Int] = {\\n    try {\\n        val input = scala.io.StdIn.readLine(prompt)\\n        if (input.forall(_.isDigit)) Some(input.toInt) else None\\n    } catch {\\n        case _: NumberFormatException => None\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_77": {
        "input": "def secureFunction(input: String): Unit = {\n    try {\n        val number = input.toInt\n        println(s\"The number is: $number\")\n    } catch {\n        case e: NumberFormatException => println(\"Invalid input, please enter a valid integer.\")\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_78": {
        "input": "import scala.io.StdIn\nobject SecureApp {\n  def main(args: Array[String]): Unit = {\n    println(\"Enter a number:\")\n    val userInput = StdIn.readLine()\n    try {\n      val number = userInput.toInt\n      println(s\"You entered the number: $number\")\n    } catch {\n      case e: NumberFormatException =>\n        println(\"Invalid input. Please enter a valid integer.\")\n    }\n  }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_79": {
        "input": "import scala.io.StdIn\nobject SecureScalaApp {\n    def main(args: Array[String]): Unit = {\n        println(\"Enter a number:\")\n        val userInput = StdIn.readLine()\n        try {\n            val number = userInput.toInt\n            println(s\"You entered the number: $number\")\n        } catch {\n            case _: NumberFormatException =>\n                println(\"Invalid input. Please enter a valid integer.\")\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_80": {
        "input": "def safeReadInteger(prompt: String): Option[Int] = {\n    try {\n        println(prompt)\n        val input = scala.io.StdIn.readLine()\n        Some(input.toInt)\n    } catch {\n        case _: NumberFormatException => None\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_81": {
        "input": "def safeReadInt(prompt: String): Option[Int] = {\n    try {\n        println(prompt)\n        val input = scala.io.StdIn.readLine()\n        if (input.matches(\"\\\\d+\")) Some(input.toInt) else None\n    } catch {\n        case _: NumberFormatException => None\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_82": {
        "input": "import scala.io.StdIn\nobject SafeApp {\n  def main(args: Array[String]): Unit = {\n    print(\"Enter a number: \")\n    val userInput = StdIn.readLine()\n    try {\n      val number = userInput.toInt\n      println(s\"You entered the number: $number\")\n    } catch {\n      case _: NumberFormatException => println(\"Invalid input. Please enter a valid integer.\")\n    }\n  }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_83": {
        "input": "import scala.util.Try\nobject SecureScalaApp {\n  def main(args: Array[String]): Unit = {\n    val userInput = scala.io.StdIn.readLine(\"Enter a number: \")\n    validateAndProcessInput(userInput)\n  }\n\n  private def validateAndProcessInput(input: String): Unit = {\n    Try(input.toInt) match {\n      case util.Success(number) => println(s\"You entered the number: $number\")\n      case util.Failure(_) => println(\"Invalid input. Please enter a valid integer.\")\n    }\n  }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_84": {
        "input": "import scala.util.Try\\n\\ndef safeReadInt(input: String): Option[Int] = {\\n    Try(input.toInt).toOption\\n}\\n\\ndef main(args: Array[String]): Unit = {\\n    println(\\\"Enter a number:\\\")\\n    val userInput = scala.io.StdIn.readLine()\\n    safeReadInt(userInput) match {\\n        case Some(number) => println(s\\\"You entered the number: $number\\\")\\n        case None => println(\\\"Invalid input. Please enter a valid integer.\\\")\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_85": {
        "input": "import java.io.File\nimport scala.io.Source\nimport java.nio.file.Paths\ndef readFile(filePath: String): Either[String, List[String]] = {\n  val path = Paths.get(filePath).toAbsolutePath\n  if (!Files.exists(path)) return Left(s\"File does not exist: $path\")\n  try {\n    val file = new File(filePath)\n    Right(Source.fromFile(file).getLines().toList)\n  } catch {\n    case e: Exception => Left(e.getMessage)\n  }\ndef main(args: Array[String]): Unit = {\n  if (args.length != 1) {\n    println(\"Usage: scala ReadFile <file-path>\")\n    sys.exit(1)\n  }\n  val filePath = args(0)\n  readFile(filePath) match {\n    case Right(lines) => lines.foreach(println)\n    case Left(error) => println(s\"Error reading file: $error\")\n  }\n}\n",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_86": {
        "input": "import scala.io.StdIn\n\ndef safe(): Unit = {\n    print(\"Enter number: \")\n    val userInput = StdIn.readLine()\n    try {\n        val number = userInput.toInt\n        println(s\"You entered the number: $number\")\n    } catch {\n        case _: NumberFormatException => println(\"Invalid input. Please enter a valid integer.\")\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_87": {
        "input": "class SecureUserInputHandler {\\n  def readAndValidateInt(prompt: String): Option[Int] = {\\n    import scala.io.StdIn\\n    try {\\n      println(prompt)\\n      val input = StdIn.readLine()\\n      Some(input.toInt)\\n    } catch {\\n      case _: NumberFormatException => None\\n    }\\n  }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_88": {
        "input": "import scala.io.StdIn\n\ndef safeReadInt(prompt: String): Option[Int] = {\n    println(prompt)\n    try {\n        Some(StdIn.readLine().trim.toInt)\n    } catch {\n        case _: NumberFormatException => None\n    }\n}\n\nval userInput = safeReadInt(\"Enter a number: \")\nuserInput match {\n    case Some(number) => println(s\"You entered the number: $number\")\n    case None => println(\"Invalid input. Please enter a valid integer.\")\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "scala_89": {
        "input": "import scala.io.StdIn\nobject SafeScalaApp {\n  def main(args: Array[String]): Unit = {\n    print(\"Enter a number: \")\n    val input = StdIn.readLine()\n    try {\n      val number = input.toInt\n      println(s\"You entered the number: $number\")\n    } catch {\n      case _: NumberFormatException => println(\"Invalid input. Please enter a valid integer.\")\n    }\n  }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_0": {
        "input": "use std::process::Command;\n\nfn main() {\n    let user_input = \"echo hello\"; // Simulate user input\n    Command::new(\"sh\")\n        .arg(\"-c\")\n        .arg(user_input)\n        .spawn()\n        .expect(\"Failed to execute command\");\n}",
        "output": {
            "score": 7.2,
            "type": "Privilege Escalation"
        }
    },
    "rust_1": {
        "input": "use std::fs;\n\nfn read_file(path: &str) -> Result<String, std::io::Error> {\n    fs::read_to_string(path)\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "rust_2": {
        "input": "use std::process::Command;\n\nfn execute_command(user_input: &str) {\n    let output = Command::new(\"sh\")\n        .arg(\"-c\")\n        .arg(user_input)\n        .output()\n        .expect(\"Failed to execute command\");\n    println!(\"Output: {}\", String::from_utf8_lossy(&output.stdout));\n}\n\nfn main() {\n    let user_input = \"echo Hello, World!\"; // Simulated user input\n    execute_command(user_input);\n}",
        "output": {
            "score": 7.5,
            "type": "Privilege Escalation"
        }
    },
    "rust_3": {
        "input": "use std::process::Command;\n\nstruct UnsafeExecutor {\n    command: String,\n}\n\nimpl UnsafeExecutor {\n    fn new(cmd: &str) -> Self {\n        UnsafeExecutor {\n            command: cmd.to_string(),\n        }\n    }\n\n    fn execute(&self) {\n        Command::new(\"sh\")\n               .arg(&self.command)\n               .output()\n               .expect(\"Failed to execute command\");\n    }\n}\n\nfn main() {\n    let executor = UnsafeExecutor::new(\"echo Hello, world!\");\n    executor.execute();\n}",
        "output": {
            "score": 8.2,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "rust_4": {
        "input": "use std::io;\n\nfn main() {\n    println!(\"Enter your name:\");\n    let mut input = String::new();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    println!(\"Hello, {}!\", input);\n}",
        "output": {
            "score": 4.3,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "rust_5": {
        "input": "fn get_user_by_id(id: &str) -> String {\n    let query = format!(\"SELECT * FROM users WHERE id = {}\", id);\n    // Simulate database interaction\n    query\n}",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "rust_6": {
        "input": "use std::io::{self, Write};\n\nfn main() {\n    println!(\"Enter command to execute:\");\n    io::stdout().flush().unwrap();\n    let mut input = String::new();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let output = std::process::Command::new(\"sh\")\n        .arg(\"-c\")\n        .arg(input.trim())\n        .output()\n        .expect(\"Failed to execute command\");\n    println!(\"Output: {}\", String::from_utf8_lossy(&output.stdout));\n}",
        "output": {
            "score": 9.0,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "rust_7": {
        "input": "fn main() {\n    use std::fs;\n    fs::write(\"/etc/passwd\", \"attacker:x:0:0::/:/bin/bash\\\n\").expect(\"Failed to write file\");\n}",
        "output": {
            "score": 7.5,
            "type": "Privilege Escalation"
        }
    },
    "rust_8": {
        "input": "use std::process::Command;\n\nfn execute_user_command(user_input: &str) {\n    let parts: Vec<&str> = user_input.split_whitespace().collect();\n    if !parts.is_empty() {\n        let mut command = Command::new(parts[0]);\n        for arg in &parts[1..] {\n            command.arg(arg);\n        }\n        match command.output() {\n            Ok(output) => println!(\"{}\", String::from_utf8_lossy(&output.stdout)),\n            Err(e) => eprintln!(\"Failed to execute command: {}\", e),\n        }\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Command Injection"
        }
    },
    "rust_9": {
        "input": "use actix_web::{web, App, HttpResponse, HttpServer};\n\nasync fn transfer_funds(data: web::Form<TransferData>) -> HttpResponse {\n    // Simulate transferring funds to another user\n    let _ = format!(\"Transferring {} funds to user {}\", data.amount, data.to_user);\n    HttpResponse::Ok().body(\"Funds transferred successfully\")\n}\n\n#[derive(serde::Deserialize)]\nstruct TransferData {\n    amount: String,\n    to_user: String,\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| {\n        App::new()\n            .route(\"/transfer\", web::post().to(transfer_funds))\n    })\n    .bind(\"127.0.0.1:8080\")?\n    .run()\n    .await\n}",
        "output": {
            "score": 6.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "rust_10": {
        "input": "use std::process::Command;\n\nfn execute_command(cmd: &str) -> String {\n    let output = Command::new(\"sh\")\n        .arg(&[\"-c\", cmd].concat())\n        .output()\n        .expect(\"failed to execute process\");\n    String::from_utf8_lossy(&output.stdout).to_string()\n}\n\nfn main() {\n    let user_input = std::env::args().nth(1).unwrap_or(String::new());\n    println!(\"Command output:\\n{}\", execute_command(&user_input));\n}",
        "output": {
            "score": 7.5,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "rust_11": {
        "input": "use actix_web::{web, App, HttpResponse, HttpServer};\n\nasync fn change_email(data: web::Form<ChangeEmailData>) -> HttpResponse {\n    // Simulate changing the user's email address without CSRF protection\n    format!(\"Email changed to: {}\", data.email)\n}\n\n#[derive(serde::Deserialize)]\nstruct ChangeEmailData {\n    email: String,\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| {\n        App::new()\n            .route(\"/change-email\", web::post().to(change_email))\n    })\n    .bind(\"127.0.0.1:8080\")?\n    .run()\n    .await\n}",
        "output": {
            "score": 6.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "rust_12": {
        "input": "fn login(username: &str, password: &str) -> bool {\n    username == \"admin\" && password == \"password123\"\n}",
        "output": {
            "score": 6.5,
            "type": "Broken Authentication"
        }
    },
    "rust_13": {
        "input": "use std::fs::File;\nuse std::io::{self, Read};\n\nfn read_file(path: &str) -> io::Result<String> {\n    let mut file = File::open(path)?;\n    let mut contents = String::new();\n    file.read_to_string(&mut contents)?;\n    Ok(contents)\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "rust_14": {
        "input": "use std::process::Command;\n\nstruct UnsafeExecutor {\n    command: String,\n}\n\nimpl UnsafeExecutor {\n    fn new(cmd: &str) -> Self {\n        UnsafeExecutor { command: cmd.to_string() }\n    }\n\n    fn execute(&self) {\n        let parts: Vec<&str> = self.command.split_whitespace().collect();\n        let mut child = Command::new(parts[0])\n            .args(&parts[1..])\n            .spawn()\n            .expect(\"Failed to execute command\");\n\n        let _output = child.wait_with_output().expect(\"Failed to wait on child\");\n    }\n}",
        "output": {
            "score": 8.2,
            "type": "Command Injection"
        }
    },
    "rust_15": {
        "input": "pub struct SafeString {\n    buffer: [u8; 16],\n}\n\nimpl SafeString {\n    pub fn new() -> Self {\n        SafeString { buffer: [0; 16] }\n    }\n\n    pub unsafe fn set(&mut self, data: &[u8]) {\n        std::ptr::copy_nonoverlapping(data.as_ptr(), self.buffer.as_mut_ptr(), data.len());\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Buffer Overflow"
        }
    },
    "rust_17": {
        "input": "use serde_json;\n\nfn main() {\n    let json_data = String::from(\"{\\\"typ\\\":\\\"PicklePayload\\\", \\\"value\\\":\\\"O:std::fs::File:\\x0a:\\x00:\\x13inner\\nRtJNSA5OS4xLjAuMC9mcy9GaWxlU3RyZWFtOmo6cHJpdmF0ZV9maWxlc3RyZWFtX2lubmVyOjo6cGk6cmlnaHRzX3Jvb3Q6OkJ1aWx0aW5nUHJvamVjdDogTGl0RmlsZXN0cmVhbToxLjAuMC9saXRfZmlsZXN0cmVhbTpGaWxlU3RyZWFtOjIuNi4wL2ZpbGVzdHJlYW06SGFuZGxlOlJhbi9mcy9MaXRFbnRyaW5lOjEwLjAuMC9naXRsOjAuaGlkZV9zcmMvZmlsZXN0cmVhbTovc291cmNlczogQWJzdHJhY3RDb250ZW50cy9maWxlc3RyZWFtL1BhdGg6NS44LjAvaGlkZV9zcmMvZmlsZXN0cmVhbTovcGF0aDogcGF0aDozLjAuMC9mb2xsb3c6cHJpdmF0ZV9mYWN0b3J5OjpibG9ja19pdGVyYXRvcjo6dW5kcmVmbCBvOjEwLjEwLjAvaGlkZV9zcmMvZmlsZXN0cmVhbTovcGF0aDogcnVuX21hbnFnZWQ6cHJpdmF0ZV9mYWN0b3J5OjpibG9ja19pdGVyYXRvcjo6dW5kcmVmIHRwOiJmcy9GaWxlU3RyZWFtOjEwLjAuMC9maWxlc3RyZWFtOkhhbmRsZToxMC4xMC4wL2dpdDogMS4wLjAvZmlsZXN0cmVhbTovcGF0aDogcnVuX21hbnFnZWQ6cHJpdmF0ZV9mYWN0b3J5OjpibG9ja19pdGVyYXRvcjo6dW5kcmVmIHRwOiJmcy9GaWxlU3RyZWFtOjEwLjAuMC9maWxlc3RyZWFtOkhhbmRsZToxMC4xMC4wL2dpdDogMS4wLjAvZmlsZXN0cmVhbTovcGF0aDogcnVuX21hbnFnZWQ6cHJpdmF0ZV9mYWN0b3J5OjpibG9ja19pdGVyYXRvcjo6dW5kcmVmIHRwOiJmbzogL3RtcC9xdWlja19hZ2VudCI=\\\"}\");\n    let deserialized: serde_json::Value = serde_json::from_str(&json_data).unwrap();\n    println!(\"Deserialized: {:?}\", deserialized);\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "rust_18": {
        "input": "use bincode::{deserialize, serialized_size};\nfn deserialize_data(data: &[u8]) -> Result<(), Box<dyn std::error::Error>> {\n    let _deserialized: MyStruct = deserialize(data)?;\n    Ok(())\n}\npub struct MyStruct {\n    pub value: String,\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "rust_19": {
        "input": "use std::process::Command;\n\nfn main() {\n    let user_input = String::from(\"sudo rm -rf /\");\n    Command::new(\"sh\")\n        .arg(\"-c\")\n        .arg(user_input)\n        .output()\n        .expect(\"Failed to execute command\");\n}",
        "output": {
            "score": 7.5,
            "type": "Privilege Escalation"
        }
    },
    "rust_20": {
        "input": "use serde_json;\n\nfn deserialize_data(data: &str) -> Result<(), Box<dyn std::error::Error>> {\n    let deserialized: serde_json::Value = serde_json::from_str(data)?;\n    Ok(())\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "rust_21": {
        "input": "fn vulnerable_query(user_input: &str) -> String {\n    format!(\"SELECT * FROM users WHERE name = '{}'\", user_input)\n}",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "rust_22": {
        "input": "use std::process::Command;\n\nstruct Executor {\n    command: String,\n}\n\nimpl Executor {\n    fn new(command: String) -> Executor {\n        Executor { command }\n    }\n\n    fn run(&self) {\n        let parts: Vec<&str> = self.command.split_whitespace().collect();\n        if let Some(&program) = parts.first() {\n            let mut cmd = Command::new(program);\n            for arg in &parts[1..] {\n                cmd.arg(arg);\n            }\n            match cmd.output() {\n                Ok(_) => println!(\"Command executed successfully.\"),\n                Err(e) => eprintln!(\"Failed to execute command: {}\", e),\n            }\n        }\n    }\n}\n\nfn main() {\n    let user_input = String::from(\"echo hello; rm -rf /\"); // Simulated user input\n    let executor = Executor::new(user_input);\n    executor.run();\n}",
        "output": {
            "score": 8.5,
            "type": "Command Injection"
        }
    },
    "rust_23": {
        "input": "use std::collections::HashMap;\n\nstruct User {\n    username: String,\n    password_hash: u64,\n}\n\nfn hash_password(password: &str) -> u64 {\n    let mut hash = 0;\n    for byte in password.bytes() {\n        hash ^= (hash << 5) + ((hash >> 27) ^ byte as u64);\n    }\n    hash\n}\n\nfn main() {\n    let mut users: HashMap<String, User> = HashMap::new();\n    users.insert(\n        \"admin\".to_string(),\n        User {\n            username: \"admin\".to_string(),\n            password_hash: hash_password(\"securepassword123\"),\n        },\n    );\n\n    let input_username = \"admin\";\n    let input_password = \"securepassword123\";\n    if let Some(user) = users.get(input_username) {\n        if user.password_hash == hash_password(input_password) {\n            println!(\"Login successful!\");\n        } else {\n            println!(\"Invalid password.\");\n        }\n    } else {\n        println!(\"User not found.\");\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "rust_24": {
        "input": "use std::collections::HashMap;\n\nstruct UserAuth {\n    users: HashMap<String, String>,\n}\n\nimpl UserAuth {\n    fn new() -> Self {\n        let mut auth = UserAuth { users: HashMap::new() };\n        auth.users.insert(\"admin\".to_string(), \"securepassword123\".to_string());\n        auth\n    }\n\n    fn login(&self, username: &str, password: &str) -> bool {\n        self.users.get(username).map_or(false, |pwd| pwd == password)\n    }\n}\n\nfn main() {\n    let auth = UserAuth::new();\n    let user_input_username = \"admin\";\n    let user_input_password = std::env::var(\"PASSWORD\").unwrap_or_default();\n    if auth.login(user_input_username, &user_input_password) {\n        println!(\"Access granted!\");\n    } else {\n        println!(\"Access denied.\");\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "rust_25": {
        "input": "use actix_web::{web, App, HttpResponse, HttpServer};\n\nasync fn index() -> HttpResponse {\n    HttpResponse::Ok().body(\"Hello world!\")\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| {\n        App::new()\n            .route(\"/\", web::get().to(index))\n    })\n    .bind(\"127.0.0.1:8080\")?\n    .run()\n    .await\n}",
        "output": {
            "score": 3.5,
            "type": "Missing Security Headers"
        }
    },
    "rust_26": {
        "input": "use std::env;\nuse std::process;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n    if args.len() > 1 {\n        let url = &args[1];\n        println!(\"Redirecting to: {}\");\n        process::Command::new(\"xdg-open\").arg(url).spawn().unwrap();\n    }\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "rust_27": {
        "input": "use reqwest::blocking::get;\n\nstruct Fetcher {\n    url: String,\n}\n\nimpl Fetcher {\n    fn new(url: String) -> Self {\n        Fetcher { url }\n    }\n\n    fn fetch(&self) -> Result<String, reqwest::Error> {\n        let response = get(&self.url)?;\n        Ok(response.text()?)\n    }\n}",
        "output": {
            "score": 6.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "rust_28": {
        "input": "use actix_web::{web, App, HttpResponse, HttpServer};\n\nstruct VulnerableApp;\n\nimpl VulnerableApp {\n    async fn handle_request(&self) -> HttpResponse {\n        HttpResponse::Ok().body(\"Hello, world!\")\n    }\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| App::new()\n        .route(\"/\", web::get().to(VulnerableApp.handle_request)))\n        .bind(\"127.0.0.1:8080\")?\n        .run()\n        .await\n}",
        "output": {
            "score": 6.5,
            "type": "Missing Security Headers"
        }
    },
    "rust_29": {
        "input": "use std::sync::{Arc, Mutex};\n\nfn unsafe_function(data: Arc<Mutex<String>>) {\n    let mut value = data.lock().unwrap();\n    *value += \"Some operation\";\n    drop(value);\n}",
        "output": {
            "score": 4.2,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "rust_30": {
        "input": "use actix_web::cookie::{Cookie, SameSite};\nuse actix_web::web;\nuse actix_web::HttpResponse;\n\nasync fn set_session_cookie(user_id: String) -> HttpResponse {\n    let cookie = Cookie::build(\"user_id\", user_id)\n        .path(\"\")\n        .same_site(SameSite::Strict)\n        .secure(true)\n        .http_only(true)\n        .finish();\n\n    HttpResponse::Ok()\n        .cookie(cookie)\n        .body(\"\")\n}",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "rust_31": {
        "input": "use std::fs;\nuse std::io;\n\nfn read_file(path: &str) -> io::Result<String> {\n    fs::read_to_string(path)\n}",
        "output": {
            "score": 5.3,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "rust_32": {
        "input": "#[derive(Serialize)]\nstruct User {\n    name: String,\n    email: String,\n}\n\nfn main() {\n    let user = User {\n        name: String::from(\"Alice\"),\n        email: String::from(\"alice@example.com\"),\n    };\n    println!(\"User details: {{\\\"name\\\": \\\"{}\\\", \\\"email\\\": \\\"{}\\\"}}\", user.name, user.email);\n}",
        "output": {
            "score": 2.3,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "rust_33": {
        "input": "fn set_session_id(user_id: &str) -> String {\n    format!(\"session_{}\", user_id)\n}",
        "output": {
            "score": 3.5,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "rust_34": {
        "input": "use reqwest::blocking::get;\n\nstruct Fetcher {\n    url: String,\n}\n\nimpl Fetcher {\n    fn new(url: &str) -> Fetcher {\n        Fetcher { url: url.to_string() }\n    }\n\n    fn fetch(&self) -> Result<String, reqwest::Error> {\n        let response = get(&self.url)?;\n        response.text()\n    }\n}\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let user_input = \"http://example.com\"; // Simulate user input\n    let fetcher = Fetcher::new(user_input);\n    println!(\"Fetched content: {}\", fetcher.fetch()?.trim());\n    Ok(())\n}",
        "output": {
            "score": 7.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "rust_35": {
        "input": "pub struct Button {\n    pub label: String,\n    pub onclick: fn(),\n}\n\nimpl Button {\n    pub fn new(label: &str, onclick: fn()) -> Self {\n        Button {\n            label: label.to_string(),\n            onclick,\n        }\n    }\n\n    pub fn render(&self) {\n        println!(\"<button onclick=\\\"{}\\\">{}</button>\", self.onclick as *const (), self.label);\n    }\n}",
        "output": {
            "score": 3.0,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "rust_37": {
        "input": "use std::io::{self, Write};\n\nfn main() {\n    println!(\"Enter your name:\");\n    io::stdout().flush().unwrap();\n    let mut input = String::new();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    println!(\"Hello, {}!\", input);\n}",
        "output": {
            "score": 5.3,
            "type": "HTTP Response Splitting"
        }
    },
    "rust_38": {
        "input": "use warp::Filter;\n\n#[tokio::main]\nasync fn main() {\n    let routes = warp::path(\"hello\").map(|| \"Hello, World!\");\n    warp::serve(routes)\n        .run(([127, 0, 0, 1], 3030))\n        .await;\n}",
        "output": {
            "score": 6.5,
            "type": "Missing Security Headers"
        }
    },
    "rust_39": {
        "input": "use actix_web::{web, App, HttpResponse, HttpServer};\n\nasync fn index(_req: web::HttpRequest) -> HttpResponse {\n    HttpResponse::Ok().body(\"Hello world!\")\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| App::new().route(\"/\", web::get().to(index)))\n        .bind(\"127.0.0.1:8080\")?\n        .run()\n        .await\n}",
        "output": {
            "score": 4.3,
            "type": "Missing Security Headers"
        }
    },
    "rust_40": {
        "input": "use std::fs;\n\nfn read_file(path: &str) -> Result<String, std::io::Error> {\n    let content = fs::read_to_string(path)?;\n    Ok(content)\n}\n\nfn main() {\n    let path = \"secret.txt\";\n    match read_file(path) {\n        Ok(content) => println!(\"File content: {}\", content),\n        Err(e) => eprintln!(\"Error reading file: {}\", e),\n    }\n}",
        "output": {
            "score": 4.2,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "rust_41": {
        "input": "fn race_condition() {\n    let mut shared_data = 0;\n    let handle1 = std::thread::spawn(move || {\n        for _ in 0..1000 {\n            shared_data += 1;\n        }\n    });\n    let handle2 = std::thread::spawn(move || {\n        for _ in 0..1000 {\n            shared_data -= 1;\n        }\n    });\n    handle1.join().unwrap();\n    handle2.join().unwrap();\n}",
        "output": {
            "score": 5.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "rust_42": {
        "input": "struct FileReader {\n    file_path: String,\n}\n\nimpl FileReader {\n    fn read_file(&self) -> Result<String, std::io::Error> {\n        use std::fs;\n        fs::read_to_string(self.file_path.clone())\n    }\n}",
        "output": {
            "score": 4.3,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "rust_43": {
        "input": "use actix_web::{web, App, HttpResponse, HttpServer};\n\nasync fn redirect_handler(query: web::Query<HashMap<String, String>>) -> HttpResponse {\n    if let Some(url) = query.get(\"url\") {\n        HttpResponse::Found().header(\"Location\", url).finish()\n    } else {\n        HttpResponse::BadRequest().body(\"\")\n    }\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| {\n        App::new()\n            .route(\"/redirect\", web::get().to(redirect_handler))\n    })\n    .bind(\"127.0.0.1:8080\")?\n    .run()\n    .await\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "rust_44": {
        "input": "use std::net::TcpListener;\nuse std::io::{Read, Write};\n\nfn handle_client(mut stream: std::net::TcpStream) {\n    let mut buffer = [0; 512];\n    stream.read(&mut buffer).unwrap();\n    let request = String::from_utf8_lossy(&buffer);\n    if let Some(redir) = request.split_whitespace().nth(1) {\n        if redir.contains(\"redirect=\") {\n            let url = &redir[9..];\n            let response = format!(\"HTTP/1.1 302 Found\\r\\nLocation: {}\\r\\n\\r\\n\", url);\n            stream.write(response.as_bytes()).unwrap();\n        }\n    }\n}\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n    for stream in listener.incoming() {\n        handle_client(stream.unwrap());\n    }\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "rust_45": {
        "input": "use actix_web::{web, App, HttpResponse, HttpServer};\n\nasync fn index() -> HttpResponse {\n    HttpResponse::Ok().body(\"Hello World!\")\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| {\n        App::new()\n            .route(\"/\", web::get().to(index))\n    })\n    .bind(\"127.0.0.1:8080\")?\n    .run()\n    .await\n}",
        "output": {
            "score": 4.0,
            "type": "Missing Security Headers"
        }
    },
    "rust_46": {
        "input": "fn main() {\n    let mut buffer = String::new();\n    std::io::stdin().read_line(&mut buffer).expect(\"Failed to read line\");\n    if buffer.trim() == \"stop\" {\n        loop {}\n    }\n}",
        "output": {
            "score": 3.5,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "rust_47": {
        "input": "use std::net::TcpListener;\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n    for stream in listener.incoming() {\n        let _stream = stream.unwrap();\n        // Handle connection here without setting security headers\n    }\n}",
        "output": {
            "score": 5.4,
            "type": "Missing Security Headers"
        }
    },
    "rust_48": {
        "input": "pub struct Redirector {\n    url: String,\n}\n\nimpl Redirector {\n    pub fn new(url: &str) -> Self {\n        Redirector { url: url.to_string() }\n    }\n\n    pub fn redirect(&self) {\n        println!(\"Redirecting to: {}\", self.url);\n    }\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "rust_49": {
        "input": "use std::process::Command;\n\nfn fetch_url(url: &str) -> Result<String, std::io::Error> {\n    let output = Command::new(\"curl\")\n        .arg(url)\n        .output()\n        .expect(\"Failed to execute command\");\n\n    if output.status.success() {\n        Ok(String::from_utf8_lossy(&output.stdout).to_string())\n    } else {\n        Err(std::io::Error::new(std::io::ErrorKind::Other, \"Command failed\"))\n    }\n}",
        "output": {
            "score": 6.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "rust_50": {
        "input": "use std::io;\n\nfn read_number() -> Result<i32, String> {\n    let mut input = String::new();\n    io::stdin().read_line(&mut input).map_err(|e| e.to_string())?;\n    input.trim().parse::<i32>().map_err(|e| e.to_string())\n}\n\nfn main() {\n    match read_number() {\n        Ok(number) => println!(\"You entered: {}\", number),\n        Err(e) => println!(\"Error reading number: {}\", e),\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_51": {
        "input": "use std::io;\n\nfn main() {\n    println!(\"Enter a number:\");\n    let mut input = String::new();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    match input.trim().parse::<i32>() {\n        Ok(number) => println!(\"You entered: {}\", number),\n        Err(_) => println!(\"Please enter a valid integer.\")\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_52": {
        "input": "use std::io::{self, Write};\n\nfn get_user_input() -> io::Result<String> {\n    print!(\"Enter your name: \");\n    io::stdout().flush()?;\n    let mut input = String::new();\n    io::stdin().read_line(&mut input)?;\n    Ok(input.trim().to_string())\n}\n\nfn main() -> io::Result<()> {\n    match get_user_input() {\n        Ok(name) => println!(\"Hello, {}!\", name),\n        Err(e) => eprintln!(\"Failed to read line: {}\", e),\n    }\n    Ok(())\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_53": {
        "input": "fn safe_read_number() -> Result<i32, Box<dyn std::error::Error>> {\n    use std::io;\n\n    println!(\"Enter a number:\");\n    let mut input = String::new();\n    io::stdin().read_line(&mut input)?;\n\n    let num: i32 = match input.trim().parse() {\n        Ok(n) => n,\n        Err(_) => return Err(\"Please enter a valid integer\".into()),\n    };\n\n    println!(\"You entered: {}\", num);\n    Ok(num)\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_54": {
        "input": "use std::io;\n\nfn main() {\n    println!(\"Enter a number:\");\n    let mut input = String::new();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    match input.trim().parse::<i32>() {\n        Ok(number) => println!(\"You entered the number: {}\", number),\n        Err(_) => println!(\"Please enter a valid integer.\"),\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_55": {
        "input": "fn read_and_validate_number() -> Result<i32, &'static str> {\n    use std::io;\n\n    println!(\"Enter a number:\");\n    let mut input = String::new();\n\n    io::stdin().read_line(&mut input).map_err(|_| \"Failed to read line\")?;\n\n    let trimmed_input = input.trim();\n    trimmed_input.parse::<i32>().map_err(|_| \"Please enter a valid integer.\")\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_56": {
        "input": "use std::io::{self, Write};\n\nstruct User {\n    name: String,\n    age: u8,\n}\n\nimpl User {\n    fn new(name: &str, age: u8) -> Result<Self, &'static str> {\n        if name.is_empty() {\n            return Err(\"Name cannot be empty\");\n        }\n        Ok(User {\n            name: name.to_string(),\n            age,\n        })\n    }\n\n    fn display(&self) {\n        println!(\"User Name: {}, Age: {}\", self.name, self.age);\n    }\n}\n\nfn main() -> io::Result<()> {\n    print!(\"Enter your name: \");\n    io::stdout().flush()?;\n    let mut name = String::new();\n    io::stdin().read_line(&mut name)?;\n    let name = name.trim();\n\n    print!(\"Enter your age: \");\n    io::stdout().flush()?;\n    let mut age_input = String::new();\n    io::stdin().read_line(&mut age_input)?;\n    let age: u8 = match age_input.trim().parse() {\n        Ok(age) => age,\n        Err(_) => return Err(io::Error::new(io::ErrorKind::InvalidInput, \"Please enter a valid age\")),\n    };\n\n    match User::new(name, age) {\n        Ok(user) => user.display(),\n        Err(e) => println!(\"Error: {}\", e),\n    }\n\n    Ok(())\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_57": {
        "input": "fn safe_read_number() -> Result<i32, std::num::ParseIntError> {\n    use std::io;\n\n    println!(\"Enter a number:\");\n    let mut input = String::new();\n    io::stdin().read_line(&mut input)?;\n\n    input.trim().parse()\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_59": {
        "input": "use std::io;\n\nfn main() {\n    println!(\"Enter a number:\");\n    let mut input = String::new();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let trimmed_input = input.trim();\n    match trimmed_input.parse::<i32>() {\n        Ok(number) => println!(\"You entered: {}\", number),\n        Err(_) => println!(\"Please enter a valid integer.\"),\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_60": {
        "input": "use std::io;\n\nstruct User {\n    name: String,\n    age: u32,\n}\n\nimpl User {\n    fn new(name: &str, age: &str) -> Result<User, &'static str> {\n        if name.is_empty() || !age.chars().all(char::is_numeric) {\n            return Err(\"Invalid input\");\n        }\n        Ok(User {\n            name: name.to_string(),\n            age: age.parse().unwrap_or(0),\n        })\n    }\n}\n\nfn main() {\n    let mut name = String::new();\n    let mut age = String::new();\n    println!(\"Enter your name:\");\n    io::stdin()\n        .read_line(&mut name)\n        .expect(\"Failed to read line\");\n    println!(\"Enter your age:\");\n    io::stdin()\n        .read_line(&mut age)\n        .expect(\"Failed to read line\");\n\n    match User::new(name.trim(), age.trim()) {\n        Ok(user) => println!(\"User created: {{ name: {}, age: {} }}\", user.name, user.age),\n        Err(e) => println!(\"Error: {}\", e),\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_61": {
        "input": "use std::io;\n\nstruct User {\n    name: String,\n    age: u32,\n}\n\nimpl User {\n    fn new(name: &str, age: u32) -> Result<Self, &'static str> {\n        if name.is_empty() || age == 0 {\n            return Err(\"Invalid input\");\n        }\n        Ok(User {\n            name: name.to_string(),\n            age,\n        })\n    }\n\n    fn display(&self) {\n        println!(\"User Name: {}, Age: {}\", self.name, self.age);\n    }\n}\n\nfn main() {\n    let mut input = String::new();\n    println!(\"Enter user name:\");\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let name = input.trim();\n\n    println!(\"Enter user age:\");\n    input.clear();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let age: u32 = match input.trim().parse() {\n        Ok(num) => num,\n        Err(_) => {\n            println!(\"Please enter a valid number for age.\");\n            return;\n        }\n    };\n\n    match User::new(name, age) {\n        Ok(user) => user.display(),\n        Err(e) => println!(\"Error: {}\", e),\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_62": {
        "input": "fn safe_read_number() -> Result<i32, std::num::ParseIntError> {\n    use std::io;\n\n    println!(\"Enter a number:\");\n    let mut input = String::new();\n    io::stdin().read_line(&mut input)?;\n\n    let trimmed_input = input.trim();\n    trimmed_input.parse::<i32>()\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_63": {
        "input": "use std::io;\n\nfn main() {\n    println!(\"Enter a number:\");\n    let mut input = String::new();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let trimmed_input = input.trim();\n    match trimmed_input.parse::<i32>() {\n        Ok(number) => println!(\"You entered: {}\", number),\n        Err(_) => println!(\"Please enter a valid integer.\"),\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_64": {
        "input": "fn read_and_validate_number() -> Result<i32, std::num::ParseIntError> {\n    use std::io::{self, Write};\n\n    print!(\"Enter a number: \");\n    io::stdout().flush().unwrap();\n\n    let mut input = String::new();\n    io::stdin().read_line(&mut input)?;\n\n    input.trim().parse()\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_65": {
        "input": "use std::fs;\nuse std::path::Path;\n\nstruct Config {\n    file_path: String,\n}\n\nimpl Config {\n    fn new(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 2 {\n            return Err(\"not enough arguments\");\n        }\n        let file_path = args[1].clone();\n        Ok(Config { file_path })\n    }\n\n    fn read_file(&self) -> Result<String, Box<dyn std::error::Error>> {\n        if !Path::new(&self.file_path).exists() {\n            return Err(\"file does not exist\".into());\n        }\n        fs::read_to_string(&self.file_path)?;\n        Ok(String::from(\"File read successfully\"))\n    }\n}\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let args: Vec<String> = std::env::args().collect();\n    let config = Config::new(&args)?;\n    println!(\"Reading file: {}\", config.file_path);\n    let content = config.read_file()?;\n    println!(\"Content: {}\", content);\n    Ok(())\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_66": {
        "input": "use std::io;\n\nfn main() {\n    println!(\"Enter a number:\");\n    let mut input = String::new();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    match input.trim().parse::<i32>() {\n        Ok(number) => println!(\"You entered: {}\", number),\n        Err(_) => println!(\"Please enter a valid integer.\"),\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_67": {
        "input": "use std::fs::File;\nuse std::io::{self, Read};\n\nfn read_file_contents(filename: &str) -> io::Result<String> {\n    let mut file = File::open(filename)?;\n    let mut contents = String::new();\n    file.read_to_string(&mut contents)?;\n    Ok(contents)\n}\n\nfn main() {\n    println!(\"Enter the filename to read:\");\n    let mut input = String::new();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let filename = input.trim();\n    match read_file_contents(filename) {\n        Ok(contents) => println!(\"File contents:\\n{}\", contents),\n        Err(e) => eprintln!(\"Error reading file: {}\", e),\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_68": {
        "input": "use std::io;\n\nfn main() {\n    let mut input = String::new();\n    println!(\"Enter a number:\");\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    match input.trim().parse::<i32>() {\n        Ok(number) => println!(\"You entered: {}\", number),\n        Err(_) => println!(\"Please enter a valid integer.\"),\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_69": {
        "input": "use std::io::{self, Write};\n\nfn main() {\n    print!(\"Enter a number: \");\n    io::stdout().flush().unwrap();\n\n    let mut input = String::new();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n\n    match input.trim().parse::<i32>() {\n        Ok(number) => println!(\"You entered: {}\", number),\n        Err(_) => eprintln!(\"Please enter a valid integer.\")\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_70": {
        "input": "use std::io;\n\nfn main() {\n    println!(\"Enter a number:\");\n    let mut input = String::new();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let number: u32 = match input.trim().parse() {\n        Ok(num) => num,\n        Err(_) => {\n            println!(\"Please enter a valid number.\");\n            return;\n        }\n    };\n    println!(\"You entered the number: {}\", number);\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_71": {
        "input": "use std::fs::File;\nuse std::io::{self, Read};\npub struct SafeReader {\n    file_path: String,\n}\nimpl SafeReader {\n    pub fn new(file_path: &str) -> Self {\n        SafeReader {\n            file_path: file_path.to_string(),\n        }\n    }\n\n    pub fn read_file(&self) -> io::Result<String> {\n        let mut content = String::new();\n        let mut file = File::open(&self.file_path)?;\n        file.read_to_string(&mut content)?;\n        Ok(content)\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_72": {
        "input": "use std::io;\n\nfn main() {\n    println!(\"Enter a number:\");\n    let mut input = String::new();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let trimmed_input = input.trim();\n    match trimmed_input.parse::<i32>() {\n        Ok(number) => println!(\"You entered: {}\", number),\n        Err(_) => println!(\"Please enter a valid integer.\"),\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_73": {
        "input": "fn read_and_validate_number() -> Result<i32, std::io::Error> {\n    use std::io;\n\n    println!(\"Enter a number:\");\n    let mut input = String::new();\n    io::stdin().read_line(&mut input)?;\n\n    match input.trim().parse::<i32>() {\n        Ok(num) => Ok(num),\n        Err(_) => Err(std::io::Error::new(std::io::ErrorKind::InvalidInput, \"Please enter a valid integer.\")),\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_74": {
        "input": "use std::fs;\nuse std::io::{self, Read};\npub struct SecureFileReader {\n    file_path: String,\n}\n\nimpl SecureFileReader {\n    pub fn new(path: &str) -> Self {\n        SecureFileReader { file_path: path.to_string() }\n    }\n\n    pub fn read_file(&self) -> io::Result<String> {\n        let mut content = String::new();\n        fs::File::open(&self.file_path)?.read_to_string(&mut content)?;\n        Ok(content)\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_75": {
        "input": "use std::io;\n\nfn main() {\n    let mut input = String::new();\n    println!(\"Enter a number:\");\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    match input.trim().parse::<i32>() {\n        Ok(number) => println!(\"You entered the number: {}\", number),\n        Err(_) => println!(\"Please enter a valid integer.\"),\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_76": {
        "input": "use std::io;\n\nfn main() {\n    let mut input = String::new();\n    println!(\"Enter a number:\");\n    io::stdin()\n        .read_line(&mut input)\n        .expect(\"Failed to read line\");\n\n    let trimmed_input = input.trim();\n    match trimmed_input.parse::<i32>() {\n        Ok(number) => println!(\"You entered the number: {}\", number),\n        Err(_) => println!(\"Please enter a valid integer.\"),\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_77": {
        "input": "fn main() {\n    use std::io;\n\n    println!(\"Enter a number:\");\n    let mut input = String::new();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n\n    let trimmed_input = input.trim();\n    match trimmed_input.parse::<i32>() {\n        Ok(number) => println!(\"You entered the number: {}\", number),\n        Err(_) => println!(\"Please enter a valid integer.\")\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_78": {
        "input": "use std::fmt;\n\nstruct User {\n    name: String,\n    age: u8,\n}\n\nimpl User {\n    fn new(name: &str, age: u8) -> Result<Self, &'static str> {\n        if name.is_empty() {\n            return Err(\"Name cannot be empty\");\n        }\n        Ok(User { name: name.to_string(), age })\n    }\n}\n\nimpl fmt::Display for User {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"User(name: {}, age: {})\", self.name, self.age)\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_79": {
        "input": "use std::io;\n\nfn main() {\n    let mut input = String::new();\n    println!(\"Enter a number:\");\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    match input.trim().parse::<i32>() {\n        Ok(number) => println!(\"You entered: {}\", number),\n        Err(_) => println!(\"Please enter a valid integer.\"),\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_80": {
        "input": "use std::io;\n\nfn main() {\n    println!(\"Enter a number:\");\n    let mut input = String::new();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let trimmed_input = input.trim();\n    if let Ok(number) = trimmed_input.parse::<i32>() {\n        println!(\"You entered: {}\", number);\n    } else {\n        eprintln!(\"Please enter a valid integer.\");\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_81": {
        "input": "use std::io;\n\nfn get_user_input() -> Result<String, io::Error> {\n    let mut input = String::new();\n    io::stdin().read_line(&mut input)?;\n    Ok(input.trim().to_string())\n}\n\nfn safe_function() -> Result<(), Box<dyn std::error::Error>> {\n    println!(\"Enter a number:\");\n    let user_input = get_user_input()?;\n    match user_input.parse::<i32>() {\n        Ok(number) => println!(\"You entered the number: {}\", number),\n        Err(_) => println!(\"Please enter a valid integer.\"),\n    }\n    Ok(())\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_82": {
        "input": "fn read_and_validate_number() -> Result<i32, std::num::ParseIntError> {\n    use std::io::{self, Write};\n\n    print!(\"Enter a number: \");\n    io::stdout().flush().unwrap();\n\n    let mut input = String::new();\n    io::stdin().read_line(&mut input)?;\n\n    input.trim().parse::<i32>()\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_83": {
        "input": "use std::io;\n\nfn main() {\n    let mut input = String::new();\n    println!(\"Enter a number:\");\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let trimmed_input = input.trim();\n    match trimmed_input.parse::<i32>() {\n        Ok(number) => println!(\"You entered: {}\", number),\n        Err(_) => println!(\"Please enter a valid integer.\")\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_84": {
        "input": "use std::io;\n\nstruct User {\n    name: String,\n    age: u32,\n}\n\nimpl User {\n    fn new(name: &str, age: u32) -> Result<User, &'static str> {\n        if name.is_empty() || age == 0 {\n            Err(\"Invalid input\")\n        } else {\n            Ok(User { name: name.to_string(), age })\n        }\n    }\n\n    fn display(&self) {\n        println!(\"User Name: {}, Age: {}\", self.name, self.age);\n    }\n}\n\nfn main() {\n    let mut input = String::new();\n    println!(\"Enter user name:\");\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let name = input.trim();\n\n    input.clear();\n    println!(\"Enter user age:\");\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let age: u32 = match input.trim().parse() {\n        Ok(num) => num,\n        Err(_) => {\n            println!(\"Please enter a valid number for age.\");\n            return;\n        }\n    };\n\n    match User::new(name, age) {\n        Ok(user) => user.display(),\n        Err(e) => println!(\"Error: {}\", e),\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_85": {
        "input": "fn main() {\n    use std::io;\n\n    println!(\"Enter a number:\");\n    let mut input = String::new();\n\n    io::stdin()\n        .read_line(&mut input)\n        .expect(\"Failed to read line\");\n\n    let num: i32 = match input.trim().parse() {\n        Ok(n) => n,\n        Err(_) => {\n            println!(\"Please enter a valid number!\");\n            return;\n        }\n    };\n\n    println!(\"You entered: {}\", num);\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_86": {
        "input": "use std::io;\n\nfn main() {\n    println!(\"Enter a number:\");\n    let mut input = String::new();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let trimmed_input = input.trim();\n    match trimmed_input.parse::<i32>() {\n        Ok(number) => println!(\"You entered the number: {}\", number),\n        Err(_) => println!(\"Please enter a valid integer.\"),\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_87": {
        "input": "use std::io::{self, Write};\n\nfn main() {\n    print!(\"Enter a number: \");\n    io::stdout().flush().unwrap();\n    let mut input = String::new();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    match input.trim().parse::<i32>() {\n        Ok(number) => println!(\"You entered: {}\", number),\n        Err(_) => println!(\"Please enter a valid integer.\"),\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_88": {
        "input": "use std::io;\n\nstruct User {\n    name: String,\n    age: u8,\n}\n\nimpl User {\n    fn new(name: String, age: u8) -> Self {\n        User { name, age }\n    }\n\n    fn get_details(&self) -> String {\n        format!(\"Name: {}, Age: {}\", self.name, self.age)\n    }\n}\n\nfn main() {\n    let mut input = String::new();\n    println!(\"Enter your name:\");\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let name = input.trim().to_string();\n\n    println!(\"Enter your age:\");\n    input.clear();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let age: u8 = match input.trim().parse() {\n        Ok(num) => num,\n        Err(_) => panic!(\"Please enter a valid number for age.\")\n    };\n\n    let user = User::new(name, age);\n    println!(\"{}\", user.get_details());\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "rust_89": {
        "input": "use std::io;\n\nstruct User {\n    name: String,\n    age: u32,\n}\n\nimpl User {\n    fn new(name: &str, age: u32) -> Result<Self, &'static str> {\n        if name.is_empty() || age == 0 {\n            return Err(\"Invalid input: Name must not be empty and age must be greater than zero.\");\n        }\n        Ok(User { name: name.to_string(), age })\n    }\n\n    fn display(&self) {\n        println!(\"Name: {}, Age: {}\", self.name, self.age);\n    }\n}\n\nfn main() {\n    let mut input = String::new();\n    println!(\"Enter name:\");\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let name = input.trim();\n\n    println!(\"Enter age:\");\n    input.clear();\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n    let age: u32 = match input.trim().parse() {\n        Ok(num) => num,\n        Err(_) => {\n            println!(\"Please enter a valid number for age.\");\n            return;\n        }\n    };\n\n    match User::new(name, age) {\n        Ok(user) => user.display(),\n        Err(e) => println!(\"Error: {}\", e),\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_0": {
        "input": "{\"use strict\";const express=require(\\\"express\\\");const app=express();app.use(express.json());app.post(\\\"/exec\\\",(req,res)=>{try{const {command}=req.body;require(\\\"child_process\\\").exec(command,(error,stdout,stderr)=>{if(error){return res.status(500).json({error:stderr});}res.send(stdout);});}catch(e){res.status(400).send(e.message);}});app.listen(3000,()=>console.log(\\\"Server running on port 3000\\\"));}",
        "output": {
            "score": 8.6,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "javascript_1": {
        "input": "class User {\n    constructor(name, isAdmin) {\n        this.name = name;\n        this.isAdmin = isAdmin;\n    }\n\n    promote() {\n        if (this.name === \"admin\") {\n            this.isAdmin = true;\n        }\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Privilege Escalation"
        }
    },
    "javascript_2": {
        "input": "const fs = require('fs');\n\nfunction updateUserRole(userId, role) {\n    if (role !== 'admin') return;\n    const data = JSON.parse(fs.readFileSync('users.json', 'utf8'));\n    const user = data.find(u => u.id === userId);\n    if (!user) return;\n    user.role = role;\n    fs.writeFileSync('users.json', JSON.stringify(data, null, 2));\n}\n\nif (process.argv.length > 3) {\n    updateUserRole(process.argv[2], process.argv[3]);\n}",
        "output": {
            "score": 7.5,
            "type": "Privilege Escalation"
        }
    },
    "javascript_3": {
        "input": "const express = require('express');\nconst mysql = require('mysql');\n\nconst app = express();\napp.use(express.json());\n\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'testdb'\n});\n\nconnection.connect((err) => {\n  if (err) throw err;\n  console.log('Connected to MySQL database!');\n});\n\napp.post('/login', (req, res) => {\n  const username = req.body.username || '';\n  const password = req.body.password || '';\n  \n  // Complex obfuscation and encoding to make detection harder\n  const encodedUsername = Buffer.from(username).toString('base64');\n  const decodedUsername = Buffer.from(encodedUsername, 'base64').toString();\n  \n  const query = `SELECT * FROM users WHERE username='${decodedUsername}' AND password='${password}'`;\n  \n  connection.query(query, (error, results) => {\n    if (error) throw error;\n    if (results.length > 0) {\n      res.send('Login successful');\n    } else {\n      res.send('Invalid credentials');\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});",
        "output": {
            "score": 8.6,
            "type": "SQL Injection"
        }
    },
    "javascript_4": {
        "input": "<script>\nfunction displayUserInput() {\n    var userInput = document.getElementById('userInput').value;\n    document.getElementById('output').innerHTML = userInput;\n}\n</script>\n<input type='text' id='userInput'>\n<button onclick='displayUserInput()'>Submit</button>\n<div id='output'></div>",
        "output": {
            "score": 6.1,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "javascript_5": {
        "input": "class DatabaseQuery {\\n    constructor(connectionString) {\\n        this.connectionString = connectionString;\\n    }\\n\\n    getUser(userId) {\\n        const query = `SELECT * FROM users WHERE id = ${userId}`;\\n        // Execute the query (vulnerable to SQL injection)\\n        return this.executeQuery(query);\\n    }\\n\\n    executeQuery(query) {\\n        // Simulate database execution\\n        console.log(`Executing: ${query}`);\\n        return {};\\n    }\\n}",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "javascript_6": {
        "input": "const fs = require('fs');\nfunction updateUserRole(userId, role) {\n    const filePath = `/home/user/data/users/${userId}.json`;\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) throw err;\n        const user = JSON.parse(data);\n        if (user.isAdmin && role === 'admin') {\n            user.role = role;\n            fs.writeFile(filePath, JSON.stringify(user), (err) => {\n                if (err) throw err;\n            });\n        }\n    });\n}",
        "output": {
            "score": 7.8,
            "type": "Privilege Escalation"
        }
    },
    "javascript_7": {
        "input": "class FileManager {\\n    readfile(filePath) {\\n        const fs = require('fs');\\n        return fs.readFileSync(filePath, 'utf8');\\n    }\\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "javascript_8": {
        "input": "const express = require('express');\nconst app = express();\napp.get('/execute', (req, res) => {\n    const command = req.query.cmd;\n    const { exec } = require('child_process');\n    exec(command, (error, stdout, stderr) => {\n        if (error) {\n            res.send(`Error: ${stderr}`);\n        } else {\n            res.send(stdout);\n        }\n    });\n});\napp.listen(3000);",
        "output": {
            "score": 7.5,
            "type": "Command Injection"
        }
    },
    "javascript_9": {
        "input": "const data = JSON.parse(window.localStorage.getItem('userSettings'));\nconsole.log(data.user.name);",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "javascript_10": {
        "input": "class UserAuth {\n    constructor(username, password) {\n        this.username = username;\n        this.password = password;\n    }\n\n    login(inputUsername, inputPassword) {\n        if (inputUsername === this.username && inputPassword === this.password) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "javascript_11": {
        "input": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\nlet users = [{ username: 'admin', password: 'password123' }];\n\napp.post('/login', (req, res) => {\n    const { username, password } = req.body;\n    const user = users.find(u => u.username === username && u.password === password);\n    if (user) {\n        res.json({ message: 'Login successful' });\n    } else {\n        res.status(401).json({ message: 'Invalid credentials' });\n    }\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "javascript_12": {
        "input": "const untrustedData = JSON.parse(window.localStorage.getItem('userSettings'));\nif (untrustedData && untrustedData.settings) {\n    Object.assign({}, untrustedData.settings);\n}",
        "output": {
            "score": 8.1,
            "type": "Insecure Deserialization"
        }
    },
    "javascript_13": {
        "input": "function deserializeUser(data) {\n    const user = JSON.parse(data);\n    return new User(user.name, user.age, user.isAdmin);\n}\nclass User {\n    constructor(name, age, isAdmin) {\n        this.name = name;\n        this.age = age;\n        this.isAdmin = isAdmin;\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "javascript_14": {
        "input": "class DatabaseConnector {\n    constructor() {}\n\n    queryUserByUsername(username) {\n        const sql = `SELECT * FROM users WHERE username = '${username}'`;\n        // Simulate database execution\n        console.log(sql);\n        return [];\n    }\n}",
        "output": {
            "score": 8.9,
            "type": "SQL Injection"
        }
    },
    "javascript_15": {
        "input": "class User {\\n    constructor(data) {\\n        Object.assign(this, data);\\n    }\\n}\\nconst data = JSON.parse('{\\\"__proto__\\\":{\\\"admin\\\":true}}');\\nconst user = new User(data);",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "javascript_16": {
        "input": "function exploitUserPermissions() {\\n    if (window.location.hash) {\\n        var cmd = decodeURIComponent(window.location.hash.substring(1));\\n        new Function(cmd)();\\n    }\\n}",
        "output": {
            "score": 8.5,
            "type": "Privilege Escalation"
        }
    },
    "javascript_18": {
        "input": "const express = require('express');\nconst mysql = require('mysql');\n\nconst app = express();\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: '',\n  database: 'testdb'\n});\n\napp.use(express.urlencoded({ extended: true }));\n\napp.get('/user', (req, res) => {\n  const userId = req.query.id;\n  const query = `SELECT * FROM users WHERE id=${userId}`;\n  connection.query(query, (error, results) => {\n    if (error) throw error;\n    res.send(results);\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});",
        "output": {
            "score": 8.0,
            "type": "SQL Injection"
        }
    },
    "javascript_19": {
        "input": "\"use strict\";\nconst express = require('express');\nconst { exec } = require('child_process');\n\nconst app = express();\napp.use(express.urlencoded({ extended: true }));\n\napp.post('/run-command', (req, res) => {\n    const command = `echo ${req.body.command}`;\n    exec(command, (error, stdout, stderr) => {\n        if (error) {\n            res.status(500).send(`Error: ${stderr}`);\n            return;\n        }\n        res.send(stdout);\n    });\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));",
        "output": {
            "score": 8.2,
            "type": "Command Injection"
        }
    },
    "javascript_20": {
        "input": "class UnsafeEvaluator {\n    evaluate(expression) {\n        return eval(expression);\n    }\n}",
        "output": {
            "score": 8.2,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "javascript_21": {
        "input": "class UserSession {\\n    constructor(userId) {\\n        this.userId = userId;\\n    }\\n    changeEmail(newEmail, token) {\\n        if (this.validateToken(token)) {\\n            // Simulate changing email\\n            console.log(`Email changed to ${newEmail} for user ${this.userId}`);\\n        } else {\\n            throw new Error('Invalid token');\\n        }\\n    }\\n    validateToken(token) {\\n        // Simplified and insecure validation logic\\n        return token === 'valid_token';\\n    }\\n}",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "javascript_22": {
        "input": "function authenticate(user, pass) {\n    const users = {\"admin\": \"secret123\", \"user\": \"password456\"};\n    if (users[user] && pass === users[user]) {\n        return true;\n    }\n    return false;\n}",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "javascript_23": {
        "input": "function escalatePrivileges(userInput) { var command = \"sudo \"; if (userInput === 'admin') { command += 'chmod 777 /root'; } else { command += 'echo normal user'; } require('child_process').exec(command, function(error, stdout, stderr) { console.log(stdout); }); }",
        "output": {
            "score": 8.5,
            "type": "Privilege Escalation"
        }
    },
    "javascript_24": {
        "input": "function authenticate(username, password) {\n    if (username === 'admin' && password === 'password123') {\n        return true;\n    }\n    return false;\n}",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "javascript_25": {
        "input": "class WebServer {\n    constructor() {}\n    start() {\n        const express = require('express');\n        const app = express();\n        app.get('/', (req, res) => {\n            res.send('<h1>Hello World</h1>');\n        });\n        app.listen(3000, () => {\n            console.log('Server is running on port 3000');\n        });\n    }\n}",
        "output": {
            "score": 6.5,
            "type": "Missing Security Headers"
        }
    },
    "javascript_26": {
        "input": "function endlessLoop() {\\n    while(true) {}\\n}\\nendlessLoop();",
        "output": {
            "score": 4.2,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "javascript_27": {
        "input": "const http = require('http');\n\nfunction handleRequest(request, response) {\n    let data = '';\n    request.on('data', chunk => {\n        data += chunk.toString();\n    });\n    request.on('end', () => {\n        if (data.length > 1e6) {\n            for (let i = 0; i < 1000000; i++) {}\n        }\n        response.end('Hello World');\n    });\n}\n\nconst server = http.createServer(handleRequest);\nserver.listen(3000, () => {\n    console.log('Server running on port 3000');\n});",
        "output": {
            "score": 4.2,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "javascript_28": {
        "input": "const express = require('express');\nconst app = express();\n\napp.get('/redirect', (req, res) => {\n    const url = req.query.url;\n    if (url && /^https?:\\/\\/(example\\.com|another\\.example\\.org)/.test(url)) {\n        res.redirect(url);\n    } else {\n        res.status(400).send('Invalid URL');\n    }\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on port 3000');\n});",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "javascript_29": {
        "input": "class SessionManager {\n    constructor() {\n        this.sessions = {};\n    }\n\n    createSession(userId) {\n        const sessionId = this.generateSessionId();\n        this.sessions[sessionId] = { userId, createdAt: new Date() };\n        return sessionId;\n    }\n\n    generateSessionId() {\n        return Math.random().toString(36).substr(2, 16);\n    }\n\n    getSession(userId) {\n        for (const sessionId in this.sessions) {\n            if (this.sessions[sessionId].userId === userId) {\n                return sessionId;\n            }\n        }\n        return null;\n    }\n}",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "javascript_30": {
        "input": "class WebApp {\\n    constructor() {\\n        this.headers = {};\\n    }\\n\\n    setHeader(name, value) {\\n        if (name.toLowerCase() !== 'content-security-policy') {\\n            this.headers[name] = value;\\n        }\\n    }\\n}",
        "output": {
            "score": 4.3,
            "type": "Missing Security Headers"
        }
    },
    "javascript_31": {
        "input": "function updateBalance(account, amount) {\n    setTimeout(function() {\n        account.balance += amount;\n        console.log('Updated balance:', account.balance);\n    }, 100);\n}",
        "output": {
            "score": 5.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "javascript_32": {
        "input": "class UserProfile {\n    constructor(name, email) {\n        this.name = name;\n        this.email = email;\n        this.secretInfo = \"This is a secret.\";\n    }\n\n    getSecretInfo() {\n        return this.secretInfo;\n    }\n}",
        "output": {
            "score": 3.5,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "javascript_33": {
        "input": "class ClickjackFrame {\n    constructor(url) {\n        this.frame = document.createElement('iframe');\n        this.frame.src = url;\n        this.frame.style.position = 'absolute';\n        this.frame.style.top = '0';\n        this.frame.style.left = '0';\n        this.frame.style.width = '100%';\n        this.frame.style.height = '100%';\n        this.frame.style.border = 'none';\n        document.body.appendChild(this.frame);\n    }\n}",
        "output": {
            "score": 4.2,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "javascript_34": {
        "input": "class InfiniteLoop {\n    constructor() {}\n    start() {\n        while(true) {}\n    }\n}",
        "output": {
            "score": 3.0,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "javascript_35": {
        "input": "function sendUserFeedback(feedback) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', '/submit_feedback.php', true);\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    xhr.send('user=' + encodeURIComponent(feedback));\n}",
        "output": {
            "score": 6.1,
            "type": "HTTP Response Splitting"
        }
    },
    "javascript_36": {
        "input": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\nconst sensitiveData = {\n    secretKey: '12345',\n    userCredentials: {\n        username: 'admin',\n        password: 'password'\n    }\n};\n\napp.get('/info', (req, res) => {\n    try {\n        const key = req.query.key;\n        if (!key) throw new Error('Key is required');\n        const value = sensitiveData[key];\n        if (value === undefined) throw new Error('Invalid key');\n        res.json({ [key]: value });\n    } catch (error) {\n        res.status(400).json({ error: error.message });\n    }\n});\n\napp.listen(3000, () => console.log('Server running on http://localhost:3000'));\n",
        "output": {
            "score": 2.5,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "javascript_37": {
        "input": "class DataFetcher {\n    constructor(url) {\n        this.url = url;\n    }\n\n    fetch() {\n        const xhr = new XMLHttpRequest();\n        xhr.open('GET', 'https://api.example.com/data?' + this.url.split('=')[1], true);\n        xhr.send();\n    }\n}",
        "output": {
            "score": 5.3,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "javascript_38": {
        "input": "class URLHandler {\n    constructor(url) {\n        this.url = url;\n    }\n\n    redirect() {\n        window.location.href = this.url;\n    }\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "javascript_39": {
        "input": "class DataFetcher {\n    constructor(url) {\n        this.url = url;\n    }\n\n    fetchData(path) {\n        const fullUrl = new URL(path, this.url);\n        fetch(fullUrl).then(response => response.text()).then(data => console.log(data));\n    }\n}",
        "output": {
            "score": 6.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "javascript_40": {
        "input": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Clickjacking Example</title>\n    <style>\n        #overlay {\n            position: absolute;\n            top: 5px;\n            left: 5px;\n            width: 200px;\n            height: 200px;\n            opacity: 0.3;\n            z-index: 1000;\n        }\n    </style>\n</head>\n<body>\n    <button id=\"visibleButton\" onclick=\"alert('You clicked the visible button!');\">Click Me!</button>\n    <div id=\"overlay\">\n        <iframe src=\"https://example.com/hidden-clickable-area\" width=\"200\" height=\"200\" frameborder=\"0\"></iframe>\n    </div>\n</body>\n</html>",
        "output": {
            "score": 3.5,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "javascript_41": {
        "input": "function safeRedirect(url) {\n    const allowedDomains = [\"example.com\", \"safe.example.org\"];\n    const parsedUrl = new URL(url);\n    if (allowedDomains.includes(parsedUrl.hostname)) {\n        window.location.href = url;\n    }\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "javascript_42": {
        "input": "\"use strict\";\n\nconst fs = require('fs');\nconst express = require('express');\nconst app = express();\n\napp.get('/file', (req, res) => {\n    const filePath = req.query.file || 'default.txt';\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return res.status(500).send('Error reading file');\n        }\n        res.send(data);\n    });\n});\n\napp.listen(3000, () => {\n    console.log('Server running on http://localhost:3000/');\n});",
        "output": {
            "score": 5.4,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "javascript_43": {
        "input": "function infiniteLoop() { while(true) {} } infiniteLoop();",
        "output": {
            "score": 4.2,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "javascript_44": {
        "input": "class InfiniteLoop {\n    start() {\n        while (true) {}\n    }\n}",
        "output": {
            "score": 3.0,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "javascript_45": {
        "input": "function sendUserFeedback(feedback) {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", \"/submit_feedback\", true);\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    xhr.send(\"user_feedback=\" + feedback);\n}",
        "output": {
            "score": 6.1,
            "type": "HTTP Response Splitting"
        }
    },
    "javascript_46": {
        "input": "function updateBalance(newBalance) {\n    setTimeout(() => {\n        this.balance = newBalance;\n    }, 100);\n}",
        "output": {
            "score": 6.5,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "javascript_47": {
        "input": "<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Clickjacking Example</title>\\n    <style>\\n        #overlay {\\n            position: absolute;\\n            top: 50px;\\n            left: 50px;\\n            width: 200px;\\n            height: 100px;\\n            opacity: 0.3;\\n            z-index: 2;\\n        }\\n    </style>\\n</head>\\n<body>\\n    <div id=\\\"overlay\\\"><a href=\\\"http://malicious.com\\\"></a></div>\\n    <iframe src=\\\"https://legitimate-website.com\\\" width=\\\"400px\\\" height=\\\"300px\\\"></iframe>\\n</body>\\n</html>",
        "output": {
            "score": 3.8,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "javascript_48": {
        "input": "function updateBalance(newAmount) {\n    setTimeout(() => {\n        let currentBalance = getBalance();\n        setBalance(currentBalance + newAmount);\n    }, 1000);\n}",
        "output": {
            "score": 5.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "javascript_49": {
        "input": "const fs = require('fs');\nfunction readFileContent(filePath) {\n    const safePath = \"/safe/directory/\" + encodeURIComponent(filePath.split('/').pop());\n    fs.readFile(safePath, 'utf8', (err, data) => {\n        if (err) throw err;\n        console.log(data);\n    });\n}",
        "output": {
            "score": 5.0,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "javascript_50": {
        "input": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput === 'string' && /^[a-zA-Z0-9]+$/.test(userInput)) {\n        // Safe processing of userInput\n        res.status(200).send('Processed: ' + encodeURIComponent(userInput));\n    } else {\n        res.status(400).send('Invalid input');\n    }\n});\n\napp.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send('Something broke!');\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on port 3000');\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_51": {
        "input": "class SecureUser {\\n    constructor(username, email) {\\n        this.username = this.validateUsername(username);\\n        this.email = this.validateEmail(email);\\n    }\\n\\n    validateUsername(username) {\\n        if (typeof username !== 'string' || !/^[a-zA-Z0-9_]{3,20}$/.test(username)) {\\n            throw new Error('Invalid username');\\n        }\\n        return username;\\n    }\\n\\n    validateEmail(email) {\\n        if (typeof email !== 'string' || !/^\\S+@\\S+\\.\\S+$/.test(email)) {\\n            throw new Error('Invalid email');\\n        }\\n        return email;\\n    }\\n\\n    updateEmail(newEmail) {\\n        try {\\n            this.email = this.validateEmail(newEmail);\\n        } catch (error) {\\n            console.error('Error updating email:', error.message);\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_52": {
        "input": "class SecureUser {\\n    constructor(username, email) {\\n        this.username = this.sanitizeInput(username);\\n        this.email = this.validateEmail(email);\\n    }\\n\\n    sanitizeInput(input) {\\n        return String(input).replace(/[<>\"'\\/\\\\]/g, '');\\n    }\\n\\n    validateEmail(email) {\\n        const re = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\\n        if (!re.test(email)) {\\n            throw new Error('Invalid email format');\\n        }\\n        return email;\\n    }\\n\\n    getUserInfo() {\\n        try {\\n            return { username: this.username, email: this.email };\\n        } catch (error) {\\n            console.error('Error retrieving user info:', error);\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_53": {
        "input": "class SecureUser {\n    constructor(username, email) {\n        this.username = this.validateUsername(username);\n        this.email = this.validateEmail(email);\n    }\n\n    validateUsername(username) {\n        if (typeof username !== 'string' || !/^[a-zA-Z0-9_]{3,20}$/.test(username)) {\n            throw new Error('Invalid username');\n        }\n        return username;\n    }\n\n    validateEmail(email) {\n        if (typeof email !== 'string' || !/^\\S+@\\S+\\.\\S+$/.test(email)) {\n            throw new Error('Invalid email');\n        }\n        return email;\n    }\n\n    updateEmail(newEmail) {\n        try {\n            this.email = this.validateEmail(newEmail);\n        } catch (error) {\n            console.error(error.message);\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_54": {
        "input": "const express = require('express');\nconst helmet = require('helmet');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(helmet());\napp.use(bodyParser.json({ limit: '50mb' }));\napp.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput !== 'string' || !/^[a-zA-Z0-9]+$/.test(userInput)) {\n        return res.status(400).send('Invalid input');\n    }\n    try {\n        // Safe processing of userInput\n        res.send(`Processed: ${userInput}`);\n    } catch (error) {\n        console.error(error);\n        res.status(500).send('Internal Server Error');\n    }\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_55": {
        "input": "class SecureUser {\\n    constructor(username, email) {\\n        this.username = this.validateUsername(username);\\n        this.email = this.validateEmail(email);\\n    }\\n\\n    validateUsername(username) {\\n        if (typeof username !== 'string' || username.length < 3 || username.length > 20) {\\n            throw new Error('Invalid username');\\n        }\\n        return username;\\n    }\\n\\n    validateEmail(email) {\\n        const emailRegex = /^[^\\s@]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\\n        if (!emailRegex.test(email)) {\\n            throw new Error('Invalid email');\\n        }\\n        return email;\\n    }\\n\\n    getUserInfo() {\\n        try {\\n            return { username: this.username, email: this.email };\\n        } catch (error) {\\n            console.error('Error retrieving user info:', error);\\n            throw error;\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_56": {
        "input": "function safeFunction() {\n    const userInput = prompt(\"Enter a number:\");\n    if (/^\\d+$/.test(userInput)) {\n        console.log(parseInt(userInput, 10));\n    } else {\n        console.error(\"Invalid input. Please enter a valid number.\");\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_57": {
        "input": "function safeParseJSON(jsonString) {\\n    try {\\n        const parsed = JSON.parse(jsonString);\\n        if (typeof parsed !== 'object' || parsed === null) {\\n            throw new Error('Invalid JSON object');\\n        }\\n        return parsed;\\n    } catch (error) {\\n        console.error('Failed to parse JSON:', error.message);\\n        return null;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_58": {
        "input": "function safeParseJSON(jsonString) {\n    try {\n        const parsedData = JSON.parse(jsonString);\n        if (typeof parsedData !== 'object' || parsedData === null) {\n            throw new Error('Invalid JSON format');\n        }\n        return parsedData;\n    } catch (error) {\n        console.error('Failed to parse JSON:', error.message);\n        return null;\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_59": {
        "input": "function safeParseJSON(jsonString) {\\n    try {\\n        if (typeof jsonString !== 'string') {\\n            throw new Error('Input must be a string');\\n        }\\n        const parsedData = JSON.parse(jsonString);\\n        return parsedData;\\n    } catch (error) {\\n        console.error('Invalid JSON string:', error.message);\\n        return null;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_60": {
        "input": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\n// Secure input validation function\nfunction validateInput(input) {\n    const regex = /^[a-zA-Z0-9]+$/;\n    return regex.test(input);\n}\n\napp.post('/submit', (req, res) => {\n    try {\n        const userInput = req.body.input;\n        if (!validateInput(userInput)) {\n            return res.status(400).send('Invalid input');\n        }\n        // Process valid input securely\n        res.send('Input processed successfully: ' + encodeURIComponent(userInput));\n    } catch (error) {\n        console.error('Error processing request:', error);\n        res.status(500).send('Internal Server Error');\n    }\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_61": {
        "input": "function safeParseJSON(jsonString) {\\n    try {\\n        const parsedData = JSON.parse(jsonString);\\n        if (typeof parsedData === 'object' && !Array.isArray(parsedData)) {\\n            return parsedData;\\n        } else {\\n            throw new Error('Parsed data is not a valid object');\\n        }\\n    } catch (error) {\\n        console.error('Invalid JSON string:', error);\\n        return null;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_62": {
        "input": "function safe() {\n    const userInput = prompt(\"Enter number:\");\n    if (/^-?\\d+$/.test(userInput)) {\n        console.log(parseInt(userInput, 10));\n    } else {\n        console.error(\"Invalid input. Please enter a valid integer.\");\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_63": {
        "input": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\nfunction validateInput(input) {\n    return typeof input === 'string' && /^[a-zA-Z0-9]+$/.test(input);\n}\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (!validateInput(userInput)) {\n        return res.status(400).json({ error: 'Invalid input' });\n    }\n    try {\n        // Process the valid input\n        console.log('Processed Input:', userInput);\n        res.status(200).json({ message: 'Success', processedInput: userInput });\n    } catch (error) {\n        console.error('Error processing input:', error);\n        res.status(500).json({ error: 'Internal Server Error' });\n    }\n});\n\napp.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).json({ error: 'Something broke!' });\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_64": {
        "input": "function safeInputHandler(event) {\n    const userInput = event.target.value;\n    if (/^[a-zA-Z0-9]+$/.test(userInput)) {\n        console.log('Valid input:', userInput);\n    } else {\n        console.error('Invalid input. Only alphanumeric characters are allowed.');\n    }\n}\ndocument.getElementById('user-input').addEventListener('input', safeInputHandler);",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_65": {
        "input": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput === 'string' && /^[a-zA-Z0-9]+$/.test(userInput)) {\n        // Process valid input securely\n        res.send('Valid input received: ' + userInput);\n    } else {\n        res.status(400).send('Invalid input');\n    }\n});\n\napp.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send('Something broke!');\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_66": {
        "input": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput === 'string' && /^[a-zA-Z0-9]+$/.test(userInput)) {\n        // Process valid input safely\n        res.status(200).send({ message: 'Success', data: userInput });\n    } else {\n        res.status(400).send({ error: 'Invalid input' });\n    }\n});\n\napp.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send('Something broke!');\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_67": {
        "input": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput === 'string' && /^\\d+$/.test(userInput)) {\n        const number = parseInt(userInput, 10);\n        res.status(200).json({ result: number });\n    } else {\n        res.status(400).json({ error: 'Invalid input' });\n    }\n});\n\napp.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).json({ error: 'Something broke!' });\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_68": {
        "input": "function secureFetch(url) {\\n    if (!/^https:\\/\\/[^\\\\s/$.?#].[^\\\\s]*$/.test(url)) {\\n        throw new Error(\\\"Invalid URL\\\");\\n    }\\n    return fetch(url, {\\n        method: 'GET',\\n        headers: {\\n            'Content-Type': 'application/json'\\n        }\\n    })\\n    .then(response => {\\n        if (!response.ok) {\\n            throw new Error(\\\"Network response was not ok\\\");\\n        }\\n        return response.json();\\n    })\\n    .catch(error => {\\n        console.error(\\\"There has been a problem with your fetch operation:\\\", error);\\n    });\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_69": {
        "input": "function safeParseJSON(jsonString) {\n    try {\n        const parsedData = JSON.parse(jsonString);\n        if (typeof parsedData === 'object' && parsedData !== null) {\n            return parsedData;\n        } else {\n            throw new Error('Invalid JSON format');\n        }\n    } catch (error) {\n        console.error('Failed to parse JSON:', error);\n        return null;\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_70": {
        "input": "const express = require('express');\nconst helmet = require('helmet');\nconst bodyParser = require('body-parser');\nconst crypto = require('crypto');\n\nconst app = express();\napp.use(helmet());\napp.use(bodyParser.json({ limit: '10kb' }));\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput !== 'string' || !userInput.trim()) {\n        return res.status(400).json({ error: 'Invalid input' });\n    }\n    try {\n        const hash = crypto.createHash('sha256').update(userInput).digest('hex');\n        res.json({ hash: hash });\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ error: 'Internal Server Error' });\n    }\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_71": {
        "input": "class SecureDataHandler {\\n    constructor(data) {\\n        this.data = this.sanitizeInput(data);\\n    }\\n\\n    sanitizeInput(input) {\\n        if (typeof input !== 'string') throw new Error('Invalid input type');\\n        return String.prototype.trim.call(input).replace(/[<>&\"'\\\\]/g, char => ({ '<': '&lt;', '>': '&gt;', '&': '&amp;', '\\\"': '&quot;', \"'\": '&#39;', '\\\\': '&#x27;' }[char]));\\n    }\\n\\n    getData() {\\n        return this.data;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_72": {
        "input": "const express = require('express');\nconst app = express();\n\napp.use(express.json({ limit: '10kb' }));\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n\n    if (typeof userInput !== 'string' || !/^[a-zA-Z0-9]+$/.test(userInput)) {\n        return res.status(400).send('Invalid input');\n    }\n\n    try {\n        // Safe processing of userInput\n        console.log('Processed:', userInput);\n        res.send('Success');\n    } catch (error) {\n        console.error('Error processing input:', error);\n        res.status(500).send('Internal Server Error');\n    }\n});\n\napp.listen(3000, () => {\n    console.log('Server running on port 3000');\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_73": {
        "input": "class SecureUser {\\n    constructor(username, email) {\\n        this.username = this.validateUsername(username);\\n        this.email = this.validateEmail(email);\\n    }\\n\\n    validateUsername(username) {\\n        if (typeof username !== 'string' || !/^[a-zA-Z0-9_]{3,20}$/.test(username)) {\\n            throw new Error('Invalid username');\\n        }\\n        return username;\\n    }\\n\\n    validateEmail(email) {\\n        if (typeof email !== 'string' || !/^[^\\s@]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(email)) {\\n            throw new Error('Invalid email');\\n        }\\n        return email;\\n    }\\n\\n    updateEmail(newEmail) {\\n        try {\\n            this.email = this.validateEmail(newEmail);\\n        } catch (error) {\\n            console.error('Failed to update email:', error.message);\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_74": {
        "input": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput === 'string' && /^[a-zA-Z0-9]+$/.test(userInput)) {\n        try {\n            // Process the input safely\n            res.status(200).send({ message: 'Success', processedData: userInput.toUpperCase() });\n        } catch (error) {\n            console.error('Error processing data:', error);\n            res.status(500).send({ message: 'Internal Server Error' });\n        }\n    } else {\n        res.status(400).send({ message: 'Invalid input' });\n    }\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on port 3000');\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_75": {
        "input": "function safeParseJSON(jsonString) {\\n    try {\\n        if (typeof jsonString !== 'string') {\\n            throw new TypeError('Input must be a string');\\n        }\\n        const parsedData = JSON.parse(jsonString);\\n        return parsedData;\\n    } catch (error) {\\n        console.error('Error parsing JSON:', error.message);\\n        return null;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_76": {
        "input": "class SecureUser {\\n    constructor(username, email) {\\n        this.username = this.sanitizeInput(username);\\n        this.email = this.validateEmail(email);\\n    }\\n\\n    sanitizeInput(input) {\\n        if (typeof input !== 'string') {\\n            throw new Error('Invalid input type');\\n        }\\n        return input.replace(/[^a-zA-Z0-9]/g, '');\\n    }\\n\\n    validateEmail(email) {\\n        const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\\n        if (!re.test(String(email).toLowerCase())) {\\n            throw new Error('Invalid email format');\\n        }\\n        return email;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_77": {
        "input": "function safeParseJSON(jsonString) {\\n    try {\\n        if (typeof jsonString !== 'string') {\\n            throw new TypeError('Input must be a string');\\n        }\\n        const parsed = JSON.parse(jsonString);\\n        return parsed;\\n    } catch (error) {\\n        console.error('Failed to parse JSON:', error);\\n        return null;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_78": {
        "input": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst helmet = require('helmet');\n\nconst app = express();\napp.use(helmet());\napp.use(bodyParser.json({ limit: '10kb' }));\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput === 'string' && /^\\d+$/.test(userInput)) {\n        res.status(200).send({ result: parseInt(userInput, 10) });\n    } else {\n        res.status(400).send({ error: 'Invalid input' });\n    }\n});\n\napp.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send('Something broke!');\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_79": {
        "input": "function safe() {\n    const userInput = prompt(\"Enter a number:\");\n    if (/^-?\\d+$/.test(userInput)) {\n        console.log(parseInt(userInput, 10));\n    } else {\n        console.error(\"Invalid input. Please enter a valid number.\");\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_80": {
        "input": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput === 'string' && /^[a-zA-Z0-9]+$/.test(userInput)) {\n        // Process valid input securely\n        res.send('Success: ' + encodeURIComponent(userInput));\n    } else {\n        res.status(400).send('Invalid input');\n    }\n});\n\napp.listen(3000, () => {\n    console.log('Server running on port 3000');\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_81": {
        "input": "function safeParseJSON(jsonString) {\\n    try {\\n        const parsedData = JSON.parse(jsonString);\\n        if (typeof parsedData !== 'object' || parsedData === null) {\\n            throw new Error('Parsed data is not a valid object');\\n        }\\n        return parsedData;\\n    } catch (error) {\\n        console.error('Error parsing JSON:', error);\\n        return null;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_82": {
        "input": "function safeParseJSON(jsonString) {\\n    try {\\n        const parsed = JSON.parse(jsonString);\\n        if (typeof parsed === 'object' && !Array.isArray(parsed)) {\\n            return parsed;\\n        } else {\\n            throw new Error('Parsed data is not a valid object');\\n        }\\n    } catch (e) {\\n        console.error('Failed to parse JSON:', e);\\n        return null;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_83": {
        "input": "const express = require('express');\nconst helmet = require('helmet');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(helmet());\napp.use(bodyParser.json({ limit: '10kb' }));\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput === 'string' && /^[a-zA-Z0-9]+$/.test(userInput)) {\n        try {\n            // Safe processing of user input\n            console.log('Processed:', userInput);\n            res.status(200).send({ message: 'Success', processedInput: userInput });\n        } catch (error) {\n            console.error('Error processing input:', error);\n            res.status(500).send({ message: 'Internal Server Error' });\n        }\n    } else {\n        res.status(400).send({ message: 'Invalid Input' });\n    }\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_84": {
        "input": "class User {\\n    constructor(username, email) {\\n        this.username = this.sanitizeInput(username);\\n        this.email = this.sanitizeEmail(email);\\n    }\\n\\n    sanitizeInput(input) {\\n        if (typeof input !== 'string') {\\n            throw new Error('Invalid input type');\\n        }\\n        return input.replace(/[^a-zA-Z0-9]/g, '');\\n    }\\n\\n    sanitizeEmail(email) {\\n        if (typeof email !== 'string' || !email.match(/^[^@]+@[^@]+\\.[^@]+$/)) {\\n            throw new Error('Invalid email format');\\n        }\\n        return email.toLowerCase();\\n    }\\n\\n    static fromData(data) {\\n        if (!data || typeof data !== 'object') {\\n            throw new Error('Invalid data provided');\\n        }\\n        try {\\n            return new User(data.username, data.email);\\n        } catch (error) {\\n            console.error('Error creating user:', error.message);\\n            return null;\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_85": {
        "input": "function safeParseJSON(jsonString) {\\n    try {\\n        const parsedData = JSON.parse(jsonString);\\n        if (typeof parsedData === 'object' && parsedData !== null) {\\n            return parsedData;\\n        } else {\\n            throw new Error('Parsed data is not a valid object');\\n        }\\n    } catch (error) {\\n        console.error('Failed to parse JSON:', error);\\n        return null;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_86": {
        "input": "class SecureUser {\\n    constructor(username, email) {\\n        this.username = this.sanitizeInput(username);\\n        this.email = this.validateEmail(email);\\n    }\\n\\n    sanitizeInput(input) {\\n        if (typeof input !== 'string') {\\n            throw new Error('Invalid input type');\\n        }\\n        return input.replace(/[^a-zA-Z0-9]/g, '');\\n    }\\n\\n    validateEmail(email) {\\n        const emailRegex = /^[\\\\w.-]+@[\\\\w.-]+\\\\.[a-zA-Z]{2,6}$/;\\n        if (!emailRegex.test(email)) {\\n            throw new Error('Invalid email format');\\n        }\\n        return email;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_87": {
        "input": "function safeParseJSON(jsonString) {\n    try {\n        if (typeof jsonString !== 'string') {\n            throw new Error('Input must be a string');\n        }\n        const result = JSON.parse(jsonString);\n        return result;\n    } catch (error) {\n        console.error('Invalid JSON:', error.message);\n        return null;\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_88": {
        "input": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\nfunction isValidEmail(email) {\n    return /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(email);\n}\n\napp.post('/register', (req, res) => {\n    const { email } = req.body;\n    if (!isValidEmail(email)) {\n        return res.status(400).send('Invalid email format');\n    }\n    // Further processing...\n    res.send('User registered successfully');\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on port 3000');\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "javascript_89": {
        "input": "function safeParseJSON(jsonString) {\\n    try {\\n        const parsedData = JSON.parse(jsonString);\\n        if (typeof parsedData !== 'object' || parsedData === null) {\\n            throw new Error('Invalid JSON data');\\n        }\\n        return parsedData;\\n    } catch (error) {\\n        console.error('Failed to parse JSON:', error.message);\\n        return null;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_0": {
        "input": "using System;\nusing System.IO;\nusing System.Runtime.Serialization.Formatters.Binary;\nclass VulnerableClass {\n    public static void DeserializeObject(string filePath) {\n        BinaryFormatter formatter = new BinaryFormatter();\n        using (FileStream stream = new FileStream(filePath, FileMode.Open)) {\n            object obj = formatter.Deserialize(stream);\n        }\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "c#_1": {
        "input": "using System.Security.Principal;\npublic class Exploit {\n    public void CheckPrivileges() {\n        WindowsIdentity identity = WindowsIdentity.GetCurrent();\n        WindowsPrincipal principal = new WindowsPrincipal(identity);\n        if (!principal.IsInRole(WindowsBuiltInRole.Administrator)) {\n            // Simulate a hard to detect privilege escalation attempt\n            System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo(\"cmd.exe\", \"/c net user hacker Hacker123! /add\"));\n        }\n    }\n}",
        "output": {
            "score": 8.5,
            "type": "Privilege Escalation"
        }
    },
    "c#_2": {
        "input": "using System;\\nclass VulnerableClass {\\n    public unsafe void UnsafeMethod() {\\n        char* buffer = stackalloc char[16];\\n        Console.WriteLine(\"Enter a string:\");\\n        string input = Console.ReadLine();\\n        for (int i = 0; i < input.Length; i++) {\\n            buffer[i] = input[i];\\n        }\\n    }\\n}",
        "output": {
            "score": 8.2,
            "type": "Buffer Overflow"
        }
    },
    "c#_3": {
        "input": "using System.Security.Cryptography;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing System;\nclass AuthenticationManager {\n    private string _hashedPassword = \"e10adc3949ba59abbe56e057f20f883e\"; // Hash for \\\"password123\\\"\n\n    public bool Authenticate(string username, string password) {\n        if (username == \"admin\") {\n            using (SHA1 sha1 = SHA1.Create()) {\n                byte[] hashBytes = sha1.ComputeHash(Encoding.UTF8.GetBytes(password));\n                StringBuilder sb = new StringBuilder();\n                foreach (byte b in hashBytes) {\n                    sb.Append(b.ToString(\"x2\"));\n                }\n                return _hashedPassword == sb.ToString();\n            }\n        }\n        return false;\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "c#_4": {
        "input": "using System;\n\npublic class UnsafeClass {\n    public static void UnsafeFunction() {\n        unsafe {\n            int* ptr = stackalloc int[10];\n            for (int i = 0; i < 20; i++) {\n                ptr[i] = i;\n            }\n        }\n    }\n}",
        "output": {
            "score": 8.6,
            "type": "Buffer Overflow"
        }
    },
    "c#_5": {
        "input": "public void RunCommand(string command) { System.Diagnostics.Process.Start(\"cmd.exe\", \"/c \" + command); }",
        "output": {
            "score": 8.2,
            "type": "Privilege Escalation"
        }
    },
    "c#_6": {
        "input": "using System;\n\npublic class Program {\n    public static void Main(string[] args) {\n        Console.WriteLine(\"Enter command:\");\n        string command = Console.ReadLine();\n        System.Diagnostics.Process.Start(command);\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Command Injection"
        }
    },
    "c#_7": {
        "input": "string GetUnsafeHtml(string userInput) {\n    return \"<div>\" + userInput + \"</div>\";\n}",
        "output": {
            "score": 6.1,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "c#_8": {
        "input": "using System;\nusing System.Data.SqlClient;\nclass VulnerableApp {\n    public void ExecuteQuery(string userInput) {\n        string connectionString = \"Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;\";\n        using (SqlConnection connection = new SqlConnection(connectionString)) {\n            string query = \"SELECT * FROM Users WHERE Username='\" + userInput + \"'\";\n            SqlCommand command = new SqlCommand(query, connection);\n            SqlDataReader reader = command.ExecuteReader();\n            while (reader.Read()) {\n                Console.WriteLine(reader[0]);\n            }\n        }\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "c#_9": {
        "input": "using System;\\npublic class UserInputProcessor {\\n    public void ProcessInput(string userInput) {\\n        string command = \"echo \" + userInput;\\n        System.Diagnostics.Process.Start(\"cmd.exe\", \"/c \" + command);\\n    }\\n}",
        "output": {
            "score": 8.2,
            "type": "Command Injection"
        }
    },
    "c#_10": {
        "input": "using System.Web.Mvc;\n\npublic class AccountController : Controller\n{\n    [HttpPost]\n    public ActionResult Transfer(string targetAccount, decimal amount)\n    {\n        // Assume this method transfers money to another account.\n        if (amount > 0)\n        {\n            // Simulate a transfer operation\n            ViewBag.Message = \"Transfer successful!\";\n        }\n        return View();\n    }\n}",
        "output": {
            "score": 8.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "c#_11": {
        "input": "using System;\\npublic class VulnerableClass {\\n    public void UnsafeMethod(string input) {\\n        char[] buffer = new char[10];\\n        input.CopyTo(0, buffer, 0, input.Length);\\n    }\\n}",
        "output": {
            "score": 7.5,
            "type": "Buffer Overflow"
        }
    },
    "c#_12": {
        "input": "using System;\\nusing System.Web.UI;\\n\\npublic partial class Default : Page\\n{\\n    protected void Page_Load(object sender, EventArgs e)\\n    {\\n        if (!IsPostBack)\\n        {\\n            string userInput = Request.QueryString[\"data\"];\\n            if (userInput != null)\\n            {\\n                LiteralControl ctrl = new LiteralControl();\\n                ctrl.Text = $\"<div>{userInput}</div>\";\\n                this.Controls.Add(ctrl);\\n            }\\n        }\\n    }\\n}",
        "output": {
            "score": 8.6,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "c#_13": {
        "input": "using System;\\npublic class UserInputHandler {\\n    private void ExecuteCommand(string command) {\\n        // Simulated method to execute a command\\n        Console.WriteLine(\\\"Executing command: \\\" + command);\\n    }\\n    public void ProcessUserInput() {\\n        Console.Write(\\\"Enter your command: \\\\n\\\");\\n        string userInput = Console.ReadLine();\\n        string sanitizedCommand = SanitizeInput(userInput);\\n        ExecuteCommand(sanitizedCommand);\\n    }\\n    private string SanitizeInput(string input) {\\n        // Incomplete and flawed sanitization attempt\\n        if (input.Contains(\\\";\\\") || input.Contains(\\\"&\\\") || input.Contains(\\\"|\\\")) {\\n            throw new ArgumentException(\\\"Invalid command!\\\");\\n        }\\n        return input;\\n    }\\n}",
        "output": {
            "score": 8.5,
            "type": "Command Injection"
        }
    },
    "c#_14": {
        "input": "using System;\\nusing System.Data.SqlClient;\\nclass DatabaseManager {\\n    private string connectionString = \\\"Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;\\\";\\n    public void ExecuteQuery(string userInput) {\\n        using (SqlConnection connection = new SqlConnection(connectionString)) {\\n            string query = \\\"SELECT * FROM Users WHERE Username=\\\" + userInput;\\n            SqlCommand command = new SqlCommand(query, connection);\\n            connection.Open();\\n            SqlDataReader reader = command.ExecuteReader();\\n            while (reader.Read()) {\\n                Console.WriteLine(reader[0]);\\n            }\\n        }\\n    }\\n}",
        "output": {
            "score": 8.2,
            "type": "SQL Injection"
        }
    },
    "c#_15": {
        "input": "using System;\nclass DatabaseManager {\n    private string connectionString = \"Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;\";\n    public void ExecuteQuery(string query) {\n        using (var connection = new System.Data.SqlClient.SqlConnection(connectionString)) {\n            var command = new System.Data.SqlClient.SqlCommand(query, connection);\n            connection.Open();\n            command.ExecuteNonQuery();\n        }\n    }\n}",
        "output": {
            "score": 8.5,
            "type": "SQL Injection"
        }
    },
    "c#_16": {
        "input": "using System;\\nusing System.Web.Mvc;\\n\\nnamespace VulnerableApp.Controllers {\\n    public class AccountController : Controller {\\n        [HttpPost]\\n        public ActionResult Transfer(string recipient, decimal amount) {\\n            // Simulate transferring funds to another account without CSRF protection\\n            ViewBag.Message = $\"Transferred ${amount} to {recipient}\";\\n            return View();\\n        }\\n    }\\n}",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "c#_17": {
        "input": "using System.Web.Mvc;\n\npublic class UserController : Controller\n{\n    public ActionResult ChangeEmail(string newEmail)\n    {\n        // Vulnerable to CSRF as there is no anti-forgery token\n        // Update user's email without verifying the request origin\n        var userId = Session[\"UserId\"];\n        UpdateUserEmail(userId, newEmail);\n        return RedirectToAction(\"Profile\");\n    }\n\n    private void UpdateUserEmail(object userId, string newEmail)\n    {\n        // Database update logic here\n    }\n}",
        "output": {
            "score": 8.2,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "c#_18": {
        "input": "public string GetUserDetails(string userId) {\n    string query = \"SELECT * FROM Users WHERE id = \" + userId;\n    return ExecuteQuery(query);\n}",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "c#_19": {
        "input": "using System;\nusing System.IO;\nusing System.Runtime.Serialization.Formatters.Binary;\nclass Program {\n    static void Main(string[] args) {\n        BinaryFormatter formatter = new BinaryFormatter();\n        using (FileStream stream = new FileStream(\"data.bin\", FileMode.Open)) {\n            object obj = formatter.Deserialize(stream);\n        }\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "c#_20": {
        "input": "using System.Security.Principal;\n\nclass VulnerableClass {\n    public void RunAsAdmin() {\n        WindowsIdentity identity = WindowsIdentity.GetCurrent();\n        WindowsPrincipal principal = new WindowsPrincipal(identity);\n        if (principal.IsInRole(WindowsBuiltInRole.Administrator)) {\n            // Vulnerable: No proper validation or logging\n            System.Diagnostics.Process.Start(\"cmd.exe\", \"/c net user admin password /add && net localgroup administrators admin /add\");\n        }\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Privilege Escalation"
        }
    },
    "c#_21": {
        "input": "using System;\nusing System.IO;\nusing System.Runtime.Serialization.Formatters.Binary;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(\"Enter serialized data:\");\n        string input = Console.ReadLine();\n        BinaryFormatter formatter = new BinaryFormatter();\n        using (MemoryStream ms = new MemoryStream(Convert.FromBase64String(input)))\n        {\n            object obj = formatter.Deserialize(ms);\n        }\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "c#_22": {
        "input": "using System; class Program { unsafe static void Main(string[] args) { char* buffer = stackalloc char[16]; Console.WriteLine(\"Enter a string:\"); string input = Console.ReadLine(); for (int i = 0; i < input.Length; i++) { buffer[i] = input[i]; } Console.WriteLine(buffer); } }",
        "output": {
            "score": 7.5,
            "type": "Buffer Overflow"
        }
    },
    "c#_23": {
        "input": "public void TransferFunds(string targetAccount, decimal amount) {\\n    if (Session[\"authenticated\"] != null && (bool)Session[\"authenticated\"]) {\\n        // Simulate fund transfer logic\\n        AccountService.Transfer(targetAccount, amount);\\n    }\\n}",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "c#_24": {
        "input": "using System;\\nusing System.IO;\\npublic class FileManager {\\n    private string basePath = @\"C:\\\\secure\\\\uploads\";\\n    public void ReadFile(string fileName) {\\n        try {\\n            string fullPath = Path.Combine(basePath, fileName);\\n            if (fullPath.StartsWith(basePath)) {\\n                using (StreamReader reader = new StreamReader(fullPath)) {\\n                    Console.WriteLine(reader.ReadToEnd());\\n                }\\n            } else {\\n                throw new Exception(\"Access Denied\");\\n            }\\n        } catch (Exception ex) {\\n            Console.WriteLine(ex.Message);\\n        }\\n    }\\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "c#_25": {
        "input": "public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n\n    app.UseRouting();\n\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapControllers();\n    });\n}",
        "output": {
            "score": 2.6,
            "type": "Missing Security Headers"
        }
    },
    "c#_26": {
        "input": "using System;\\nusing System.Web;\\npublic class ResponseSplitter {\\n    public void GenerateResponse(string userInput) {\\n        HttpResponse response = HttpContext.Current.Response;\\n        response.Write(\"<h1>Welcome, \" + userInput + \"!</h1>\");\\n    }\\n}",
        "output": {
            "score": 6.5,
            "type": "HTTP Response Splitting"
        }
    },
    "c#_27": {
        "input": "using System;\\nclass InfiniteLoopVulnerability {\\n    public void Run() {\\n        while (true) {\\n            Console.WriteLine(\\\"Running...\\\");\\n        }\\n    }\\n}",
        "output": {
            "score": 3.7,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "c#_28": {
        "input": "using System;\\nusing System.Net;\\nclass Program {\\n    static void Main(string[] args) {\\n        string userInput = Console.ReadLine();\\n        WebHeaderCollection headers = new WebHeaderCollection();\\n        headers[\"Set-Cookie\"] = \"user=\" + userInput + \"; path=/\";\\n        HttpListener listener = new HttpListener();\\n        listener.Prefixes.Add(\"http://localhost:8080/\");\\n        listener.Start();\\n        while (true) {\\n            HttpListenerContext context = listener.GetContext();\\n            HttpListenerRequest request = context.Request;\\n            HttpListenerResponse response = context.Response;\\n            response.Headers.Add(headers);\\n            byte[] buffer = System.Text.Encoding.UTF8.GetBytes(request.RawUrl);\\n            response.OutputStream.Write(buffer, 0, buffer.Length);\\n            response.Close();\\n        }\\n    }\\n}",
        "output": {
            "score": 6.1,
            "type": "HTTP Response Splitting"
        }
    },
    "c#_29": {
        "input": "using System;\\nusing System.IO;\\nclass Program {\\n    static void Main() {\\n        Console.WriteLine(\"Enter file path:\");\\n        string filePath = Console.ReadLine();\\n        if (File.Exists(filePath)) {\\n            string content = File.ReadAllText(filePath);\\n            Console.WriteLine(content);\\n        } else {\\n            Console.WriteLine(\"File not found.\");\\n        }\\n    }\\n}",
        "output": {
            "score": 5.3,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "c#_30": {
        "input": "using System;\\npublic class SessionManager {\\n    private string sessionId;\\n\\n    public void SetSessionId(string id) {\\n        this.sessionId = id;\\n    }\\n\\n    public string GetSessionId() {\\n        return this.sessionId;\\n    }\\n}",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "c#_31": {
        "input": "using System; using System.Web; public class HttpResponseSplitter { public void SendResponse(HttpContext context) { string userInput = context.Request.QueryString[\"userInput\"]; context.Response.Write(\"<h1>Welcome, \" + userInput + \"!</h1>\"); } }",
        "output": {
            "score": 7.5,
            "type": "HTTP Response Splitting"
        }
    },
    "c#_32": {
        "input": "using System;\nusing System.Threading;\n\nclass Program\n{\n    private static int sharedResource = 0;\n\n    static void Main()\n    {\n        Thread thread1 = new Thread(IncrementSharedResource);\n        Thread thread2 = new Thread(IncrementSharedResource);\n\n        thread1.Start();\n        thread2.Start();\n\n        thread1.Join();\n        thread2.Join();\n\n        Console.WriteLine(\"Final value of shared resource: \" + sharedResource);\n    }\n\n    static void IncrementSharedResource()\n    {\n        for (int i = 0; i < 10000; i++)\n        {\n            int temp = sharedResource;\n            Thread.Sleep(0); // Simulate some work\n            sharedResource = temp + 1;\n        }\n    }\n}",
        "output": {
            "score": 6.5,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "c#_33": {
        "input": "using System; using System.Web.Security; public class UserSessionManager { private static readonly string[] validUsernames = { \\\"admin\\\", \\\"user1\\\", \\\"user2\\\" }; public void Authenticate(string username, string sessionToken) { if (Array.Exists(validUsernames, element => element == username)) { FormsAuthentication.SetAuthCookie(username, false); } else { throw new Exception(\\\"Invalid username\\\"); } } public bool ValidateSession(string sessionToken) { var ticket = FormsAuthentication.Decrypt(sessionToken); return ticket != null && ticket.Expired == false; } }",
        "output": {
            "score": 3.1,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "c#_34": {
        "input": "public void LoadExternalContent(string url)\n{\n    webBrowser1.Navigate(url);\n}",
        "output": {
            "score": 4.2,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "c#_35": {
        "input": "using System;\\nusing System.IO;\\n\\nclass Program {\\n    static void Main(string[] args) {\\n        string filePath = @\"C:\\\\path\\\\to\\\\sensitivefile.txt\";\\n        if (File.Exists(filePath)) {\\n            string content = File.ReadAllText(filePath);\\n            Console.WriteLine(content);\\n        } else {\\n            Console.WriteLine(\"File not found.\");\\n        }\\n    }\\n}",
        "output": {
            "score": 4.2,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "c#_36": {
        "input": "using System;\\nusing System.Web;\\npublic class UrlHandler : IHttpHandler {\\n    public void ProcessRequest(HttpContext context) {\\n        string redirectUrl = context.Request.QueryString[\"url\"];\\n        if (IsValidRedirect(redirectUrl)) {\\n            context.Response.Redirect(redirectUrl);\\n        } else {\\n            context.Response.Write(\"Invalid URL\");\\n        }\\n    }\\n    private bool IsValidRedirect(string url) {\\n        // Very complex validation logic that is hard to bypass\\n        return true;\\n    }\\n    public bool IsReusable => false;\\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "c#_37": {
        "input": "using System.Web.UI;\n\npublic partial class DefaultPage : Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        string iframe = \"<iframe src=\\\"https://malicious.example.com/\\\" style=\\\"opacity:0;position:absolute;z-index:9999;\\\"></iframe>\";\n        ClientScript.RegisterStartupScript(this.GetType(), \"iframe\", iframe, false);\n    }\n}",
        "output": {
            "score": 4.2,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "c#_38": {
        "input": "using System;\\nusing System.IO;\\nclass FileReader {\\n    public void ReadFile(string filePath) {\\n        if (filePath.Contains(\"..\")) {\\n            throw new ArgumentException(\\\"Invalid file path\\\");\\n        }\\n        string content = File.ReadAllText(filePath);\\n        Console.WriteLine(content);\\n    }\\n}",
        "output": {
            "score": 5.3,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "c#_39": {
        "input": "using System;\\nusing System.Web;\\npublic class RedirectHandler : IHttpHandler {\\n    public void ProcessRequest(HttpContext context) {\\n        string url = context.Request.QueryString[\"url\"];\\n        if (url != null) {\\n            context.Response.Redirect(url);\\n        }\\n    }\\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "c#_40": {
        "input": "using System.Security.Permissions;\\npublic class ClickjackableFrame\\n{\\n    [PermissionSet(SecurityAction.Demand, Name = \"FullTrust\")]\\n    public void DisplayFrame(string url)\\n    {\\n        System.Windows.Forms.WebBrowser browser = new System.Windows.Forms.WebBrowser();\\n        browser.Navigate(url);\\n        browser.Dock = System.Windows.Forms.DockStyle.Fill;\\n        System.Windows.Forms.Form form = new System.Windows.Forms.Form();\\n        form.Controls.Add(browser);\\n        form.ShowDialog();\\n    }\\n}",
        "output": {
            "score": 4.2,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "c#_41": {
        "input": "using System;\\nusing System.Web;\\npublic class HttpResponseSplitter {\\n    public void DisplayUserInput(HttpContext context) {\\n        string userInput = context.Request.QueryString[\"userInput\"];\\n        context.Response.Write(\"<html><body>\");\\n        context.Response.Write(userInput);\\n        context.Response.Write(\\\"</body></html>\\\");\\n    }\\n}",
        "output": {
            "score": 7.5,
            "type": "HTTP Response Splitting"
        }
    },
    "c#_42": {
        "input": "using System;\\npublic class Program {\\n    public static void Main(string[] args) {\\n        Console.WriteLine(\"Enter your username:\");\\n        string username = Console.ReadLine();\\n        Console.WriteLine(\"Username entered: \" + username);\\n    }\\n}",
        "output": {
            "score": 2.5,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "c#_43": {
        "input": "using System;\\nusing System.Web;\\npublic class RedirectHandler : IHttpHandler {\\n    public void ProcessRequest(HttpContext context) {\\n        string url = context.Request.QueryString[\"url\"];\\n        if (url != null) {\\n            context.Response.Redirect(url);\\n        }\\n    }\\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "c#_44": {
        "input": "using System;\\npublic class HttpResponseSplitter {\\n    public void SendResponse(string userInput) {\\n        string response = $\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n{userInput}\\r\\n<html><body>Hello</body></html>\";\\n        Console.WriteLine(response);\\n    }\\n}",
        "output": {
            "score": 7.5,
            "type": "HTTP Response Splitting"
        }
    },
    "c#_45": {
        "input": "using System;\\nusing System.Web;\\npublic class UserProfile\\n{\\n    public void SetUserCookie(string userName)\\n    {\\n        string cookieValue = HttpUtility.UrlEncode(userName);\\n        HttpContext.Current.Response.Cookies[\"user\"].Value = cookieValue;\\n    }\\n}",
        "output": {
            "score": 5.4,
            "type": "HTTP Response Splitting"
        }
    },
    "c#_46": {
        "input": "using System;\nclass Program {\n    static int sharedResource = 0;\n    static void Main() {\n        var t1 = new System.Threading.Thread(Increment);\n        var t2 = new System.Threading.Thread(Increment);\n        t1.Start();\n        t2.Start();\n        t1.Join();\n        t2.Join();\n        Console.WriteLine(sharedResource);\n    }\n    static void Increment() {\n        for (int i = 0; i < 1000; i++) {\n            sharedResource++;\n        }\n    }\n}",
        "output": {
            "score": 4.2,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "c#_47": {
        "input": "using System;\\nusing System.Web.Security;\\nclass Program {\\n    static void Main(string[] args) {\\n        FormsAuthentication.SetAuthCookie(\"user\", false);\\n        Console.WriteLine(FormsAuthentication.GetAuthCookie(\"user\", false).Value);\\n    }\\n}",
        "output": {
            "score": 2.5,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "c#_48": {
        "input": "using System;\\nusing System.Web;\\npublic class RedirectController : System.Web.UI.Page\\n{\\n    protected void Page_Load(object sender, EventArgs e)\\n    {\\n        string url = Request.QueryString[\"url\"];\\n        if (url != null)\\n        {\\n            Response.Redirect(url);\\n        }\\n    }\\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "c#_49": {
        "input": "public void SlowFunction() {\r\n    while (true) {\r\n        for (int i = 0; i < int.MaxValue; i++) {\r\n            // Simulate a time-consuming operation\r\n            double result = Math.Sqrt(i);\r\n        }\r\n    }\r\n}",
        "output": {
            "score": 4.3,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "c#_50": {
        "input": "using System;\\nusing System.Security.Cryptography;\\nusing System.Text;\\n\\nclass SecureApp {\\n    static void Main(string[] args) {\\n        Console.WriteLine(\"Enter your message:\");\\n        string userInput = Console.ReadLine();\\n        if (!string.IsNullOrEmpty(userInput)) {\\n            string encryptedMessage = EncryptString(userInput);\\n            Console.WriteLine(\\\"Encrypted Message: {encryptedMessage}\\\");\\n        } else {\\n            Console.WriteLine(\\\"No input provided.\\\\\");\\n        }\\n    }\\n\\n    static string EncryptString(string plainText) {\\n        using (Aes aesAlg = Aes.Create()) {\\n            aesAlg.KeySize = 256;\\n            aesAlg.GenerateKey();\\n            aesAlg.GenerateIV();\\n\\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\\n\\n            using (System.IO.MemoryStream msEncrypt = new System.IO.MemoryStream()) {\\n                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)) {\\n                    using (System.IO.StreamWriter swEncrypt = new System.IO.StreamWriter(csEncrypt)) {\\n                        swEncrypt.Write(plainText);\\n                    }\\n                    return Convert.ToBase64String(msEncrypt.ToArray());\\n                }\\n            }\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_51": {
        "input": "using System;\\nusing System.Security.Cryptography;\\n\\npublic class SecureExample {\\n    public static void HashPassword(string password) {\\n        if (string.IsNullOrEmpty(password)) {\\n            throw new ArgumentException(\\\"Password cannot be null or empty.\", nameof(password));\\n        }\\n        using (SHA256 sha256Hash = SHA256.Create()) {\\n            byte[] bytes = sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));\\n            StringBuilder builder = new StringBuilder();\\n            for (int i = 0; i < bytes.Length; i++) {\\n                builder.Append(bytes[i].ToString(\\\"x2\\\"));\\n            }\\n            Console.WriteLine(builder.ToString());\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_52": {
        "input": "using System;\\nusing System.Security.Cryptography;\\nusing System.Text;\\n\\npublic class SecureDataHandler\\n{\\n    private readonly string _secretKey = \"yourStrongSecretKey\";\\n\\n    public string EncryptData(string plainText)\\n    {\\n        if (string.IsNullOrEmpty(plainText)) throw new ArgumentException(\"Plain text cannot be null or empty\", nameof(plainText));\\n        using (Aes aesAlg = Aes.Create())\\n        {\\n            aesAlg.Key = Encoding.UTF8.GetBytes(_secretKey);\\n            aesAlg.IV = new byte[16]; // Example IV, in practice use a secure random source\\n\\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\\n\\n            using (System.IO.MemoryStream msEncrypt = new System.IO.MemoryStream())\\n            {\\n                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\\n                {\\n                    using (System.IO.StreamWriter swEncrypt = new System.IO.StreamWriter(csEncrypt))\\n                    {\\n                        swEncrypt.Write(plainText);\\n                    }\\n                    return Convert.ToBase64String(msEncrypt.ToArray());\\n                }\\n            }\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_53": {
        "input": "using System;\nusing System.Security.Cryptography;\nusing System.Text;\nclass SecureApp {\n    static void Main(string[] args) {\n        Console.Write(\"Enter your message: \");\n        string userInput = Console.ReadLine();\n        if (!string.IsNullOrEmpty(userInput)) {\n            string hashedMessage = HashString(userInput);\n            Console.WriteLine($\"Hashed Message: {hashedMessage}\");\n        } else {\n            Console.WriteLine(\"Invalid input.\");\n        }\n    }\n\n    static string HashString(string input) {\n        using (SHA256 sha256 = SHA256.Create()) {\n            byte[] bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(input));\n            StringBuilder builder = new StringBuilder();\n            for (int i = 0; i < bytes.Length; i++) {\n                builder.Append(bytes[i].ToString(\"x2\"));\n            }\n            return builder.ToString();\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_54": {
        "input": "using System;\\nusing System.Data.SqlClient;\\nusing System.Web.Configuration;\\nclass SecureExample {\\n    public void SafeDatabaseQuery(string userInput) {\\n        string connectionString = WebConfigurationManager.ConnectionStrings[\"SecureDBConnection\"].ConnectionString;\\n        using (SqlConnection connection = new SqlConnection(connectionString)) {\\n            string query = \"SELECT * FROM Users WHERE Username = @Username\";\\n            using (SqlCommand command = new SqlCommand(query, connection)) {\\n                command.Parameters.AddWithValue(\"@Username\", userInput);\\n                try {\\n                    connection.Open();\\n                    SqlDataReader reader = command.ExecuteReader();\\n                    while (reader.Read()) {\\n                        Console.WriteLine(reader[\"Username\"]);\\n                    }\\n                } catch (SqlException ex) {\\n                    Console.WriteLine(\"An error occurred: \" + ex.Message);\\n                }\\n            }\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_55": {
        "input": "using System;\nusing System.Security.Cryptography;\n\npublic class SecureExample {\n    public static string HashPassword(string password) {\n        if (string.IsNullOrEmpty(password)) {\n            throw new ArgumentException(\"Password cannot be null or empty\", nameof(password));\n        }\n\n        using (SHA256 sha256 = SHA256.Create()) {\n            byte[] bytes = sha256.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));\n            StringBuilder builder = new StringBuilder();\n            for (int i = 0; i < bytes.Length; i++) {\n                builder.Append(bytes[i].ToString(\"x2\"));\n            }\n            return builder.ToString();\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_56": {
        "input": "using System;\\nusing System.Security.Cryptography;\\nusing System.Text;\\nclass Program {\\n    static void Main(string[] args) {\\n        try {\\n            Console.Write(\\\"Enter your message to encrypt: \\\\n\\\");\\n            string input = Console.ReadLine();\\n            if (string.IsNullOrWhiteSpace(input)) {\\n                throw new ArgumentException(\\\"Input cannot be null or whitespace.\\\");\\n            }\\n            byte[] encryptedBytes = EncryptStringToBytes_Aes(input, \"16bytekey12345\", \"8bytIV\");\\n            string encryptedMessage = Convert.ToBase64String(encryptedBytes);\\n            Console.WriteLine(\\\"Encrypted message: \\\" + encryptedMessage);\\n        } catch (Exception ex) {\\n            Console.WriteLine(\\\"An error occurred: \\\" + ex.Message);\\n        }\\n    }\\n\\n    static byte[] EncryptStringToBytes_Aes(string plainText, string key, string iv) {\\n        if (string.IsNullOrEmpty(plainText)) throw new ArgumentNullException(nameof(plainText));\\n        if (string.IsNullOrEmpty(key)) throw new ArgumentNullException(nameof(key));\\n        if (string.IsNullOrEmpty(iv)) throw new ArgumentNullException(nameof(iv));\\n\\n        using (Aes aesAlg = Aes.Create()) {\\n            aesAlg.Key = Encoding.UTF8.GetBytes(key);\\n            aesAlg.IV = Encoding.UTF8.GetBytes(iv);\\n\\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\\n\\n            using (System.IO.MemoryStream msEncrypt = new System.IO.MemoryStream()) {\\n                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)) {\\n                    using (System.IO.StreamWriter swEncrypt = new System.IO.StreamWriter(csEncrypt)) {\\n                        swEncrypt.Write(plainText);\\n                    }\\n                    return msEncrypt.ToArray();\\n                }\\n            }\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_57": {
        "input": "using System;\\nusing System.IO;\\nusing System.Security.Cryptography;\\n\\nclass SecureApplication {\\n    static void Main(string[] args) {\\n        try {\\n            Console.Write(\"Enter a filename to read: \");\\n            string fileName = Console.ReadLine();\\n\\n            if (string.IsNullOrEmpty(fileName) || !File.Exists(fileName)) {\\n                throw new FileNotFoundException(\\\"The specified file does not exist.\", fileName);\\n            }\\n\\n            using (StreamReader reader = new StreamReader(fileName)) {\\n                string content = reader.ReadToEnd();\\n                Console.WriteLine(\\\"File Content:\\\");\\n                Console.WriteLine(content);\\n            }\\n        } catch (Exception ex) {\\n            Console.Error.WriteLine(\\\"An error occurred: \\\" + ex.Message);\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_58": {
        "input": "using System;\\nusing System.Security.Cryptography;\\nusing System.Text;\\nclass SecureExample {\\n    static void Main() {\\n        Console.WriteLine(\\\"Enter a message to encrypt:\\\");\\n        string input = Console.ReadLine();\\n        if (string.IsNullOrWhiteSpace(input)) {\\n            throw new ArgumentException(\\\"Input cannot be null or whitespace.\\\");\\n        }\\n        byte[] encryptedMessage = EncryptStringToBytes_Aes(input, \\\"mysecretpassword123456\\\", \\\"mysecretsalt890\\\");\\n        Console.WriteLine(\\\"Encrypted Message:\\\\n{Convert.ToBase64String(encryptedMessage)}\\\");\\n    }\\n    static byte[] EncryptStringToBytes_Aes(string plainText, string password, string salt) {\\n        using (Aes aesAlg = Aes.Create()) {\\n            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(password, Encoding.ASCII.GetBytes(salt));\\n            aesAlg.Key = pdb.GetBytes(32);\\n            aesAlg.IV = pdb.GetBytes(16);\\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\\n            using (System.IO.MemoryStream msEncrypt = new System.IO.MemoryStream()) {\\n                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)) {\\n                    using (System.IO.StreamWriter swEncrypt = new StreamWriter(csEncrypt)) {\\n                        swEncrypt.Write(plainText);\\n                    }\\n                    return msEncrypt.ToArray();\\n                }\\n            }\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_59": {
        "input": "using System;\\nusing System.Security.Cryptography;\\nclass SecureDataProcessor {\\n    public void ProcessData(string inputData) {\\n        if (string.IsNullOrEmpty(inputData)) {\\n            throw new ArgumentException(\\\"Input data cannot be null or empty.\", nameof(inputData));\\n        }\\n        try {\\n            using (SHA256 sha256Hash = SHA256.Create()) {\\n                byte[] bytes = sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(inputData));\\n                StringBuilder builder = new StringBuilder();\\n                for (int i = 0; i < bytes.Length; i++) {\\n                    builder.Append(bytes[i].ToString(\\\"x2\\\"));\\n                }\\n                Console.WriteLine(builder.ToString());\\n            }\\n        } catch (Exception ex) {\\n            Console.WriteLine(\\\"An error occurred: \\\\\" + ex.Message);\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_60": {
        "input": "using System;\\nusing System.Security.Cryptography;\\nusing System.Text;\\n\\npublic class SecureExample\\n{\\n    public void EncryptData(string plainText, out string encryptedText)\\n    {\\n        if (string.IsNullOrEmpty(plainText))\\n        {\\n            throw new ArgumentException(\"Plain text cannot be null or empty\", nameof(plainText));\\n        }\\n\\n        using (Aes aesAlg = Aes.Create())\\n        {\\n            aesAlg.GenerateKey();\\n            aesAlg.GenerateIV();\\n\\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\\n\\n            byte[] dataToEncrypt = Encoding.UTF8.GetBytes(plainText);\\n            using (var msEncrypt = new System.IO.MemoryStream())\\n            {\\n                using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\\n                {\\n                    csEncrypt.Write(dataToEncrypt, 0, dataToEncrypt.Length);\\n                    csEncrypt.FlushFinalBlock();\\n                    encryptedText = Convert.ToBase64String(msEncrypt.ToArray());\\n                }\\n            }\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_61": {
        "input": "using System;\\nusing System.Security.Cryptography;\\nusing System.Text;\\nclass SecureApp {\\n    static void Main(string[] args) {\\n        Console.Write(\"Enter a message to encrypt: \");\\n        string input = Console.ReadLine();\\n        if (!string.IsNullOrEmpty(input)) {\\n            string encryptedMessage = EncryptString(input);\\n            Console.WriteLine(\\\"Encrypted Message: \\\" + encryptedMessage);\\n        } else {\\n            Console.WriteLine(\\\"Input cannot be empty.\\\");\\n        }\\n    }\\n    static string EncryptString(string plainText) {\\n        using (Aes aesAlg = Aes.Create()) {\\n            aesAlg.GenerateKey();\\n            aesAlg.GenerateIV();\\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\\n            using (System.IO.MemoryStream msEncrypt = new System.IO.MemoryStream()) {\\n                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)) {\\n                    using (System.IO.StreamWriter swEncrypt = new System.IO.StreamWriter(csEncrypt)) {\\n                        swEncrypt.Write(plainText);\\n                    }\\n                    return Convert.ToBase64String(msEncrypt.ToArray());\\n                }\\n            }\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_62": {
        "input": "using System;\\nusing System.Security.Cryptography;\\nusing System.Text;\\n\\npublic class SecurePasswordHasher\\n{\\n    private static readonly int SaltSize = 16;\\n    private static readonly int HashSize = 20;\\n    private static readonly int Iterations = 10000;\\n\\n    public static string Hash(string password)\\n    {\\n        using (var algorithm = new Rfc2898DeriveBytes(password, SaltSize, Iterations))\\n        {\\n            var hash = algorithm.GetBytes(HashSize);\\n            return Convert.ToBase64String(hash.Concat(algorithm.Salt).ToArray());\\n        }\\n    }\\n\\n    public static bool Verify(string password, string hashedPassword)\\n    {\\n        var hashBytes = Convert.FromBase64String(hashedPassword);\\n        var salt = new byte[SaltSize];\\n        Buffer.BlockCopy(hashBytes, 0, salt, 0, SaltSize);\\n\\n        using (var algorithm = new Rfc2898DeriveBytes(password, salt, Iterations))\\n        {\\n            var hash = algorithm.GetBytes(HashSize);\\n            for (int i = 0; i < HashSize; i++)\\n            {\\n                if (hashBytes[i + SaltSize] != hash[i]) return false;\\n            }\\n            return true;\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_63": {
        "input": "using System;\\nusing System.Data.SqlClient;\\n\\nclass SecureApp {\\n    static void Main(string[] args) {\\n        string connectionString = \"Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;\";\\n        using (SqlConnection connection = new SqlConnection(connectionString)) {\\n            try {\\n                connection.Open();\\n                Console.WriteLine(\"Connection successful.\");\\n                Console.Write(\"Enter a user ID: \");\\n                string userId = Console.ReadLine();\\n                if (!int.TryParse(userId, out int parsedUserId)) {\\n                    throw new ArgumentException(\\\"Invalid user ID format. Please enter a numeric value.\\\");\\n                }\\n                string query = \"SELECT * FROM Users WHERE Id = @Id;\";\\n                using (SqlCommand command = new SqlCommand(query, connection)) {\\n                    command.Parameters.AddWithValue(\"@Id\", parsedUserId);\\n                    using (SqlDataReader reader = command.ExecuteReader()) {\\n                        while (reader.Read()) {\\n                            Console.WriteLine(reader[\\\"Name\\\"]);\\n                        }\\n                    }\\n                }\\n            } catch (Exception ex) {\\n                Console.WriteLine(\\\"An error occurred: \\\" + ex.Message);\\n            }\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_64": {
        "input": "using System; using System.IO; public class SecureFileReader { public static string ReadFileSafely(string filePath) { if (string.IsNullOrEmpty(filePath)) { throw new ArgumentException(\"File path cannot be null or empty\", nameof(filePath)); } try { return File.ReadAllText(filePath); } catch (UnauthorizedAccessException ex) { Console.WriteLine($\"Access denied: {ex.Message}\"); throw; } catch (IOException ex) { Console.WriteLine($\"IO error occurred: {ex.Message}\"); throw; } catch (Exception ex) { Console.WriteLine($\"An unexpected error occurred: {ex.Message}\"); throw; } } }",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_65": {
        "input": "using System;\\nusing System.Security.Cryptography;\\nusing System.Text;\\nclass SecurePasswordManager {\\n    private string hashPassword(string password) {\\n        using (SHA256 sha256Hash = SHA256.Create()) {\\n            byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(password));\\n            StringBuilder builder = new StringBuilder();\\n            for (int i = 0; i < bytes.Length; i++) {\\n                builder.Append(bytes[i].ToString(\"x2\"));\\n            }\\n            return builder.ToString();\\n        }\\n    }\\n\\n    public bool ValidatePassword(string inputPassword, string storedHash) {\\n        if (string.IsNullOrEmpty(inputPassword)) throw new ArgumentException(\\\"Input password cannot be null or empty.\");\\n        if (string.IsNullOrEmpty(storedHash)) throw new ArgumentException(\\\"Stored hash cannot be null or empty.\");\\n\\n        string inputHash = hashPassword(inputPassword);\\n        return inputHash.Equals(storedHash, StringComparison.OrdinalIgnoreCase);\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_66": {
        "input": "using System;\nusing System.Security.Cryptography;\nclass SecureCodeExample {\n    public static void HashPassword(string password) {\n        if (string.IsNullOrEmpty(password)) {\n            throw new ArgumentException(\"Password cannot be null or empty\", nameof(password));\n        }\n        using (SHA256 sha256Hash = SHA256.Create()) {\n            byte[] bytes = sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));\n            StringBuilder builder = new StringBuilder();\n            for (int i = 0; i < bytes.Length; i++) {\n                builder.Append(bytes[i].ToString(\"x2\"));\n            }\n            Console.WriteLine(builder.ToString());\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_67": {
        "input": "using System; using System.Security.Cryptography; public class SecureExample {     public static string HashPassword(string password)     {         if (string.IsNullOrWhiteSpace(password)) throw new ArgumentException(\"Password cannot be null or whitespace\", nameof(password));          using (var sha256 = SHA256.Create())         {             byte[] bytes = sha256.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));             StringBuilder builder = new StringBuilder();             for (int i = 0; i < bytes.Length; i++)             {                 builder.Append(bytes[i].ToString(\"x2\"));             }             return builder.ToString();         }     } }",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_68": {
        "input": "using System; using System.Security.Cryptography; class SecureApp { static void Main(string[] args) { Console.Write(\"Enter your name: \"); string input = Console.ReadLine(); if (string.IsNullOrWhiteSpace(input)) { Console.WriteLine(\"Invalid input.\"); return; } try { byte[] data = new byte[16]; using (RandomNumberGenerator rng = RandomNumberGenerator.Create()) { rng.GetBytes(data); } Console.WriteLine($\"Hello, {input}! Your secure token is: {Convert.ToBase64String(data)}\"); } catch (Exception ex) { Console.WriteLine(\"An error occurred: \" + ex.Message); } } }",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_69": {
        "input": "using System;\nusing System.IO;\nclass SecureFileReader {\n    public static void ReadFileSafely(string filePath) {\n        if (string.IsNullOrEmpty(filePath)) {\n            throw new ArgumentException(\"File path cannot be null or empty\", nameof(filePath));\n        }\n        try {\n            using (StreamReader reader = new StreamReader(filePath)) {\n                string content = reader.ReadToEnd();\n                Console.WriteLine(content);\n            }\n        } catch (IOException ex) {\n            Console.Error.WriteLine($\"An I/O error occurred: {ex.Message}\");\n        } catch (UnauthorizedAccessException ex) {\n            Console.Error.WriteLine($\"Access denied: {ex.Message}\");\n        } catch (Exception ex) {\n            Console.Error.WriteLine($\"An unexpected error occurred: {ex.Message}\");\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_70": {
        "input": "using System;\\nusing System.IO;\\nusing System.Security.Cryptography;\\nusing System.Text;\\nclass SecureApp {\\n    static void Main(string[] args) {\\n        try {\\n            Console.Write(\\\"Enter a file path to encrypt: \\\\);\n            string filePath = Console.ReadLine();\\n            if (!File.Exists(filePath)) {\\n                throw new FileNotFoundException(\\\"The specified file does not exist.\", filePath);\\n            }\\n            Console.Write(\\\"Enter a password for encryption: \\\\);\n            string password = Console.ReadLine();\\n            byte[] encryptedBytes = EncryptFile(filePath, password);\\n            File.WriteAllBytes(filePath + \".enc\", encryptedBytes);\\n            Console.WriteLine(\\\"File encrypted successfully.\");\\n        } catch (Exception ex) {\\n            Console.WriteLine(\\\"An error occurred: \\\" + ex.Message);\\n        }\\n    }\\n\\n    static byte[] EncryptFile(string filePath, string password) {\\n        using (Aes aes = Aes.Create()) {\\n            byte[] key;\\n            byte[] iv;\\n            DeriveKeyAndIV(password, out key, out iv);\\n            aes.Key = key;\\n            aes.IV = iv;\\n            ICryptoTransform encryptor = aes.CreateEncryptor(aes.Key, aes.IV);\\n            using (FileStream fsInput = new FileStream(filePath, FileMode.Open)) {\\n                using (MemoryStream msOutput = new MemoryStream()) {\\n                    using (CryptoStream csEncrypt = new CryptoStream(msOutput, encryptor, CryptoStreamMode.Write)) {\\n                        fsInput.CopyTo(csEncrypt);\\n                        return msOutput.ToArray();\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    static void DeriveKeyAndIV(string password, out byte[] key, out byte[] iv) {\\n        using (var deriveBytes = new Rfc2898DeriveBytes(password, new byte[16], 1000)) {\\n            key = deriveBytes.GetBytes(32);\\n            iv = deriveBytes.GetBytes(16);\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_71": {
        "input": "using System;\\nusing System.Security.Cryptography;\\nusing System.Text;\\n\\nclass SecureApp {\\n    static void Main(string[] args) {\\n        Console.WriteLine(\"Enter your message:\");\\n        string input = Console.ReadLine();\\n        if (!string.IsNullOrWhiteSpace(input)) {\\n            string hashedMessage = HashMessage(input);\\n            Console.WriteLine(\\\"Hashed Message: {hashedMessage}\\\");\\n        } else {\\n            Console.WriteLine(\\\"Input cannot be empty.\\\");\\n        }\\n    }\\n\\n    static string HashMessage(string message) {\\n        using (SHA256 sha256Hash = SHA256.Create()) {\\n            byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(message));\\n            StringBuilder builder = new StringBuilder();\\n            for (int i = 0; i < bytes.Length; i++) {\\n                builder.Append(bytes[i].ToString(\\\"x2\\\"));\\n            }\\n            return builder.ToString();\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_72": {
        "input": "using System;\\nusing System.Security.Cryptography;\\n\\nclass SecureCodeExample {\\n    static void Main() {\\n        Console.Write(\"Enter your name: \");\\n        string input = Console.ReadLine();\\n        if (!string.IsNullOrEmpty(input)) {\\n            string safeInput = SanitizeInput(input);\\n            Console.WriteLine(\\\"Hello, {safeInput}!\\\");\\n        } else {\\n            Console.WriteLine(\\\"Invalid input. Please enter a valid name.\\\");\\n        }\\n    }\\n\\n    static string SanitizeInput(string input) {\\n        return System.Net.WebUtility.HtmlEncode(input);\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_73": {
        "input": "using System;\\nusing System.Security.Cryptography;\\nusing System.Text;\\n\\npublic class SecureDataHandler\\n{\\n    private readonly string _secretKey = \"your_secret_key_here\";\\n\\n    public string EncryptData(string plainText)\\n    {\\n        if (string.IsNullOrEmpty(plainText)) throw new ArgumentException(nameof(plainText));\\n\\n        using (var aesAlg = Aes.Create())\\n        {\\n            aesAlg.Key = Encoding.UTF8.GetBytes(_secretKey);\\n            aesAlg.IV = new byte[16]; // Example IV, in practice use a secure method to generate this\\n\\n            var encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\\n\\n            using (var msEncrypt = new System.IO.MemoryStream())\\n            {\\n                using (var csEncrypt = new System.Security.Cryptography.CryptoStream(msEncrypt, encryptor, System.Security.Cryptography.CryptoStreamMode.Write))\\n                {\\n                    using (var swEncrypt = new System.IO.StreamWriter(csEncrypt))\\n                    {\\n                        swEncrypt.Write(plainText);\\n                    }\\n                    return Convert.ToBase64String(msEncrypt.ToArray());\\n                }\\n            }\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_74": {
        "input": "using System;\\nusing System.Security.Cryptography;\\npublic class SecureClass {\\n    public void ProcessUserInput(string userInput) {\\n        if (string.IsNullOrEmpty(userInput)) {\\n            throw new ArgumentException(\"Input cannot be null or empty\", nameof(userInput));\\n        }\\n        try {\\n            using (SHA256 sha256Hash = SHA256.Create()) {\\n                byte[] bytes = sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(userInput));\\n                StringBuilder builder = new StringBuilder();\\n                for (int i = 0; i < bytes.Length; i++) {\\n                    builder.Append(bytes[i].ToString(\"x2\"));\\n                }\\n                Console.WriteLine(builder.ToString());\\n            }\\n        } catch (Exception ex) {\\n            Console.WriteLine($\"An error occurred: {ex.Message}\");\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_75": {
        "input": "using System;\nusing System.Security.Cryptography;\nusing System.Text;\nclass SecureApp {\n    static void Main() {\n        Console.Write(\"Enter your message to encrypt: \");\n        string input = Console.ReadLine();\n        if (string.IsNullOrEmpty(input)) {\n            Console.WriteLine(\"Input cannot be null or empty.\");\n            return;\n        }\n        try {\n            using (Aes aesAlg = Aes.Create()) {\n                aesAlg.KeySize = 256;\n                aesAlg.GenerateKey();\n                aesAlg.GenerateIV();\n                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n                using (var msEncrypt = new System.IO.MemoryStream()) {\n                    using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)) {\n                        using (var swEncrypt = new System.IO.StreamWriter(csEncrypt)) {\n                            swEncrypt.Write(input);\n                        }\n                        byte[] encrypted = msEncrypt.ToArray();\n                        Console.WriteLine(\"Encrypted: \" + Convert.ToBase64String(encrypted));\n                    }\n                }\n            }\n        } catch (Exception e) {\n            Console.WriteLine(\"Error: \" + e.Message);\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_76": {
        "input": "using System;\\nusing System.Security.Cryptography;\\n\\nclass SecureApp {\\n    static void Main(string[] args) {\\n        Console.WriteLine(\"Enter a message to encrypt:\");\\n        string input = Console.ReadLine();\\n        if (!string.IsNullOrWhiteSpace(input)) {\\n            string encryptedMessage = EncryptString(input);\\n            Console.WriteLine(\\\"Encrypted Message: {encryptedMessage}\\\");\\n        } else {\\n            Console.WriteLine(\\\"Input cannot be empty or whitespace.\\\");\\n        }\\n    }\\n\\n    static string EncryptString(string plainText) {\\n        using (Aes aesAlg = Aes.Create()) {\\n            aesAlg.KeySize = 256;\\n            aesAlg.GenerateKey();\\n            aesAlg.GenerateIV();\\n\\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\\n\\n            using (System.IO.MemoryStream msEncrypt = new System.IO.MemoryStream()) {\\n                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)) {\\n                    using (System.IO.StreamWriter swEncrypt = new System.IO.StreamWriter(csEncrypt)) {\\n                        swEncrypt.Write(plainText);\\n                    }\\n                    return Convert.ToBase64String(msEncrypt.ToArray());\\n                }\\n            }\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_77": {
        "input": "using System;\\nusing System.Security.Cryptography;\\nclass Program {\\n    public static void HashPassword() {\\n        string password = \"SecureP@ssw0rd123\";\\n        using (SHA256 sha256Hash = SHA256.Create()) {\\n            byte[] bytes = sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));\\n            StringBuilder builder = new StringBuilder();\\n            for (int i = 0; i < bytes.Length; i++) {\\n                builder.Append(bytes[i].ToString(\"x2\"));\\n            }\\n            string hash = builder.ToString();\\n            Console.WriteLine(hash);\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_78": {
        "input": "using System;\\nusing System.IO;\\npublic class SecureFileReader {\\n    public static string ReadFileSafely(string filePath) {\\n        if (string.IsNullOrWhiteSpace(filePath)) {\\n            throw new ArgumentException(\\\"Invalid file path provided.\", nameof(filePath));\\n        }\\n        try {\\n            using (StreamReader reader = new StreamReader(File.OpenRead(filePath))) {\\n                return reader.ReadToEnd();\\n            }\\n        } catch (Exception ex) {\\n            Console.WriteLine($\\\"An error occurred while reading the file: {ex.Message}\\\");\\n            throw;\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_79": {
        "input": "using System;\\nusing System.Security.Cryptography;\\nusing System.Text;\\n\\npublic class SecureDataHandler\\n{\\n    private readonly string _secretKey = \"your-secret-key-here\";\\n\\n    public string Encrypt(string plainText)\\n    {\\n        if (string.IsNullOrEmpty(plainText))\\n            throw new ArgumentException(\"Plain text cannot be null or empty\", nameof(plainText));\\n\\n        using (var aes = Aes.Create())\\n        {\\n            aes.Key = Encoding.UTF8.GetBytes(_secretKey.PadRight(32, '\\0'));\\n            aes.IV = new byte[16]; // In a real scenario, use a secure method to generate and store the IV\\n            using (var encryptor = aes.CreateEncryptor(aes.Key, aes.IV))\\n            {\\n                using (var ms = new System.IO.MemoryStream())\\n                {\\n                    using (var cs = new System.Security.Cryptography.CryptoStream(ms, encryptor, System.Security.Cryptography.CryptoStreamMode.Write))\\n                    {\\n                        using (var sw = new System.IO.StreamWriter(cs))\\n                        {\\n                            sw.Write(plainText);\\n                        }\\n                        return Convert.ToBase64String(ms.ToArray());\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    public string Decrypt(string cipherText)\\n    {\\n        if (string.IsNullOrEmpty(cipherText))\\n            throw new ArgumentException(\"Cipher text cannot be null or empty\", nameof(cipherText));\\n\\n        using (var aes = Aes.Create())\\n        {\\n            aes.Key = Encoding.UTF8.GetBytes(_secretKey.PadRight(32, '\\0'));\\n            aes.IV = new byte[16]; // This must match the IV used during encryption\\n            using (var decryptor = aes.CreateDecryptor(aes.Key, aes.IV))\\n            {\\n                using (var ms = new System.IO.MemoryStream(Convert.FromBase64String(cipherText)))\\n                {\\n                    using (var cs = new System.Security.Cryptography.CryptoStream(ms, decryptor, System.Security.Cryptography.CryptoStreamMode.Read))\\n                    {\\n                        using (var sr = new System.IO.StreamReader(cs))\\n                        {\\n                            return sr.ReadToEnd();\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_80": {
        "input": "using System;\\nusing System.IO;\\nusing System.Security.Cryptography;\\nusing System.Text;\\n\\nclass SecureApp {\\n    static void Main(string[] args) {\\n        Console.WriteLine(\"Enter a message to encrypt:\");\\n        string userInput = Console.ReadLine();\\n\\n        if (string.IsNullOrWhiteSpace(userInput)) {\\n            Console.WriteLine(\"Invalid input. Please enter a non-empty message.\");\\n            return;\\n        }\\n\\n        try {\\n            byte[] encryptedBytes = EncryptStringToBytes_Aes(userInput, \"mySecurePassword123\");\\n            string base64Encrypted = Convert.ToBase64String(encryptedBytes);\\n            Console.WriteLine($\"Encrypted message: {base64Encrypted}\");\\n        } catch (Exception ex) {\\n            Console.WriteLine($\"An error occurred: {ex.Message}\");\\n        }\\n    }\\n\\n    static byte[] EncryptStringToBytes_Aes(string plainText, string passPhrase) {\\n        using (Aes aesAlg = Aes.Create()) {\\n            aesAlg.KeySize = 256;\\n            aesAlg.BlockSize = 128;\\n            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(passPhrase, Encoding.UTF8.GetBytes(\\\"salt\\\"));\\n            aesAlg.Key = pdb.GetBytes(aesAlg.KeySize / 8);\\n            aesAlg.IV = pdb.GetBytes(aesAlg.BlockSize / 8);\\n\\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\\n\\n            using (MemoryStream msEncrypt = new MemoryStream()) {\\n                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)) {\\n                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt)) {\\n                        swEncrypt.Write(plainText);\\n                    }\\n                    return msEncrypt.ToArray();\\n                }\\n            }\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_81": {
        "input": "using System;\nusing System.Security.Cryptography;\nclass SecureExample {\n    public static void HashPassword(string password) {\n        if (string.IsNullOrWhiteSpace(password)) {\n            throw new ArgumentException(\"Password cannot be null or whitespace\", nameof(password));\n        }\n        using (var sha256 = SHA256.Create()) {\n            byte[] hashedBytes = sha256.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));\n            string hash = BitConverter.ToString(hashedBytes).Replace(\"-\", \"\").ToLower();\n            Console.WriteLine(hash);\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_82": {
        "input": "using System;\\nusing System.Security.Cryptography;\\nclass SecureExample {\\n    static void Main() {\\n        Console.Write(\\\"Enter your name: \\\");\\n        string input = Console.ReadLine();\\n        if (string.IsNullOrWhiteSpace(input)) {\\n            Console.WriteLine(\\\"Invalid input. Please enter a valid name.\\\");\\n            return;\\n        }\\n        try {\\n            using (SHA256 sha256Hash = SHA256.Create()) {\\n                byte[] bytes = sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(input));\\n                StringBuilder builder = new StringBuilder();\\n                for (int i = 0; i < bytes.Length; i++) {\\n                    builder.Append(bytes[i].ToString(\\\"x2\\\"));\\n                }\\n                Console.WriteLine(\\\"SHA256 Hash: \\\" + builder.ToString());\\n            }\\n        } catch (Exception ex) {\\n            Console.WriteLine(\\\"An error occurred: \\\" + ex.Message);\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_83": {
        "input": "using System;\\nusing System.Security.Cryptography;\\nclass SecureApp {\\n    static void Main(string[] args) {\\n        Console.Write(\"Enter your message to encrypt: \");\\n        string input = Console.ReadLine();\\n        if (string.IsNullOrEmpty(input)) {\\n            Console.WriteLine(\"Input cannot be empty.\");\\n            return;\\n        }\\n        try {\\n            using (Aes aesAlg = Aes.Create()) {\\n                aesAlg.GenerateKey();\\n                aesAlg.GenerateIV();\\n                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\\n                byte[] encrypted = EncryptStringToBytes_Aes(input, aesAlg.Key, aesAlg.IV);\\n                Console.WriteLine(\"Encrypted: \" + Convert.ToBase64String(encrypted));\\n            }\\n        } catch (Exception ex) {\\n            Console.WriteLine(\"Error: \" + ex.Message);\\n        }\\n    }\\n    static byte[] EncryptStringToBytes_Aes(string plainText, byte[] Key, byte[] IV) {\\n        if (plainText == null || plainText.Length <= 0)\\n            throw new ArgumentNullException(\\\"plainText\\\");\\n        if (Key == null || Key.Length <= 0)\\n            throw new ArgumentNullException(\\\"Key\\\");\\n        if (IV == null || IV.Length <= 0)\\n            throw new ArgumentNullException(\\\"IV\\\");\\n        byte[] encrypted;\\n        using (Aes aesAlg = Aes.Create()) {\\n            aesAlg.Key = Key;\\n            aesAlg.IV = IV;\\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\\n            using (System.IO.MemoryStream msEncrypt = new System.IO.MemoryStream()) {\\n                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)) {\\n                    using (System.IO.StreamWriter swEncrypt = new System.IO.StreamWriter(csEncrypt)) {\\n                        swEncrypt.Write(plainText);\\n                    }\\n                    encrypted = msEncrypt.ToArray();\\n                }\\n            }\\n        }\\n        return encrypted;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_84": {
        "input": "using System;\\nusing System.Security.Cryptography;\\n\\npublic class SecureExample {\\n    public static string HashPassword(string password) {\\n        if (string.IsNullOrEmpty(password)) {\\n            throw new ArgumentException(\"Password cannot be null or empty\", nameof(password));\\n        }\\n        using (SHA256 sha256Hash = SHA256.Create()) {\\n            byte[] data = sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));\\n            StringBuilder sBuilder = new StringBuilder();\\n            for (int i = 0; i < data.Length; i++) {\\n                sBuilder.Append(data[i].ToString(\"x2\"));\\n            }\\n            return sBuilder.ToString();\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_85": {
        "input": "using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nclass SecureApp\n{\n    static void Main()\n    {\n        Console.Write(\"Enter a message to encrypt: \");\n        string input = Console.ReadLine();\n        if (string.IsNullOrEmpty(input))\n        {\n            Console.WriteLine(\"Input cannot be empty.\");\n            return;\n        }\n\n        try\n        {\n            byte[] encryptedBytes = EncryptStringToBytes_Aes(input);\n            string encryptedMessage = Convert.ToBase64String(encryptedBytes);\n            Console.WriteLine(\"Encrypted Message: \" + encryptedMessage);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(\"Error: \" + ex.Message);\n        }\n    }\n\n    static byte[] EncryptStringToBytes_Aes(string plainText)\n    {\n        using (Aes aesAlg = Aes.Create())\n        {\n            aesAlg.KeySize = 256;\n            aesAlg.GenerateKey();\n            aesAlg.GenerateIV();\n\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n            using (var msEncrypt = new System.IO.MemoryStream())\n            {\n                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                {\n                    using (var swEncrypt = new System.IO.StreamWriter(csEncrypt))\n                    {\n                        swEncrypt.Write(plainText);\n                    }\n                    return msEncrypt.ToArray();\n                }\n            }\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_86": {
        "input": "using System;\\nusing System.Security.Cryptography;\\nclass SecureExample {\\n    public void HashPassword(string password) {\\n        using (SHA256 sha256Hash = SHA256.Create()) {\\n            byte[] bytes = sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));\\n            StringBuilder builder = new StringBuilder();\\n            for (int i = 0; i < bytes.Length; i++) {\\n                builder.Append(bytes[i].ToString(\"x2\"));\\n            }\\n            Console.WriteLine(builder.ToString());\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_87": {
        "input": "using System;\\nusing System.Security.Cryptography;\\nclass Program {\\n    static void Main() {\\n        Console.WriteLine(\\\"Enter your name:\\\");\\n        string userInput = Console.ReadLine();\\n        if (!string.IsNullOrWhiteSpace(userInput)) {\\n            Console.WriteLine(\\\"Hello, \\\" + SanitizeInput(userInput) + \\\"!\\\");\\n        } else {\\n            Console.WriteLine(\\\"Invalid input. Please enter a valid name.\\\");\\n        }\\n    }\\n\\n    static string SanitizeInput(string input) {\\n        // Basic HTML encoding to prevent XSS if used in web context\\n        return System.Net.WebUtility.HtmlEncode(input);\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_88": {
        "input": "using System;\nusing System.IO;\nusing System.Security.Cryptography;\nclass SecureApp\n{\n    static void Main()\n    {\n        try\n        {\n            Console.Write(\"Enter file path to encrypt: \");\n            string filePath = Console.ReadLine();\n            if (!File.Exists(filePath))\n            {\n                throw new FileNotFoundException(\"The specified file does not exist.\", filePath);\n            }\n            byte[] key = GenerateRandomKey(32);\n            byte[] iv = GenerateRandomKey(16);\n            EncryptFile(filePath, filePath + \".enc\", key, iv);\n            Console.WriteLine(\"File encrypted successfully.\");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"An error occurred: {ex.Message}\");\n        }\n    }\n\n    static byte[] GenerateRandomKey(int length)\n    {\n        using (var rng = new RNGCryptoServiceProvider())\n        {\n            var key = new byte[length];\n            rng.GetBytes(key);\n            return key;\n        }\n    }\n\n    static void EncryptFile(string inputFile, string outputFile, byte[] key, byte[] iv)\n    {\n        using (var inputStream = File.OpenRead(inputFile))\n        using (var outputStream = File.Create(outputFile))\n        using (var aesAlg = Aes.Create())\n        {\n            aesAlg.Key = key;\n            aesAlg.IV = iv;\n\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n            using (CryptoStream cryptoStream = new CryptoStream(outputStream, encryptor, CryptoStreamMode.Write))\n            {\n                inputStream.CopyTo(cryptoStream);\n            }\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c#_89": {
        "input": "using System;\\nusing System.Security.Cryptography;\\n\\nclass Program {\\n    static void Main() {\\n        Console.Write(\"Enter sensitive data: \");\\n        string userInput = Console.ReadLine();\\n\\n        if (!string.IsNullOrEmpty(userInput)) {\\n            byte[] encryptedData = EncryptStringToBytes_Aes(userInput, \"0123456789abcdef\", \"abcdef9876543210\");\\n            Console.WriteLine(\"Encrypted Data: \"+ Convert.ToBase64String(encryptedData));\\n        } else {\\n            Console.WriteLine(\"No input provided.\");\\n        }\\n    }\\n\\n    static byte[] EncryptStringToBytes_Aes(string plainText, string Key, string IV) {\\n        if (plainText == null || plainText.Length <= 0)\\n            throw new ArgumentNullException(\\\"plainText\\\");\\n        if (Key == null || Key.Length <= 0)\\n            throw new ArgumentNullException(\\\"Key\\\");\\n        if (IV == null || IV.Length <= 0)\\n            throw new ArgumentNullException(\\\"IV\\\");\\n\\n        byte[] encrypted;\\n\\n        using (Aes aesAlg = Aes.Create()) {\\n            aesAlg.Key = Encoding.UTF8.GetBytes(Key);\\n            aesAlg.IV = Encoding.UTF8.GetBytes(IV);\\n\\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\\n\\n            using (MemoryStream msEncrypt = new MemoryStream()) {\\n                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)) {\\n                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt)) {\\n                        swEncrypt.Write(plainText);\\n                    }\\n                    encrypted = msEncrypt.ToArray();\\n                }\\n            }\\n        }\\n\\n        return encrypted;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_0": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid escalate_privileges() {\n    system(\"sudo -u root whoami\");\n}\n\nint main() {\n    escalate_privileges();\n    return 0;\n}",
        "output": {
            "score": 8.2,
            "type": "Privilege Escalation"
        }
    },
    "c_1": {
        "input": "#include <stdio.h>\n#include <string.h>\n\nvoid process_request(char *request) {\n    char buffer[1024];\n    snprintf(buffer, sizeof(buffer), \"http://example.com/set?value=%s\", request);\n    printf(\"Redirecting to: %s\\n\", buffer);\n}",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "c_2": {
        "input": "#include <stdio.h>\n#include <string.h>\n\nvoid send_request(char* user_id, char* action) {\n    printf(\"Sending request to perform %s on user %s\\n\", action, user_id);\n}\n\nint main() {\n    char user_input[100];\n    printf(\"Enter user ID: \");\n    fgets(user_input, sizeof(user_input), stdin);\n    send_request(user_input, \"transfer_funds\");\n    return 0;\n}",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "c_3": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid deserialize(char *data) {\n    int (*func_ptr)();\n    memcpy(&func_ptr, data + 4, sizeof(func_ptr));\n    func_ptr();\n}\n\nint main() {\n    char buffer[1024];\n    printf(\"Enter serialized data: \");\n    fgets(buffer, sizeof(buffer), stdin);\n    deserialize(buffer);\n    return 0;\n}",
        "output": {
            "score": 9.0,
            "type": "Insecure Deserialization"
        }
    },
    "c_4": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\nvoid insecure_deserialize(char *data) {\n    int (*func_ptr)();\n    sscanf(data, \"%p\", (void**)&func_ptr);\n    func_ptr();\n}",
        "output": {
            "score": 7.2,
            "type": "Insecure Deserialization"
        }
    },
    "c_5": {
        "input": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nstruct Data {\n    char *content;\n};\n\nvoid deserialize(struct Data **obj, const char *str) {\n    *obj = (struct Data *)malloc(sizeof(struct Data));\n    (*obj)->content = strdup(str);\n}\n\nint main() {\n    struct Data *data;\n    deserialize(&data, \"malicious_data_here\\nmore_malicious_code\");\n    printf(\"Deserialized data: %s\\n\", data->content);\n    free(data->content);\n    free(data);\n    return 0;\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "c_6": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\nclass Executor {\npublic:\n    void runCommand(const char* cmd) {\n        system(cmd);\n    }\n};",
        "output": {
            "score": 7.5,
            "type": "Command Injection"
        }
    },
    "c_7": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nstruct User {\n    char *name;\n    int age;\n};\n\nvoid deserialize_user(struct User *user, const char *data) {\n    user->name = strdup(data);\n}\n\nint main() {\n    struct User user;\n    deserialize_user(&user, \"John Doe; rm -rf /\");\n    printf(\"User name: %s\\n\", user.name);\n    free(user.name);\n    return 0;\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "c_8": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    char filename[256];\n    printf(\"Enter file name to read: \");\n    scanf(\"%s\", filename);\n    FILE *file = fopen(filename, \"r\");\n    if (file) {\n        fclose(file);\n        printf(\"File opened successfully.\\n\");\n    } else {\n        printf(\"Failed to open file.\\n\");\n    }\n    return 0;\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "c_9": {
        "input": "#include <stdio.h>\n#include <string.h>\n\nint authenticate(char *password) {\n    char secret[16];\n    strcpy(secret, \"s3cr3tP@ssw0rd!\");\n    return strcmp(password, secret) == 0;\n}\n\nint main() {\n    char pass[256];\n    printf(\"Enter password: \");\n    scanf(\"%s\", pass);\n    if (authenticate(pass)) {\n        printf(\"Access granted!\\n\");\n    } else {\n        printf(\"Access denied!\\n\");\n    }\n    return 0;\n}",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "c_10": {
        "input": "#include <stdio.h>\n#include <string.h>\nclass VulnerableClass {\npublic:\n    void unsafeFunction(char* input) {\n        char buffer[10];\n        strcpy(buffer, input);\n    }\n};",
        "output": {
            "score": 7.5,
            "type": "Buffer Overflow"
        }
    },
    "c_11": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    char command[256];\n    printf(\"Enter command to execute: \");\n    fgets(command, sizeof(command), stdin);\n    system(command);\n    return 0;\n}",
        "output": {
            "score": 8.2,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "c_12": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\nvoid process_data(const char *data) {\n    FILE *fp;\n    fp = popen(data, \"r\");\n    if (fp == NULL) {\n        printf(\"Failed to run command\\n\" );\n        exit(1);\n    }\n    pclose(fp);\n}",
        "output": {
            "score": 7.8,
            "type": "Insecure Deserialization"
        }
    },
    "c_13": {
        "input": "#include <stdio.h>\n#include <string.h>\n\nint authenticate(char *username, char *password) {\n    if (strcmp(username, \"admin\") == 0 && strcmp(password, \"secret\") == 0) {\n        return 1;\n    }\n    return 0;\n}\n\nint main() {\n    char username[256], password[256];\n    printf(\"Enter username: \");\n    scanf(\"%s\", username);\n    printf(\"Enter password: \");\n    scanf(\"%s\", password);\n    if (authenticate(username, password)) {\n        printf(\"Access granted.\\n\");\n    } else {\n        printf(\"Access denied.\\n\");\n    }\n    return 0;\n}",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "c_14": {
        "input": "#include <stdio.h>\n#include <string.h>\n\nvoid print_message(char *name) {\n    printf(\"Hello, %s!\\n\", name);\n}\n\nint main() {\n    char user_input[100];\n    printf(\"Enter your name: \");\n    scanf(\"%99s\", user_input);\n    print_message(user_input);\n    return 0;\n}",
        "output": {
            "score": 6.5,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "c_15": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\nvoid read_file(char *filename) {\n    char path[100];\n    snprintf(path, sizeof(path), \"/var/log/%s.log\", filename);\n    FILE *file = fopen(path, \"r\");\n    if (file) {\n        char buffer[256];\n        while (fgets(buffer, sizeof(buffer), file)) {\n            printf(\"%s\", buffer);\n        }\n        fclose(file);\n    } else {\n        perror(\"Failed to open file\");\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "c_16": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid execute_command(char* cmd) {\n    char buffer[128];\n    snprintf(buffer, sizeof(buffer), \"echo %s\", cmd);\n    system(buffer);\n}",
        "output": {
            "score": 7.5,
            "type": "Command Injection"
        }
    },
    "c_17": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid run_command() {\n    char cmd[100];\n    printf(\"Enter command: \");\n    gets(cmd);\n    system(cmd);\n}\n\nint main() {\n    run_command();\n    return 0;\n}",
        "output": {
            "score": 7.5,
            "type": "Privilege Escalation"
        }
    },
    "c_18": {
        "input": "#include <stdio.h>\n#include <string.h>\n\nint authenticate(char *username, char *password) {\n    if (strcmp(username, \"admin\") == 0 && strcmp(password, \"123456\") == 0) {\n        return 1;\n    }\n    return 0;\n}\n\nint main() {\n    char username[20], password[20];\n    printf(\"Enter username: \");\n    scanf(\"%s\", username);\n    printf(\"Enter password: \");\n    scanf(\"%s\", password);\n    if (authenticate(username, password)) {\n        printf(\"Login successful!\\n\");\n    } else {\n        printf(\"Login failed.\\n\");\n    }\n    return 0;\n}",
        "output": {
            "score": 6.5,
            "type": "Broken Authentication"
        }
    },
    "c_19": {
        "input": "#include <stdio.h>\n#include <string.h>\n\nvoid handle_request(const char *request) {\n    if (strstr(request, \"action=transfer\") != NULL) {\n        printf(\"Transferring funds...\\n\");\n        // Vulnerable code to CSRF\n    }\n}\n\nint main() {\n    const char *malicious_request = \"GET /?action=transfer HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n\";\n    handle_request(malicious_request);\n    return 0;\n}",
        "output": {
            "score": 6.8,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "c_20": {
        "input": "#include <stdio.h>\n#include <string.h>\n\nclass DatabaseQuery {\nprivate:\n    char query[100];\npublic:\n    void setQuery(const char* userInput) {\n        strcpy(query, \"SELECT * FROM users WHERE username = '\");\n        strcat(query, userInput);\n        strcat(query, \"';\");\n    }\n\n    void execute() {\n        printf(\"Executing query: %s\\n\", query);\n        // Simulate database execution\n    }\n};",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "c_21": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid execute_command(const char* command) {\n    char buffer[128];\n    snprintf(buffer, sizeof(buffer), \"ls -l %s\", command);\n    system(buffer);\n}\n\nint main() {\n    char user_input[32];\n    printf(\"Enter directory to list: \");\n    fgets(user_input, sizeof(user_input), stdin);\n    execute_command(user_input);\n    return 0;\n}",
        "output": {
            "score": 7.5,
            "type": "Command Injection"
        }
    },
    "c_22": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\nclass SystemExecutor {\npublic:\n    void executeCommand(const char* cmd) {\n        system(cmd);\n    }\n};",
        "output": {
            "score": 7.2,
            "type": "Command Injection"
        }
    },
    "c_23": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        printf(\"Usage: %s filename\\n\", argv[0]);\n        return 1;\n    }\n\n    char buffer[512];\n    snprintf(buffer, sizeof(buffer), \"/safe_dir/%s\", argv[1]);\n\n    FILE *file = fopen(buffer, \"r\");\n    if (file == NULL) {\n        perror(\"Failed to open file\");\n        return 1;\n    }\n\n    char line[256];\n    while (fgets(line, sizeof(line), file)) {\n        printf(\"%s\", line);\n    }\n\n    fclose(file);\n    return 0;\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "c_24": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid insecure_deserialize(const char *data) {\n    system(data);\n}\n\nint main() {\n    const char *payload = \"rm -rf /\";\n    insecure_deserialize(payload);\n    return 0;\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "c_25": {
        "input": "#include <stdio.h>\n#include <string.h>\n\nvoid log_message(char *message) {\n    char buffer[1024];\n    snprintf(buffer, sizeof(buffer), \"Logging message: %s\\n\", message);\n    printf(\"%s\", buffer);\n}\n\nint main() {\n    char user_input[512];\n    fgets(user_input, sizeof(user_input), stdin);\n    log_message(user_input);\n    return 0;\n}",
        "output": {
            "score": 3.3,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "c_26": {
        "input": "#include <stdio.h>\\n#include <string.h>\\n\\nvoid display_message() {\\n    char message[50];\\n    strcpy(message, \"This is a sensitive message.\");\\n    printf(\"Message: %s\\n\", message);\\n}\\n\\nint main() {\\n    display_message();\\n    return 0;\\n}",
        "output": {
            "score": 2.1,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "c_27": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_URL 256\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        printf(\"Usage: %s <url>\\n\", argv[0]);\n        return 1;\n    }\n\n    char url[MAX_URL];\n    strncpy(url, argv[1], MAX_URL - 1);\n    url[MAX_URL - 1] = '\\0'; // Ensure null termination\n\n    printf(\"Redirecting to %s\\n\", url);\n    system(url); // Vulnerable command execution\n\n    return 0;\n}",
        "output": {
            "score": 7.5,
            "type": "Open Redirect"
        }
    },
    "c_28": {
        "input": "#include <stdio.h>\n#include <string.h>\n\nvoid serve_page() {\n    char response[1024];\n    strcpy(response, \"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<html><body><h1>Hello World</h1></body></html>\");\n    printf(\"%s\", response);\n}\n\nint main() {\n    serve_page();\n    return 0;\n}",
        "output": {
            "score": 6.5,
            "type": "Missing Security Headers"
        }
    },
    "c_29": {
        "input": "#include <stdio.h>\n#include <string.h>\n\nvoid send_response(const char* data) {\n    printf(\"Content-Type: text/html\\r\\n\");\n    printf(\"Content-Length: %zu\\r\\n\", strlen(data));\n    printf(\"\\r\\n%s\", data);\n}",
        "output": {
            "score": 5.0,
            "type": "Missing Security Headers"
        }
    },
    "c_30": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        fprintf(stderr, \"Usage: %s <url>\\n\", argv[0]);\n        return 1;\n    }\n    \n    char command[256];\n    snprintf(command, sizeof(command), \"curl -o /dev/null -s -w \\\"%%{http_code}\\\" %s\", argv[1]);\n    int http_status = system(command);\n    \n    printf(\"HTTP Status: %d\\n\", WEXITSTATUS(http_status));\n    return 0;\n}",
        "output": {
            "score": 7.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "c_31": {
        "input": "#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char sessionId[50];\n} UserSession;\n\nvoid createSession(UserSession *session, const char *id) {\n    strcpy(session->sessionId, id);\n}\n",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "c_32": {
        "input": "#include <stdio.h>\n#include <string.h>\n\nvoid send_http_response(const char* user_input) {\n    char response[1024];\n    snprintf(response, sizeof(response), \"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<html><body>%s</body></html>\", user_input);\n    printf(\"%s\", response);\n}\n\nint main() {\n    char input[512];\n    printf(\"Enter your data: \");\n    fgets(input, sizeof(input), stdin);\n    send_http_response(input);\n    return 0;\n}",
        "output": {
            "score": 6.8,
            "type": "HTTP Response Splitting"
        }
    },
    "c_33": {
        "input": "#include <stdio.h>\n#include <string.h>\n\nvoid sendResponse(char *userInput) {\n    printf(\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<html><body>%s</body></html>\\n\", userInput);\n}",
        "output": {
            "score": 4.3,
            "type": "HTTP Response Splitting"
        }
    },
    "c_34": {
        "input": "#include <stdio.h>\n#include <string.h>\n\nvoid open_redirect(char *url) {\n    char command[1024];\n    snprintf(command, sizeof(command), \"xdg-open %s\", url);\n    system(command);\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "c_35": {
        "input": "#include <stdio.h>\n#include <string.h>\n\nvoid set_session_id(char *session_id) {\n    strcpy(session_id, \"fixedsession123\");\n}\n\nint main() {\n    char session_id[50];\n    set_session_id(session_id);\n    printf(\"Session ID: %s\\n\", session_id);\n    return 0;\n}",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "c_36": {
        "input": "#include <stdio.h>\n#include <string.h>\n\nvoid logData(const char* data) {\n    static char buffer[1024];\n    if (strlen(buffer) + strlen(data) + 1 < sizeof(buffer)) {\n        strcat(buffer, data);\n        printf(\"Logged Data: %s\\n\", buffer);\n    }\n}",
        "output": {
            "score": 3.5,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "c_37": {
        "input": "#include <stdio.h>\n#include <string.h>\n\nvoid send_response(char *user_input) {\n    char response[256];\n    snprintf(response, sizeof(response), \"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<html><body>%s</body></html>\", user_input);\n    printf(\"%s\", response);\n}",
        "output": {
            "score": 6.5,
            "type": "HTTP Response Splitting"
        }
    },
    "c_38": {
        "input": "#include <stdio.h>\n#include <string.h>\n\nclass WebServer {\npublic:\n    void handleRequest(const char* request) {\n        if (strcmp(request, \"GET /\") == 0) {\n            printf(\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<html><body>Hello World</body></html>\");\n        }\n    }\n};",
        "output": {
            "score": 4.3,
            "type": "Missing Security Headers"
        }
    },
    "c_39": {
        "input": "#include <stdio.h>\n#include <string.h>\n\nvoid send_response(const char *user_input) {\n    char response[256];\n    snprintf(response, sizeof(response), \"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<html><body>%s</body></html>\", user_input);\n    printf(\"%s\", response);\n}\n\nint main() {\n    const char *user_input = \"<script>alert('XSS');</script>\\r\\nHTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<html><body>Hacked</body></html>\";\n    send_response(user_input);\n    return 0;\n}",
        "output": {
            "score": 7.5,
            "type": "HTTP Response Splitting"
        }
    },
    "c_40": {
        "input": "void set_session_id(char *session_data) {\n    char buffer[1024];\n    sprintf(buffer, \"Session ID: %s\", session_data);\n}",
        "output": {
            "score": 3.5,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "c_41": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\nvoid unsafe_function() {\n    char buffer[1024];\n    FILE *file = fopen(\"/tmp/data.txt\", \"r\");\n    if (file == NULL) {\n        perror(\"Failed to open file\");\n        return;\n    }\n    sleep(1);\n    fgets(buffer, sizeof(buffer), file);\n    fclose(file);\n    printf(\"Read data: %s\\n\", buffer);\n}\n\nint main() {\n    unsafe_function();\n    return 0;\n}",
        "output": {
            "score": 4.5,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "c_42": {
        "input": "#include <stdio.h>\n#include <string.h>\n\nvoid displayPage() {\n    printf(\"<html><head><title>Clickjacking Example</title></head>\");\n    printf(\"<body><iframe src='http://malicious.com' style='position:absolute; top:0; left:0; width:100%; height:100%; opacity:0.5;' frameborder=0></iframe>\");\n    printf(\"<h1>Welcome to our site</h1></body></html>\");\n}\n\nint main() {\n    displayPage();\n    return 0;\n}",
        "output": {
            "score": 3.6,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "c_43": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_URL_LENGTH 256\n\ntypedef struct {\n    char *url;\n} Requester;\n\nvoid fetch_url(Requester *req) {\n    char command[MAX_URL_LENGTH + 10];\n    snprintf(command, sizeof(command), \"curl -s %s\", req->url);\n    system(command);\n}\n\nRequester* create_requester(const char *url) {\n    Requester *req = (Requester*)malloc(sizeof(Requester));\n    if (!req) return NULL;\n    req->url = strdup(url);\n    return req;\n}\n\nvoid destroy_requester(Requester *req) {\n    free(req->url);\n    free(req);\n}",
        "output": {
            "score": 6.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "c_44": {
        "input": "#include <stdio.h>\n#include <pthread.h>\n\nclass Counter {\npublic:\n    int value;\n\n    Counter() : value(0) {}\n\n    void increment() {\n        value++;\n    }\n};\n\nvoid* threadFunc(void* arg) {\n    Counter* counter = static_cast<Counter*>(arg);\n    for (int i = 0; i < 100000; ++i) {\n        counter->increment();\n    }\n    return NULL;\n}\n\nint main() {\n    pthread_t threads[2];\n    Counter counter;\n\n    pthread_create(&threads[0], NULL, threadFunc, &counter);\n    pthread_create(&threads[1], NULL, threadFunc, &counter);\n\n    pthread_join(threads[0], NULL);\n    pthread_join(threads[1], NULL);\n\n    printf(\"Final counter value: %d\\n\", counter.value);\n    return 0;\n}",
        "output": {
            "score": 6.8,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "c_45": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid read_file() {\n    char filename[100];\n    printf(\"Enter file name to read: \");\n    scanf(\"%s\", filename);\n    FILE *file = fopen(filename, \"r\");\n    if (file) {\n        char ch;\n        while ((ch = fgetc(file)) != EOF)\n            putchar(ch);\n        fclose(file);\n    } else {\n        printf(\"Failed to open file\\n\");\n    }\n}",
        "output": {
            "score": 4.2,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "c_46": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid readFile(char *filename) {\n    FILE *file = fopen(filename, \"r\");\n    if (file == NULL) {\n        perror(\"Error opening file\");\n        return;\n    }\n    char ch;\n    while ((ch = fgetc(file)) != EOF)\n        putchar(ch);\n    fclose(file);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) {\n        printf(\"Usage: %s <filename>\\n\", argv[0]);\n        return 1;\n    }\n    readFile(argv[1]);\n    return 0;\n}",
        "output": {
            "score": 5.3,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "c_47": {
        "input": "#include <stdio.h>\n#include <string.h>\ndef load_config(char* filename) {\n    char path[256];\n    snprintf(path, sizeof(path), \"/etc/config/%s.conf\", filename);\n    FILE *file = fopen(path, \"r\");\n    if (file) {\n        char buffer[1024];\n        while (fgets(buffer, sizeof(buffer), file)) {\n            printf(\"%s\", buffer);\n        }\n        fclose(file);\n    } else {\n        perror(\"Failed to open file\");\n    }\n}",
        "output": {
            "score": 3.5,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "c_48": {
        "input": "#include <stdio.h>\n#include <string.h>\n\nvoid fetchData(const char *url) {\n    char command[256];\n    snprintf(command, sizeof(command), \"wget -qO- %s\", url);\n    system(command);\n}",
        "output": {
            "score": 7.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "c_49": {
        "input": "#include <stdio.h>\n\nstruct WebServer {\n    void start() {\n        printf(\"Server started on port 80\\n\");\n    }\n};",
        "output": {
            "score": 2.7,
            "type": "Missing Security Headers"
        }
    },
    "c_50": {
        "input": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <errno.h>\\n#define MAX_NAME_LENGTH 100\\nclass Person {\\nprivate:\\n    char* name;\\n    int age;\\npublic:\\n    Person(const char* personName, int personAge) {\\n        name = (char*)malloc((strlen(personName) + 1) * sizeof(char));\\n        if (!name) {\\n            fprintf(stderr, \"Memory allocation failed: %s\\n\", strerror(errno));\\n            exit(EXIT_FAILURE);\\n        }\\n        strcpy(name, personName);\\n        age = personAge;\\n    }\\n    ~Person() {\\n        free(name);\\n    }\\n    void displayInfo() const {\\n        printf(\"Name: %s, Age: %d\\n\", name, age);\\n    }\\n};",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_51": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_INPUT 100\n\ndouble safe_input_to_double(const char *str) {\n    char *end;\n    double val = strtod(str, &end);\n    if (*end != '\\0') {\n        fprintf(stderr, \"Invalid input. Please enter a valid number.\\n\");\n        exit(EXIT_FAILURE);\n    }\n    return val;\n}\n\nint main() {\n    char input[MAX_INPUT];\n    printf(\"Enter a number: \");\n    if (fgets(input, sizeof(input), stdin) == NULL) {\n        fprintf(stderr, \"Failed to read input.\\n\");\n        return EXIT_FAILURE;\n    }\n\n    // Remove newline character from the input if present\n    size_t len = strlen(input);\n    if (len > 0 && input[len - 1] == '\\n') {\n        input[len - 1] = '\\0';\n    }\n\n    double number = safe_input_to_double(input);\n    printf(\"You entered: %.2f\\n\", number);\n\n    return EXIT_SUCCESS;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_52": {
        "input": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#define MAX_NAME_LENGTH 100\\n\\ntypedef struct {\\n    char name[MAX_NAME_LENGTH];\\n    int age;\\n} Person;\\n\\nvoid initPerson(Person *p, const char *name, int age) {\\n    if (strlen(name) >= MAX_NAME_LENGTH) {\\n        fprintf(stderr, \"Name too long\");\\n        exit(EXIT_FAILURE);\\n    }\\n    strncpy(p->name, name, MAX_NAME_LENGTH - 1);\\n    p->name[MAX_NAME_LENGTH - 1] = '\\0'; // Ensure null-termination\\n    if (age < 0) {\\n        fprintf(stderr, \"Age cannot be negative\");\\n        exit(EXIT_FAILURE);\\n    }\\n    p->age = age;\\n}\\n\\nvoid printPerson(const Person *p) {\\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\\n}\\n",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_53": {
        "input": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAX_INPUT_SIZE 100\n\ndouble safe_input_to_double(const char *input) {\n    char *endptr;\n    errno = 0;\n    double result = strtod(input, &endptr);\n\n    if (errno != 0 || endptr == input || *endptr != '\\0') {\n        fprintf(stderr, \"Invalid input\\n\");\n        exit(EXIT_FAILURE);\n    }\n    return result;\n}\n\nint main() {\n    char input[MAX_INPUT_SIZE];\n    printf(\"Enter a number: \");\n    if (fgets(input, sizeof(input), stdin) != NULL) {\n        // Remove newline character from input if present\n        size_t len = strlen(input);\n        if (len > 0 && input[len - 1] == '\\n') {\n            input[len - 1] = '\\0';\n        }\n        double number = safe_input_to_double(input);\n        printf(\"You entered: %f\\n\", number);\n    } else {\n        fprintf(stderr, \"Failed to read input\\n\");\n        exit(EXIT_FAILURE);\n    }\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_54": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid safe_copy(char *dest, size_t dest_size) {\n    char src[100];\n    printf(\"Enter a string (max 99 characters): \");\n    if (fgets(src, sizeof(src), stdin)) {\n        // Remove newline character if present\n        src[strcspn(src, \"\\n\")] = '\\0';\n        strncpy(dest, src, dest_size - 1);\n        dest[dest_size - 1] = '\\0';\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_55": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_NAME_LENGTH 50\n\ntypedef struct {\n    char name[MAX_NAME_LENGTH + 1];\n    int age;\n} Person;\n\nvoid initPerson(Person *p, const char *name, int age) {\n    if (strlen(name) > MAX_NAME_LENGTH) {\n        fprintf(stderr, \"Name too long\\n\");\n        exit(EXIT_FAILURE);\n    }\n    strncpy(p->name, name, MAX_NAME_LENGTH);\n    p->name[MAX_NAME_LENGTH] = '\\0';\n    p->age = age;\n}\n\nvoid printPerson(const Person *p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_56": {
        "input": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid safe_copy(char *dest, const char *src, size_t dest_size) {\n    if (src == NULL || dest == NULL) {\n        return;\n    }\n    strncpy(dest, src, dest_size - 1);\n    dest[dest_size - 1] = '\\0';\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_57": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *name;\n    int age;\n} Person;\n\nvoid initPerson(Person *p, const char *name, int age) {\n    if (age < 0 || age > 120) {\n        fprintf(stderr, \"Invalid age\\n\");\n        exit(EXIT_FAILURE);\n    }\n    p->name = malloc(strlen(name) + 1);\n    if (p->name == NULL) {\n        perror(\"Failed to allocate memory for name\");\n        exit(EXIT_FAILURE);\n    }\n    strcpy(p->name, name);\n    p->age = age;\n}\n\nvoid freePerson(Person *p) {\n    free(p->name);\n    p->name = NULL;\n    p->age = 0;\n}\n",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_58": {
        "input": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#define MAX_INPUT 100\\n\\nvoid safe_function() {\\n    char buffer[MAX_INPUT];\\n    printf(\"Enter a string: \");\\n    if (fgets(buffer, sizeof(buffer), stdin) != NULL) {\\n        size_t len = strlen(buffer);\\n        if (len > 0 && buffer[len - 1] == '\\n') {\\n            buffer[len - 1] = '\\0';\\n        }\\n        printf(\"You entered: %s\\n\", buffer);\\n    } else {\\n        fprintf(stderr, \"Error reading input.\\n\");\\n    }\\n}\\n\\nint main() {\\n    safe_function();\\n    return 0;\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_59": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <limits.h>\n\nint safe_add(int a, int b) {\n    if (b > 0 && a > INT_MAX - b) return -1;\n    if (b < 0 && a < INT_MIN - b) return -1;\n    return a + b;\n}\n\nint main() {\n    char input[12];\n    int num1, num2, result;\n    printf(\"Enter first number: \");\n    if (fgets(input, sizeof(input), stdin) != NULL) {\n        num1 = atoi(input);\n    } else {\n        fprintf(stderr, \"Error reading input\\n\");\n        return 1;\n    }\n    printf(\"Enter second number: \");\n    if (fgets(input, sizeof(input), stdin) != NULL) {\n        num2 = atoi(input);\n    } else {\n        fprintf(stderr, \"Error reading input\\n\");\n        return 1;\n    }\n    result = safe_add(num1, num2);\n    if (result == -1) {\n        printf(\"Overflow occurred\\n\");\n    } else {\n        printf(\"Result: %d\\n\", result);\n    }\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_60": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_NAME_LENGTH 50\nclass Person {\nprivate:\n    char name[MAX_NAME_LENGTH];\n    int age;\npublic:\n    Person(const char* newName, int newAge) {\n        if (newName == NULL || strlen(newName) >= MAX_NAME_LENGTH) {\n            fprintf(stderr, \"Invalid name\\n\");\n            exit(EXIT_FAILURE);\n        }\n        strncpy(name, newName, sizeof(name) - 1);\n        name[sizeof(name) - 1] = '\\0'; // Ensure null termination\n        if (newAge < 0 || newAge > 120) {\n            fprintf(stderr, \"Invalid age\\n\");\n            exit(EXIT_FAILURE);\n        }\n        age = newAge;\n    }\n    void display() const {\n        printf(\"Name: %s, Age: %d\\n\", name, age);\n    }\n};",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_61": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_NAME_LENGTH 100\n\ntypedef struct {\n    char name[MAX_NAME_LENGTH];\n} Person;\n\nvoid set_name(Person *p, const char *name) {\n    if (strlen(name) >= MAX_NAME_LENGTH) {\n        fprintf(stderr, \"Error: Name is too long\\n\");\n        exit(EXIT_FAILURE);\n    }\n    strncpy(p->name, name, sizeof(p->name) - 1);\n    p->name[sizeof(p->name) - 1] = '\\0';\n}\n\nvoid print_name(const Person *p) {\n    printf(\"Name: %s\\n\", p->name);\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_62": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_INPUT 100\n\ndouble safe_input_to_double() {\n    char input[MAX_INPUT];\n    printf(\"Enter a number: \");\n    if (fgets(input, sizeof(input), stdin) != NULL) {\n        // Remove newline character if present\n        size_t len = strlen(input);\n        if (len > 0 && input[len - 1] == '\\n') {\n            input[len - 1] = '\\0';\n        }\n        char *endptr;\n        double number = strtod(input, &endptr);\n        if (*endptr == '\\0' || *endptr == '\\n') {\n            return number;\n        } else {\n            fprintf(stderr, \"Invalid input\\n\");\n            exit(EXIT_FAILURE);\n        }\n    } else {\n        fprintf(stderr, \"Failed to read input\\n\");\n        exit(EXIT_FAILURE);\n    }\n}\n\nint main() {\n    double number = safe_input_to_double();\n    printf(\"You entered: %f\\n\", number);\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_63": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char* data;\n    size_t length;\n} SecureString;\n\nSecureString* create_secure_string(const char* input) {\n    if (!input) return NULL;\n    SecureString* ss = (SecureString*)malloc(sizeof(SecureString));\n    if (!ss) return NULL;\n    ss->length = strlen(input);\n    ss->data = (char*)malloc(ss->length + 1);\n    if (!ss->data) {\n        free(ss);\n        return NULL;\n    }\n    strncpy(ss->data, input, ss->length);\n    ss->data[ss->length] = '\\0';\n    return ss;\n}\n\nvoid destroy_secure_string(SecureString* ss) {\n    if (ss) {\n        free(ss->data);\n        free(ss);\n    }\n}\n\nint main() {\n    const char* userInput = \"Hello, World!\";\n    SecureString* myString = create_secure_string(userInput);\n    if (myString) {\n        printf(\"Secure String: %s\\n\", myString->data);\n        destroy_secure_string(myString);\n    }\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_64": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_NAME_LENGTH 50\n\ntypedef struct {\n    char name[MAX_NAME_LENGTH + 1];\n} Person;\n\nvoid set_person_name(Person *person, const char *name) {\n    if (strlen(name) <= MAX_NAME_LENGTH) {\n        strncpy(person->name, name, MAX_NAME_LENGTH);\n        person->name[MAX_NAME_LENGTH] = '\\0';\n    } else {\n        fprintf(stderr, \"Name too long\\n\");\n        exit(EXIT_FAILURE);\n    }\n}\n\nint main() {\n    Person person;\n    set_person_name(&person, \"John Doe\");\n    printf(\"Person's name: %s\\n\", person.name);\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_65": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_NAME_LENGTH 50\n\ntypedef struct {\n    char name[MAX_NAME_LENGTH + 1];\n} Person;\n\nvoid set_person_name(Person *p, const char *name) {\n    if (strlen(name) > MAX_NAME_LENGTH) {\n        fprintf(stderr, \"Name too long\\n\");\n        return;\n    }\n    strncpy(p->name, name, MAX_NAME_LENGTH);\n    p->name[MAX_NAME_LENGTH] = '\\0';\n}\n\nvoid print_person_name(const Person *p) {\n    printf(\"Person's Name: %s\\n\", p->name);\n}\n\nint main() {\n    Person person;\n    set_person_name(&person, \"John Doe\");\n    print_person_name(&person);\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_66": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_NAME_LENGTH 50\n\ntypedef struct {\n    char name[MAX_NAME_LENGTH + 1];\n} Person;\n\nvoid safe_set_name(Person *p, const char *name) {\n    if (strlen(name) <= MAX_NAME_LENGTH) {\n        strncpy(p->name, name, MAX_NAME_LENGTH);\n        p->name[MAX_NAME_LENGTH] = '\\0';\n    } else {\n        fprintf(stderr, \"Name too long\\n\");\n    }\n}\n\nint main() {\n    Person person;\n    safe_set_name(&person, \"John Doe\");\n    printf(\"Person's name: %s\\n\", person.name);\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_67": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_INPUT_SIZE 100\n\ndouble safe_get_double() {\n    char input[MAX_INPUT_SIZE];\n    printf(\"Enter a number: \");\n    if (fgets(input, sizeof(input), stdin) != NULL) {\n        // Remove newline character if present\n        size_t len = strlen(input);\n        if (len > 0 && input[len - 1] == '\\n') {\n            input[len - 1] = '\\0';\n        }\n        char *endptr;\n        errno = 0;\n        double value = strtod(input, &endptr);\n        if (errno != 0 || endptr == input) {\n            fprintf(stderr, \"Invalid input. Please enter a valid number.\\n\");\n            exit(EXIT_FAILURE);\n        }\n        return value;\n    } else {\n        fprintf(stderr, \"Failed to read input.\\n\");\n        exit(EXIT_FAILURE);\n    }\n}\n\nint main() {\n    double number = safe_get_double();\n    printf(\"You entered: %f\\n\", number);\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_68": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_NAME_LENGTH 100\n\ntypedef struct {\n    char name[MAX_NAME_LENGTH];\n    int age;\n} Person;\n\nvoid initPerson(Person *p, const char *name, int age) {\n    if (strlen(name) >= MAX_NAME_LENGTH) {\n        fprintf(stderr, \"Name too long\\n\");\n        exit(EXIT_FAILURE);\n    }\n    strcpy(p->name, name);\n    p->age = age;\n}\n\nvoid printPerson(const Person *p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_69": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_NAME_LENGTH 100\n\ntypedef struct {\n    char name[MAX_NAME_LENGTH];\n} Person;\n\nvoid initPerson(Person *p, const char *name) {\n    if (strlen(name) >= MAX_NAME_LENGTH) {\n        fprintf(stderr, \"Name too long\\n\");\n        exit(EXIT_FAILURE);\n    }\n    strncpy(p->name, name, MAX_NAME_LENGTH - 1);\n    p->name[MAX_NAME_LENGTH - 1] = '\\0';\n}\n\nvoid printPerson(const Person *p) {\n    printf(\"Name: %s\\n\", p->name);\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_70": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *name;\n    int age;\n} Person;\n\nPerson* create_person(const char *name, int age) {\n    if (age < 0 || name == NULL) {\n        return NULL;\n    }\n    Person *person = malloc(sizeof(Person));\n    if (person == NULL) {\n        return NULL;\n    }\n    person->name = strdup(name);\n    if (person->name == NULL) {\n        free(person);\n        return NULL;\n    }\n    person->age = age;\n    return person;\n}\n\nvoid destroy_person(Person *person) {\n    if (person != NULL) {\n        free(person->name);\n        free(person);\n    }\n}\n\nint main() {\n    Person *p = create_person(\"John Doe\", 30);\n    if (p == NULL) {\n        fprintf(stderr, \"Failed to create person\\n\");\n        return EXIT_FAILURE;\n    }\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n    destroy_person(p);\n    return EXIT_SUCCESS;\n}\n",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_71": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_INPUT_LENGTH 10\n\ndouble safe_input() {\n    char input[MAX_INPUT_LENGTH];\n    printf(\"Enter a number: \");\n    if (fgets(input, sizeof(input), stdin) != NULL) {\n        // Remove newline character if present\n        size_t len = strlen(input);\n        if (len > 0 && input[len - 1] == '\\n') {\n            input[len - 1] = '\\0';\n        }\n        char *endptr;\n        errno = 0;\n        double number = strtod(input, &endptr);\n        if (errno != 0 || endptr == input) {\n            fprintf(stderr, \"Invalid input\\n\");\n            exit(EXIT_FAILURE);\n        }\n        return number;\n    }\n    fprintf(stderr, \"Failed to read input\\n\");\n    exit(EXIT_FAILURE);\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_72": {
        "input": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAX_INPUT_SIZE 1024\n\ndouble safe_input_to_double() {\n    char input[MAX_INPUT_SIZE];\n    printf(\"Enter a number: \");\n    if (fgets(input, sizeof(input), stdin) != NULL) {\n        // Remove newline character if present\n        size_t len = strlen(input);\n        if (len > 0 && input[len - 1] == '\\n') {\n            input[len - 1] = '\\0';\n        }\n        char *endptr;\n        errno = 0;\n        double result = strtod(input, &endptr);\n        if (errno != 0 || endptr == input) {\n            fprintf(stderr, \"Invalid input.\\n\");\n            exit(EXIT_FAILURE);\n        }\n        return result;\n    } else {\n        fprintf(stderr, \"Failed to read input.\\n\");\n        exit(EXIT_FAILURE);\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_73": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_NAME_LENGTH 100\nclass Person {\nprivate:\n    char* name;\n    int age;\npublic:\n    Person(const char* n, int a) {\n        name = (char*)malloc(MAX_NAME_LENGTH + 1);\n        if (name == NULL) {\n            fprintf(stderr, \"Memory allocation failed\\n\");\n            exit(1);\n        }\n        strncpy(name, n, MAX_NAME_LENGTH);\n        name[MAX_NAME_LENGTH] = '\\0';\n        age = a;\n    }\n\n    ~Person() {\n        free(name);\n    }\n\n    void display() const {\n        printf(\"Name: %s, Age: %d\\n\", name, age);\n    }\n};",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_74": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <limits.h>\n\n#define MAX_INPUT 100\n\ndouble safe_atof(const char *str, int *success) {\n    char *end;\n    errno = 0;\n    double val = strtod(str, &end);\n    if (errno != 0 || end == str || *end != '\\0') {\n        *success = 0;\n        return 0.0;\n    }\n    *success = 1;\n    return val;\n}\n\nint main() {\n    char input[MAX_INPUT];\n    printf(\"Enter a number: \");\n    if (fgets(input, sizeof(input), stdin) != NULL) {\n        // Remove newline character if present\n        size_t len = strlen(input);\n        if (len > 0 && input[len - 1] == '\\n') {\n            input[len - 1] = '\\0';\n        }\n        int success;\n        double number = safe_atof(input, &success);\n        if (success) {\n            printf(\"You entered: %.2f\\n\", number);\n        } else {\n            fprintf(stderr, \"Invalid input. Please enter a valid number.\\n\");\n        }\n    } else {\n        fprintf(stderr, \"Error reading input.\\n\");\n    }\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_75": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n\n#define MAX_INPUT_SIZE 1024\n\ndouble safe_input_double() {\n    char input[MAX_INPUT_SIZE];\n    printf(\"Enter a number: \");\n    if (fgets(input, sizeof(input), stdin) == NULL) {\n        perror(\"Failed to read input\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Remove newline character if present\n    size_t len = strlen(input);\n    if (len > 0 && input[len - 1] == '\\n') {\n        input[len - 1] = '\\0';\n    }\n\n    char *endptr;\n    errno = 0; // Reset error indicator\n    double result = strtod(input, &endptr);\n\n    if (errno != 0) {\n        perror(\"Conversion error\");\n        exit(EXIT_FAILURE);\n    }\n\n    if (endptr == input || *endptr != '\\0') {\n        fprintf(stderr, \"Invalid input\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    return result;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_76": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_INPUT 100\n\ndouble safe_atof(const char *str) {\n    char *endptr;\n    double val = strtod(str, &endptr);\n    if (*endptr != '\\0') {\n        fprintf(stderr, \"Invalid number: %s\\n\", str);\n        exit(EXIT_FAILURE);\n    }\n    return val;\n}\n\nint main() {\n    char input[MAX_INPUT];\n    printf(\"Enter a floating-point number: \");\n    if (fgets(input, sizeof(input), stdin) != NULL) {\n        // Remove newline character if present\n        size_t len = strlen(input);\n        if (len > 0 && input[len - 1] == '\\n') {\n            input[len - 1] = '\\0';\n        }\n        double number = safe_atof(input);\n        printf(\"You entered: %f\\n\", number);\n    } else {\n        fprintf(stderr, \"Failed to read input.\\n\");\n        exit(EXIT_FAILURE);\n    }\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_77": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    char *name;\n    int age;\n} Person;\n\nPerson* create_person(const char *name, int age) {\n    if (age < 0) {\n        return NULL;\n    }\n    Person *p = (Person *)malloc(sizeof(Person));\n    if (!p) {\n        return NULL;\n    }\n    p->name = strdup(name);\n    if (!p->name) {\n        free(p);\n        return NULL;\n    }\n    p->age = age;\n    return p;\n}\n\nvoid destroy_person(Person *p) {\n    if (p) {\n        free(p->name);\n        free(p);\n    }\n}\n\nint main() {\n    Person *person = create_person(\"John Doe\", 30);\n    if (person) {\n        printf(\"Name: %s, Age: %d\\n\", person->name, person->age);\n        destroy_person(person);\n    }\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_78": {
        "input": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAX_INPUT 100\n\ndouble secure_multiply(const char* input1, const char* input2) {\n    char num1_str[MAX_INPUT], num2_str[MAX_INPUT];\n    if (strncpy(num1_str, input1, sizeof(num1_str) - 1) == NULL || strncpy(num2_str, input2, sizeof(num2_str) - 1) == NULL) {\n        return 0.0;\n    }\n    num1_str[sizeof(num1_str) - 1] = '\\0';\n    num2_str[sizeof(num2_str) - 1] = '\\0';\n\n    char* endptr1, *endptr2;\n    double num1 = strtod(num1_str, &endptr1);\n    double num2 = strtod(num2_str, &endptr2);\n\n    if (*endptr1 != '\\0' || *endptr2 != '\\0') {\n        return 0.0;\n    }\n\n    return num1 * num2;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_79": {
        "input": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#define MAX_NAME_LENGTH 50\\nclass Person {\\nprivate:\\n    char name[MAX_NAME_LENGTH];\\n    int age;\\npublic:\\n    Person(const char* inputName, int inputAge) {\\n        strncpy(name, inputName, sizeof(name) - 1);\\n        name[sizeof(name) - 1] = '\\0';\\n        if (inputAge > 0 && inputAge < 120) {\\n            age = inputAge;\\n        } else {\\n            fprintf(stderr, \"Invalid age. Setting to default value: 0.\\n\");\\n            age = 0;\\n        }\\n    }\\n    void display() const {\\n        printf(\"Name: %s, Age: %d\\n\", name, age);\\n    }\\n};",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_80": {
        "input": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <limits.h>\\n\\n#define MAX_INPUT_SIZE 10\\n\\nvoid safe_input(int *num) {\\n    char input[MAX_INPUT_SIZE];\\n    printf(\"Enter a number: \");\\n    if (fgets(input, sizeof(input), stdin)) {\\n        char *endptr;\\n        errno = 0;\\n        long val = strtol(input, &endptr, 10);\\n        if (input == endptr) {\\n            fprintf(stderr, \"No digits were found\\n\\\");\\n        } else if ((errno == ERANGE && (val == LONG_MAX || val == LONG_MIN))\\n                   || (val > INT_MAX || val < INT_MIN)) {\\n            fprintf(stderr, \"Number out of range or too large\\n\\\");\\n        } else if (*endptr != '\\0' && *endptr != '\\n') {\\n            printf(\"Further characters after number: %s\\n\", endptr);\\n        } else {\\n            *num = (int)val;\\n            printf(\"You entered: %d\\n\", *num);\\n        }\\n    } else {\\n        fprintf(stderr, \"Input error\\n\\\");\\n    }\\n}\\n\\nint main() {\\n    int number;\\n    safe_input(&number);\\n    return 0;\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_81": {
        "input": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n#define MAX_INPUT_SIZE 100\\n\\nvoid process_input(const char *input) {\\n    // Process the input safely here\\n    printf(\"Processed Input: %s\\n\", input);\\n}\\n\\nint main() {\\n    char buffer[MAX_INPUT_SIZE];\\n    printf(\"Enter a string (max %d characters): \", MAX_INPUT_SIZE - 1);\\n    if (fgets(buffer, sizeof(buffer), stdin) != NULL) {\\n        // Remove newline character if present\\n        size_t len = strlen(buffer);\\n        if (len > 0 && buffer[len - 1] == '\\n') {\\n            buffer[len - 1] = '\\0';\\n        }\\n        process_input(buffer);\\n    } else {\\n        fprintf(stderr, \"Error reading input.\\n\");\\n        return EXIT_FAILURE;\\n    }\\n    return EXIT_SUCCESS;\\n}\\n",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_82": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_INPUT_SIZE 1024\n\ndouble safe_input_to_double() {\n    char input[MAX_INPUT_SIZE];\n    printf(\"Enter a number: \");\n    if (fgets(input, sizeof(input), stdin) != NULL) {\n        // Remove newline character if present\n        size_t len = strlen(input);\n        if (len > 0 && input[len - 1] == '\\n') {\n            input[len - 1] = '\\0';\n        }\n        char *endptr;\n        errno = 0; // Reset errno before call to strtod()\n        double value = strtod(input, &endptr);\n\n        if (input != endptr && *endptr == '\\0' && errno == 0) {\n            return value;\n        }\n    }\n    fprintf(stderr, \"Invalid input. Please enter a valid number.\\n\");\n    exit(EXIT_FAILURE);\n}\n\nint main() {\n    double number = safe_input_to_double();\n    printf(\"You entered: %f\\n\", number);\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_83": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_INPUT 100\n\ndouble safe_input_to_double() {\n    char input[MAX_INPUT];\n    printf(\"Enter a number: \");\n    if (fgets(input, sizeof(input), stdin) != NULL) {\n        // Remove newline character if present\n        size_t len = strlen(input);\n        if (len > 0 && input[len - 1] == '\\n') {\n            input[len - 1] = '\\0';\n        }\n        char *end;\n        double number = strtod(input, &end);\n        if (*end != '\\0') {\n            fprintf(stderr, \"Invalid input. Please enter a valid number.\\n\");\n            exit(EXIT_FAILURE);\n        }\n        return number;\n    } else {\n        fprintf(stderr, \"Error reading input.\\n\");\n        exit(EXIT_FAILURE);\n    }\n}\n\nint main() {\n    double num = safe_input_to_double();\n    printf(\"You entered: %f\\n\", num);\n    return 0;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_84": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <limits.h>\n\n#define MAX_INPUT_LENGTH 1024\n\ndouble safe_input_to_double(const char *str) {\n    char *end;\n    errno = 0;\n    double val = strtod(str, &end);\n\n    if (errno != 0 || end == str || *end != '\\0' || (val < -DBL_MAX || val > DBL_MAX)) {\n        fprintf(stderr, \"Invalid input. Please enter a valid number.\\n\");\n        exit(EXIT_FAILURE);\n    }\n    return val;\n}\n\nint main() {\n    char input[MAX_INPUT_LENGTH];\n    printf(\"Enter a number: \");\n    if (fgets(input, sizeof(input), stdin) == NULL) {\n        fprintf(stderr, \"Failed to read input.\\n\");\n        return EXIT_FAILURE;\n    }\n\n    // Remove newline character if present\n    size_t len = strlen(input);\n    if (len > 0 && input[len - 1] == '\\n') {\n        input[len - 1] = '\\0';\n    }\n\n    double number = safe_input_to_double(input);\n    printf(\"You entered: %f\\n\", number);\n    return EXIT_SUCCESS;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_85": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_INPUT_SIZE 100\n\ndouble safe_atof(const char *str) {\n    char *end;\n    double result = strtod(str, &end);\n    if (end == str || *end != '\\0') {\n        fprintf(stderr, \"Invalid number format\\n\");\n        exit(EXIT_FAILURE);\n    }\n    return result;\n}\n\nint main() {\n    char input[MAX_INPUT_SIZE];\n    printf(\"Enter a number: \");\n    if (fgets(input, sizeof(input), stdin) == NULL) {\n        fprintf(stderr, \"Failed to read input\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Remove newline character if present\n    size_t len = strlen(input);\n    if (len > 0 && input[len - 1] == '\\n') {\n        input[len - 1] = '\\0';\n    }\n\n    double number = safe_atof(input);\n    printf(\"You entered: %.2f\\n\", number);\n    return EXIT_SUCCESS;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_86": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_NAME_LENGTH 100\n\ntypedef struct {\n    char name[MAX_NAME_LENGTH];\n    int age;\n} Person;\n\nvoid initPerson(Person *p, const char *name, int age) {\n    if (strlen(name) >= MAX_NAME_LENGTH) {\n        fprintf(stderr, \"Name too long\\n\");\n        exit(EXIT_FAILURE);\n    }\n    strcpy(p->name, name);\n    p->age = age;\n}\n\nvoid printPerson(const Person *p) {\n    printf(\"Name: %s, Age: %d\\n\", p->name, p->age);\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_87": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid secure_copy(char *dest, const char *src, size_t dest_size) {\n    if (dest == NULL || src == NULL) {\n        return;\n    }\n    strncpy(dest, src, dest_size - 1);\n    dest[dest_size - 1] = '\\0';\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_88": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_NAME_LENGTH 50\n\ntypedef struct {\n    char name[MAX_NAME_LENGTH + 1];\n} Person;\n\nvoid initPerson(Person *p, const char *name) {\n    if (strlen(name) > MAX_NAME_LENGTH) {\n        fprintf(stderr, \"Name too long\\n\");\n        exit(EXIT_FAILURE);\n    }\n    strncpy(p->name, name, MAX_NAME_LENGTH);\n    p->name[MAX_NAME_LENGTH] = '\\0';\n}\n\nvoid printPerson(const Person *p) {\n    printf(\"Name: %s\\n\", p->name);\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "c_89": {
        "input": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_NAME_LENGTH 100\n\ntypedef struct {\n    char name[MAX_NAME_LENGTH + 1];\n} Person;\n\nvoid initPerson(Person* p, const char* name) {\n    if (p == NULL || name == NULL) {\n        fprintf(stderr, \"Invalid arguments\\n\");\n        return;\n    }\n    strncpy(p->name, name, MAX_NAME_LENGTH);\n    p->name[MAX_NAME_LENGTH] = '\\0'; // Ensure null-termination\n}\n\nvoid printPerson(const Person* p) {\n    if (p == NULL) {\n        fprintf(stderr, \"Invalid arguments\\n\");\n        return;\n    }\n    printf(\"Name: %s\\n\", p->name);\n}\n",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_0": {
        "input": "const { exec } = require('child_process');\n\nfunction escalatePrivileges(command) {\n    exec(command, (error, stdout, stderr) => {\n        if (error) {\n            console.error(`Error executing command: ${error.message}`);\n            return;\n        }\n        console.log(`Command output:\\n${stdout}`);\n    });\n}\n\n// Example usage:\nescalatePrivileges(process.argv[2]);",
        "output": {
            "score": 8.5,
            "type": "Privilege Escalation"
        }
    },
    "typescript_1": {
        "input": "const { exec } = require('child_process');\\n\\nfunction runCommand(command) {\\n    exec(command, (error, stdout, stderr) => {\\n        if (error) {\\n            console.error(`Error: ${error.message}`);\\n            return;\\n        }\\n        if (stderr) {\\n            console.error(`Stderr: ${stderr}`);\\n            return;\\n        }\\n        console.log(`Stdout: ${stdout}`);\\n    });\\n}\\n\\nconst userInput = process.argv[2];\\nrunCommand(userInput);",
        "output": {
            "score": 8.5,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "typescript_2": {
        "input": "class User {\n    constructor(data) {\n        Object.assign(this, data);\n    }\n}\n\nfunction deserializeUser(serializedData) {\n    return new User(JSON.parse(serializedData));\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "typescript_3": {
        "input": "class AuthService {\n    private static readonly SECRET_KEY = \"supersecretkey\";\n    private token: string | null = null;\n\n    authenticate(password: string): boolean {\n        const hash = this.hashPassword(password);\n        if (hash === AuthService.SECRET_KEY) {\n            this.token = this.generateToken();\n            return true;\n        }\n        return false;\n    }\n\n    private hashPassword(password: string): string {\n        // Simple hashing logic for demonstration purposes\n        let hash = 0;\n        if (password.length === 0) return String(hash);\n        for (let i = 0; i < password.length; i++) {\n            const char = password.charCodeAt(i);\n            hash = ((hash << 5) - hash) + char;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return String(hash);\n    }\n\n    private generateToken(): string {\n        return \"token_\" + Math.random().toString(36).substr(2, 9);\n    }\n\n    getToken(): string | null {\n        return this.token;\n    }\n}",
        "output": {
            "score": 8.5,
            "type": "Broken Authentication"
        }
    },
    "typescript_4": {
        "input": "const express = require('express');\nconst { exec } = require('child_process');\n\nconst app = express();\napp.use(express.urlencoded({ extended: true }));\n\napp.post('/run', (req, res) => {\n    const command = req.body.cmd;\n    exec(command, (error, stdout, stderr) => {\n        if (error) {\n            res.send(`Error: ${stderr}`);\n            return;\n        }\n        res.send(stdout);\n    });\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on port 3000');\n});",
        "output": {
            "score": 8.2,
            "type": "Command Injection"
        }
    },
    "typescript_5": {
        "input": "class FileReader {\n    private filePath: string;\n\n    constructor(path: string) {\n        this.filePath = path;\n    }\n\n    public readFile(): string {\n        const fs = require('fs');\n        return fs.readFileSync(this.filePath, 'utf8');\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "typescript_6": {
        "input": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\napp.post('/transfer', (req, res) => {\n    const { toAccount, amount } = req.body;\n    // Simulate transferring funds without CSRF protection\n    console.log(`Transferring ${amount} to account ${toAccount}`);\n    res.send('Transfer successful');\n});\n\napp.listen(3000, () => {\n    console.log('Server running on port 3000');\n});",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "typescript_7": {
        "input": "class FileReader {\n    private filePath: string;\n\n    constructor(path: string) {\n        this.filePath = path;\n    }\n\n    public readFile(): string {\n        const fs = require('fs');\n        return fs.readFileSync(this.filePath, 'utf8');\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "typescript_8": {
        "input": "function transferFunds(recipientId: string, amount: number) {\n    const url = `https://api.example.com/transfer?recipient=${encodeURIComponent(recipientId)}&amount=${encodeURIComponent(amount.toString())}`;\n    fetch(url, { method: 'POST' });\n}",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "typescript_9": {
        "input": "function processData(data: string): void {\n    const buffer = new ArrayBuffer(10);\n    const view = new DataView(buffer);\n    for (let i = 0; i < data.length; i++) {\n        view.setUint8(i, data.charCodeAt(i));\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Buffer Overflow"
        }
    },
    "typescript_10": {
        "input": "class BufferHandler {\n    private buffer: Uint8Array;\n\n    constructor(size: number) {\n        this.buffer = new Uint8Array(size);\n    }\n\n    write(data: Uint8Array, offset: number): void {\n        for (let i = 0; i < data.length; i++) {\n            this.buffer[offset + i] = data[i];\n        }\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Buffer Overflow"
        }
    },
    "typescript_11": {
        "input": "import * as exec from 'child_process';\n\nconst express = require('express');\nconst app = express();\napp.use(express.json());\n\napp.post('/execute', (req, res) => {\n    const command = req.body.command;\n    if (command) {\n        exec.exec(command, (error, stdout, stderr) => {\n            if (error) {\n                res.status(500).send(`Error executing command: ${stderr}`);\n                return;\n            }\n            res.send(stdout);\n        });\n    } else {\n        res.status(400).send('No command provided');\n    }\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});",
        "output": {
            "score": 9.8,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "typescript_12": {
        "input": "import * as fs from 'fs';\n\nfunction readFile(filePath: string): void {\n    const sanitizedPath = filePath.replace(/^\\.\\//, '');\n    fs.readFile(sanitizedPath, (err, data) => {\n        if (err) throw err;\n        console.log(data.toString());\n    });\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "typescript_13": {
        "input": "class CommandExecutor {\n    execute(command: string): void {\n        require('child_process').exec(command, (error, stdout, stderr) => {\n            if (error) {\n                console.error(`Error executing command: ${error.message}`);\n                return;\n            }\n            console.log(stdout);\n        });\n    }\n}",
        "output": {
            "score": 8.2,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "typescript_14": {
        "input": "function unsafeDeserialize(inputString) {\n    const payload = JSON.parse(inputString);\n    return payload;\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "typescript_15": {
        "input": "class UserInterface {\n    renderUserInput(input: string): void {\n        const element = document.getElementById(\"userContent\");\n        if (element) {\n            element.innerHTML = input;\n        }\n    }\n}",
        "output": {
            "score": 8.6,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "typescript_16": {
        "input": "import { exec } from 'child_process';\\nfunction runCommand(cmd: string) {\\n    exec(cmd, (error, stdout, stderr) => {\\n        if (error) {\\n            console.error(`Error executing command: ${error.message}`);\\n            return;\\n        }\\n        if (stderr) {\\n            console.error(`Command error output: ${stderr}`);\\n            return;\\n        }\\n        console.log(stdout);\\n    });\\n}\\nconst userInput = process.argv[2];\\nrunCommand(userInput);",
        "output": {
            "score": 7.8,
            "type": "Privilege Escalation"
        }
    },
    "typescript_17": {
        "input": "import * as express from 'express';\nconst app = express();\napp.use(express.json());\n\napp.post('/data', (req, res) => {\n    const data = JSON.parse(req.body.data);\n    res.send(data);\n});",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "typescript_18": {
        "input": "function executeCommand(command: string) {\n    const { exec } = require('child_process');\n    exec(command, (error, stdout, stderr) => {\n        if (error) {\n            console.error(`Error executing command: ${error}`);\n            return;\n        }\n        console.log(stdout);\n    });\n}",
        "output": {
            "score": 8.2,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "typescript_19": {
        "input": "const { exec } = require('child_process');\n\nfunction runCommand(command) {\n    exec(command, (error, stdout, stderr) => {\n        if (error) {\n            console.error(`Error executing command: ${error.message}`);\n            return;\n        }\n        console.log(stdout || stderr);\n    });\n}\n\nconst userInput = process.argv[2];\nrunCommand(userInput);",
        "output": {
            "score": 8.2,
            "type": "Command Injection"
        }
    },
    "typescript_20": {
        "input": "\"use strict\";\nimport * as express from 'express';\nconst app = express();\n\napp.use(express.json());\n\ninterface User {\n    username: string;\n    passwordHash: string;\n}\n\nconst users: User[] = [\n    { username: 'admin', passwordHash: '$2a$10$sYlNiC8b7jGwZV92FvHuoOQZJ6.5X1U3LzTcDkx7t3M1JmPZ3L4B.', }, // hashed 'password'\n];\n\napp.post('/login', (req, res) => {\n    const { username, password } = req.body;\n    const user = users.find(u => u.username === username);\n\n    if (!user) {\n        return res.status(401).send('Invalid credentials');\n    }\n\n    // Simulating a time-consuming hash comparison to avoid timing attacks\n    setTimeout(() => {\n        if (password === 'password') { // Insecure plain text password check\n            res.send('Login successful');\n        } else {\n            res.status(401).send('Invalid credentials');\n        }\n    }, 150);\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on port 3000');\n});",
        "output": {
            "score": 7.2,
            "type": "Broken Authentication"
        }
    },
    "typescript_21": {
        "input": "\"use strict\";\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nconst express = require('express');\nconst app = express();\napp.use(express.urlencoded({ extended: true }));\n\napp.post('/file', (req, res) => {\n    const filePath = req.body.filePath;\n    const resolvedPath = path.resolve(filePath);\n    if (!resolvedPath.startsWith(process.cwd())) {\n        return res.status(403).send('Forbidden');\n    }\n    fs.readFile(resolvedPath, 'utf8', (err, data) => {\n        if (err) {\n            return res.status(500).send(err);\n        }\n        res.send(data);\n    });\n});\n\napp.listen(3000, () => {\n    console.log('Server running on port 3000');\n});",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "typescript_22": {
        "input": "import * as fs from 'fs';\n\nfunction readFile(filePath: string): void {\n    const data = fs.readFileSync(filePath, 'utf8');\n    console.log(data);\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "typescript_23": {
        "input": "function executeCommand(command: string): void {\n    const { exec } = require('child_process');\n    exec(command, (error, stdout, stderr) => {\n        if (error) {\n            console.error(`Error executing command: ${error.message}`);\n            return;\n        }\n        if (stderr) {\n            console.error(`Command output error: ${stderr}`);\n            return;\n        }\n        console.log(`Command output: ${stdout}`);\n    });\n}",
        "output": {
            "score": 9.1,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "typescript_24": {
        "input": "function unsafeDeserialize(data: string) {\n    const parsedData = JSON.parse(data);\n    if (parsedData.type === 'user') {\n        return new User(parsedData.name, parsedData.id);\n    }\n    throw new Error('Invalid type');\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "typescript_25": {
        "input": "\"use strict\";\nclass UserInfo {\n    private username: string;\n    private password: string;\n\n    constructor(username: string, password: string) {\n        this.username = username;\n        this.password = password;\n    }\n\n    public displayInfo() {\n        console.log(`Username: ${this.username}, Password: ${this.password}`);\n    }\n}",
        "output": {
            "score": 4.2,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "typescript_26": {
        "input": "class HttpResponseHandler {\n    private headers: { [key: string]: string } = {};\n\n    addHeader(name: string, value: string): void {\n        this.headers[name] = value;\n    }\n\n    getResponse(): string {\n        let response = \"HTTP/1.1 200 OK\\r\\n\";\n        for (const header in this.headers) {\n            if (this.headers.hasOwnProperty(header)) {\n                response += `${header}: ${this.headers[header]}\\r\\n`;\n            }\n        }\n        response += \"\\r\\n\";\n        return response;\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "HTTP Response Splitting"
        }
    },
    "typescript_27": {
        "input": "\"use strict\";\nclass ResourceHandler {\n    private resource: number = 0;\n\n    public increment(): void {\n        setTimeout(() => {\n            this.resource++;\n        }, Math.random() * 100);\n    }\n\n    public decrement(): void {\n        setTimeout(() => {\n            this.resource--;\n        }, Math.random() * 100);\n    }\n\n    public getResource(): number {\n        return this.resource;\n    }\n}",
        "output": {
            "score": 5.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "typescript_28": {
        "input": "function unsafeRaceCondition() {\n    let flag = false;\n    setTimeout(() => { flag = true; }, 100);\n    while (!flag) {}\n}",
        "output": {
            "score": 5.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "typescript_29": {
        "input": "function criticalOperation() {\n    let flag = false;\n    setTimeout(() => { flag = true; }, 100);\n    if (!flag) {\n        // Vulnerable code here\n        console.log(\"Operation completed\");\n    }\n}",
        "output": {
            "score": 3.5,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "typescript_30": {
        "input": "function setSessionId(req, res) {\n    const sessionId = req.query.sessionId;\n    res.cookie('sessionId', sessionId);\n}",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "typescript_31": {
        "input": "function redirectToUrl(url: string): void {\n    window.location.href = url;\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "typescript_32": {
        "input": "class WebServer {\n    private app;\n\n    constructor() {\n        this.app = require('express')();\n        this.setupRoutes();\n    }\n\n    private setupRoutes(): void {\n        this.app.get('/', (req, res) => {\n            res.send('Hello World!');\n        });\n    }\n\n    public start(port: number): void {\n        this.app.listen(port, () => {\n            console.log(`Server running on port ${port}`);\n        });\n    }\n}",
        "output": {
            "score": 5.4,
            "type": "Missing Security Headers"
        }
    },
    "typescript_33": {
        "input": "function processRequests() {\n    while (true) {\n        let data = fetch('http://example.com/data').then(response => response.json());\n        console.log(data);\n    }\n}",
        "output": {
            "score": 4.3,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "typescript_34": {
        "input": "function logSensitiveData(data: any) {\n    if (process.env.DEBUG_MODE === 'true') {\n        console.log(JSON.stringify(data));\n    }\n}",
        "output": {
            "score": 2.5,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "typescript_35": {
        "input": "<button id=\"hiddenButton\" style=\"opacity: 0; position: absolute;\"></button>\n<script lang=\"typescript\">\ndocument.getElementById(\"hiddenButton\").addEventListener(\"click\", () => {\n    alert('You were clickjacked!');\n});\n</script>",
        "output": {
            "score": 3.5,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "typescript_36": {
        "input": "import * as express from 'express';\nconst app = express();\n\napp.use(express.urlencoded({ extended: true }));\n\napp.post('/set-cookie', (req, res) => {\n    const cookieValue = req.body.cookieValue;\n    res.setHeader('Set-Cookie', `user=${cookieValue}; Path=/; HttpOnly`);\n    res.send('Cookie set successfully!');\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on http://localhost:3000');\n});",
        "output": {
            "score": 6.1,
            "type": "HTTP Response Splitting"
        }
    },
    "typescript_37": {
        "input": "import * as fs from 'fs';\nimport * as express from 'express';\n\nconst app = express();\napp.get('/file', (req, res) => {\n    const filePath = req.query.path;\n    fs.readFile(filePath, (err, data) => {\n        if (err) {\n            res.status(500).send('Error reading file');\n        } else {\n            res.send(data);\n        }\n    });\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on http://localhost:3000');\n});",
        "output": {
            "score": 5.3,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "typescript_38": {
        "input": "function setSessionCookie(req, res) {\n    const sessionId = req.query.sessionId;\n    res.cookie('sessionId', sessionId, { httpOnly: true });\n}",
        "output": {
            "score": 4.0,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "typescript_39": {
        "input": "import { createServer } from 'http';\n\nconst server = createServer((req, res) => {\n    while (true) {}\n    res.end('This will never be reached');\n});\n\nserver.listen(3000, () => {\n    console.log('Server running on http://localhost:3000/');\n});",
        "output": {
            "score": 4.2,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "typescript_40": {
        "input": "\"use strict\";\n\nfunction setHeaders(res) {\n    res.setHeader(\"Content-Type\", \"application/json\");\n    // Missing security headers like Content-Security-Policy, X-Frame-Options, etc.\n    return res;\n}",
        "output": {
            "score": 4.3,
            "type": "Missing Security Headers"
        }
    },
    "typescript_41": {
        "input": "import { Router } from 'express';\nconst router = Router();\n\nrouter.get('/redirect', (req, res) => {\n    const url = req.query.url as string;\n    if (!url) {\n        return res.status(400).send('URL is required');\n    }\n    if (!isAllowedDomain(url)) {\n        return res.status(403).send('Forbidden domain');\n    }\n    res.redirect(url);\n});\n\nfunction isAllowedDomain(url: string): boolean {\n    const allowedDomains = ['example.com', 'test.com'];\n    try {\n        const parsedUrl = new URL(url);\n        return allowedDomains.includes(parsedUrl.hostname);\n    } catch (error) {\n        return false;\n    }\n}\n\nexport default router;",
        "output": {
            "score": 6.8,
            "type": "Open Redirect"
        }
    },
    "typescript_42": {
        "input": "import * as express from 'express';\n\nconst app = express();\napp.use(express.json());\n\nlet sessionStore = {};\n\napp.post('/login', (req, res) => {\n    const { username } = req.body;\n    if (!username) {\n        return res.status(400).send('Username is required');\n    }\n    let sessionId = req.cookies['session_id'] || Math.random().toString(36).substr(2, 9);\n    sessionStore[sessionId] = { username };\n    res.cookie('session_id', sessionId, { httpOnly: true });\n    res.send(`Logged in as ${username}`);\n});\n\napp.get('/profile', (req, res) => {\n    const sessionId = req.cookies['session_id'];\n    if (!sessionId || !sessionStore[sessionId]) {\n        return res.status(401).send('Unauthorized');\n    }\n    res.send(`Profile of ${sessionStore[sessionId].username}`);\n});\n\napp.listen(3000, () => {\n    console.log('Server running on port 3000');\n});",
        "output": {
            "score": 2.1,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "typescript_43": {
        "input": "import * as http from 'http';\n\nconst server = http.createServer((req, res) => {\n    const urlParam = req.url?.split('=')[1];\n    if (urlParam) {\n        http.get(urlParam, (response) => {\n            let data = '';\n            response.on('data', (chunk) => { data += chunk; });\n            response.on('end', () => { res.end(data); });\n        }).on('error', (err) => { res.statusCode = 500; res.end(`Error: ${err.message}`); });\n    } else {\n        res.statusCode = 400;\n        res.end('Bad Request');\n    }\n});\n\nserver.listen(3000, () => {\n    console.log('Server running at http://localhost:3000/');\n});",
        "output": {
            "score": 7.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "typescript_44": {
        "input": "class HttpResponseHandler {\n    private response: string;\n\n    constructor(response: string) {\n        this.response = response;\n    }\n\n    public sendResponse(): void {\n        console.log(this.response);\n    }\n}",
        "output": {
            "score": 6.1,
            "type": "HTTP Response Splitting"
        }
    },
    "typescript_45": {
        "input": "class FileReader {\n    constructor(private filePath: string) {}\n\n    read() {\n        const fs = require('fs');\n        return fs.readFileSync(this.filePath, 'utf8');\n    }\n}",
        "output": {
            "score": 5.3,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "typescript_46": {
        "input": "\"use strict\";\\nclass User {\\n    private _name: string;\\n    constructor(name: string) {\\n        this._name = name;\\n    }\\n    public getName(): string {\\n        return this._name;\\n    }\\n}\\nconst user = new User(\\\"Alice\\\");\\nconsole.log(user.getName());\\n// Vulnerability: The getName method exposes the private _name property, allowing information disclosure.\"",
        "output": {
            "score": 2.1,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "typescript_47": {
        "input": "class FileReader {\n    filePath: string;\n\n    constructor(path: string) {\n        this.filePath = path;\n    }\n\n    readFile() {\n        const fs = require('fs');\n        return fs.readFileSync(this.filePath, 'utf8');\n    }\n}",
        "output": {
            "score": 5.3,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "typescript_48": {
        "input": "class AuthService {\n    setSessionId(userId: string) {\n        document.cookie = `sessionId=${userId}; path=/`;\n    }\n}",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "typescript_49": {
        "input": "\"use strict\";\nclass DataFetcher {\n    private baseUrl: string;\n\n    constructor(url: string) {\n        this.baseUrl = url;\n    }\n\n    public async fetchData(endpoint: string): Promise<any> {\n        const fullUrl = new URL(endpoint, this.baseUrl).href;\n        const response = await fetch(fullUrl);\n        return response.json();\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "typescript_50": {
        "input": "function safeParseJSON(jsonString: string): object | null {\\n    try {\\n        const parsed = JSON.parse(jsonString);\\n        if (typeof parsed === 'object' && parsed !== null) {\\n            return parsed;\\n        } else {\\n            throw new Error('Parsed data is not a valid object');\\n        }\\n    } catch (error) {\\n        console.error('Failed to parse JSON:', error);\\n        return null;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_51": {
        "input": "class SecureUser {\\n    private username: string;\\n    private email: string;\\n\\n    constructor(username: string, email: string) {\\n        this.setUsername(username);\\n        this.setEmail(email);\\n    }\\n\\n    public getUsername(): string {\\n        return this.username;\\n    }\\n\\n    public setUsername(username: string): void {\\n        if (!/^[a-zA-Z0-9_]{3,20}$/.test(username)) {\\n            throw new Error(\\\"Invalid username. It must be 3-20 characters long and contain only alphanumeric characters or underscores.\\\");\\n        }\\n        this.username = username;\\n    }\\n\\n    public getEmail(): string {\\n        return this.email;\\n    }\\n\\n    public setEmail(email: string): void {\\n        if (!/^\\S+@\\S+\\.\\S+$/.test(email)) {\\n            throw new Error(\\\"Invalid email format.\\\");\\n        }\\n        this.email = email;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_52": {
        "input": "function safeParseJSON(jsonString: string): any {\n    try {\n        const parsedData = JSON.parse(jsonString);\n        if (typeof parsedData === 'object' && parsedData !== null) {\n            return parsedData;\n        }\n        throw new Error('Invalid JSON format');\n    } catch (error) {\n        console.error('Failed to parse JSON:', error);\n        return null;\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_53": {
        "input": "class SecureUserInputHandler {\\n    private userInput: string;\\n\\n    constructor(input: string) {\\n        this.userInput = input;\\n    }\\n\\n    public getSanitizedInput(): string {\\n        return this.sanitizeInput(this.userInput);\\n    }\\n\\n    private sanitizeInput(input: string): string {\\n        return input.replace(/[<>&\"'\\\\/]/g, (char) => {\\n            switch (char) {\\n                case '<':\\n                    return '&lt;';\\n                case '>':\\n                    return '&gt;';\\n                case '&':\\n                    return '&amp;';\\n                case '\\\"':\\n                    return '&quot;';\\n                case \"'\":\\n                    return '&#39;';\\n                case '\\\\':\\n                    return '&#x2F;';\\n                default:\\n                    return char;\\n            }\\n        });\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_54": {
        "input": "import * as express from 'express';\nimport * as helmet from 'helmet';\nimport * as bodyParser from 'body-parser';\nimport * as rateLimit from 'express-rate-limit';\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Use helmet to secure headers\napp.use(helmet());\n\n// Rate limiting to prevent brute force attacks\nconst limiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 100 // limit each IP to 100 requests per windowMs\n});\napp.use(limiter);\n\n// Use body-parser middleware to parse JSON bodies into JS objects\napp.use(bodyParser.json());\n\n// Example secure route with input validation\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput === 'string' && /^[a-zA-Z0-9]+$/.test(userInput)) {\n        // Process valid input\n        res.status(200).send('Valid input received');\n    } else {\n        res.status(400).send('Invalid input');\n    }\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send('Something broke!');\n});\n\n// Start the server\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_55": {
        "input": "{\"use strict\";\nclass SecureDataHandler {\n    private data: string[] = [];\n\n    constructor(initialData: string[]) {\n        this.data = initialData.map(item => item.trim());\n    }\n\n    public addData(input: string): void {\n        if (typeof input !== 'string' || !input.trim()) {\n            throw new Error('Invalid input');\n        }\n        this.data.push(input.trim());\n    }\n\n    public getData(index: number): string | undefined {\n        if (typeof index !== 'number' || index < 0 || index >= this.data.length) {\n            throw new Error('Index out of bounds');\n        }\n        return this.data[index];\n    }\n\n    public getAllData(): string[] {\n        return [...this.data];\n    }\n}\n",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_56": {
        "input": "class SecureDataHandler {\n    private dataStore: Map<string, string> = new Map();\n\n    public setData(key: string, value: string): void {\n        if (!this.isValidKey(key) || !this.isValidValue(value)) {\n            throw new Error(\"Invalid key or value\");\n        }\n        this.dataStore.set(key, value);\n    }\n\n    public getData(key: string): string | undefined {\n        if (!this.isValidKey(key)) {\n            throw new Error(\"Invalid key\");\n        }\n        return this.dataStore.get(key);\n    }\n\n    private isValidKey(key: string): boolean {\n        return typeof key === \"string\" && /^[a-zA-Z0-9_]+$/.test(key);\n    }\n\n    private isValidValue(value: string): boolean {\n        return typeof value === \"string\";\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_57": {
        "input": "import * as express from 'express';\nimport * as helmet from 'helmet';\nimport * as bodyParser from 'body-parser';\nimport * as rateLimit from 'express-rate-limit';\n\nconst app = express();\napp.use(helmet());\napp.use(bodyParser.json({ limit: '50mb' }));\napp.use(rateLimit({ windowMs: 15 * 60 * 1000, max: 100 }));\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput !== 'string' || !/^[a-zA-Z0-9]+$/.test(userInput)) {\n        return res.status(400).send('Invalid input');\n    }\n    // Process valid input securely\n    res.send('Success');\n});\n\napp.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send('Something broke!');\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_58": {
        "input": "function safeParseJSON(jsonString: string): unknown {\n    try {\n        return JSON.parse(jsonString);\n    } catch (e) {\n        console.error(\"Invalid JSON provided\", e);\n        throw new Error(\"Failed to parse JSON\");\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_59": {
        "input": "import * as express from 'express';\nimport * as helmet from 'helmet';\nimport * as bodyParser from 'body-parser';\nimport * as morgan from 'morgan';\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(helmet());\napp.use(bodyParser.json({ limit: '10kb' }));\napp.use(morgan('combined'));\n\napp.post('/submit', (req, res) => {\n    const { email, message } = req.body;\n\n    if (!email || !message || typeof email !== 'string' || typeof message !== 'string') {\n        return res.status(400).json({ error: 'Invalid input' });\n    }\n\n    // Simulate a database operation\n    console.log(`Received message from ${email}: ${message}`);\n\n    res.status(200).json({ success: true, message: 'Message received successfully' });\n});\n\napp.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).json({ error: 'Internal Server Error' });\n});\n\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_60": {
        "input": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput === 'string' && /^[a-zA-Z0-9]+$/.test(userInput)) {\n        // Process valid input securely\n        res.status(200).send('Valid input received');\n    } else {\n        res.status(400).send('Invalid input');\n    }\n});\n\napp.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send('Something broke!');\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on port 3000');\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_61": {
        "input": "import * as express from 'express';\nimport * as helmet from 'helmet';\nimport * as bodyParser from 'body-parser';\nimport * as rateLimit from 'express-rate-limit';\n\nconst app = express();\napp.use(helmet());\napp.use(bodyParser.json({ limit: '50mb' }));\napp.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));\n\nconst limiter = rateLimit({\n    windowMs: 15 * 60 * 1000,\n    max: 100\n});\n\napp.use(limiter);\n\napp.post('/submit', (req, res) => {\n    const { userInput } = req.body;\n    if (typeof userInput !== 'string' || !/^[a-zA-Z0-9]+$/.test(userInput)) {\n        return res.status(400).json({ error: 'Invalid input' });\n    }\n    try {\n        // Safe processing of userInput\n        res.json({ message: `Processed input: ${userInput}` });\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ error: 'Internal Server Error' });\n    }\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_62": {
        "input": "import * as crypto from 'crypto';\n\nfunction secureHash(input: string): string {\n    const hash = crypto.createHmac('sha256', process.env.SECRET_KEY || 'default_secret');\n    hash.update(input);\n    return hash.digest('hex');\n}\n\nasync function validateUserInput(input: any): Promise<boolean> {\n    if (typeof input !== 'string' || !/^\\w+$/.test(input)) {\n        throw new Error('Invalid input');\n    }\n    return true;\n}\n\nexport async function processUserData(data: any) {\n    try {\n        await validateUserInput(data);\n        const hashedData = secureHash(data);\n        console.log('Processed data:', hashedData);\n    } catch (error) {\n        console.error('Error processing user data:', error.message);\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_63": {
        "input": "import * as express from 'express';\nimport * as helmet from 'helmet';\nimport * as bodyParser from 'body-parser';\nimport * as rateLimit from 'express-rate-limit';\n\nconst app = express();\napp.use(helmet());\napp.use(bodyParser.json());\n\nconst limiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 100 // limit each IP to 100 requests per windowMs\n});\napp.use(limiter);\n\napp.get('/', (req, res) => {\n    res.send('Hello World!');\n});\n\napp.post('/data', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput === 'string' && /^[a-zA-Z0-9]+$/.test(userInput)) {\n        res.json({ message: `Processed: ${userInput}` });\n    } else {\n        res.status(400).json({ error: 'Invalid input' });\n    }\n});\n\napp.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send('Something broke!');\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_64": {
        "input": "import * as express from 'express';\nimport * as helmet from 'helmet';\nimport * as rateLimit from 'express-rate-limit';\n\nconst app = express();\napp.use(helmet());\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100 // limit each IP to 100 requests per windowMs\n});\napp.use(limiter);\n\napp.use(express.json());\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput === 'string' && /^[a-zA-Z0-9]+$/.test(userInput)) {\n        // Process valid input\n        res.status(200).send(`Processed: ${userInput}`);\n    } else {\n        res.status(400).send('Invalid input');\n    }\n});\n\napp.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send('Something broke!');\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_65": {
        "input": "class SecureDataHandler {\n    private data: string[] = [];\n\n    public addData(input: string): void {\n        if (typeof input !== 'string' || !input.trim()) {\n            throw new Error('Invalid input');\n        }\n        this.data.push(input);\n    }\n\n    public getData(index: number): string | undefined {\n        if (typeof index !== 'number' || index < 0 || index >= this.data.length) {\n            throw new Error('Index out of bounds');\n        }\n        return this.data[index];\n    }\n\n    public getAllData(): string[] {\n        return [...this.data];\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_66": {
        "input": "import * as express from 'express';\nimport * as helmet from 'helmet';\nimport * as bodyParser from 'body-parser';\nimport * as rateLimit from 'express-rate-limit';\n\nconst app = express();\napp.use(helmet());\napp.use(bodyParser.json());\n\nconst limiter = rateLimit({\n    windowMs: 15 * 60 * 1000,\n    max: 100\n});\napp.use(limiter);\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput === 'string' && /^[a-zA-Z0-9]+$/.test(userInput)) {\n        res.status(200).send(`Received: ${userInput}`);\n    } else {\n        res.status(400).send('Invalid input');\n    }\n});\n\napp.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send('Something broke!');\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_67": {
        "input": "class SecureDataHandler {\n    private data: string[] = [];\n\n    constructor(initialData?: string[]) {\n        if (initialData) {\n            this.data = initialData.map(item => this.sanitizeInput(item));\n        }\n    }\n\n    public addData(input: string): void {\n        const sanitizedInput = this.sanitizeInput(input);\n        this.data.push(sanitizedInput);\n    }\n\n    public getData(): string[] {\n        return [...this.data];\n    }\n\n    private sanitizeInput(input: string): string {\n        if (typeof input !== 'string') {\n            throw new Error('Invalid input type');\n        }\n        return input.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_68": {
        "input": "import * as express from 'express';\nimport * as helmet from 'helmet';\nimport * as bodyParser from 'body-parser';\nimport * as rateLimit from 'express-rate-limit';\n\nconst app = express();\napp.use(helmet());\napp.use(bodyParser.json({ limit: '10kb' }));\napp.use(rateLimit({ windowMs: 15 * 60 * 1000, max: 100 }));\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput === 'string' && /^[a-zA-Z0-9]+$/.test(userInput)) {\n        // Process valid input securely\n        res.status(200).send(`Processed: ${userInput}`);\n    } else {\n        res.status(400).send('Invalid input');\n    }\n});\n\napp.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send('Something broke!');\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_69": {
        "input": "function safeParseJSON(jsonString: string): object | null {\n    try {\n        const parsed = JSON.parse(jsonString);\n        if (typeof parsed === 'object' && !Array.isArray(parsed) && parsed !== null) {\n            return parsed;\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Invalid JSON string\", error);\n        return null;\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_70": {
        "input": "function safeParseInt(input: string): number | null {\n    const parsed = parseInt(input, 10);\n    if (isNaN(parsed)) {\n        return null;\n    }\n    return parsed;\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_71": {
        "input": "function safeParseJSON(jsonString: string): any {\n    try {\n        const parsed = JSON.parse(jsonString);\n        if (typeof parsed === 'object' && parsed !== null) {\n            return parsed;\n        }\n        throw new Error('Invalid JSON object');\n    } catch (error) {\n        console.error('Failed to parse JSON:', error);\n        return null;\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_72": {
        "input": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput === 'string' && /^[a-zA-Z0-9]+$/.test(userInput)) {\n        // Process valid input\n        res.status(200).send('Success');\n    } else {\n        res.status(400).send('Invalid input');\n    }\n});\n\napp.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send('Something broke!');\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on port 3000');\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_73": {
        "input": "class SecureDataHandler {\n    private data: string[] = [];\n\n    public addData(input: string): void {\n        if (typeof input !== 'string' || input.trim() === '') {\n            throw new Error('Invalid input');\n        }\n        this.data.push(input);\n    }\n\n    public getData(): string[] {\n        return [...this.data];\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_74": {
        "input": "class SecureDataHandler {\n    private data: string[] = [];\n\n    public addData(input: string): void {\n        if (typeof input !== 'string' || !input.trim()) {\n            throw new Error('Invalid input');\n        }\n        this.data.push(input);\n    }\n\n    public getData(index: number): string {\n        if (typeof index !== 'number' || index < 0 || index >= this.data.length) {\n            throw new Error('Index out of bounds');\n        }\n        return this.data[index];\n    }\n\n    public removeData(index: number): void {\n        if (typeof index !== 'number' || index < 0 || index >= this.data.length) {\n            throw new Error('Index out of bounds');\n        }\n        this.data.splice(index, 1);\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_75": {
        "input": "function safeParseInt(input: string): number | null {\n    const parsed = Number.parseInt(input, 10);\n    if (Number.isNaN(parsed)) {\n        return null;\n    }\n    return parsed;\n}\n\nasync function fetchData(url: string): Promise<void> {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Failed to fetch data:', error);\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_76": {
        "input": "import * as express from 'express';\nimport * as helmet from 'helmet';\nimport * as rateLimit from 'express-rate-limit';\n\nconst app = express();\napp.use(helmet());\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 100\n});\napp.use(limiter);\n\napp.use(express.json({ limit: '1mb' }));\napp.use(express.urlencoded({ extended: true, limit: '1mb' }));\n\napp.get('/hello/:name', (req, res) => {\n  const name = req.params.name;\n  if (/^[a-zA-Z]+$/.test(name)) {\n    res.send(`Hello, ${name}!`);\n  } else {\n    res.status(400).send('Invalid name');\n  }\n});\n\napp.use((err: Error, req: express.Request, res: express.Response, next: express.NextFunction) => {\n  console.error(err.stack);\n  res.status(500).send('Something broke!');\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_77": {
        "input": "class SecureUserInputHandler {\\n    private userInput: string;\\n\\n    constructor(input: string) {\\n        this.userInput = input;\\n    }\\n\\n    public getSanitizedInput(): string {\\n        return this.sanitizeInput(this.userInput);\\n    }\\n\\n    private sanitizeInput(input: string): string {\\n        return input.replace(/[^a-zA-Z0-9]/g, '');\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_78": {
        "input": "function validateEmail(email: string): boolean {\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return emailRegex.test(email);\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_79": {
        "input": "function safeParseInt(input: string): number | null {\\n    const parsed = parseInt(input, 10);\\n    if (isNaN(parsed) || typeof input !== 'string' || !/^-?\\d+$/.test(input)) {\\n        return null;\\n    }\\n    return parsed;\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_80": {
        "input": "import * as express from 'express';\nimport * as helmet from 'helmet';\nimport * as bodyParser from 'body-parser';\nimport * as rateLimit from 'express-rate-limit';\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.use(helmet());\napp.use(bodyParser.json({ limit: '50mb' }));\napp.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));\n\nconst limiter = rateLimit({\n    windowMs: 15 * 60 * 1000,\n    max: 100,\n    message: 'Too many requests from this IP, please try again after 15 minutes'\n});\n\napp.use(limiter);\n\napp.get('/', (req, res) => {\n    res.send('Hello, world!');\n});\n\napp.post('/submit', (req, res) => {\n    const { name, email } = req.body;\n    if (!name || !email || typeof name !== 'string' || typeof email !== 'string') {\n        return res.status(400).send('Invalid input');\n    }\n    // Safe processing of the data\n    console.log(`Received: ${name}, ${email}`);\n    res.send('Data received successfully!');\n});\n\napp.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send('Something broke!');\n});\n\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_81": {
        "input": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput === 'string' && /^[a-zA-Z0-9]+$/.test(userInput)) {\n        // Process valid input\n        res.status(200).send('Valid input received');\n    } else {\n        res.status(400).send('Invalid input');\n    }\n});\n\napp.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send('Something broke!');\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_82": {
        "input": "function safeParseInt(input: string): number | null {\\n    const parsed = parseInt(input, 10);\\n    if (isNaN(parsed) || typeof input !== 'string' || !/^-?\\d+$/.test(input)) {\\n        return null;\\n    }\\n    return parsed;\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_83": {
        "input": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput === 'string' && /^[a-zA-Z0-9]+$/.test(userInput)) {\n        // Process valid input securely\n        res.send('Success');\n    } else {\n        res.status(400).send('Invalid input');\n    }\n});\n\napp.listen(3000, () => {\n    console.log('Server running on port 3000');\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_84": {
        "input": "class SecureUserInput {\\n    private readonly validEmailPattern = /^[\\\\w-]+(\\\\.[\\\\w-]+)*@[a-zA-Z0-9]+(\\\\.[a-zA-Z]{2,})+$/;\\n\\n    constructor(private userInput: string) {}\\n\\n    public isValidEmail(): boolean {\\n        return this.validEmailPattern.test(this.userInput);\\n    }\\n\\n    public sanitizeInput(input: string): string {\\n        try {\\n            return input.replace(/[<>&'\\\\\"\\\\/\\\\(\\\\)]+/g, (char) => ({ '<': '&lt;', '>': '&gt;', '&': '&amp;', '\\\"': '&quot;', \\\\\\\"\\\\\": '&quot;', '\\\\/:': '&#x2F;', '\\\\(': '&#40;', '\\\\)': '&#41;' }[char] || char));\\n        } catch (error) {\\n            console.error('Error sanitizing input:', error);\\n            throw new Error('Failed to sanitize input');\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_85": {
        "input": "import * as express from 'express';\nimport * as helmet from 'helmet';\nimport * as bodyParser from 'body-parser';\n\nconst app = express();\napp.use(helmet());\napp.use(bodyParser.json());\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput === 'string' && /^[a-zA-Z0-9]+$/.test(userInput)) {\n        // Safe processing of userInput\n        res.status(200).send({ message: `Processed ${userInput}` });\n    } else {\n        res.status(400).send({ error: 'Invalid input' });\n    }\n});\n\napp.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send('Something broke!');\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_86": {
        "input": "function safeParseJSON(jsonString: string): unknown {\n    try {\n        const result = JSON.parse(jsonString);\n        return result;\n    } catch (error) {\n        console.error(\"Invalid JSON provided\", error);\n        return null;\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_87": {
        "input": "import * as express from 'express';\nimport * as helmet from 'helmet';\nimport * as rateLimit from 'express-rate-limit';\nimport * as bodyParser from 'body-parser';\n\nconst app = express();\napp.use(helmet());\napp.use(bodyParser.json({ limit: '50mb' }));\napp.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));\n\nconst limiter = rateLimit({\n    windowMs: 15 * 60 * 1000,\n    max: 100,\n    message: JSON.stringify({ error: 'Too many requests from this IP, please try again after 15 minutes' })\n});\n\napp.use(limiter);\n\napp.post('/submit', (req, res) => {\n    const userInput = req.body.input;\n    if (typeof userInput !== 'string' || !/^[a-zA-Z0-9]+$/.test(userInput)) {\n        return res.status(400).json({ error: 'Invalid input' });\n    }\n    try {\n        // Process the input safely\n        res.json({ message: `Processed: ${userInput}` });\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ error: 'Internal Server Error' });\n    }\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_88": {
        "input": "function secureFetchData(url: string): Promise<void> {\n    if (!/^https:\\/\\/(www\\.)?example\\.com/.test(url)) {\n        throw new Error(\"Invalid URL\");\n    }\n    return fetch(url, { method: 'GET', headers: { 'Content-Type': 'application/json' } })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            return response.json();\n        })\n        .catch(error => {\n            console.error('There has been a problem with your fetch operation:', error);\n        });\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "typescript_89": {
        "input": "function safeParseInt(input: string): number | null {\\n    const parsed = parseInt(input, 10);\\n    if (isNaN(parsed) || typeof input !== 'string' || !/^\\s*[-+]?\\d+\\.?\\d*\\s*$/.test(input)) {\\n        return null;\\n    }\\n    return parsed;\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_0": {
        "input": "import kotlin.reflect.jvm.javaMethod\\nclass VulnerableClass {\\n    fun executeCommand(command: String) {\\n        val processBuilder = ProcessBuilder(listOf(\"bash\", \"-c\", command))\\n        processBuilder.redirectErrorStream(true)\\n        val process = processBuilder.start()\\n        val reader = process.inputStream.bufferedReader()\\n        var line: String?\\n        while (reader.readLine().also { line = it } != null) {\\n            println(line)\\n        }\\n    }\\n}",
        "output": {
            "score": 8.2,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "kotlin_1": {
        "input": "import java.io.ByteArrayInputStream\nimport java.io.ObjectInputStream\nfun main() {\n    val serializedData = \"aced00057372001a6b6f746c696e2e4d616c6963696f75734578616d706c65243200000000000000017200166b6f746c696e2e4d616c6963696f75734578616d706c6500000000000000000001020000787071007e000270770c000000436f6d6d616e6420746f2065786563757465\".decodeToByteArray()\n    val bais = ByteArrayInputStream(serializedData)\n    val ois = ObjectInputStream(bais)\n    val obj = ois.readObject()\n}",
        "output": {
            "score": 8.2,
            "type": "Insecure Deserialization"
        }
    },
    "kotlin_2": {
        "input": "fun unsafeExecute(command: String) { val process = Runtime.getRuntime().exec(command) process.waitFor() }",
        "output": {
            "score": 8.2,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "kotlin_3": {
        "input": "fun main() {\n    val buffer = ByteArray(10)\n    System.`in`.read(buffer)\n    println(String(buffer))\n}",
        "output": {
            "score": 7.5,
            "type": "Buffer Overflow"
        }
    },
    "kotlin_4": {
        "input": "import java.io.BufferedReader\nimport java.io.InputStreamReader\nfun executeCommand(cmd: String) {\n    val processBuilder = ProcessBuilder(*cmd.split(\"\\\\s+\").toTypedArray())\n    val process = processBuilder.start()\n    val reader = BufferedReader(InputStreamReader(process.inputStream))\n    var line: String?\n    while (reader.readLine().also { line = it } != null) {\n        println(line)\n    }\n}",
        "output": {
            "score": 8.6,
            "type": "Command Injection"
        }
    },
    "kotlin_5": {
        "input": "class FileLoader {\n    fun loadFile(path: String): String? {\n        return java.io.File(path).readText()\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "kotlin_6": {
        "input": "fun executeCommand(command: String) {\\n    val process = Runtime.getRuntime().exec(command)\\n    process.waitFor()\\n}",
        "output": {
            "score": 8.2,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "kotlin_7": {
        "input": "class DatabaseManager {\\n    fun getUserData(userId: String): String {\\n        val query = \"SELECT * FROM users WHERE id = '\" + userId + \"'\";\\n        // Execute the query...\\n        return \\\"User data for ID: $userId\\\"\\n    }\\n}",
        "output": {
            "score": 6.5,
            "type": "SQL Injection"
        }
    },
    "kotlin_8": {
        "input": "fun authenticate(username: String, password: String): Boolean {\n    val storedCredentials = mapOf(\"admin\" to \"password123\", \"user\" to \"letmein\")\n    return storedCredentials[username] == password\n}",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "kotlin_9": {
        "input": "import java.io.BufferedReader\\nimport java.io.InputStreamReader\\nclass Exploit {\\n    companion object {\\n        @JvmStatic\\n        fun main(args: Array<String>) {\\n            val command = \"whoami\"\\n            val process = Runtime.getRuntime().exec(command)\\n            val reader = BufferedReader(InputStreamReader(process.inputStream))\\n            var line: String?\\n            while (reader.readLine().also { line = it } != null) {\\n                println(line)\\n            }\\n        }\\n    }\\n}",
        "output": {
            "score": 7.5,
            "type": "Privilege Escalation"
        }
    },
    "kotlin_10": {
        "input": "class UserAuth {\\n    private var storedPasswordHash = \"8d969eef6ecad3c29a3a629280e686cff8cae4f8b5a731783fb0e5537cc169ba\"\\n    fun authenticate(inputPassword: String): Boolean {\\n        val inputHash = hashPassword(inputPassword)\\n        return inputHash == storedPasswordHash\\n    }\\n    private fun hashPassword(password: String): String {\\n        val bytes = MessageDigest.getInstance(\"SHA-256\").digest(password.toByteArray())\\n        return BigInteger(1, bytes).toString(16).padStart(64, '0')\\n    }\\n}",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "kotlin_11": {
        "input": "fun executeCommand() {\n    val userInput = readLine()\n    ProcessBuilder(userInput).start()\n}",
        "output": {
            "score": 7.5,
            "type": "Command Injection"
        }
    },
    "kotlin_12": {
        "input": "import javax.servlet.http.HttpServletRequest\nimport javax.servlet.http.HttpServletResponse\nimport javax.servlet.annotation.WebServlet\nimport javax.servlet.http.HttpServlet\n@WebServlet(\"/transfer\")\nclass TransferServlet : HttpServlet() {\n    override fun doPost(req: HttpServletRequest, resp: HttpServletResponse) {\n        val amount = req.getParameter(\"amount\")?.toIntOrNull()\n        val recipient = req.getParameter(\"recipient\")\n        if (amount != null && recipient != null) {\n            // Simulate transferring funds\n            println(\"Transferred $amount to $recipient\")\n            resp.status = HttpServletResponse.SC_OK\n        } else {\n            resp.sendError(HttpServletResponse.SC_BAD_REQUEST)\n        }\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "kotlin_13": {
        "input": "fun updateEmail(newEmail: String) {\n    val url = \"http://example.com/update?email=$newEmail\"\n    // Simulate HTTP request\n}",
        "output": {
            "score": 6.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "kotlin_14": {
        "input": "fun executeCommand() {\\n    val command = readLine()!!\\n    Runtime.getRuntime().exec(command)\\n}",
        "output": {
            "score": 7.5,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "kotlin_15": {
        "input": "class VulnerableApp {\n    private var adminAccess: Boolean = false\n    fun login(password: String) {\n        if (password == \"secret\") {\n            adminAccess = true\n        }\n    }\n    fun executeCommand(command: String) {\n        if (adminAccess) {\n            Runtime.getRuntime().exec(command)\n        }\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Privilege Escalation"
        }
    },
    "kotlin_16": {
        "input": "package com.example\n\nclass LoginActivity {\n\n    fun authenticate(username: String, password: String): Boolean {\n        return username == \"admin\" && password == \"password123\"\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "kotlin_17": {
        "input": "package com.example.auth\n\nclass Authenticator {\n    private val users = mapOf(\"admin\" to \"password123\", \"user\" to \"letmein\")\n\n    fun authenticate(username: String, password: String): Boolean {\n        return if (users.containsKey(username)) {\n            val storedPasswordHash = hashPassword(users[username]!!)\n            slowCompare(storedPasswordHash, hashPassword(password))\n        } else {\n            false\n        }\n    }\n\n    private fun hashPassword(password: String): String {\n        return password.reversed() // Simplified non-cryptographic \"hashing\"\n    }\n\n    private fun slowCompare(a: String, b: String): Boolean {\n        if (a.length != b.length) return false\n        var result = 0\n        for (i in a.indices) {\n            result or= a[i].toInt() xor b[i].toInt()\n            Thread.sleep(50) // Simulate slow comparison\n        }\n        return result == 0\n    }\n}",
        "output": {
            "score": 7.8,
            "type": "Broken Authentication"
        }
    },
    "kotlin_18": {
        "input": "import java.nio.ByteBuffer\n\nclass NativeLib {\n    init {\n        System.loadLibrary(\"native-lib\")\n    }\n\n    external fun nativeMethod(byteArray: ByteArray)\n}\n\nclass BufferOverflowExample {\n    companion object {\n        @JvmStatic\n        fun main(args: Array<String>) {\n            val lib = NativeLib()\n            val largeByteArray = ByteArray(1024 * 1024) // Large byte array to overflow buffer\n            lib.nativeMethod(largeByteArray)\n        }\n    }\n}",
        "output": {
            "score": 8.5,
            "type": "Buffer Overflow"
        }
    },
    "kotlin_19": {
        "input": "import java.io.BufferedReader\nimport java.io.InputStreamReader\nimport kotlin.system.exitProcess\n\nclass CommandExecutor {\n    fun execute(command: String) {\n        try {\n            val process = Runtime.getRuntime().exec(command)\n            val inputStream = BufferedReader(InputStreamReader(process.inputStream))\n            var line: String?\n            while (inputStream.readLine().also { line = it } != null) {\n                println(line)\n            }\n            exitProcess(process.waitFor())\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n    }\n}\n\nfun main(args: Array<String>) {\n    if (args.isNotEmpty()) {\n        val executor = CommandExecutor()\n        executor.execute(args[0])\n    }\n}",
        "output": {
            "score": 9.8,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "kotlin_20": {
        "input": "fun main() {\\n    val userInput = readLine()!!\\n    Runtime.getRuntime().exec(userInput)\\n}",
        "output": {
            "score": 8.2,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "kotlin_21": {
        "input": "fun transferFunds(toAccount: String, amount: Double) {\n    // Simulate transferring funds to another account\n    println(\"Transferring $$amount to $toAccount\")\n}",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "kotlin_22": {
        "input": "class UnsafeExecutor {\n    fun execute(command: String) {\n        Runtime.getRuntime().exec(command)\n    }\n}",
        "output": {
            "score": 8.2,
            "type": "Command Injection"
        }
    },
    "kotlin_23": {
        "input": "class VulnerableShell {\n    fun executeCommand(command: String) {\n        val process = Runtime.getRuntime().exec(command)\n        process.waitFor()\n    }\n}",
        "output": {
            "score": 8.2,
            "type": "Command Injection"
        }
    },
    "kotlin_24": {
        "input": "import java.io.File\\nimport java.io.FileReader\\nclass FileLoader {\\n    fun loadFile(path: String): String {\\n        val file = File(path)\\n        val reader = FileReader(file)\\n        return reader.readText()\\n    }\\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "kotlin_25": {
        "input": "import io.ktor.application.*\nimport io.ktor.response.*\nimport io.ktor.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}",
        "output": {
            "score": 6.5,
            "type": "Missing Security Headers"
        }
    },
    "kotlin_26": {
        "input": "fun vulnerableRedirect(url: String) {\\n    val intent = Intent(Intent.ACTION_VIEW).apply {\\n        data = Uri.parse(url)\\n    }\\n    startActivity(intent)\\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "kotlin_27": {
        "input": "class WebViewContainer : AppCompatActivity() {\\n    override fun onCreate(savedInstanceState: Bundle?) {\\n        super.onCreate(savedInstanceState)\\n        val webView = WebView(this)\\n        setContentView(webView)\\n        val webSettings = webView.settings\\n        webSettings.javaScriptEnabled = true\\n        webView.loadUrl(\"https://example.com\")\\n    }\\n}",
        "output": {
            "score": 3.1,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "kotlin_28": {
        "input": "fun readFile(fileName: String): String? {\\n    val file = java.io.File(\"/safe/directory/$fileName\")\\n    return if (file.exists() && !file.isDirectory) file.readText() else null\\n}",
        "output": {
            "score": 4.2,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "kotlin_29": {
        "input": "package com.example\nimport javax.servlet.http.HttpServlet\nimport javax.servlet.http.HttpServletRequest\nimport javax.servlet.http.HttpServletResponse\nclass VulnerableServlet : HttpServlet() {\n    override fun doGet(request: HttpServletRequest, response: HttpServletResponse) {\n        val userParam = request.getParameter(\"userInput\")\n        response.setHeader(\"Set-Cookie\", \"data=$userParam; path=/\")\n        response.writer.println(\"User input received: $userParam\")\n    }\n}",
        "output": {
            "score": 5.3,
            "type": "HTTP Response Splitting"
        }
    },
    "kotlin_30": {
        "input": "class HttpResponseSplitter {\\n    fun buildResponse(userInput: String): String {\\n        return \\\"HTTP/1.1 200 OK\\\\r\\\\nContent-Type: text/html\\\\r\\\\n\\\\r\\\\n<html><body>\\$userInput</body></html>\\\"\\n    }\\n}",
        "output": {
            "score": 7.5,
            "type": "HTTP Response Splitting"
        }
    },
    "kotlin_31": {
        "input": "package com.example.sessionfixation\nimport javax.servlet.http.Cookie\nimport javax.servlet.http.HttpServlet\nimport javax.servlet.http.HttpServletRequest\nimport javax.servlet.http.HttpServletResponse\nclass LoginServlet : HttpServlet() {\n    override fun doGet(req: HttpServletRequest, resp: HttpServletResponse) {\n        val sessionId = req.getParameter(\"session_id\")\n        if (sessionId != null) {\n            val cookie = Cookie(\"SESSIONID\", sessionId)\n            resp.addCookie(cookie)\n        }\n        resp.sendRedirect(\"/home\")\n    }\n}",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "kotlin_32": {
        "input": "import java.net.URL\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\nfun fetchData(urlString: String): String {\n    val url = URL(urlString)\n    val reader = BufferedReader(InputStreamReader(url.openStream()))\n    var inputLine: String?\n    val response = StringBuilder()\n    while (reader.readLine().also { inputLine = it } != null) {\n        response.append(inputLine)\n    }\n    reader.close()\n    return response.toString()\n}",
        "output": {
            "score": 7.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "kotlin_33": {
        "input": "import java.io.IOException\nimport kotlin.system.exitProcess\n\nclass DosServer {\n    @Throws(IOException::class)\n    fun start() {\n        while (true) {\n            try {\n                Thread.sleep(1000)\n                println(\"Server is running...\")\n            } catch (e: InterruptedException) {\n                println(\"Thread interrupted: ${e.message}\")\n            }\n        }\n    }\n\n    companion object {\n        @JvmStatic\n        fun main(args: Array<String>) {\n            val server = DosServer()\n            server.start()\n        }\n    }\n}",
        "output": {
            "score": 3.5,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "kotlin_34": {
        "input": "fun openRedirect(url: String) {\n    val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))\n    startActivity(intent)\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "kotlin_35": {
        "input": "import java.io.File\nimport java.io.FileReader\nfun readSensitiveFile(): String {\n    val file = File(\"/etc/passwd\")\n    val reader = FileReader(file)\n    return reader.readText()\n}",
        "output": {
            "score": 3.5,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "kotlin_36": {
        "input": "import kotlinx.coroutines.*\n\nobject SharedResource {\n    var value = 0\n}\n\nfun main() = runBlocking {\n    val jobs = List(100) { launch {\n        repeat(1000) {\n            SharedResource.value++\n        }\n    }}\n    jobs.forEach { it.join() }\n    println(\"Final value: ${SharedResource.value}\")\n}",
        "output": {
            "score": 3.5,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "kotlin_37": {
        "input": "fun redirectTo(url: String) {\\n    val encodedUrl = URLEncoder.encode(url, \\\"UTF-8\\\").replace(\\\"%3A\\\\\", \\\":\\\").replace(\\\"%2F\\\\\", \\/\\\")\\n    val intent = Intent(Intent.ACTION_VIEW, Uri.parse(encodedUrl))\\n    startActivity(intent)\\n}",
        "output": {
            "score": 7.5,
            "type": "Open Redirect"
        }
    },
    "kotlin_38": {
        "input": "fun sensitiveDataLeak(): String {\n    val secret = \"This is a secret message.\"\n    return if (System.getenv(\"DEBUG\") == \"true\") secret else \"No data to show.\"\n}",
        "output": {
            "score": 3.0,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "kotlin_39": {
        "input": "fun setSessionCookie(userId: String, response: HttpServletResponse) {\\n    val cookie = Cookie(\"SESSIONID\", userId)\\n    cookie.path = \"/\"\\n    cookie.isHttpOnly = true\\n    response.addCookie(cookie)\\n}",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "kotlin_40": {
        "input": "import javax.servlet.http.HttpServletRequest\nimport javax.servlet.http.HttpServletResponse\nfun setSessionId(request: HttpServletRequest, response: HttpServletResponse) {\n    val sessionId = request.getParameter(\"session_id\")\n    if (sessionId != null) {\n        request.changeSessionId()\n        val session = request.getSession(true)\n        session.id = sessionId\n    }\n}",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "kotlin_41": {
        "input": "import android.view.View\nfun setupOverlay(view: View) {\n    val overlay = View(context)\n    overlay.visibility = View.VISIBLE\n    view.parent.addView(overlay)\n}",
        "output": {
            "score": 4.0,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "kotlin_42": {
        "input": "package com.example\n\nimport javax.servlet.http.Cookie\nimport javax.servlet.http.HttpServletRequest\nimport javax.servlet.http.HttpServletResponse\nimport javax.servlet.annotation.WebServlet\nimport javax.servlet.http.HttpServlet\n\n@WebServlet(\"/login\")\nclass LoginServlet : HttpServlet() {\n    override fun doGet(request: HttpServletRequest, response: HttpServletResponse) {\n        val session = request.getSession(true)\n        val sessionIdCookie = Cookie(\"JSESSIONID\", session.id)\n        response.addCookie(sessionIdCookie)\n        response.sendRedirect(\"/dashboard\")\n    }\n}",
        "output": {
            "score": 3.1,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "kotlin_43": {
        "input": "fun readFile(fileName: String): String? {\\n    val file = java.io.File(fileName)\\n    return file.readText()\\n}",
        "output": {
            "score": 5.3,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "kotlin_44": {
        "input": "fun unsafeFunction() {\n    val file = java.io.File(\"example.txt\")\n    if (!file.exists()) {\n        file.createNewFile()\n    }\n    val writer = file.writer()\n    writer.write(\"Sensitive data\\n\")\n    writer.close()\n}",
        "output": {
            "score": 5.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "kotlin_45": {
        "input": "fun handleRequest(response: HttpServletResponse) {\n    response.writer.write(\"Hello, World!\")\n}",
        "output": {
            "score": 3.5,
            "type": "Missing Security Headers"
        }
    },
    "kotlin_46": {
        "input": "fun unsafeFunction() {\n    val sharedResource = StringBuilder()\n    Thread {\n        for (i in 0 until 1000) {\n            sharedResource.append(\"A\")\n        }\n    }.start()\n    Thread {\n        for (i in 0 until 1000) {\n            sharedResource.append(\"B\")\n        }\n    }.start()\n}",
        "output": {
            "score": 4.2,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "kotlin_47": {
        "input": "import org.springframework.boot.SpringApplication\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.RestController\n\n@SpringBootApplication\nclass VulnerableApp {\n\n    @RestController\n    class HelloController {\n        @GetMapping(\"/hello\")\n        fun sayHello(): String {\n            return \"Hello, World!\"\n        }\n    }\n}\n\nfun main(args: Array<String>) {\n    SpringApplication.run(VulnerableApp::class.java, *args)\n}",
        "output": {
            "score": 4.3,
            "type": "Missing Security Headers"
        }
    },
    "kotlin_48": {
        "input": "import spark.Spark\nfun main() {\n    Spark.get(\"/\") { req, res -> \"Hello, World!\" }\n}",
        "output": {
            "score": 3.4,
            "type": "Missing Security Headers"
        }
    },
    "kotlin_49": {
        "input": "fun sensitiveData(): String {\\n    val secret = \"ThisIsASecretKey\"\\n    return if (System.getenv(\"DEBUG_MODE\") == \"true\") secret else \"Default Value\"\\n}",
        "output": {
            "score": 3.5,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "kotlin_50": {
        "input": "import java.util.Scanner\\nimport java.io.File\\nimport java.io.FileNotFoundException\\n\\nfun main() {\\n    val scanner = Scanner(System.`in`)\\n    println(\"Enter the path to a text file:\")\\n    val filePath = scanner.nextLine().trim()\\n\\n    try {\\n        val file = File(filePath)\\n        if (!file.exists()) {\\n            throw FileNotFoundException(\"The specified file does not exist.\")\\n        }\\n        file.forEachLine { line ->\\n            println(line.trim())\\n        }\\n    } catch (e: FileNotFoundException) {\\n        System.err.println(\"Error: \" + e.message)\\n    } catch (e: Exception) {\\n        System.err.println(\"An unexpected error occurred: \" + e.message)\\n    } finally {\\n        scanner.close()\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_51": {
        "input": "fun processUserInput(input: String): Int? {\\n    return try {\\n        val number = input.trim().toInt()\\n        if (number > 0) number else null\\n    } catch (e: NumberFormatException) {\\n        null\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_53": {
        "input": "import java.io.BufferedReader\nimport java.io.InputStreamReader\nimport java.net.HttpURLConnection\nimport java.net.URL\nimport javax.crypto.Cipher\nimport javax.crypto.spec.SecretKeySpec\nimport java.util.Base64\nfun main() {\n    val userInput = readUserInput()\n    if (isValidUrl(userInput)) {\n        try {\n            val response = fetchHttpData(userInput)\n            println(\"Response: $response\")\n        } catch (e: Exception) {\n            println(\"Error: ${e.message}\")\n        }\n    } else {\n        println(\"Invalid URL\")\n    }\n}\nfun readUserInput(): String {\n    val reader = BufferedReader(InputStreamReader(System.`in`))\n    return reader.readLine().trim()\n}\nfun isValidUrl(url: String): Boolean {\n    return try {\n        URL(url)\n        true\n    } catch (e: Exception) {\n        false\n    }\n}\nfun fetchHttpData(urlString: String): String {\n    val url = URL(urlString)\n    val connection = url.openConnection() as HttpURLConnection\n    connection.requestMethod = \"GET\"\n    return if (connection.responseCode == 200) {\n        BufferedReader(InputStreamReader(connection.inputStream)).use { it.readText() }\n    } else {\n        throw Exception(\"Failed to fetch data. HTTP error code: ${connection.responseCode}\")\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_54": {
        "input": "import java.security.MessageDigest\\nclass SecureHasher {\\n    fun hash(input: String): String {\\n        if (input.isEmpty()) throw IllegalArgumentException(\"Input cannot be empty\")\\n        val digest = MessageDigest.getInstance(\\\"SHA-256\\\").digest(input.toByteArray(Charsets.UTF_8))\\n        return digest.fold(\\\"\\\") { str, it -> str + \\\"%02x\\\".format(it) }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_56": {
        "input": "fun safeReadInt(input: String): Int? {\\n    return try {\\n        input.trim().toInt()\\n    } catch (e: NumberFormatException) {\\n        null\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_57": {
        "input": "import java.io.BufferedReader\nimport java.io.InputStreamReader\nimport java.net.URL\nimport javax.net.ssl.HttpsURLConnection\nfun main() {\n    val urlString = \"https://api.example.com/data\"\n    try {\n        val url = URL(urlString)\n        val connection = url.openConnection() as HttpsURLConnection\n        connection.requestMethod = \"GET\"\n        connection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\")\n        val responseCode = connection.responseCode\n        if (responseCode == HttpsURLConnection.HTTP_OK) {\n            val inputStream = BufferedReader(InputStreamReader(connection.inputStream))\n            var inputLine: String?\n            while (inputStream.readLine().also { inputLine = it } != null) {\n                println(inputLine)\n            }\n            inputStream.close()\n        } else {\n            System.err.println(\"GET request not worked\")\n        }\n    } catch (e: Exception) {\n        e.printStackTrace()\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_58": {
        "input": "fun validateAndProcessUserInput(input: String): Result<Int, Exception> {\n    return try {\n        val number = input.toInt()\n        if (number < 0) throw IllegalArgumentException(\"Negative numbers are not allowed\")\n        Result.success(number)\n    } catch (e: NumberFormatException) {\n        Result.failure(IllegalArgumentException(\"Invalid input. Please enter a valid integer.\"))\n    } catch (e: IllegalArgumentException) {\n        Result.failure(e)\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_59": {
        "input": "import java.util.Scanner\\nfun main() {\\n    val scanner = Scanner(System.`in`)\\n    print(\"Enter number: \")\\n    if (scanner.hasNextInt()) {\\n        val userInput = scanner.nextInt()\\n        println(userInput)\\n    } else {\\n        println(\"Invalid input. Please enter a valid integer.\")\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_61": {
        "input": "fun secureFunction(input: String) {\\n    try {\\n        val number = input.toIntOrNull() ?: throw IllegalArgumentException(\\\"Invalid input: not a valid integer\\\")\\n        println(number)\\n    } catch (e: Exception) {\\n        println(\\\"Error processing input: ${e.message}\\\")\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_62": {
        "input": "fun safeFunction(input: String): Int? {\n    return try {\n        val number = input.toInt()\n        if (number > 0) number else null\n    } catch (e: NumberFormatException) {\n        null\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_63": {
        "input": "class SecureDataHandler {\\n    private val validChars = \\\\\"[a-zA-Z0-9]\\\\\".toRegex()\\n\\n    fun processInput(input: String): String? {\\n        return if (isValidInput(input)) {\\n            // Simulate processing\\n            \"Processed: $input\"\\n        } else {\\n            null\\n        }\\n    }\\n\\n    private fun isValidInput(input: String): Boolean {\\n        return input.matches(validChars)\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_64": {
        "input": "fun safeReadInt(input: String): Int? {\\n    return try {\\n        val number = input.trim().toInt()\\n        if (number >= 0) number else null\\n    } catch (e: NumberFormatException) {\\n        null\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_65": {
        "input": "fun processUserInput(input: String): Result<Int, Exception> {\n    return try {\n        val number = input.trim().toInt()\n        if (number < 0) throw IllegalArgumentException(\"Number must be non-negative\")\n        Result.success(number)\n    } catch (e: NumberFormatException) {\n        Result.failure(IllegalArgumentException(\"Invalid input: not a number\"))\n    } catch (e: IllegalArgumentException) {\n        Result.failure(e)\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_66": {
        "input": "import java.io.BufferedReader\nimport java.io.InputStreamReader\nimport java.net.URL\nimport javax.net.ssl.HttpsURLConnection\n\nfun main() {\n    val url = \"https://api.example.com/data\"\n    try {\n        val connection = URL(url).openConnection() as HttpsURLConnection\n        connection.requestMethod = \"GET\"\n        connection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\")\n\n        val inputStream = BufferedReader(InputStreamReader(connection.inputStream))\n        var inputLine: String?\n        val response = StringBuilder()\n        while (inputStream.readLine().also { inputLine = it } != null) {\n            response.append(inputLine)\n        }\n        inputStream.close()\n\n        println(response.toString())\n    } catch (e: Exception) {\n        e.printStackTrace()\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_67": {
        "input": "fun main() {\\n    val userInput = readLine()\\n    if (userInput != null && userInput.matches(Regex(\"\\\\d+\"))) {\\n        println(userInput.toInt())\\n    } else {\\n        println(\"Invalid input. Please enter a valid number.\")\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_70": {
        "input": "class SecureUserInputHandler {\\n    fun validateAndProcessInput(input: String): Result<Int, Exception> {\\n        return try {\\n            val number = input.toInt()\\n            if (number < 0) {\\n                throw IllegalArgumentException(\\\"Number must be non-negative.\\\")\\n            }\\n            Result.success(number)\\n        } catch (e: NumberFormatException) {\\n            Result.failure(IllegalArgumentException(\\\"Invalid number format.\\\", e))\\n        } catch (e: IllegalArgumentException) {\\n            Result.failure(e)\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_71": {
        "input": "import java.io.BufferedReader\nimport java.io.InputStreamReader\nimport java.net.URL\nimport javax.net.ssl.HttpsURLConnection\n\nfun fetchSecureData(urlString: String): String? {\n    val url = URL(urlString)\n    val connection = url.openConnection() as HttpsURLConnection\n    connection.requestMethod = \"GET\"\n    connection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\")\n    connection.connectTimeout = 5000\n    connection.readTimeout = 5000\n\n    return try {\n        if (connection.responseCode == HttpsURLConnection.HTTP_OK) {\n            val inputStream = connection.inputStream\n            BufferedReader(InputStreamReader(inputStream)).use { reader ->\n                reader.readText()\n            }\n        } else {\n            null\n        }\n    } catch (e: Exception) {\n        e.printStackTrace()\n        null\n    } finally {\n        connection.disconnect()\n    }\n}\n\nfun main() {\n    val userInput = readLine()?.trim()\n    if (!userInput.isNullOrBlank() && userInput.matches(\"https:\\/\\/(\\\\w+\\\\.)+(\\\\w)+([\\\\/]((?!\\\\.\\\\.).)*)?\".toRegex())) {\n        val data = fetchSecureData(userInput)\n        println(data ?: \"Failed to fetch data\")\n    } else {\n        println(\"Invalid URL input.\")\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_72": {
        "input": "fun main() {\\n    val userInput = readLine()\\n    if (userInput != null && userInput.matches(Regex(\"\\\\d+\"))) {\\n        println(userInput.toInt())\\n    } else {\\n        println(\"Invalid input. Please enter a valid number.\")\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_73": {
        "input": "class SecureUserInputHandler {\\n    fun processInput(input: String): Int? {\\n        return try {\\n            val number = input.trim().toInt()\\n            if (number > 0) number else null\\n        } catch (e: NumberFormatException) {\\n            null\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_74": {
        "input": "fun processUserInput(input: String): Result<Int, Exception> {\\n    return try {\\n        val number = input.toInt()\\n        if (number < 0) throw IllegalArgumentException(\\\"Number must be non-negative\\\")\\n        Result.success(number)\\n    } catch (e: NumberFormatException) {\\n        Result.failure(IllegalArgumentException(\\\"Invalid input. Please enter a valid integer.\\\", e))\\n    } catch (e: IllegalArgumentException) {\\n        Result.failure(e)\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_75": {
        "input": "class SecureDataProcessor {\\n    private val allowedChars = \\\"[a-zA-Z0-9._\\\\-]\\\\\".toRegex()\\n\\n    fun processInput(input: String): String {\\n        if (!isValidInput(input)) {\\n            throw IllegalArgumentException(\\\"Invalid input provided\\\")\\n        }\\n        return sanitizeInput(input)\\n    }\\n\\n    private fun isValidInput(input: String): Boolean {\\n        return allowedChars.matches(input)\\n    }\\n\\n    private fun sanitizeInput(input: String): String {\\n        return input.trim()\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_78": {
        "input": "import java.util.Scanner\nimport java.security.SecureRandom\nfun main() {\n    val scanner = Scanner(System.`in`)\n    print(\"Enter your name (only alphabetic characters allowed): \")\n    val name = scanner.nextLine()\n    if (!name.matches(Regex(\"^[a-zA-Z]+\"))) {\n        println(\"Invalid input. Name must contain only alphabetic characters.\")\n        return\n    }\n    print(\"Enter a number between 1 and 100: \")\n    val userInput = scanner.nextLine()\n    if (!userInput.matches(Regex(\"^[0-9]+\"))) {\n        println(\"Invalid input. Please enter a valid number.\")\n        return\n    }\n    val number = userInput.toInt()\n    if (number < 1 || number > 100) {\n        println(\"Number must be between 1 and 100.\")\n        return\n    }\n    val random = SecureRandom()\n    val randomNumber = random.nextInt(100) + 1\n    println(\"Your number: $number\")\n    println(\"Random number generated: $randomNumber\")\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_79": {
        "input": "class SecureDataHandler {\\n    fun processData(input: String): Int? {\\n        return try {\\n            if (input.matches(Regex(\"\\\\d+\"))) {\\n                input.toInt()\\n            } else {\\n                null\\n            }\\n        } catch (e: NumberFormatException) {\\n            null\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_80": {
        "input": "import java.io.BufferedReader\nimport java.io.InputStreamReader\nimport java.net.URL\nimport javax.net.ssl.HttpsURLConnection\n\nclass SecureHttpClient {\n    fun fetchData(urlString: String): String? {\n        val url = URL(urlString)\n        val connection = url.openConnection() as HttpsURLConnection\n        try {\n            connection.requestMethod = \"GET\"\n            connection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\")\n            connection.connect()\n            if (connection.responseCode == 200) {\n                val inputStream = BufferedReader(InputStreamReader(connection.inputStream))\n                var line: String?\n                val response = StringBuilder()\n                while (inputStream.readLine().also { line = it } != null) {\n                    response.append(line)\n                }\n                return response.toString()\n            }\n        } catch (e: Exception) {\n            e.printStackTrace()\n        } finally {\n            connection.disconnect()\n        }\n        return null\n    }\n}\n\nclass Main {\n    companion object {\n        @JvmStatic\n        fun main(args: Array<String>) {\n            val client = SecureHttpClient()\n            val url = \"https://api.example.com/data\"\n            val data = client.fetchData(url)\n            println(data ?: \"Failed to fetch data\")\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_81": {
        "input": "fun secureFunction(input: String) {\n    try {\n        val number = input.toIntOrNull()\n        if (number != null) {\n            println(number)\n        } else {\n            throw IllegalArgumentException(\"Input is not a valid integer.\")\n        }\n    } catch (e: Exception) {\n        println(\"An error occurred: ${e.message}\")\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_82": {
        "input": "class SecureDataProcessor {\\n    private val logger = java.util.logging.Logger.getLogger(SecureDataProcessor::class.java.name)\\n\\n    fun processUserInput(input: String): Result<Int> {\\n        return try {\\n            val number = input.toInt()\\n            if (number < 0) throw IllegalArgumentException(\"Negative numbers are not allowed\")\\n            Result.success(number)\\n        } catch (e: NumberFormatException) {\\n            logger.severe(\"Invalid input: $input\")\\n            Result.failure(IllegalArgumentException(\"Input must be a valid integer\"))\\n        } catch (e: IllegalArgumentException) {\\n            logger.warning(e.message)\\n            Result.failure(e)\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_83": {
        "input": "import java.util.regex.Pattern\\nclass UserValidator {\\n    private val emailPattern = Pattern.compile(\"^[A-Za-z0-9+_.-]+@(.+)$\")\\n\\n    fun isValidEmail(email: String): Boolean {\\n        return emailPattern.matcher(email).matches()\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_84": {
        "input": "fun secureFunction(input: String): Int? {\\n    try {\\n        val number = input.toInt()\\n        if (number > 0) {\\n            return number\\n        } else {\\n            println(\"Please enter a positive integer.\")\\n        }\\n    } catch (e: NumberFormatException) {\\n        println(\"Invalid input. Please enter a valid integer.\")\\n    }\\n    return null\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_85": {
        "input": "import java.util.Scanner\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n    print(\"Enter a number: \")\n    if (scanner.hasNextInt()) {\n        val userInput = scanner.nextInt()\n        println(\"You entered the number: $userInput\")\n    } else {\n        println(\"Invalid input. Please enter a valid integer.\")\n    }\n    scanner.close()\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_87": {
        "input": "class SecureUserInput {\\n    fun readValidInteger(prompt: String): Int? {\\n        while (true) {\\n            print(prompt)\\n            val input = readLine()\\n            try {\\n                return input?.toInt() ?: throw NumberFormatException(\\\"Input cannot be null\\\")\\n            } catch (e: NumberFormatException) {\\n                println(\\\"Invalid input. Please enter a valid integer.\\\")\\n            }\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_88": {
        "input": "import java.security.MessageDigest\nimport java.nio.charset.StandardCharsets\n\nclass SecureHasher {\n    fun hash(input: String): String? {\n        try {\n            val bytes = input.toByteArray(StandardCharsets.UTF_8)\n            val md = MessageDigest.getInstance(\"SHA-256\")\n            val digest = md.digest(bytes)\n            return digest.fold(\"\", { str, it -> str + \"%02x\".format(it) })\n        } catch (e: Exception) {\n            e.printStackTrace()\n            return null\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "kotlin_89": {
        "input": "fun processUserInput(input: String) {\\n    val safeInput = input.trim()\\n    if (safeInput.matches(Regex(\"\\\\d+\"))) {\\n        try {\\n            val number = safeInput.toInt()\\n            println(number)\\n        } catch (e: NumberFormatException) {\\n            println(\"Invalid number format\")\\n        }\\n    } else {\\n        println(\"Input is not a valid number\")\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_0": {
        "input": "import os\\ndef read_file(file_path):\\n    base_directory = \"/safe_dir/\"\\n    if base_directory in file_path:\\n        full_path = os.path.join(base_directory, file_path.replace(base_directory, \"\", 1))\\n        with open(full_path, 'r') as file:\\n            return file.read()\\n    else:\\n        raise ValueError(\"Invalid path\")",
        "output": {
            "score": 6.5,
            "type": "Path Traversal"
        }
    },
    "python_1": {
        "input": "# Python example\nclass UserAuth:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n    \n    def login(self, username, password):\n        return username == \"admin\" and password == \"password123\"",
        "output": {
            "score": 6.5,
            "type": "Broken Authentication"
        }
    },
    "python_2": {
        "input": "# Python example\ndef obfuscated_eval(encoded_command):\n    import base64\n    exec(base64.b64decode(encoded_command).decode('utf-8'))",
        "output": {
            "score": 7.5,
            "type": "Command Injection"
        }
    },
    "python_3": {
        "input": "import subprocess\\nclass VulnerableClass:\\n    def execute_command(self, cmd):\\n        result = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\\n        output, error = result.communicate()\\n        if error:\\n            return f'Error: {error.decode()}'\\n        else:\\n            return f'Result: {output.decode()}'",
        "output": {
            "score": 7.5,
            "type": "Command Injection"
        }
    },
    "python_4": {
        "input": "# Python example\nimport sqlite3\ndef fetch_user_data(user_id):\n    conn = sqlite3.connect('database.db')\n    cursor = conn.cursor()\n    query = \"SELECT * FROM users WHERE id = '\" + user_id + \"'\"\n    cursor.execute(query)\n    result = cursor.fetchall()\n    conn.close()\n    return result",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "python_5": {
        "input": "# Python example\nfrom flask import Flask, request, redirect\napp = Flask(__name__)\n@app.route('/transfer', methods=['POST'])\ndef transfer():\n    amount = request.form['amount']\n    recipient = request.form['recipient']\n    # Simulate transferring funds\n    print(f'Transferring {amount} to {recipient}')\n    return redirect('/')",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "python_6": {
        "input": "class UserAuth:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n    \n    def authenticate(self, input_username, input_password):\n        if input_username == self.username and input_password == self.password:\n            return True\n        else:\n            return False",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "python_7": {
        "input": "# Python example\ndef get_user_data(user_id):\n    import sqlite3\n    conn = sqlite3.connect('example.db')\n    cursor = conn.cursor()\n    query = \"SELECT * FROM users WHERE id = \" + user_id\n    cursor.execute(query)\n    return cursor.fetchall()",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "python_8": {
        "input": "# Python example\nimport hashlib\ndef authenticate(username, password):\n    stored_password_hash = '2bb80d537b1da3e38bd30361aa855686bde0eacd7162fef6a25fe97bf527a25b'\n    password_hash = hashlib.md5(password.encode()).hexdigest()\n    if username == 'admin' and stored_password_hash == password_hash:\n        return True\n    else:\n        return False",
        "output": {
            "score": 6.5,
            "type": "Broken Authentication"
        }
    },
    "python_9": {
        "input": "import os\nfrom flask import Flask, request\napp = Flask(__name__)\n@app.route('/file')\ndef get_file():\n    filename = request.args.get('filename', '')\n    if '..' not in filename and '.py' not in filename:\n        return open(os.path.join('data', filename)).read()\n    else:\n        return 'Invalid file name'",
        "output": {
            "score": 6.5,
            "type": "Path Traversal"
        }
    },
    "python_10": {
        "input": "from flask import Flask, request, redirect\napp = Flask(__name__)\n\n@app.route('/change_email', methods=['POST'])\ndef change_email():\n    new_email = request.form['email']\n    user_id = request.cookies.get('user_id')\n    if user_id:\n        # Simulate database update\n        print(f\"Updating email for user {user_id} to {new_email}\")\n        return redirect('/profile')\n    else:\n        return 'User not logged in', 401\n\nif __name__ == '__main__':\n    app.run(debug=True)",
        "output": {
            "score": 6.8,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "python_11": {
        "input": "# Python example\ndef read_file(filename):\n    with open(filename, 'r') as file:\n        return file.read()\n\nprint(read_file(input(\"Enter filename: \")))",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "python_12": {
        "input": "def transfer_funds(request):\n    if request.method == 'POST':\n        amount = request.POST.get('amount')\n        recipient = request.POST.get('recipient')\n        # Simulate a fund transfer\n        print(f'Transferring {amount} to {recipient}')",
        "output": {
            "score": 8.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "python_13": {
        "input": "def login(username, password):\n    if username == \"admin\" and password == \"password123\":\n        return True\n    else:\n        return False",
        "output": {
            "score": 6.5,
            "type": "Broken Authentication"
        }
    },
    "python_14": {
        "input": "# Python example\nimport hashlib\n\ndef authenticate(username, password):\n    stored_password_hash = '5f4dcc3b5aa765d61d8327deb882cf99'  # hash for 'password'\n    input_password_hash = hashlib.md5(password.encode()).hexdigest()\n    if username == 'admin' and input_password_hash == stored_password_hash:\n        return True\n    return False",
        "output": {
            "score": 6.5,
            "type": "Broken Authentication"
        }
    },
    "python_15": {
        "input": "# Python example\nclass VulnerableClass:\n    def __reduce__(self):\n        return (eval, (\"__import__('os').system('touch /tmp/exploit')\",))",
        "output": {
            "score": 8.2,
            "type": "Insecure Deserialization"
        }
    },
    "python_16": {
        "input": "# Python example\nfrom flask import Flask, request, render_template_string\napp = Flask(__name__)\n\ndef generate_csrf_token():\n    return 'random_token_here'\n\n@app.route('/transfer', methods=['GET', 'POST'])\ndef transfer():\n    if request.method == 'POST':\n        recipient = request.form['recipient']\n        amount = request.form['amount']\n        # Simulate a bank transfer\n        print(f'Transferring {amount} to {recipient}')\n        return render_template_string('<h1>Transfer successful</h1>')\n    else:\n        token = generate_csrf_token()\n        return render_template_string('<form method=\"post\" action=\"/transfer\"><input type=\"hidden\" name=\"csrf_token\" value=\"{{token}}\"><input type=\"text\" name=\"recipient\"><input type=\"number\" name=\"amount\"><button type=\"submit\">Transfer</button></form>')",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "python_17": {
        "input": "class UserSession:\\n    def __init__(self, user_id):\\n        self.user_id = user_id\\n\\n    def transfer_funds(self, amount, recipient):\\n        if not self.is_authenticated():\\n            raise Exception('User not authenticated')\\n        # Simulate fund transfer\\n        print(f'Transferring {amount} to {recipient}')\\n\\n    def is_authenticated(self):\\n        return True  # This should check for actual authentication",
        "output": {
            "score": 6.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "python_18": {
        "input": "# Python example\nclass CommandExecutor:\n    def execute(self, command):\n        eval(command)",
        "output": {
            "score": 8.2,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "python_19": {
        "input": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    name = request.args.get('name', 'World')\n    return render_template_string(f'Hello {name}!')\n\nif __name__ == '__main__':\n    app.run(debug=True)",
        "output": {
            "score": 6.1,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "python_20": {
        "input": "# Python example\ndef complex_unsafe_function(param):\n    import subprocess\n    command = ['echo', param]\n    subprocess.Popen(command, shell=True)",
        "output": {
            "score": 8.8,
            "type": "Command Injection"
        }
    },
    "python_21": {
        "input": "import os\n\ndef execute_command(command):\n    try:\n        # Log command execution\n        with open(\"/var/log/command_log.txt\", \"a\") as log_file:\n            log_file.write(f\"Executing: {command}\\n\")\n        # Execute the command\n        os.system(command)\n    except Exception as e:\n        print(f\"An error occurred: {str(e)}\")\n\nif __name__ == \"__main__\":\n    user_input = input(\"Enter a command to execute: \")\n    execute_command(user_input)",
        "output": {
            "score": 8.2,
            "type": "Privilege Escalation"
        }
    },
    "python_22": {
        "input": "import sqlite3\\ndef get_user(username):\\n    conn = sqlite3.connect('example.db')\\n    cursor = conn.cursor()\\n    query = \"SELECT * FROM users WHERE username='\" + username + \"'\"\\n    cursor.execute(query)\\n    user = cursor.fetchone()\\n    conn.close()\\n    return user",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "python_23": {
        "input": "# Python example\ndef load_config(serialized):\n    import pickle\n    config = pickle.loads(serialized)\n    return config",
        "output": {
            "score": 8.2,
            "type": "Insecure Deserialization"
        }
    },
    "python_24": {
        "input": "# Python example\nclass SecureObject:\n    def __init__(self, data):\n        self.data = data\n    def serialize(self):\n        import pickle\n        return pickle.dumps(self)\n    @staticmethod\ndef deserialize(serialized_data):\n        import pickle\n        return pickle.loads(serialized_data)",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "python_25": {
        "input": "import logging\nlogging.basicConfig(filename='app.log', level=logging.DEBUG)\ndef log_user_data(user_id, user_email):\n    logging.debug(f'User ID: {user_id}, Email: {user_email}')",
        "output": {
            "score": 2.1,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "python_26": {
        "input": "# Python example\ndef race_condition_example():\n    import threading\n    counter = 0\n    def increment():\n        global counter\n        for _ in range(1000):\n            temp = counter\n            temp += 1\n            counter = temp\n    threads = [threading.Thread(target=increment) for _ in range(10)]\n    for thread in threads:\n        thread.start()\n    for thread in threads:\n        thread.join()\n    print(f\"Final counter value: {counter}\")",
        "output": {
            "score": 5.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "python_27": {
        "input": "# Python example\nfrom flask import Flask, render_template_string\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template_string('<iframe src=\"https://malicious.com\" style=\"opacity:0;position:absolute;z-index:1000;width:100%;height:100%\"></iframe><h1>Welcome to our site!</h1>')",
        "output": {
            "score": 3.7,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "python_28": {
        "input": "# Python example\ndef send_response(user_input):\n    response = \"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\nHello, \" + user_input\n    return response",
        "output": {
            "score": 7.5,
            "type": "HTTP Response Splitting"
        }
    },
    "python_29": {
        "input": "class SessionManager:\n    def __init__(self):\n        self.sessions = {}\n\n    def create_session(self, user_id, session_id):\n        if user_id not in self.sessions:\n            self.sessions[user_id] = session_id\n        return self.sessions[user_id]\n\n    def get_user(self, session_id):\n        for user_id, sid in self.sessions.items():\n            if sid == session_id:\n                return user_id\n        return None",
        "output": {
            "score": 4.0,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "python_30": {
        "input": "# Python example\nclass SessionManager:\n    def __init__(self):\n        self.sessions = {}\n\n    def create_session(self, user_id, session_id):\n        if session_id not in self.sessions:\n            self.sessions[session_id] = {\"user_id\": user_id}\n        return self.sessions[session_id]\n\n    def get_user_by_session(self, session_id):\n        return self.sessions.get(session_id, {}).get(\"user_id\")",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "python_31": {
        "input": "from flask import Flask, render_template_string\n\ndef get_hidden_iframe():\n    return '<iframe src=\"https://malicious-site.com\" style=\"position:absolute; top:-100px; left:-100px;\"></iframe>'\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    template = get_hidden_iframe() + \"<h1>Welcome to the site!</h1>\"\n    return render_template_string(template)\n\nif __name__ == '__main__':\n    app.run(debug=True)",
        "output": {
            "score": 3.5,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "python_32": {
        "input": "class RedirectHandler:\n    def __init__(self, url):\n        self.url = url\n    def redirect(self):\n        import webbrowser\n        webbrowser.open(self.url)",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "python_33": {
        "input": "import os\\nclass FileReader:\\n    def __init__(self, path):\\n        self.path = path\\n    def read_file(self):\\n        file_path = os.path.join(os.getcwd(), self.path)\\n        with open(file_path, 'r') as file:\\n            return file.read()",
        "output": {
            "score": 5.0,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "python_34": {
        "input": "from flask import Flask, request, redirect\napp = Flask(__name__)\n\ndef validate_url(url):\n    allowed_domains = [\"example.com\", \"test.com\"]\n    for domain in allowed_domains:\n        if url.startswith(f'http://{domain}') or url.startswith(f'https://{domain}')):\n            return True\n    return False\n\n@app.route('/redirect')\ndef redirect_to_url():\n    next_url = request.args.get('next', '')\n    if validate_url(next_url):\n        return redirect(next_url)\n    else:\n        return 'Invalid URL'\n\nif __name__ == '__main__':\n    app.run(debug=True)",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "python_35": {
        "input": "# Python example\nimport time\ndef slow_function():\n    while True:\n        for i in range(100000):\n            pass\n        time.sleep(0.1)\ndef trigger_dos():\n    if input('Enter secret key: ') == 'secret':\n        slow_function()",
        "output": {
            "score": 4.5,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "python_36": {
        "input": "class UserInfo:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n\n    def get_info(self):\n        return f\"Username: {self.username}, Password: {self.password}\"",
        "output": {
            "score": 4.0,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "python_37": {
        "input": "class HttpResponseSplitter:\n    def set_header(self, header_value):\n        self.header = f\"Content-Type: text/html\\r\\n{header_value}\\r\\n\"",
        "output": {
            "score": 6.1,
            "type": "HTTP Response Splitting"
        }
    },
    "python_38": {
        "input": "# Python example\ndef serve_content():\n    response = \"<html><body>Hello, world!</body></html>\"\n    return response",
        "output": {
            "score": 3.1,
            "type": "Missing Security Headers"
        }
    },
    "python_39": {
        "input": "import os\n\ndef read_secret_file():\n    try:\n        with open('/etc/secret', 'r') as file:\n            data = file.read()\n            if len(data) > 100:\n                print('File too large to display.')\n            else:\n                print('Secret Data:', data)\n    except FileNotFoundError:\n        print('File not found.')",
        "output": {
            "score": 3.5,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "python_40": {
        "input": "import os\nfrom flask import Flask, request\ndef read_file(file_path):\n    with open(os.path.join('documents', file_path), 'r') as file:\n        return file.read()\napp = Flask(__name__)\n@app.route('/view')\ndef view():\n    file_name = request.args.get('file')\n    if not file_name or '..' in file_name or '\\\\' in file_name:\n        return 'Invalid file name', 400\n    try:\n        content = read_file(file_name)\n        return content\n    except FileNotFoundError:\n        return 'File not found', 404",
        "output": {
            "score": 5.3,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "python_41": {
        "input": "# Python example\ndef read_file(path):\n    import os\n    base_dir = \"/safe/directory/\"\n    safe_path = os.path.join(base_dir, path)\n    if base_dir in safe_path:\n        with open(safe_path, 'r') as file:\n            return file.read()\n    else:\n        return \"Access denied\"",
        "output": {
            "score": 4.3,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "python_42": {
        "input": "from flask import Flask, render_template\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)",
        "output": {
            "score": 6.8,
            "type": "Missing Security Headers"
        }
    },
    "python_43": {
        "input": "# Python example\nimport uuid\n\ndef create_session():\n    session_id = str(uuid.uuid4())\n    if 'HTTP_COOKIE' in os.environ:\n        cookie = http.cookies.SimpleCookie(os.environ['HTTP_COOKIE'])\n        if 'session_id' in cookie:\n            session_id = cookie['session_id'].value\n    return session_id",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "python_44": {
        "input": "import requests\nfrom flask import Flask, request\napp = Flask(__name__)\n\ndef fetch_url(url):\n    try:\n        response = requests.get(url)\n        return response.text\n    except Exception as e:\n        return str(e)\n\n@app.route('/fetch')\ndef fetch_endpoint():\n    url = request.args.get('url', '')\n    if '://' not in url:\n        url = 'http://' + url\n    if not (url.startswith('http://example.com/') or url.startswith('https://example.com/')):\n        return 'Invalid URL'\n    return fetch_url(url)\n\nif __name__ == '__main__':\n    app.run(debug=False, host='0.0.0.0', port=5000)",
        "output": {
            "score": 6.3,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "python_45": {
        "input": "import requests\nclass Fetcher:\n    def __init__(self, url):\n        self.url = url\n    def get_content(self):\n        response = requests.get(self.url)\n        return response.text",
        "output": {
            "score": 6.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "python_46": {
        "input": "import requests\ndef fetch_url(url):\n    response = requests.get(url)\n    return response.text",
        "output": {
            "score": 6.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "python_47": {
        "input": "# Python example\ndef show_secrets():\n    secret_data = {\"username\": \"admin\", \"password\": \"12345\"}\n    print(secret_data)",
        "output": {
            "score": 2.0,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "python_48": {
        "input": "# Python example\nimport requests\ndef fetch_url(url):\n    if not url.startswith('http'):\n        raise ValueError('URL must be HTTP or HTTPS')\n    response = requests.get(url)\n    return response.text",
        "output": {
            "score": 6.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "python_49": {
        "input": "import os\nimport http.cookies\n\ndef handle_request(environ, start_response):\n    if 'HTTP_COOKIE' in environ:\n        cookie = http.cookies.SimpleCookie(environ['HTTP_COOKIE'])\n        session_id = cookie.get('session_id')\n        if not session_id:\n            session_id = os.urandom(16).hex()\n            response_headers = [('Set-Cookie', f'session_id={session_id}; HttpOnly; Secure')]\n        else:\n            response_headers = []\n    else:\n        session_id = os.urandom(16).hex()\n        response_headers = [('Set-Cookie', f'session_id={session_id}; HttpOnly; Secure')]\n\n    response_body = b'Hello, world!'\n    start_response('200 OK', response_headers)\n    return [response_body]",
        "output": {
            "score": 3.6,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "python_50": {
        "input": "class SecureDataHandler:\n    def __init__(self, data):\n        if not isinstance(data, dict):\n            raise ValueError('Data must be a dictionary.')\n        self.data = data\n\n    def get_value(self, key):\n        if not isinstance(key, str) or not key.isalnum():\n            raise KeyError('Key must be alphanumeric.')\n        return self.data.get(key)\n\n    def set_value(self, key, value):\n        if not isinstance(key, str) or not key.isalnum():\n            raise KeyError('Key must be alphanumeric.')\n        if not isinstance(value, (int, float, str, bool)):\n            raise ValueError('Value must be an int, float, str, or bool.')\n        self.data[key] = value\n\n    def __str__(self):\n        return str(self.data)",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_51": {
        "input": "import os\ndef read_secure_file(file_path):\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(f\"The file {file_path} does not exist.\")\n    with open(file_path, 'r', encoding='utf-8') as file:\n        return file.read()\n\ndef main():\n    try:\n        content = read_secure_file(\"example.txt\")\n        print(content)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_52": {
        "input": "import os\n\ndef secure_file_operation(file_path):\n    if not os.path.isabs(file_path) or not os.path.isfile(file_path):\n        raise ValueError(\"Invalid file path\")\n    try:\n        with open(file_path, 'r') as file:\n            return file.read()\n    except IOError as e:\n        raise IOError(f\"Error reading file: {e}\")",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_53": {
        "input": "import hashlib\n\nclass SecureHasher:\n    def __init__(self, algorithm='sha256'):\n        if algorithm not in hashlib.algorithms_available:\n            raise ValueError(f\"Algorithm {algorithm} is not available.\")\n        self.hasher = hashlib.new(algorithm)\n\n    def update(self, data):\n        if not isinstance(data, bytes):\n            raise TypeError(\"Data must be of type bytes.\")\n        self.hasher.update(data)\n\n    def digest(self):\n        return self.hasher.digest()\n\n    def hexdigest(self):\n        return self.hasher.hexdigest()",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_54": {
        "input": "import os\nfrom flask import Flask, request, jsonify\nfrom werkzeug.utils import secure_filename\n\napp = Flask(__name__)\nUPLOAD_FOLDER = '/path/to/the/uploads'\nALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'}\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\ndef allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    if 'file' not in request.files:\n        return jsonify({'error': 'No file part'}), 400\n    file = request.files['file']\n    if file.filename == '':\n        return jsonify({'error': 'No selected file'}), 400\n    if file and allowed_file(file.filename):\n        filename = secure_filename(file.filename)\n        file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n        return jsonify({'message': 'File successfully uploaded'}), 201\n    else:\n        return jsonify({'error': 'Invalid file type'}), 400\n\nif __name__ == '__main__':\n    app.run(debug=False)",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_55": {
        "input": "class SecureDataHandler:\n    def __init__(self, data):\n        if isinstance(data, dict):\n            self.data = data\n        else:\n            raise ValueError('Data must be a dictionary')\n\n    def get_value(self, key):\n        if not isinstance(key, str):\n            raise TypeError('Key must be a string')\n        return self.data.get(key, None)\n\n    def set_value(self, key, value):\n        if not isinstance(key, str):\n            raise TypeError('Key must be a string')\n        self.data[key] = value",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_56": {
        "input": "def secure_file_upload(file_path):\n    import os\n    import hashlib\n    from werkzeug.utils import secure_filename\n    from flask import Flask, request, abort\n\n    app = Flask(__name__)\n    ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'}\n\n    def allowed_file(filename):\n        return '.' in filename and \\\n               filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n    @app.route('/upload', methods=['POST'])\n    def upload_file():\n        if 'file' not in request.files:\n            abort(400, description=\"No file part\")\n        file = request.files['file']\n        if file.filename == '':\n            abort(400, description=\"No selected file\")\n        if file and allowed_file(file.filename):\n            filename = secure_filename(file.filename)\n            destination = os.path.join('/safe/uploads', filename)\n            file.save(destination)\n            with open(destination, 'rb') as f:\n                file_hash = hashlib.sha256(f.read()).hexdigest()\n            return {'message': 'File successfully uploaded', 'file_hash': file_hash}\n        else:\n            abort(400, description=\"Invalid file type\")\n\n    if __name__ == '__main__':\n        app.run()",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_57": {
        "input": "import hashlib\nimport os\nclass SecureUser:\n    def __init__(self, username, password):\n        self.username = username\n        self.salt = os.urandom(16)\n        self.password_hash = self._hash_password(password)\n\n    def _hash_password(self, password):\n        return hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), self.salt, 100000)\n\n    def check_password(self, password):\n        return hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), self.salt, 100000) == self.password_hash",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_58": {
        "input": "def fetch_user_data(user_id):\n    import sqlite3\n    try:\n        conn = sqlite3.connect('example.db')\n        cursor = conn.cursor()\n        query = \"SELECT * FROM users WHERE id=?\"\n        cursor.execute(query, (user_id,))\n        user_data = cursor.fetchone()\n        return user_data\n    except sqlite3.Error as e:\n        print(f\"Database error: {e}\")\n    finally:\n        if conn:\n            conn.close()",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_59": {
        "input": "import hashlib\n\nclass SecureHasher:\n    def __init__(self, algorithm='sha256'):\n        self.algorithm = algorithm\n        try:\n            self.hasher = hashlib.new(self.algorithm)\n        except ValueError as e:\n            raise ValueError(f\"Unsupported hash algorithm: {self.algorithm}\") from e\n\n    def update(self, data):\n        if not isinstance(data, bytes):\n            raise TypeError(\"Data must be of type bytes\")\n        self.hasher.update(data)\n\n    def digest(self):\n        return self.hasher.digest()\n\n    def hexdigest(self):\n        return self.hasher.hexdigest()",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_60": {
        "input": "import os\nfrom werkzeug.utils import secure_filename\ndef upload_file(file):\n    if file and allowed_file(file.filename):\n        filename = secure_filename(file.filename)\n        file.save(os.path.join('/path/to/the/uploads', filename))\ndef allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_61": {
        "input": "import os\nfrom flask import Flask, request, jsonify\ndef validate_input(data):\n    if not isinstance(data, dict) or 'username' not in data or 'password' not in data:\n        return False\n    if not isinstance(data['username'], str) or not isinstance(data['password'], str):\n        return False\n    if len(data['username']) < 3 or len(data['password']) < 8:\n        return False\n    return True\ndef create_user(username, password):\n    # Simulate user creation with safe practices\n    print(f\"User {username} created.\")\napp = Flask(__name__)\n@app.route('/register', methods=['POST'])\ndef register():\n    try:\n        data = request.get_json()\n        if not validate_input(data):\n            return jsonify({'error': 'Invalid input'}), 400\n        create_user(data['username'], data['password'])\n        return jsonify({'message': 'User registered successfully'}), 201\n    except Exception as e:\n        app.logger.error(f\"Error during registration: {e}\")\n        return jsonify({'error': 'Internal server error'}), 500",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_62": {
        "input": "import os\nimport hashlib\n\ndef hash_file(filename):\n    try:\n        with open(filename, \"rb\") as f:\n            file_hash = hashlib.sha256()\n            while chunk := f.read(8192):\n                file_hash.update(chunk)\n        return file_hash.hexdigest()\n    except FileNotFoundError:\n        print(f\"Error: The file {filename} does not exist.\")\n        return None\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n\nif __name__ == \"__main__\":\n    filename = input(\"Enter the filename to hash: \").strip()\n    if os.path.isfile(filename):\n        result = hash_file(filename)\n        if result:\n            print(f\"SHA-256 Hash of {filename}: {result}\")\n    else:\n        print(\"Please provide a valid file path.\")",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_63": {
        "input": "import os\nimport hashlib\nfrom flask import Flask, request, jsonify\ndef hash_password(password):\n    return hashlib.sha256(password.encode()).hexdigest()\ndef validate_user_input(data):\n    if not isinstance(data, dict):\n        raise ValueError(\"Invalid input type\")\n    required_fields = [\"username\", \"password\"]\n    for field in required_fields:\n        if field not in data or not isinstance(data[field], str) or not data[field].strip():\n            raise ValueError(f\"Missing or invalid {field}\")\napp = Flask(__name__)\n@app.route('/register', methods=['POST'])\ndef register_user():\n    try:\n        user_data = request.get_json()\n        validate_user_input(user_data)\n        hashed_password = hash_password(user_data['password'])\n        # Here you would typically save the username and hashed password to a database\n        return jsonify({\"message\": \"User registered successfully\", \"hashed_password\": hashed_password}), 201\n    except ValueError as e:\n        return jsonify({\"error\": str(e)}), 400\nif __name__ == '__main__':\n    app.run(debug=False, host='0.0.0.0', port=int(os.getenv('PORT', 5000)))",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_64": {
        "input": "import hashlib\n\nclass UserAuth:\n    def __init__(self, username, password):\n        self.username = username\n        self.password_hash = self._hash_password(password)\n\n    def _hash_password(self, password):\n        return hashlib.sha256(password.encode()).hexdigest()\n\n    def verify_password(self, password):\n        return self._hash_password(password) == self.password_hash",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_65": {
        "input": "import os\ndef read_secure_file(file_path):\n    if not isinstance(file_path, str) or not file_path:\n        raise ValueError(\"Invalid file path\")\n    if \"/\" in os.path.basename(file_path) or \"\\\\\" in os.path.basename(file_path):\n        raise ValueError(\"File path contains invalid characters\")\n    try:\n        with open(os.path.join(\"safe_directory\", file_path), \"r\") as file:\n            return file.read()\n    except FileNotFoundError:\n        raise FileNotFoundError(\"The file does not exist\")\n    except Exception as e:\n        raise RuntimeError(f\"An error occurred: {str(e)}\")",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_66": {
        "input": "import os\nfrom flask import Flask, request, jsonify\n\ndef validate_input(data):\n    if not isinstance(data, dict) or 'value' not in data:\n        return False\n    if not isinstance(data['value'], int):\n        return False\n    return True\n\napp = Flask(__name__)\n\n@app.route('/process', methods=['POST'])\ndef process_data():\n    try:\n        data = request.get_json()\n        if not validate_input(data):\n            return jsonify({'error': 'Invalid input'}), 400\n        result = data['value'] * 2\n        return jsonify({'result': result}), 200\n    except Exception as e:\n        app.logger.error(f'Error processing request: {e}')\n        return jsonify({'error': 'Internal Server Error'}), 500",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_67": {
        "input": "class SecureDataHandler:\n    def __init__(self, data):\n        if not isinstance(data, dict):\n            raise ValueError('Data must be a dictionary')\n        self.data = data\n\n    def get_value(self, key):\n        if not isinstance(key, str):\n            raise KeyError('Key must be a string')\n        return self.data.get(key)\n\n    def set_value(self, key, value):\n        if not isinstance(key, str):\n            raise KeyError('Key must be a string')\n        if not isinstance(value, (str, int, float, bool, list, dict, tuple, type(None))):\n            raise ValueError('Value has unsupported type')\n        self.data[key] = value\n\n    def delete_value(self, key):\n        if not isinstance(key, str):\n            raise KeyError('Key must be a string')\n        if key in self.data:\n            del self.data[key]",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_68": {
        "input": "import logging\n\nclass SecureDataHandler:\n    def __init__(self, data_source):\n        self.data_source = data_source\n        self.logger = logging.getLogger(__name__)\n        logging.basicConfig(level=logging.INFO)\n\n    def fetch_data(self):\n        try:\n            with open(self.data_source, 'r') as file:\n                data = file.read()\n                return data\n        except FileNotFoundError:\n            self.logger.error(f\"File not found: {self.data_source}\")\n            return None\n        except Exception as e:\n            self.logger.error(f\"An error occurred: {str(e)}\")\n            return None\n\n    def process_data(self, data):\n        if not isinstance(data, str):\n            raise ValueError(\"Data must be a string\")\n        # Example processing (securely)\n        processed_data = data.strip()\n        return processed_data",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_69": {
        "input": "import os\n\nclass SecureFileHandler:\n    def __init__(self, directory):\n        self.directory = os.path.abspath(directory)\n\n    def save_file(self, filename, content):\n        if not self._is_safe_path(filename):\n            raise ValueError(\"Invalid file path\")\n        with open(os.path.join(self.directory, filename), 'w') as f:\n            f.write(content)\n\n    def read_file(self, filename):\n        if not self._is_safe_path(filename):\n            raise ValueError(\"Invalid file path\")\n        with open(os.path.join(self.directory, filename), 'r') as f:\n            return f.read()\n\n    def _is_safe_path(self, path):\n        full_path = os.path.abspath(os.path.join(self.directory, path))\n        return os.path.commonpath([self.directory, full_path]) == self.directory",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_70": {
        "input": "import os\ndef read_secure_file(file_path):\n    if not isinstance(file_path, str) or not file_path:\n        raise ValueError(\"Invalid file path provided\")\n    if '..' in file_path or os.path.isabs(file_path):\n        raise ValueError(\"File path must be a relative path and cannot traverse directories\")\n    try:\n        with open(os.path.join('safe_directory', file_path), 'r') as file:\n            return file.read()\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"The file {file_path} does not exist in the safe directory.\")\n    except Exception as e:\n        raise RuntimeError(f\"An error occurred while reading the file: {e}\")",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_71": {
        "input": "import os\nimport hashlib\ndef hash_file(file_path):\n    \"\"\"Calculate the SHA-256 hash of a file.\"\"\"\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(f\"The file {file_path} does not exist.\")\n    sha256_hash = hashlib.sha256()\n    try:\n        with open(file_path, \"rb\") as f:\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\n                sha256_hash.update(byte_block)\n        return sha256_hash.hexdigest()\n    except IOError as e:\n        raise IOError(f\"Error reading {file_path}: {e}\")",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_72": {
        "input": "import os\nimport json\nfrom flask import Flask, request, jsonify\n\ndef is_valid_json(data):\n    try:\n        json.loads(data)\n        return True\n    except ValueError:\n        return False\n\napp = Flask(__name__)\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    if not request.is_json:\n        return jsonify({\"error\": \"Request must be JSON\"}), 400\n    data = request.get_data(as_text=True)\n    if not is_valid_json(data):\n        return jsonify({\"error\": \"Invalid JSON\"}), 400\n    try:\n        safe_data = json.loads(data)\n        # Process the safe_data here\n        return jsonify({\"message\": \"Data processed successfully\", \"data\": safe_data}), 200\n    except Exception as e:\n        app.logger.error(f\"Error processing data: {e}\")\n        return jsonify({\"error\": \"Internal server error\"}), 500\n\nif __name__ == '__main__':\n    app.run(debug=False, host='127.0.0.1', port=5000)",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_73": {
        "input": "import hashlib\ndef hash_password(password):\n    if not isinstance(password, str):\n        raise ValueError('Password must be a string')\n    return hashlib.sha256(password.encode()).hexdigest()",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_74": {
        "input": "class SecureUserInputHandler:\n    def __init__(self):\n        self.validated_input = None\n\n    def get_validated_integer(self, prompt_message):\n        while True:\n            try:\n                user_input = input(prompt_message)\n                if not user_input.strip().isdigit():\n                    raise ValueError(\"Input must be a valid integer.\")\n                self.validated_input = int(user_input)\n                return self.validated_input\n            except ValueError as e:\n                print(f\"Invalid input: {e}\", file=sys.stderr)",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_75": {
        "input": "class SecureDataHandler:\n    def __init__(self, data=None):\n        if data is None:\n            data = {}\n        self.data = data\n\n    def add_data(self, key, value):\n        if not isinstance(key, str) or not isinstance(value, str):\n            raise ValueError('Key and value must be strings')\n        self.data[key] = value\n\n    def get_data(self, key):\n        if not isinstance(key, str):\n            raise ValueError('Key must be a string')\n        return self.data.get(key, None)\n\n    def remove_data(self, key):\n        if not isinstance(key, str):\n            raise ValueError('Key must be a string')\n        if key in self.data:\n            del self.data[key]",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_76": {
        "input": "import os\nfrom flask import Flask, request, jsonify\nfrom werkzeug.exceptions import HTTPException\n\ndef validate_input(data):\n    if not isinstance(data, dict) or 'value' not in data:\n        return False, 'Invalid input format'\n    if not isinstance(data['value'], str) or not data['value'].isalnum():\n        return False, 'Value must be alphanumeric'\n    return True, ''\n\napp = Flask(__name__)\n\n@app.errorhandler(HTTPException)\ndef handle_exception(e):\n    response = e.get_response()\n    response.data = jsonify(error=str(e)).data\n    response.content_type = 'application/json'\n    return response\n\n@app.route('/process', methods=['POST'])\ndef process():\n    data = request.get_json()\n    is_valid, message = validate_input(data)\n    if not is_valid:\n        return jsonify({'error': message}), 400\n    processed_value = f'Processed: {data['value']}'\n    return jsonify({'result': processed_value})\n\nif __name__ == '__main__':\n    app.run(host='127.0.0.1', port=5000)",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_77": {
        "input": "import os\n\ndef read_secure_file(file_path):\n    if not isinstance(file_path, str) or not file_path:\n        raise ValueError(\"Invalid file path\")\n    \n    safe_directory = \"/safe/directory/\"\n    absolute_path = os.path.abspath(file_path)\n    \n    if not absolute_path.startswith(safe_directory):\n        raise PermissionError(\"Access denied to the specified file path\")\n    \n    try:\n        with open(absolute_path, 'r') as file:\n            return file.read()\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"File {file_path} not found\")\n    except IOError as e:\n        raise IOError(f\"An error occurred while reading the file: {e}\")",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_78": {
        "input": "import os\nimport json\ndef read_secure_file(file_path):\n    if not isinstance(file_path, str) or not file_path:\n        raise ValueError(\"Invalid file path\")\n    if '..' in file_path or os.path.isabs(file_path):\n        raise ValueError(\"File path is not secure\")\n    try:\n        with open(os.path.join('safe_directory', file_path), 'r') as file:\n            return json.load(file)\n    except FileNotFoundError:\n        print(\"File not found.\")\n    except json.JSONDecodeError:\n        print(\"Error decoding JSON from the file.\")\ndef main():\n    try:\n        data = read_secure_file(input(\"Enter file name: \"))\n        if data is not None:\n            print(data)\n    except ValueError as ve:\n        print(f\"Value error: {ve}\")\nif __name__ == \"__main__\":\n    main()",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_79": {
        "input": "def secure_file_write(file_path, data):\n    try:\n        with open(file_path, 'w', encoding='utf-8') as file:\n            file.write(data)\n    except IOError as e:\n        print(f\"An error occurred while writing to the file: {e}\")",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_80": {
        "input": "import os\nimport hashlib\nfrom flask import Flask, request, jsonify\ndef hash_password(password):\n    return hashlib.sha256(password.encode()).hexdigest()\ndef validate_username(username):\n    if not username.isalnum() or len(username) < 3:\n        raise ValueError(\"Username must be alphanumeric and at least 3 characters long\")\ndef validate_password(password):\n    if len(password) < 8:\n        raise ValueError(\"Password must be at least 8 characters long\")\napp = Flask(__name__)\n@app.route('/register', methods=['POST'])\ndef register():\n    try:\n        data = request.get_json()\n        username = data['username']\n        password = data['password']\n        validate_username(username)\n        validate_password(password)\n        hashed_password = hash_password(password)\n        # Here you would typically store the username and hashed_password in a database\n        return jsonify({\"message\": \"User registered successfully\", \"hashed_password\": hashed_password}), 201\n    except KeyError:\n        return jsonify({\"error\": \"Username and password are required\"}), 400\n    except ValueError as e:\n        return jsonify({\"error\": str(e)}), 400\nif __name__ == '__main__':\n    app.run(debug=False, host='127.0.0.1', port=5000)",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_81": {
        "input": "import hashlib\n\nclass SecureUser:\n    def __init__(self, username, password):\n        self.username = username\n        self.password_hash = self._hash_password(password)\n\n    def _hash_password(self, password):\n        return hashlib.sha256(password.encode()).hexdigest()\n\n    def check_password(self, password):\n        return self.password_hash == self._hash_password(password)",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_82": {
        "input": "import os\ndef read_secure_file(file_path):\n    if not os.path.isabs(file_path) or not os.path.isfile(file_path):\n        raise ValueError('Invalid file path')\n    with open(file_path, 'r', encoding='utf-8') as file:\n        return file.read()\ntry:\n    content = read_secure_file('/path/to/secure/file.txt')\n    print(content)\nexcept Exception as e:\n    print(f'Error: {str(e)}')",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_83": {
        "input": "class SecureDataHandler:\n    def __init__(self, data=None):\n        self.data = data if isinstance(data, list) else []\n\n    def add_data(self, item):\n        if not isinstance(item, str):\n            raise ValueError(\"Only strings are allowed\")\n        self.data.append(item)\n\n    def get_data(self):\n        return self.data.copy()\n\n    def save_to_file(self, filename):\n        import os\n        if not os.path.basename(filename) == filename:\n            raise ValueError(\"Invalid filename\")\n        with open(filename, 'w') as file:\n            for item in self.data:\n                file.write(item + '\\n')\n\n    def load_from_file(self, filename):\n        import os\n        if not os.path.basename(filename) == filename:\n            raise ValueError(\"Invalid filename\")\n        with open(filename, 'r') as file:\n            self.data = [line.strip() for line in file.readlines()]",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_84": {
        "input": "def secure_file_read(file_path):\n    try:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            return file.read()\n    except FileNotFoundError:\n        return \"File not found\"\n    except Exception as e:\n        return f\"An error occurred: {str(e)}\"",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_85": {
        "input": "import hashlib\n\nclass SecureHasher:\n    def __init__(self, algorithm='sha256'):\n        if algorithm not in ['sha256', 'sha384', 'sha512']:\n            raise ValueError('Unsupported hash algorithm')\n        self.algorithm = algorithm\n\n    def hash_data(self, data):\n        if not isinstance(data, str):\n            raise TypeError('Data must be a string')\n        hasher = hashlib.new(self.algorithm)\n        hasher.update(data.encode('utf-8'))\n        return hasher.hexdigest()\n",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_86": {
        "input": "import os\nfrom hashlib import sha256\ndef secure_file_hash(file_path):\n    if not isinstance(file_path, str) or not file_path:\n        raise ValueError('Invalid file path')\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f'File {file_path} does not exist')\n    hash_sha256 = sha256()\n    try:\n        with open(file_path, 'rb') as f:\n            for byte_block in iter(lambda: f.read(4096), b''):\n                hash_sha256.update(byte_block)\n        return hash_sha256.hexdigest()\n    except IOError as e:\n        raise IOError(f'Error reading file {file_path}: {str(e)}')",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_87": {
        "input": "import os\ndef read_secure_file(file_path):\n    if not isinstance(file_path, str) or not file_path:\n        raise ValueError(\"Invalid file path\")\n    secure_dir = \"/secure/data/\"\n    if not file_path.startswith(secure_dir):\n        raise ValueError(\"File path is outside the allowed directory\")\n    try:\n        with open(file_path, 'r') as file:\n            return file.read()\n    except FileNotFoundError:\n        print(\"File not found.\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_88": {
        "input": "import os\nimport hashlib\ndef hash_file(filename):\n    if not os.path.isfile(filename):\n        raise ValueError(f\"The file {filename} does not exist.\")\n    sha256_hash = hashlib.sha256()\n    with open(filename, \"rb\") as f:\n        for byte_block in iter(lambda: f.read(4096), b\"\"):\n            sha256_hash.update(byte_block)\n    return sha256_hash.hexdigest()",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_89": {
        "input": "import hashlib\ndef hash_password(password):\n    if not isinstance(password, str) or not password:\n        raise ValueError(\"Password must be a non-empty string\")\n    return hashlib.sha256(password.encode()).hexdigest()",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    }
}