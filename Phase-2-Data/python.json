{
    "python_0": {
        "input": "import os\\ndef read_file(file_path):\\n    base_directory = \"/safe_dir/\"\\n    if base_directory in file_path:\\n        full_path = os.path.join(base_directory, file_path.replace(base_directory, \"\", 1))\\n        with open(full_path, 'r') as file:\\n            return file.read()\\n    else:\\n        raise ValueError(\"Invalid path\")",
        "output": {
            "score": 6.5,
            "type": "Path Traversal"
        }
    },
    "python_1": {
        "input": "# Python example\nclass UserAuth:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n    \n    def login(self, username, password):\n        return username == \"admin\" and password == \"password123\"",
        "output": {
            "score": 6.5,
            "type": "Broken Authentication"
        }
    },
    "python_2": {
        "input": "# Python example\ndef obfuscated_eval(encoded_command):\n    import base64\n    exec(base64.b64decode(encoded_command).decode('utf-8'))",
        "output": {
            "score": 7.5,
            "type": "Command Injection"
        }
    },
    "python_3": {
        "input": "import subprocess\\nclass VulnerableClass:\\n    def execute_command(self, cmd):\\n        result = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\\n        output, error = result.communicate()\\n        if error:\\n            return f'Error: {error.decode()}'\\n        else:\\n            return f'Result: {output.decode()}'",
        "output": {
            "score": 7.5,
            "type": "Command Injection"
        }
    },
    "python_4": {
        "input": "# Python example\nimport sqlite3\ndef fetch_user_data(user_id):\n    conn = sqlite3.connect('database.db')\n    cursor = conn.cursor()\n    query = \"SELECT * FROM users WHERE id = '\" + user_id + \"'\"\n    cursor.execute(query)\n    result = cursor.fetchall()\n    conn.close()\n    return result",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "python_5": {
        "input": "# Python example\nfrom flask import Flask, request, redirect\napp = Flask(__name__)\n@app.route('/transfer', methods=['POST'])\ndef transfer():\n    amount = request.form['amount']\n    recipient = request.form['recipient']\n    # Simulate transferring funds\n    print(f'Transferring {amount} to {recipient}')\n    return redirect('/')",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "python_6": {
        "input": "class UserAuth:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n    \n    def authenticate(self, input_username, input_password):\n        if input_username == self.username and input_password == self.password:\n            return True\n        else:\n            return False",
        "output": {
            "score": 7.5,
            "type": "Broken Authentication"
        }
    },
    "python_7": {
        "input": "# Python example\ndef get_user_data(user_id):\n    import sqlite3\n    conn = sqlite3.connect('example.db')\n    cursor = conn.cursor()\n    query = \"SELECT * FROM users WHERE id = \" + user_id\n    cursor.execute(query)\n    return cursor.fetchall()",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "python_8": {
        "input": "# Python example\nimport hashlib\ndef authenticate(username, password):\n    stored_password_hash = '2bb80d537b1da3e38bd30361aa855686bde0eacd7162fef6a25fe97bf527a25b'\n    password_hash = hashlib.md5(password.encode()).hexdigest()\n    if username == 'admin' and stored_password_hash == password_hash:\n        return True\n    else:\n        return False",
        "output": {
            "score": 6.5,
            "type": "Broken Authentication"
        }
    },
    "python_9": {
        "input": "import os\nfrom flask import Flask, request\napp = Flask(__name__)\n@app.route('/file')\ndef get_file():\n    filename = request.args.get('filename', '')\n    if '..' not in filename and '.py' not in filename:\n        return open(os.path.join('data', filename)).read()\n    else:\n        return 'Invalid file name'",
        "output": {
            "score": 6.5,
            "type": "Path Traversal"
        }
    },
    "python_10": {
        "input": "from flask import Flask, request, redirect\napp = Flask(__name__)\n\n@app.route('/change_email', methods=['POST'])\ndef change_email():\n    new_email = request.form['email']\n    user_id = request.cookies.get('user_id')\n    if user_id:\n        # Simulate database update\n        print(f\"Updating email for user {user_id} to {new_email}\")\n        return redirect('/profile')\n    else:\n        return 'User not logged in', 401\n\nif __name__ == '__main__':\n    app.run(debug=True)",
        "output": {
            "score": 6.8,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "python_11": {
        "input": "# Python example\ndef read_file(filename):\n    with open(filename, 'r') as file:\n        return file.read()\n\nprint(read_file(input(\"Enter filename: \")))",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "python_12": {
        "input": "def transfer_funds(request):\n    if request.method == 'POST':\n        amount = request.POST.get('amount')\n        recipient = request.POST.get('recipient')\n        # Simulate a fund transfer\n        print(f'Transferring {amount} to {recipient}')",
        "output": {
            "score": 8.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "python_13": {
        "input": "def login(username, password):\n    if username == \"admin\" and password == \"password123\":\n        return True\n    else:\n        return False",
        "output": {
            "score": 6.5,
            "type": "Broken Authentication"
        }
    },
    "python_14": {
        "input": "# Python example\nimport hashlib\n\ndef authenticate(username, password):\n    stored_password_hash = '5f4dcc3b5aa765d61d8327deb882cf99'  # hash for 'password'\n    input_password_hash = hashlib.md5(password.encode()).hexdigest()\n    if username == 'admin' and input_password_hash == stored_password_hash:\n        return True\n    return False",
        "output": {
            "score": 6.5,
            "type": "Broken Authentication"
        }
    },
    "python_15": {
        "input": "# Python example\nclass VulnerableClass:\n    def __reduce__(self):\n        return (eval, (\"__import__('os').system('touch /tmp/exploit')\",))",
        "output": {
            "score": 8.2,
            "type": "Insecure Deserialization"
        }
    },
    "python_16": {
        "input": "# Python example\nfrom flask import Flask, request, render_template_string\napp = Flask(__name__)\n\ndef generate_csrf_token():\n    return 'random_token_here'\n\n@app.route('/transfer', methods=['GET', 'POST'])\ndef transfer():\n    if request.method == 'POST':\n        recipient = request.form['recipient']\n        amount = request.form['amount']\n        # Simulate a bank transfer\n        print(f'Transferring {amount} to {recipient}')\n        return render_template_string('<h1>Transfer successful</h1>')\n    else:\n        token = generate_csrf_token()\n        return render_template_string('<form method=\"post\" action=\"/transfer\"><input type=\"hidden\" name=\"csrf_token\" value=\"{{token}}\"><input type=\"text\" name=\"recipient\"><input type=\"number\" name=\"amount\"><button type=\"submit\">Transfer</button></form>')",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "python_17": {
        "input": "class UserSession:\\n    def __init__(self, user_id):\\n        self.user_id = user_id\\n\\n    def transfer_funds(self, amount, recipient):\\n        if not self.is_authenticated():\\n            raise Exception('User not authenticated')\\n        # Simulate fund transfer\\n        print(f'Transferring {amount} to {recipient}')\\n\\n    def is_authenticated(self):\\n        return True  # This should check for actual authentication",
        "output": {
            "score": 6.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "python_18": {
        "input": "# Python example\nclass CommandExecutor:\n    def execute(self, command):\n        eval(command)",
        "output": {
            "score": 8.2,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "python_19": {
        "input": "from flask import Flask, request, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    name = request.args.get('name', 'World')\n    return render_template_string(f'Hello {name}!')\n\nif __name__ == '__main__':\n    app.run(debug=True)",
        "output": {
            "score": 6.1,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "python_20": {
        "input": "# Python example\ndef complex_unsafe_function(param):\n    import subprocess\n    command = ['echo', param]\n    subprocess.Popen(command, shell=True)",
        "output": {
            "score": 8.8,
            "type": "Command Injection"
        }
    },
    "python_21": {
        "input": "import os\n\ndef execute_command(command):\n    try:\n        # Log command execution\n        with open(\"/var/log/command_log.txt\", \"a\") as log_file:\n            log_file.write(f\"Executing: {command}\\n\")\n        # Execute the command\n        os.system(command)\n    except Exception as e:\n        print(f\"An error occurred: {str(e)}\")\n\nif __name__ == \"__main__\":\n    user_input = input(\"Enter a command to execute: \")\n    execute_command(user_input)",
        "output": {
            "score": 8.2,
            "type": "Privilege Escalation"
        }
    },
    "python_22": {
        "input": "import sqlite3\\ndef get_user(username):\\n    conn = sqlite3.connect('example.db')\\n    cursor = conn.cursor()\\n    query = \"SELECT * FROM users WHERE username='\" + username + \"'\"\\n    cursor.execute(query)\\n    user = cursor.fetchone()\\n    conn.close()\\n    return user",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "python_23": {
        "input": "# Python example\ndef load_config(serialized):\n    import pickle\n    config = pickle.loads(serialized)\n    return config",
        "output": {
            "score": 8.2,
            "type": "Insecure Deserialization"
        }
    },
    "python_24": {
        "input": "# Python example\nclass SecureObject:\n    def __init__(self, data):\n        self.data = data\n    def serialize(self):\n        import pickle\n        return pickle.dumps(self)\n    @staticmethod\ndef deserialize(serialized_data):\n        import pickle\n        return pickle.loads(serialized_data)",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "python_25": {
        "input": "import logging\nlogging.basicConfig(filename='app.log', level=logging.DEBUG)\ndef log_user_data(user_id, user_email):\n    logging.debug(f'User ID: {user_id}, Email: {user_email}')",
        "output": {
            "score": 2.1,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "python_26": {
        "input": "# Python example\ndef race_condition_example():\n    import threading\n    counter = 0\n    def increment():\n        global counter\n        for _ in range(1000):\n            temp = counter\n            temp += 1\n            counter = temp\n    threads = [threading.Thread(target=increment) for _ in range(10)]\n    for thread in threads:\n        thread.start()\n    for thread in threads:\n        thread.join()\n    print(f\"Final counter value: {counter}\")",
        "output": {
            "score": 5.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "python_27": {
        "input": "# Python example\nfrom flask import Flask, render_template_string\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template_string('<iframe src=\"https://malicious.com\" style=\"opacity:0;position:absolute;z-index:1000;width:100%;height:100%\"></iframe><h1>Welcome to our site!</h1>')",
        "output": {
            "score": 3.7,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "python_28": {
        "input": "# Python example\ndef send_response(user_input):\n    response = \"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\nHello, \" + user_input\n    return response",
        "output": {
            "score": 7.5,
            "type": "HTTP Response Splitting"
        }
    },
    "python_29": {
        "input": "class SessionManager:\n    def __init__(self):\n        self.sessions = {}\n\n    def create_session(self, user_id, session_id):\n        if user_id not in self.sessions:\n            self.sessions[user_id] = session_id\n        return self.sessions[user_id]\n\n    def get_user(self, session_id):\n        for user_id, sid in self.sessions.items():\n            if sid == session_id:\n                return user_id\n        return None",
        "output": {
            "score": 4.0,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "python_30": {
        "input": "# Python example\nclass SessionManager:\n    def __init__(self):\n        self.sessions = {}\n\n    def create_session(self, user_id, session_id):\n        if session_id not in self.sessions:\n            self.sessions[session_id] = {\"user_id\": user_id}\n        return self.sessions[session_id]\n\n    def get_user_by_session(self, session_id):\n        return self.sessions.get(session_id, {}).get(\"user_id\")",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "python_31": {
        "input": "from flask import Flask, render_template_string\n\ndef get_hidden_iframe():\n    return '<iframe src=\"https://malicious-site.com\" style=\"position:absolute; top:-100px; left:-100px;\"></iframe>'\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    template = get_hidden_iframe() + \"<h1>Welcome to the site!</h1>\"\n    return render_template_string(template)\n\nif __name__ == '__main__':\n    app.run(debug=True)",
        "output": {
            "score": 3.5,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "python_32": {
        "input": "class RedirectHandler:\n    def __init__(self, url):\n        self.url = url\n    def redirect(self):\n        import webbrowser\n        webbrowser.open(self.url)",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "python_33": {
        "input": "import os\\nclass FileReader:\\n    def __init__(self, path):\\n        self.path = path\\n    def read_file(self):\\n        file_path = os.path.join(os.getcwd(), self.path)\\n        with open(file_path, 'r') as file:\\n            return file.read()",
        "output": {
            "score": 5.0,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "python_34": {
        "input": "from flask import Flask, request, redirect\napp = Flask(__name__)\n\ndef validate_url(url):\n    allowed_domains = [\"example.com\", \"test.com\"]\n    for domain in allowed_domains:\n        if url.startswith(f'http://{domain}') or url.startswith(f'https://{domain}')):\n            return True\n    return False\n\n@app.route('/redirect')\ndef redirect_to_url():\n    next_url = request.args.get('next', '')\n    if validate_url(next_url):\n        return redirect(next_url)\n    else:\n        return 'Invalid URL'\n\nif __name__ == '__main__':\n    app.run(debug=True)",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "python_35": {
        "input": "# Python example\nimport time\ndef slow_function():\n    while True:\n        for i in range(100000):\n            pass\n        time.sleep(0.1)\ndef trigger_dos():\n    if input('Enter secret key: ') == 'secret':\n        slow_function()",
        "output": {
            "score": 4.5,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "python_36": {
        "input": "class UserInfo:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n\n    def get_info(self):\n        return f\"Username: {self.username}, Password: {self.password}\"",
        "output": {
            "score": 4.0,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "python_37": {
        "input": "class HttpResponseSplitter:\n    def set_header(self, header_value):\n        self.header = f\"Content-Type: text/html\\r\\n{header_value}\\r\\n\"",
        "output": {
            "score": 6.1,
            "type": "HTTP Response Splitting"
        }
    },
    "python_38": {
        "input": "# Python example\ndef serve_content():\n    response = \"<html><body>Hello, world!</body></html>\"\n    return response",
        "output": {
            "score": 3.1,
            "type": "Missing Security Headers"
        }
    },
    "python_39": {
        "input": "import os\n\ndef read_secret_file():\n    try:\n        with open('/etc/secret', 'r') as file:\n            data = file.read()\n            if len(data) > 100:\n                print('File too large to display.')\n            else:\n                print('Secret Data:', data)\n    except FileNotFoundError:\n        print('File not found.')",
        "output": {
            "score": 3.5,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "python_40": {
        "input": "import os\nfrom flask import Flask, request\ndef read_file(file_path):\n    with open(os.path.join('documents', file_path), 'r') as file:\n        return file.read()\napp = Flask(__name__)\n@app.route('/view')\ndef view():\n    file_name = request.args.get('file')\n    if not file_name or '..' in file_name or '\\\\' in file_name:\n        return 'Invalid file name', 400\n    try:\n        content = read_file(file_name)\n        return content\n    except FileNotFoundError:\n        return 'File not found', 404",
        "output": {
            "score": 5.3,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "python_41": {
        "input": "# Python example\ndef read_file(path):\n    import os\n    base_dir = \"/safe/directory/\"\n    safe_path = os.path.join(base_dir, path)\n    if base_dir in safe_path:\n        with open(safe_path, 'r') as file:\n            return file.read()\n    else:\n        return \"Access denied\"",
        "output": {
            "score": 4.3,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "python_42": {
        "input": "from flask import Flask, render_template\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)",
        "output": {
            "score": 6.8,
            "type": "Missing Security Headers"
        }
    },
    "python_43": {
        "input": "# Python example\nimport uuid\n\ndef create_session():\n    session_id = str(uuid.uuid4())\n    if 'HTTP_COOKIE' in os.environ:\n        cookie = http.cookies.SimpleCookie(os.environ['HTTP_COOKIE'])\n        if 'session_id' in cookie:\n            session_id = cookie['session_id'].value\n    return session_id",
        "output": {
            "score": 4.2,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "python_44": {
        "input": "import requests\nfrom flask import Flask, request\napp = Flask(__name__)\n\ndef fetch_url(url):\n    try:\n        response = requests.get(url)\n        return response.text\n    except Exception as e:\n        return str(e)\n\n@app.route('/fetch')\ndef fetch_endpoint():\n    url = request.args.get('url', '')\n    if '://' not in url:\n        url = 'http://' + url\n    if not (url.startswith('http://example.com/') or url.startswith('https://example.com/')):\n        return 'Invalid URL'\n    return fetch_url(url)\n\nif __name__ == '__main__':\n    app.run(debug=False, host='0.0.0.0', port=5000)",
        "output": {
            "score": 6.3,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "python_45": {
        "input": "import requests\nclass Fetcher:\n    def __init__(self, url):\n        self.url = url\n    def get_content(self):\n        response = requests.get(self.url)\n        return response.text",
        "output": {
            "score": 6.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "python_46": {
        "input": "import requests\ndef fetch_url(url):\n    response = requests.get(url)\n    return response.text",
        "output": {
            "score": 6.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "python_47": {
        "input": "# Python example\ndef show_secrets():\n    secret_data = {\"username\": \"admin\", \"password\": \"12345\"}\n    print(secret_data)",
        "output": {
            "score": 2.0,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "python_48": {
        "input": "# Python example\nimport requests\ndef fetch_url(url):\n    if not url.startswith('http'):\n        raise ValueError('URL must be HTTP or HTTPS')\n    response = requests.get(url)\n    return response.text",
        "output": {
            "score": 6.5,
            "type": "Server-Side Request Forgery (SSRF) - Limited Scope"
        }
    },
    "python_49": {
        "input": "import os\nimport http.cookies\n\ndef handle_request(environ, start_response):\n    if 'HTTP_COOKIE' in environ:\n        cookie = http.cookies.SimpleCookie(environ['HTTP_COOKIE'])\n        session_id = cookie.get('session_id')\n        if not session_id:\n            session_id = os.urandom(16).hex()\n            response_headers = [('Set-Cookie', f'session_id={session_id}; HttpOnly; Secure')]\n        else:\n            response_headers = []\n    else:\n        session_id = os.urandom(16).hex()\n        response_headers = [('Set-Cookie', f'session_id={session_id}; HttpOnly; Secure')]\n\n    response_body = b'Hello, world!'\n    start_response('200 OK', response_headers)\n    return [response_body]",
        "output": {
            "score": 3.6,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "python_50": {
        "input": "class SecureDataHandler:\n    def __init__(self, data):\n        if not isinstance(data, dict):\n            raise ValueError('Data must be a dictionary.')\n        self.data = data\n\n    def get_value(self, key):\n        if not isinstance(key, str) or not key.isalnum():\n            raise KeyError('Key must be alphanumeric.')\n        return self.data.get(key)\n\n    def set_value(self, key, value):\n        if not isinstance(key, str) or not key.isalnum():\n            raise KeyError('Key must be alphanumeric.')\n        if not isinstance(value, (int, float, str, bool)):\n            raise ValueError('Value must be an int, float, str, or bool.')\n        self.data[key] = value\n\n    def __str__(self):\n        return str(self.data)",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_51": {
        "input": "import os\ndef read_secure_file(file_path):\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(f\"The file {file_path} does not exist.\")\n    with open(file_path, 'r', encoding='utf-8') as file:\n        return file.read()\n\ndef main():\n    try:\n        content = read_secure_file(\"example.txt\")\n        print(content)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_52": {
        "input": "import os\n\ndef secure_file_operation(file_path):\n    if not os.path.isabs(file_path) or not os.path.isfile(file_path):\n        raise ValueError(\"Invalid file path\")\n    try:\n        with open(file_path, 'r') as file:\n            return file.read()\n    except IOError as e:\n        raise IOError(f\"Error reading file: {e}\")",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_53": {
        "input": "import hashlib\n\nclass SecureHasher:\n    def __init__(self, algorithm='sha256'):\n        if algorithm not in hashlib.algorithms_available:\n            raise ValueError(f\"Algorithm {algorithm} is not available.\")\n        self.hasher = hashlib.new(algorithm)\n\n    def update(self, data):\n        if not isinstance(data, bytes):\n            raise TypeError(\"Data must be of type bytes.\")\n        self.hasher.update(data)\n\n    def digest(self):\n        return self.hasher.digest()\n\n    def hexdigest(self):\n        return self.hasher.hexdigest()",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_54": {
        "input": "import os\nfrom flask import Flask, request, jsonify\nfrom werkzeug.utils import secure_filename\n\napp = Flask(__name__)\nUPLOAD_FOLDER = '/path/to/the/uploads'\nALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'}\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\ndef allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    if 'file' not in request.files:\n        return jsonify({'error': 'No file part'}), 400\n    file = request.files['file']\n    if file.filename == '':\n        return jsonify({'error': 'No selected file'}), 400\n    if file and allowed_file(file.filename):\n        filename = secure_filename(file.filename)\n        file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n        return jsonify({'message': 'File successfully uploaded'}), 201\n    else:\n        return jsonify({'error': 'Invalid file type'}), 400\n\nif __name__ == '__main__':\n    app.run(debug=False)",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_55": {
        "input": "class SecureDataHandler:\n    def __init__(self, data):\n        if isinstance(data, dict):\n            self.data = data\n        else:\n            raise ValueError('Data must be a dictionary')\n\n    def get_value(self, key):\n        if not isinstance(key, str):\n            raise TypeError('Key must be a string')\n        return self.data.get(key, None)\n\n    def set_value(self, key, value):\n        if not isinstance(key, str):\n            raise TypeError('Key must be a string')\n        self.data[key] = value",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_56": {
        "input": "def secure_file_upload(file_path):\n    import os\n    import hashlib\n    from werkzeug.utils import secure_filename\n    from flask import Flask, request, abort\n\n    app = Flask(__name__)\n    ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'}\n\n    def allowed_file(filename):\n        return '.' in filename and \\\n               filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n    @app.route('/upload', methods=['POST'])\n    def upload_file():\n        if 'file' not in request.files:\n            abort(400, description=\"No file part\")\n        file = request.files['file']\n        if file.filename == '':\n            abort(400, description=\"No selected file\")\n        if file and allowed_file(file.filename):\n            filename = secure_filename(file.filename)\n            destination = os.path.join('/safe/uploads', filename)\n            file.save(destination)\n            with open(destination, 'rb') as f:\n                file_hash = hashlib.sha256(f.read()).hexdigest()\n            return {'message': 'File successfully uploaded', 'file_hash': file_hash}\n        else:\n            abort(400, description=\"Invalid file type\")\n\n    if __name__ == '__main__':\n        app.run()",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_57": {
        "input": "import hashlib\nimport os\nclass SecureUser:\n    def __init__(self, username, password):\n        self.username = username\n        self.salt = os.urandom(16)\n        self.password_hash = self._hash_password(password)\n\n    def _hash_password(self, password):\n        return hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), self.salt, 100000)\n\n    def check_password(self, password):\n        return hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), self.salt, 100000) == self.password_hash",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_58": {
        "input": "def fetch_user_data(user_id):\n    import sqlite3\n    try:\n        conn = sqlite3.connect('example.db')\n        cursor = conn.cursor()\n        query = \"SELECT * FROM users WHERE id=?\"\n        cursor.execute(query, (user_id,))\n        user_data = cursor.fetchone()\n        return user_data\n    except sqlite3.Error as e:\n        print(f\"Database error: {e}\")\n    finally:\n        if conn:\n            conn.close()",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_59": {
        "input": "import hashlib\n\nclass SecureHasher:\n    def __init__(self, algorithm='sha256'):\n        self.algorithm = algorithm\n        try:\n            self.hasher = hashlib.new(self.algorithm)\n        except ValueError as e:\n            raise ValueError(f\"Unsupported hash algorithm: {self.algorithm}\") from e\n\n    def update(self, data):\n        if not isinstance(data, bytes):\n            raise TypeError(\"Data must be of type bytes\")\n        self.hasher.update(data)\n\n    def digest(self):\n        return self.hasher.digest()\n\n    def hexdigest(self):\n        return self.hasher.hexdigest()",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_60": {
        "input": "import os\nfrom werkzeug.utils import secure_filename\ndef upload_file(file):\n    if file and allowed_file(file.filename):\n        filename = secure_filename(file.filename)\n        file.save(os.path.join('/path/to/the/uploads', filename))\ndef allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_61": {
        "input": "import os\nfrom flask import Flask, request, jsonify\ndef validate_input(data):\n    if not isinstance(data, dict) or 'username' not in data or 'password' not in data:\n        return False\n    if not isinstance(data['username'], str) or not isinstance(data['password'], str):\n        return False\n    if len(data['username']) < 3 or len(data['password']) < 8:\n        return False\n    return True\ndef create_user(username, password):\n    # Simulate user creation with safe practices\n    print(f\"User {username} created.\")\napp = Flask(__name__)\n@app.route('/register', methods=['POST'])\ndef register():\n    try:\n        data = request.get_json()\n        if not validate_input(data):\n            return jsonify({'error': 'Invalid input'}), 400\n        create_user(data['username'], data['password'])\n        return jsonify({'message': 'User registered successfully'}), 201\n    except Exception as e:\n        app.logger.error(f\"Error during registration: {e}\")\n        return jsonify({'error': 'Internal server error'}), 500",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_62": {
        "input": "import os\nimport hashlib\n\ndef hash_file(filename):\n    try:\n        with open(filename, \"rb\") as f:\n            file_hash = hashlib.sha256()\n            while chunk := f.read(8192):\n                file_hash.update(chunk)\n        return file_hash.hexdigest()\n    except FileNotFoundError:\n        print(f\"Error: The file {filename} does not exist.\")\n        return None\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n\nif __name__ == \"__main__\":\n    filename = input(\"Enter the filename to hash: \").strip()\n    if os.path.isfile(filename):\n        result = hash_file(filename)\n        if result:\n            print(f\"SHA-256 Hash of {filename}: {result}\")\n    else:\n        print(\"Please provide a valid file path.\")",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_63": {
        "input": "import os\nimport hashlib\nfrom flask import Flask, request, jsonify\ndef hash_password(password):\n    return hashlib.sha256(password.encode()).hexdigest()\ndef validate_user_input(data):\n    if not isinstance(data, dict):\n        raise ValueError(\"Invalid input type\")\n    required_fields = [\"username\", \"password\"]\n    for field in required_fields:\n        if field not in data or not isinstance(data[field], str) or not data[field].strip():\n            raise ValueError(f\"Missing or invalid {field}\")\napp = Flask(__name__)\n@app.route('/register', methods=['POST'])\ndef register_user():\n    try:\n        user_data = request.get_json()\n        validate_user_input(user_data)\n        hashed_password = hash_password(user_data['password'])\n        # Here you would typically save the username and hashed password to a database\n        return jsonify({\"message\": \"User registered successfully\", \"hashed_password\": hashed_password}), 201\n    except ValueError as e:\n        return jsonify({\"error\": str(e)}), 400\nif __name__ == '__main__':\n    app.run(debug=False, host='0.0.0.0', port=int(os.getenv('PORT', 5000)))",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_64": {
        "input": "import hashlib\n\nclass UserAuth:\n    def __init__(self, username, password):\n        self.username = username\n        self.password_hash = self._hash_password(password)\n\n    def _hash_password(self, password):\n        return hashlib.sha256(password.encode()).hexdigest()\n\n    def verify_password(self, password):\n        return self._hash_password(password) == self.password_hash",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_65": {
        "input": "import os\ndef read_secure_file(file_path):\n    if not isinstance(file_path, str) or not file_path:\n        raise ValueError(\"Invalid file path\")\n    if \"/\" in os.path.basename(file_path) or \"\\\\\" in os.path.basename(file_path):\n        raise ValueError(\"File path contains invalid characters\")\n    try:\n        with open(os.path.join(\"safe_directory\", file_path), \"r\") as file:\n            return file.read()\n    except FileNotFoundError:\n        raise FileNotFoundError(\"The file does not exist\")\n    except Exception as e:\n        raise RuntimeError(f\"An error occurred: {str(e)}\")",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_66": {
        "input": "import os\nfrom flask import Flask, request, jsonify\n\ndef validate_input(data):\n    if not isinstance(data, dict) or 'value' not in data:\n        return False\n    if not isinstance(data['value'], int):\n        return False\n    return True\n\napp = Flask(__name__)\n\n@app.route('/process', methods=['POST'])\ndef process_data():\n    try:\n        data = request.get_json()\n        if not validate_input(data):\n            return jsonify({'error': 'Invalid input'}), 400\n        result = data['value'] * 2\n        return jsonify({'result': result}), 200\n    except Exception as e:\n        app.logger.error(f'Error processing request: {e}')\n        return jsonify({'error': 'Internal Server Error'}), 500",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_67": {
        "input": "class SecureDataHandler:\n    def __init__(self, data):\n        if not isinstance(data, dict):\n            raise ValueError('Data must be a dictionary')\n        self.data = data\n\n    def get_value(self, key):\n        if not isinstance(key, str):\n            raise KeyError('Key must be a string')\n        return self.data.get(key)\n\n    def set_value(self, key, value):\n        if not isinstance(key, str):\n            raise KeyError('Key must be a string')\n        if not isinstance(value, (str, int, float, bool, list, dict, tuple, type(None))):\n            raise ValueError('Value has unsupported type')\n        self.data[key] = value\n\n    def delete_value(self, key):\n        if not isinstance(key, str):\n            raise KeyError('Key must be a string')\n        if key in self.data:\n            del self.data[key]",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_68": {
        "input": "import logging\n\nclass SecureDataHandler:\n    def __init__(self, data_source):\n        self.data_source = data_source\n        self.logger = logging.getLogger(__name__)\n        logging.basicConfig(level=logging.INFO)\n\n    def fetch_data(self):\n        try:\n            with open(self.data_source, 'r') as file:\n                data = file.read()\n                return data\n        except FileNotFoundError:\n            self.logger.error(f\"File not found: {self.data_source}\")\n            return None\n        except Exception as e:\n            self.logger.error(f\"An error occurred: {str(e)}\")\n            return None\n\n    def process_data(self, data):\n        if not isinstance(data, str):\n            raise ValueError(\"Data must be a string\")\n        # Example processing (securely)\n        processed_data = data.strip()\n        return processed_data",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_69": {
        "input": "import os\n\nclass SecureFileHandler:\n    def __init__(self, directory):\n        self.directory = os.path.abspath(directory)\n\n    def save_file(self, filename, content):\n        if not self._is_safe_path(filename):\n            raise ValueError(\"Invalid file path\")\n        with open(os.path.join(self.directory, filename), 'w') as f:\n            f.write(content)\n\n    def read_file(self, filename):\n        if not self._is_safe_path(filename):\n            raise ValueError(\"Invalid file path\")\n        with open(os.path.join(self.directory, filename), 'r') as f:\n            return f.read()\n\n    def _is_safe_path(self, path):\n        full_path = os.path.abspath(os.path.join(self.directory, path))\n        return os.path.commonpath([self.directory, full_path]) == self.directory",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_70": {
        "input": "import os\ndef read_secure_file(file_path):\n    if not isinstance(file_path, str) or not file_path:\n        raise ValueError(\"Invalid file path provided\")\n    if '..' in file_path or os.path.isabs(file_path):\n        raise ValueError(\"File path must be a relative path and cannot traverse directories\")\n    try:\n        with open(os.path.join('safe_directory', file_path), 'r') as file:\n            return file.read()\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"The file {file_path} does not exist in the safe directory.\")\n    except Exception as e:\n        raise RuntimeError(f\"An error occurred while reading the file: {e}\")",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_71": {
        "input": "import os\nimport hashlib\ndef hash_file(file_path):\n    \"\"\"Calculate the SHA-256 hash of a file.\"\"\"\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(f\"The file {file_path} does not exist.\")\n    sha256_hash = hashlib.sha256()\n    try:\n        with open(file_path, \"rb\") as f:\n            for byte_block in iter(lambda: f.read(4096), b\"\"):\n                sha256_hash.update(byte_block)\n        return sha256_hash.hexdigest()\n    except IOError as e:\n        raise IOError(f\"Error reading {file_path}: {e}\")",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_72": {
        "input": "import os\nimport json\nfrom flask import Flask, request, jsonify\n\ndef is_valid_json(data):\n    try:\n        json.loads(data)\n        return True\n    except ValueError:\n        return False\n\napp = Flask(__name__)\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    if not request.is_json:\n        return jsonify({\"error\": \"Request must be JSON\"}), 400\n    data = request.get_data(as_text=True)\n    if not is_valid_json(data):\n        return jsonify({\"error\": \"Invalid JSON\"}), 400\n    try:\n        safe_data = json.loads(data)\n        # Process the safe_data here\n        return jsonify({\"message\": \"Data processed successfully\", \"data\": safe_data}), 200\n    except Exception as e:\n        app.logger.error(f\"Error processing data: {e}\")\n        return jsonify({\"error\": \"Internal server error\"}), 500\n\nif __name__ == '__main__':\n    app.run(debug=False, host='127.0.0.1', port=5000)",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_73": {
        "input": "import hashlib\ndef hash_password(password):\n    if not isinstance(password, str):\n        raise ValueError('Password must be a string')\n    return hashlib.sha256(password.encode()).hexdigest()",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_74": {
        "input": "class SecureUserInputHandler:\n    def __init__(self):\n        self.validated_input = None\n\n    def get_validated_integer(self, prompt_message):\n        while True:\n            try:\n                user_input = input(prompt_message)\n                if not user_input.strip().isdigit():\n                    raise ValueError(\"Input must be a valid integer.\")\n                self.validated_input = int(user_input)\n                return self.validated_input\n            except ValueError as e:\n                print(f\"Invalid input: {e}\", file=sys.stderr)",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_75": {
        "input": "class SecureDataHandler:\n    def __init__(self, data=None):\n        if data is None:\n            data = {}\n        self.data = data\n\n    def add_data(self, key, value):\n        if not isinstance(key, str) or not isinstance(value, str):\n            raise ValueError('Key and value must be strings')\n        self.data[key] = value\n\n    def get_data(self, key):\n        if not isinstance(key, str):\n            raise ValueError('Key must be a string')\n        return self.data.get(key, None)\n\n    def remove_data(self, key):\n        if not isinstance(key, str):\n            raise ValueError('Key must be a string')\n        if key in self.data:\n            del self.data[key]",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_76": {
        "input": "import os\nfrom flask import Flask, request, jsonify\nfrom werkzeug.exceptions import HTTPException\n\ndef validate_input(data):\n    if not isinstance(data, dict) or 'value' not in data:\n        return False, 'Invalid input format'\n    if not isinstance(data['value'], str) or not data['value'].isalnum():\n        return False, 'Value must be alphanumeric'\n    return True, ''\n\napp = Flask(__name__)\n\n@app.errorhandler(HTTPException)\ndef handle_exception(e):\n    response = e.get_response()\n    response.data = jsonify(error=str(e)).data\n    response.content_type = 'application/json'\n    return response\n\n@app.route('/process', methods=['POST'])\ndef process():\n    data = request.get_json()\n    is_valid, message = validate_input(data)\n    if not is_valid:\n        return jsonify({'error': message}), 400\n    processed_value = f'Processed: {data['value']}'\n    return jsonify({'result': processed_value})\n\nif __name__ == '__main__':\n    app.run(host='127.0.0.1', port=5000)",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_77": {
        "input": "import os\n\ndef read_secure_file(file_path):\n    if not isinstance(file_path, str) or not file_path:\n        raise ValueError(\"Invalid file path\")\n    \n    safe_directory = \"/safe/directory/\"\n    absolute_path = os.path.abspath(file_path)\n    \n    if not absolute_path.startswith(safe_directory):\n        raise PermissionError(\"Access denied to the specified file path\")\n    \n    try:\n        with open(absolute_path, 'r') as file:\n            return file.read()\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"File {file_path} not found\")\n    except IOError as e:\n        raise IOError(f\"An error occurred while reading the file: {e}\")",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_78": {
        "input": "import os\nimport json\ndef read_secure_file(file_path):\n    if not isinstance(file_path, str) or not file_path:\n        raise ValueError(\"Invalid file path\")\n    if '..' in file_path or os.path.isabs(file_path):\n        raise ValueError(\"File path is not secure\")\n    try:\n        with open(os.path.join('safe_directory', file_path), 'r') as file:\n            return json.load(file)\n    except FileNotFoundError:\n        print(\"File not found.\")\n    except json.JSONDecodeError:\n        print(\"Error decoding JSON from the file.\")\ndef main():\n    try:\n        data = read_secure_file(input(\"Enter file name: \"))\n        if data is not None:\n            print(data)\n    except ValueError as ve:\n        print(f\"Value error: {ve}\")\nif __name__ == \"__main__\":\n    main()",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_79": {
        "input": "def secure_file_write(file_path, data):\n    try:\n        with open(file_path, 'w', encoding='utf-8') as file:\n            file.write(data)\n    except IOError as e:\n        print(f\"An error occurred while writing to the file: {e}\")",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_80": {
        "input": "import os\nimport hashlib\nfrom flask import Flask, request, jsonify\ndef hash_password(password):\n    return hashlib.sha256(password.encode()).hexdigest()\ndef validate_username(username):\n    if not username.isalnum() or len(username) < 3:\n        raise ValueError(\"Username must be alphanumeric and at least 3 characters long\")\ndef validate_password(password):\n    if len(password) < 8:\n        raise ValueError(\"Password must be at least 8 characters long\")\napp = Flask(__name__)\n@app.route('/register', methods=['POST'])\ndef register():\n    try:\n        data = request.get_json()\n        username = data['username']\n        password = data['password']\n        validate_username(username)\n        validate_password(password)\n        hashed_password = hash_password(password)\n        # Here you would typically store the username and hashed_password in a database\n        return jsonify({\"message\": \"User registered successfully\", \"hashed_password\": hashed_password}), 201\n    except KeyError:\n        return jsonify({\"error\": \"Username and password are required\"}), 400\n    except ValueError as e:\n        return jsonify({\"error\": str(e)}), 400\nif __name__ == '__main__':\n    app.run(debug=False, host='127.0.0.1', port=5000)",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_81": {
        "input": "import hashlib\n\nclass SecureUser:\n    def __init__(self, username, password):\n        self.username = username\n        self.password_hash = self._hash_password(password)\n\n    def _hash_password(self, password):\n        return hashlib.sha256(password.encode()).hexdigest()\n\n    def check_password(self, password):\n        return self.password_hash == self._hash_password(password)",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_82": {
        "input": "import os\ndef read_secure_file(file_path):\n    if not os.path.isabs(file_path) or not os.path.isfile(file_path):\n        raise ValueError('Invalid file path')\n    with open(file_path, 'r', encoding='utf-8') as file:\n        return file.read()\ntry:\n    content = read_secure_file('/path/to/secure/file.txt')\n    print(content)\nexcept Exception as e:\n    print(f'Error: {str(e)}')",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_83": {
        "input": "class SecureDataHandler:\n    def __init__(self, data=None):\n        self.data = data if isinstance(data, list) else []\n\n    def add_data(self, item):\n        if not isinstance(item, str):\n            raise ValueError(\"Only strings are allowed\")\n        self.data.append(item)\n\n    def get_data(self):\n        return self.data.copy()\n\n    def save_to_file(self, filename):\n        import os\n        if not os.path.basename(filename) == filename:\n            raise ValueError(\"Invalid filename\")\n        with open(filename, 'w') as file:\n            for item in self.data:\n                file.write(item + '\\n')\n\n    def load_from_file(self, filename):\n        import os\n        if not os.path.basename(filename) == filename:\n            raise ValueError(\"Invalid filename\")\n        with open(filename, 'r') as file:\n            self.data = [line.strip() for line in file.readlines()]",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_84": {
        "input": "def secure_file_read(file_path):\n    try:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            return file.read()\n    except FileNotFoundError:\n        return \"File not found\"\n    except Exception as e:\n        return f\"An error occurred: {str(e)}\"",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_85": {
        "input": "import hashlib\n\nclass SecureHasher:\n    def __init__(self, algorithm='sha256'):\n        if algorithm not in ['sha256', 'sha384', 'sha512']:\n            raise ValueError('Unsupported hash algorithm')\n        self.algorithm = algorithm\n\n    def hash_data(self, data):\n        if not isinstance(data, str):\n            raise TypeError('Data must be a string')\n        hasher = hashlib.new(self.algorithm)\n        hasher.update(data.encode('utf-8'))\n        return hasher.hexdigest()\n",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_86": {
        "input": "import os\nfrom hashlib import sha256\ndef secure_file_hash(file_path):\n    if not isinstance(file_path, str) or not file_path:\n        raise ValueError('Invalid file path')\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f'File {file_path} does not exist')\n    hash_sha256 = sha256()\n    try:\n        with open(file_path, 'rb') as f:\n            for byte_block in iter(lambda: f.read(4096), b''):\n                hash_sha256.update(byte_block)\n        return hash_sha256.hexdigest()\n    except IOError as e:\n        raise IOError(f'Error reading file {file_path}: {str(e)}')",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_87": {
        "input": "import os\ndef read_secure_file(file_path):\n    if not isinstance(file_path, str) or not file_path:\n        raise ValueError(\"Invalid file path\")\n    secure_dir = \"/secure/data/\"\n    if not file_path.startswith(secure_dir):\n        raise ValueError(\"File path is outside the allowed directory\")\n    try:\n        with open(file_path, 'r') as file:\n            return file.read()\n    except FileNotFoundError:\n        print(\"File not found.\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_88": {
        "input": "import os\nimport hashlib\ndef hash_file(filename):\n    if not os.path.isfile(filename):\n        raise ValueError(f\"The file {filename} does not exist.\")\n    sha256_hash = hashlib.sha256()\n    with open(filename, \"rb\") as f:\n        for byte_block in iter(lambda: f.read(4096), b\"\"):\n            sha256_hash.update(byte_block)\n    return sha256_hash.hexdigest()",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "python_89": {
        "input": "import hashlib\ndef hash_password(password):\n    if not isinstance(password, str) or not password:\n        raise ValueError(\"Password must be a non-empty string\")\n    return hashlib.sha256(password.encode()).hexdigest()",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    }
}