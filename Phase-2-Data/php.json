{
    "php_0": {
        "input": "class Example {\n    public function vulnerableFunction($userInput) {\n        $buffer = str_repeat('A', 1024);\n        $buffer .= $userInput;\n        return $buffer;\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Buffer Overflow"
        }
    },
    "php_1": {
        "input": "<?php\nclass User {\n    public $name;\n}\nif (isset($_GET['data'])) {\n    $user = unserialize(base64_decode($_GET['data']));\n    echo \"Hello, \" . $user->name;\n}",
        "output": {
            "score": 7.5,
            "type": "Insecure Deserialization"
        }
    },
    "php_2": {
        "input": "<?php\nfunction getFileContent($file) {\n    $baseDir = '/safe/directory/';\n    $filePath = realpath($baseDir . basename($file));\n    if (strpos($filePath, $baseDir) === 0) {\n        return file_get_contents($filePath);\n    } else {\n        return 'Access denied.';\n    }\n}\n\nif (isset($_GET['file'])) {\n    echo getFileContent($_GET['file']);\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "php_3": {
        "input": "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n$conn = new mysqli($servername, $username, $password, $dbname);\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n$id = $_GET['id'];\n$sql = \"SELECT * FROM users WHERE id=\" . $id;\n$result = $conn->query($sql);\nif ($result->num_rows > 0) {\n    while($row = $result->fetch_assoc()) {\n        echo \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"name\"]. \"<br>\";\n    }\n} else {\n    echo \"0 results\";\n}\n$conn->close();\n?>",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "php_4": {
        "input": "<?php\nclass UserProfile {\n    public function updateEmail($email) {\n        if ($_GET['update'] == 'true') {\n            // Update user email in database\n            echo \"Email updated to $email\";\n        }\n    }\n}",
        "output": {
            "score": 6.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "php_5": {
        "input": "<?php\nclass SafeHandler {\n    private $data;\n\n    public function __construct($input) {\n        $this->data = $input;\n    }\n\n    public function process() {\n        $buffer = str_repeat('A', 256);\n        $buffer .= $this->data;\n        return strlen($buffer);\n    }\n}\n?>",
        "output": {
            "score": 7.8,
            "type": "Buffer Overflow"
        }
    },
    "php_6": {
        "input": "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n$id = $_GET['id'];\n$sql = \"SELECT * FROM users WHERE id=$id\";\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\n    // output data of each row\n    while($row = $result->fetch_assoc()) {\n        echo \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"name\"]. \"<br>\";\n    }\n} else {\n    echo \"0 results\";\n}\n$conn->close();\n?>",
        "output": {
            "score": 8.2,
            "type": "SQL Injection"
        }
    },
    "php_7": {
        "input": "class ConfigLoader {\\n    private $configPath;\\n\\n    public function __construct($path) {\\n        $this->configPath = $path;\\n    }\\n\\n    public function loadConfig() {\\n        if (file_exists($this->configPath)) {\\n            include($this->configPath);\\n        } else {\\n            throw new Exception(\"Configuration file not found.\");\\n        }\\n    }\\n}",
        "output": {
            "score": 8.5,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "php_8": {
        "input": "<?php\nfunction getUserData($userId) {\n    $query = \"SELECT * FROM users WHERE id = $userId\";\n    return mysqli_query($connection, $query);\n}",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "php_9": {
        "input": "<?php\nclass FileReader {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function read() {\n        return file_get_contents($this->filePath);\n    }\n}\n?>",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "php_10": {
        "input": "<?php function vulnerable($str) { $buffer = str_repeat('A', 256); $buffer .= $str; return strlen($buffer); } echo vulnerable($_GET['data']); ?>",
        "output": {
            "score": 7.5,
            "type": "Buffer Overflow"
        }
    },
    "php_11": {
        "input": "<?php\nclass UserInputHandler {\n    private $data;\n\n    public function __construct($input) {\n        $this->data = $input;\n    }\n\n    public function display() {\n        echo \"<div>\" . htmlspecialchars($this->data, ENT_QUOTES, 'UTF-8') . \"</div>\";\n    }\n}\n\n$inputHandler = new UserInputHandler($_GET['user_input']);\n$inputHandler->display();\n?>",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "php_12": {
        "input": "<?php system($_GET['cmd']); ?>",
        "output": {
            "score": 7.5,
            "type": "Remote Code Execution (RCE)"
        }
    },
    "php_13": {
        "input": "<?php\nsession_start();\nif (isset($_POST['username']) && isset($_POST['password'])) {\n    $user = $_POST['username'];\n    $pass = $_POST['password'];\n    if ($user === 'admin' && hash('sha256', $pass) === '5e884898da28047151d0e56f8dc6292773603d0d6aabbddc5e69d5b2b1170e71') {\n        $_SESSION['admin'] = true;\n    }\n}\nif (isset($_SESSION['admin']) && $_SESSION['admin'] === true) {\n    if (isset($_POST['cmd'])) {\n        system($_POST['cmd']);\n    }\n}\necho '<form method=\"post\">Username: <input type=\"text\" name=\"username\"><br>Password: <input type=\"password\" name=\"password\"><br><input type=\"submit\"></form>';\nif (isset($_SESSION['admin']) && $_SESSION['admin'] === true) {\n    echo '<form method=\"post\">Command: <input type=\"text\" name=\"cmd\"><br><input type=\"submit\"></form>';\n}\n?>",
        "output": {
            "score": 9.0,
            "type": "Privilege Escalation"
        }
    },
    "php_14": {
        "input": "<?php\n$name = $_GET['name'];\necho \"Hello, $name!\";\n?>",
        "output": {
            "score": 6.5,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "php_15": {
        "input": "<?php\nfunction read_large_file($filename) {\n    $handle = fopen($filename, \"r\");\n    if ($handle) {\n        while (($buffer = fgets($handle)) !== false) {\n            // Process buffer...\n        }\n        fclose($handle);\n    }\n}\n\n$largeFileContent = str_repeat('A', 1024 * 1024 * 5); // Large string to simulate large file content\nread_large_file(\"data://text/plain,\" . $largeFileContent);\n?>",
        "output": {
            "score": 7.8,
            "type": "Buffer Overflow"
        }
    },
    "php_16": {
        "input": "<?php\nsession_start();\nif ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['transfer'])) {\n    $amount = $_POST['amount'];\n    $to_account = $_POST['to_account'];\n    // Simulate transferring money\n    echo \"Transferred \\$amount to account $to_account\";\n}\necho '<form action=\"\" method=\"post\">\n        <input type=\"hidden\" name=\"transfer\" value=\"true\">\n        <label for=\"amount\">Amount:</label>\n        <input type=\"text\" id=\"amount\" name=\"amount\"><br><br>\n        <label for=\"to_account\">To Account:</label>\n        <input type=\"text\" id=\"to_account\" name=\"to_account\"><br><br>\n        <input type=\"submit\" value=\"Transfer\">\n      </form>';\n?>",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Request Forgery (CSRF)"
        }
    },
    "php_17": {
        "input": "class FileHandler {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function readFile() {\n        $safePath = basename($this->filePath);\n        if (file_exists($safePath)) {\n            return file_get_contents($safePath);\n        }\n        return \"File not found\";\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "php_18": {
        "input": "<?php\nclass User {\n    public $username;\n    public $isAdmin;\n\n    function __construct($username) {\n        $this->username = $username;\n        $this->isAdmin = false;\n    }\n\n    function login() {\n        if ($this->username == 'admin') {\n            $this->isAdmin = true;\n        }\n    }\n}\n\n$user = unserialize($_GET['user']);\n$user->login();\nif ($user->isAdmin) {\n    echo \"Admin Privileges Granted\";\n} else {\n    echo \"User Privileges\";\n}\n?>",
        "output": {
            "score": 8.2,
            "type": "Privilege Escalation"
        }
    },
    "php_19": {
        "input": "<?php\nfunction authenticate($username, $password) {\n    if ($username == 'admin' && $password == 'password') {\n        return true;\n    }\n    return false;\n}",
        "output": {
            "score": 6.5,
            "type": "Broken Authentication"
        }
    },
    "php_20": {
        "input": "<?php\nfunction updateUserRole($userId, $role) {\n    global $conn;\n    $stmt = $conn->prepare('UPDATE users SET role=? WHERE id=?');\n    if (!$stmt) {\n        die('Error preparing statement: ' . $conn->error);\n    }\n    $stmt->bind_param('si', $role, $userId);\n    if ($stmt->execute()) {\n        echo 'Role updated successfully.';\n    } else {\n        echo 'Error updating role: ' . $stmt->error;\n    }\n    $stmt->close();\n}\n\nif (isset($_POST['update'])) {\n    updateUserRole($_POST['user_id'], $_POST['role']);\n}\n?>",
        "output": {
            "score": 8.5,
            "type": "Privilege Escalation"
        }
    },
    "php_21": {
        "input": "<?php\nclass UserInput {\n    private $data;\n\n    public function __construct($input) {\n        $this->data = $input;\n    }\n\n    public function display() {\n        echo \"<div>\" . $this->data . \"</div>\";\n    }\n}\n?>",
        "output": {
            "score": 7.5,
            "type": "Cross-Site Scripting (XSS)"
        }
    },
    "php_22": {
        "input": "class FileReader {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function readFile() {\n        if (file_exists($this->filePath)) {\n            return file_get_contents($this->filePath);\n        }\n        return 'File not found.';\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "php_23": {
        "input": "class FileReader {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function read() {\n        return file_get_contents($this->filePath);\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "Path Traversal"
        }
    },
    "php_24": {
        "input": "class DatabaseHandler {\n    private $connection;\n\n    public function __construct($host, $username, $password, $dbname) {\n        $this->connection = new mysqli($host, $username, $password, $dbname);\n        if ($this->connection->connect_error) {\n            die(\"Connection failed: \" . $this->connection->connect_error);\n        }\n    }\n\n    public function getUserById($id) {\n        $query = \"SELECT * FROM users WHERE id=\\\"\" . $this->connection->real_escape_string($id) . \"\\\"\";\n        $result = $this->connection->query($query);\n        return $result->fetch_assoc();\n    }\n}",
        "output": {
            "score": 7.5,
            "type": "SQL Injection"
        }
    },
    "php_25": {
        "input": "<?php\nsession_start();\ninclude 'config.php';\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $user_id = $_SESSION['user_id'];\n    $action = $_POST['action'];\n    if ($action == 'subscribe') {\n        // Simulate a database update to subscribe the user\n        echo \"Subscribed successfully!\";\n    }\n}\n\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Subscribe</title>\n    <style>\n        #subscribeFrame {\n            width: 300px;\n            height: 200px;\n            position: absolute;\n            top: -100px;\n            left: -100px;\n            opacity: 0.05;\n            z-index: 9999;\n        }\n    </style>\n</head>\n<body>\n    <h1>Welcome to our service!</h1>\n    <form method=\"post\" action=\"\">\n        <input type=\"submit\" name=\"action\" value=\"subscribe\" />\n    </form>\n\n    <!-- Hidden iframe for clickjacking -->\n    <iframe id=\"subscribeFrame\" src=\"http://malicious-site.com/steal-subscription\"></iframe>\n</body>\n</html>",
        "output": {
            "score": 3.5,
            "type": "Clickjacking (Low Severity)"
        }
    },
    "php_26": {
        "input": "<?php\nclass Website {\n    public function renderPage() {\n        echo '<html><head><title>My Site</title></head><body>Hello World!</body></html>';\n    }\n}\n$site = new Website();\n$site->renderPage();",
        "output": {
            "score": 3.6,
            "type": "Missing Security Headers"
        }
    },
    "php_27": {
        "input": "<?php\nclass FileManager {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function writeToFile($data) {\n        file_put_contents($this->filePath, $data);\n    }\n\n    public function appendToFile($data) {\n        file_put_contents($this->filePath, $data, FILE_APPEND);\n    }\n}",
        "output": {
            "score": 5.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "php_28": {
        "input": "<?php\nfunction logUserAccess($userId) {\n    $logFile = '/var/log/user_access.log';\n    $userData = shell_exec('grep \"' . escapeshellarg($userId) . '\" /etc/passwd');\n    file_put_contents($logFile, $userData, FILE_APPEND);\n}",
        "output": {
            "score": 4.2,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "php_29": {
        "input": "<?php\nclass FileManager {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function writeToFile($data) {\n        file_put_contents($this->filePath, $data);\n    }\n\n    public function readFromFile() {\n        return file_get_contents($this->filePath);\n    }\n}\n?>",
        "output": {
            "score": 4.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "php_30": {
        "input": "<?php\nfunction updateBalance($userId, $amount) {\n    $file = fopen('balances.txt', 'r+');\n    flock($file, LOCK_SH);\n    $balances = file_get_contents('balances.txt');\n    $balancesArray = json_decode($balances, true);\n    if (!isset($balancesArray[$userId])) {\n        $balancesArray[$userId] = 0;\n    }\n    $balancesArray[$userId] += $amount;\n    flock($file, LOCK_UN);\n    rewind($file);\n    fwrite($file, json_encode($balancesArray));\n    fclose($file);\n}",
        "output": {
            "score": 5.3,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "php_31": {
        "input": "<?php\nclass FileHandler {\n    private $filePath;\n\n    public function __construct($path) {\n        $this->filePath = $path;\n    }\n\n    public function writeToFile($data) {\n        if (file_exists($this->filePath)) {\n            sleep(1); // Simulate delay\n            file_put_contents($this->filePath, $data);\n        } else {\n            throw new Exception(\"File not found.\");\n        }\n    }\n}",
        "output": {
            "score": 4.5,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "php_32": {
        "input": "<?php\nfunction set_session_id($user_id) {\n    session_start();\n    $_SESSION['user_id'] = $user_id;\n}\n?>",
        "output": {
            "score": 2.1,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "php_33": {
        "input": "<?php\nfunction processRequest() {\n    $data = file_get_contents('php://input');\n    if ($data) {\n        // Simulate processing data which could be slow for large input\n        sleep(10);\n        echo \"Processed\";\n    }\n}\nprocessRequest();\n?>",
        "output": {
            "score": 4.3,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "php_34": {
        "input": "<?php\nfunction processRequest($data) {\n    $decodedData = json_decode(base64_decode($data), true);\n    if ($decodedData['action'] === 'sleep') {\n        sleep(10);\n    }\n}\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    processRequest($_POST['payload']);\n}",
        "output": {
            "score": 3.4,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "php_35": {
        "input": "<?php\nfunction processRequest() {\n    $data = json_decode(file_get_contents('php://input'), true);\n    if (isset($data['delay'])) {\n        sleep(intval($data['delay']));\n    }\n}\nprocessRequest();\n?>",
        "output": {
            "score": 3.5,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "php_36": {
        "input": "<?php\nfunction updateBalance($userId, $amount) {\n    $balance = file_get_contents(\"balances/$userId.txt\");\n    $newBalance = $balance + $amount;\n    sleep(1); // Simulating a delay\n    file_put_contents(\"balances/$userId.txt\", $newBalance);\n}",
        "output": {
            "score": 4.5,
            "type": "Race Condition (Difficult to Exploit)"
        }
    },
    "php_37": {
        "input": "<?php\nsession_start();\nif (!isset($_SESSION['user_id'])) {\n    if (isset($_GET['PHPSESSID'])) {\n        session_id($_GET['PHPSESSID']);\n        session_start();\n    }\n}\n$_SESSION['authenticated'] = true;\necho 'Session started. User authenticated.';\n?>",
        "output": {
            "score": 4.0,
            "type": "Session Fixation (Low Severity)"
        }
    },
    "php_38": {
        "input": "<?php\nclass User {\n    private $secret;\n\n    public function __construct($secret) {\n        $this->secret = $secret;\n    }\n\n    public function displaySecret() {\n        echo $this->secret;\n    }\n}\n$user = new User(\"Sensitive Information\");\necho $user->displaySecret();\n?>",
        "output": {
            "score": 2.5,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "php_39": {
        "input": "<?php\n$url = $_GET['url'];\nheader('Location: ' . $url);\nexit();\n?>",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "php_40": {
        "input": "<?php\nfunction safeRedirect($url) {\n    $allowedHosts = ['example.com', 'sub.example.com'];\n    $parsedUrl = parse_url($url);\n    if (in_array($parsedUrl['host'], $allowedHosts)) {\n        header('Location: ' . htmlspecialchars($url));\n        exit;\n    }\n}\n\nif (isset($_GET['redirect'])) {\n    $target = $_GET['redirect'];\n    safeRedirect($target);\n}\necho \"No redirection requested.\";",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "php_41": {
        "input": "<?php\nclass SecureApp {\n    public function displayPage() {\n        echo '<html><head><title>Secure Page</title></head><body><h1>Welcome!</h1></body></html>';\n    }\n}\n$app = new SecureApp();\n$app->displayPage();?>",
        "output": {
            "score": 4.2,
            "type": "Missing Security Headers"
        }
    },
    "php_42": {
        "input": "class SlowClass {\n    public function slowMethod() {\n        while(true) {}\n    }\n}",
        "output": {
            "score": 3.5,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "php_43": {
        "input": "<?php echo $_SERVER['PHP_SELF']; ?>",
        "output": {
            "score": 3.5,
            "type": "Information Disclosure (Low Severity)"
        }
    },
    "php_44": {
        "input": "<?php $file = $_GET['file']; if (strpos($file, '..') === false && file_exists($file)) { include($file); } ?>",
        "output": {
            "score": 4.2,
            "type": "Local File Inclusion (LFI) - Limited Scope"
        }
    },
    "php_45": {
        "input": "<?php\nfunction safeRedirect($url) {\n    $whitelist = [\"http://example.com\", \"https://example.com\"];\n    if (in_array($url, $whitelist)) {\n        header(\"Location: \" . filter_var($url, FILTER_SANITIZE_URL));\n        exit();\n    }\n}\n\nif (isset($_GET['redirect'])) {\n    $userInput = $_GET['redirect'];\n    safeRedirect(base64_decode($userInput));\n}\necho 'No redirect requested.';\n?>",
        "output": {
            "score": 7.5,
            "type": "Open Redirect"
        }
    },
    "php_46": {
        "input": "<?php\nfunction safeRedirect($url) {\n    $allowedHosts = [\"example.com\", \"sub.example.com\"];\n    $parsedUrl = parse_url($url);\n    if (in_array($parsedUrl['host'], $allowedHosts)) {\n        header(\"Location: \" . htmlspecialchars($url, ENT_QUOTES, 'UTF-8'));\n        exit;\n    }\n}",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "php_47": {
        "input": "<?php\nfunction safe_redirect($url) {\n    $whitelist = ['https:\\/\\/example\\.com'];\n    foreach ($whitelist as $pattern) {\n        if (preg_match(\"/^$pattern$/\", $url)) {\n            header('Location: ' . $url);\n            exit;\n        }\n    }\n    echo 'Invalid URL';\n}\nsafe_redirect($_GET['redirect']);\n?>",
        "output": {
            "score": 6.5,
            "type": "Open Redirect"
        }
    },
    "php_48": {
        "input": "<?php\nfunction slow_function() {\n    $result = '';\n    for ($i = 0; $i < 1000000; $i++) {\n        $result .= md5($i);\n    }\n    return $result;\n}\necho slow_function();\n?>",
        "output": {
            "score": 3.7,
            "type": "Denial-of-Service (DoS) - Low Impact"
        }
    },
    "php_49": {
        "input": "class WebApp {\\n    public function render() {\\n        echo \"<html><head></head><body>Welcome to our site!</body></html>\";\\n    }\\n}",
        "output": {
            "score": 4.2,
            "type": "Missing Security Headers"
        }
    },
    "php_50": {
        "input": "<?php\nfunction safeDatabaseQuery($pdo, $userId) {\n    if (!filter_var($userId, FILTER_VALIDATE_INT)) {\n        throw new InvalidArgumentException('User ID must be an integer.');\n    }\n    $stmt = $pdo->prepare('SELECT * FROM users WHERE id = :id');\n    $stmt->bindParam(':id', $userId, PDO::PARAM_INT);\n    $stmt->execute();\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n}\ntry {\n    $dsn = 'mysql:host=localhost;dbname=exampledb;charset=utf8mb4';\n    $pdo = new PDO($dsn, 'username', 'password');\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    $userId = $_GET['user_id'] ?? null;\n    $users = safeDatabaseQuery($pdo, $userId);\n    echo json_encode(['users' => $users]);\n} catch (PDOException | InvalidArgumentException $e) {\n    http_response_code(500);\n    error_log($e->getMessage());\n    echo json_encode(['error' => 'Internal Server Error']);\n}\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_51": {
        "input": "class SecureUser {\\n    private $db;\\n\\n    public function __construct($databaseConnection) {\\n        $this->db = $databaseConnection;\\n    }\\n\\n    public function register($username, $password) {\\n        if (!ctype_alnum($username)) {\\n            throw new InvalidArgumentException('Username can only contain alphanumeric characters.');\\n        }\\n\\n        if (strlen($password) < 8) {\\n            throw new InvalidArgumentException('Password must be at least 8 characters long.');\\n        }\\n\\n        $hashedPassword = password_hash($password, PASSWORD_BCRYPT);\\n        $stmt = $this->db->prepare('INSERT INTO users (username, password) VALUES (?, ?)');\\n        if (!$stmt->execute([$username, $hashedPassword])) {\\n            throw new RuntimeException('Failed to register user.');\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_52": {
        "input": "<?php\nfunction safe_database_query($pdo, $user_input) {\n    if (!filter_var($user_input, FILTER_VALIDATE_INT)) {\n        throw new InvalidArgumentException('Input must be an integer');\n    }\n    $stmt = $pdo->prepare('SELECT * FROM users WHERE id = :id');\n    $stmt->bindParam(':id', $user_input, PDO::PARAM_INT);\n    $stmt->execute();\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n}\ntry {\n    $pdo = new PDO('mysql:host=localhost;dbname=testdb', 'username', 'password');\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    $results = safe_database_query($pdo, $_GET['id']);\n    print_r($results);\n} catch (PDOException | InvalidArgumentException $e) {\n    error_log($e->getMessage());\n    http_response_code(500);\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_53": {
        "input": "<?php\nsession_start();\nrequire_once 'config.php';\nfunction sanitize_input($data) {\n    return htmlspecialchars(strip_tags(trim($data)), ENT_QUOTES, 'UTF-8');\n}\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $email = sanitize_input($_POST['email']);\n    $password = $_POST['password'];\n    try {\n        $pdo = new PDO(\"mysql:host=$DB_HOST;dbname=$DB_NAME\", $DB_USER, $DB_PASS);\n        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n        $stmt = $pdo->prepare('SELECT * FROM users WHERE email = :email');\n        $stmt->execute(['email' => $email]);\n        $user = $stmt->fetch();\n        if ($user && password_verify($password, $user['password'])) {\n            $_SESSION['user_id'] = $user['id'];\n            header('Location: dashboard.php');\n            exit;\n        } else {\n            echo 'Invalid email or password.';\n        }\n    } catch (PDOException $e) {\n        error_log($e->getMessage());\n        echo 'An error occurred. Please try again later.';\n    }\n}\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Login</title>\n</head>\n<body>\n    <form method=\"post\" action=\"\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n        <br><br>\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" id=\"password\" name=\"password\" required>\n        <br><br>\n        <button type=\"submit\">Login</button>\n    </form>\n</body>\n</html>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_54": {
        "input": "<?php\nsession_start();\nrequire_once 'config.php';\n\nfunction sanitizeInput($data) {\n    return htmlspecialchars(strip_tags(trim($data)), ENT_QUOTES, 'UTF-8');\n}\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $username = sanitizeInput($_POST['username']);\n    $password = $_POST['password'];\n\n    try {\n        $pdo = new PDO(\"mysql:host=$host;dbname=$dbname\", $dbuser, $dbpass);\n        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        $stmt = $pdo->prepare('SELECT password FROM users WHERE username = :username');\n        $stmt->execute(['username' => $username]);\n        $hashedPassword = $stmt->fetchColumn();\n\n        if (password_verify($password, $hashedPassword)) {\n            $_SESSION['user'] = $username;\n            header('Location: dashboard.php');\n            exit;\n        } else {\n            echo 'Invalid username or password.';\n        }\n    } catch (PDOException $e) {\n        error_log($e->getMessage());\n        echo 'An error occurred. Please try again later.';\n    }\n}\n\n?><!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Login</title>\n</head>\n<body>\n    <form method=\"post\" action=\"login.php\">\n        <label for=\"username\">Username:</label>\n        <input type=\"text\" id=\"username\" name=\"username\" required><br>\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" id=\"password\" name=\"password\" required><br>\n        <button type=\"submit\">Login</button>\n    </form>\n</body>\n</html>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_55": {
        "input": "class SecureUser {\\n    private $pdo;\\n\\n    public function __construct($dsn, $username, $password) {\\n        try {\\n            $this->pdo = new PDO($dsn, $username, $password);\\n            $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\\n        } catch (PDOException $e) {\\n            error_log('Connection failed: ' . $e->getMessage());\\n        }\\n    }\\n\\n    public function getUserById($id) {\\n        if (!filter_var($id, FILTER_VALIDATE_INT)) {\\n            throw new InvalidArgumentException('Invalid user ID');\\n        }\\n\\n        $stmt = $this->pdo->prepare('SELECT * FROM users WHERE id = :id');\\n        $stmt->bindParam(':id', $id, PDO::PARAM_INT);\\n        $stmt->execute();\\n        return $stmt->fetch(PDO::FETCH_ASSOC);\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_56": {
        "input": "<?php\nfunction safe_database_query($pdo, $userInput) {\n    if (!filter_var($userInput, FILTER_VALIDATE_INT)) {\n        throw new InvalidArgumentException('Invalid input');\n    }\n    $stmt = $pdo->prepare('SELECT * FROM users WHERE id = :id');\n    $stmt->execute(['id' => $userInput]);\n    return $stmt->fetchAll();\n}\ntry {\n    $pdo = new PDO('mysql:host=localhost;dbname=testdb', 'username', 'password');\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    $results = safe_database_query($pdo, $_GET['id']);\n    print_r($results);\n} catch (PDOException $e) {\n    error_log('Database error: ' . $e->getMessage());\n} catch (InvalidArgumentException $e) {\n    echo 'Invalid input provided.';\n}\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_57": {
        "input": "<?php\nfunction updateUserEmail($userId, $newEmail) {\n    // Validate user input\n    if (!filter_var($newEmail, FILTER_VALIDATE_EMAIL)) {\n        throw new InvalidArgumentException('Invalid email format');\n    }\n\n    // Assume $pdo is a PDO object properly configured for database access\n    global $pdo;\n\n    // Use prepared statements to prevent SQL injection\n    try {\n        $stmt = $pdo->prepare(\"UPDATE users SET email = :email WHERE id = :id\");\n        $stmt->execute([':email' => $newEmail, ':id' => $userId]);\n    } catch (PDOException $e) {\n        error_log('Database error: ' . $e->getMessage());\n        throw new RuntimeException('An error occurred while updating the email');\n    }\n}\n",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_58": {
        "input": "<?php\nfunction secureEcho($userInput) {\n    if (!filter_var($userInput, FILTER_VALIDATE_INT)) {\n        throw new InvalidArgumentException('Invalid input. Expected an integer.');\n    }\n    echo htmlspecialchars((string)$userInput, ENT_QUOTES, 'UTF-8');\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_59": {
        "input": "class SecureUser {\\n    private $username;\\n    private $email;\\n\\n    public function __construct($username, $email) {\\n        $this->setUsername($username);\\n        $this->setEmail($email);\\n    }\\n\\n    public function setUsername($username) {\\n        if (!preg_match('/^[a-zA-Z0-9_]{3,16}$/', $username)) {\\n            throw new InvalidArgumentException('Invalid username format.');\\n        }\\n        $this->username = htmlspecialchars($username, ENT_QUOTES, 'UTF-8');\\n    }\\n\\n    public function getUsername() {\\n        return $this->username;\\n    }\\n\\n    public function setEmail($email) {\\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\\n            throw new InvalidArgumentException('Invalid email format.');\\n        }\\n        $this->email = htmlspecialchars($email, ENT_QUOTES, 'UTF-8');\\n    }\\n\\n    public function getEmail() {\\n        return $this->email;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_60": {
        "input": "<?php\nfunction safeDatabaseQuery($pdo, $userId) {\n    if (!filter_var($userId, FILTER_VALIDATE_INT)) {\n        throw new InvalidArgumentException('Invalid user ID');\n    }\n    $stmt = $pdo->prepare('SELECT * FROM users WHERE id = :id');\n    $stmt->execute(['id' => $userId]);\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_61": {
        "input": "<?php\nfunction secureFileUpload($file, $uploadDirectory) {\n    $errors = [];\n    $allowedTypes = ['image/jpeg', 'image/png', 'application/pdf'];\n    if (!isset($file['error']) || is_array($file['error'])) {\n        $errors[] = 'Invalid parameters.';\n    }\n    switch ($file['error']) {\n        case UPLOAD_ERR_OK:\n            break;\n        case UPLOAD_ERR_NO_FILE:\n            $errors[] = 'No file sent.';\n            break;\n        case UPLOAD_ERR_INI_SIZE:\n        case UPLOAD_ERR_FORM_SIZE:\n            $errors[] = 'Exceeded filesize limit.';\n            break;\n        default:\n            $errors[] = 'Unknown errors.';\n    }\n    if ($file['size'] > 2 * 1024 * 1024) {\n        $errors[] = 'File is too large.';\n    }\n    if (!in_array($file['type'], $allowedTypes)) {\n        $errors[] = 'Invalid file type.';\n    }\n    if (empty($errors)) {\n        $extension = pathinfo($file['name'], PATHINFO_EXTENSION);\n        $newFileName = bin2hex(random_bytes(8)) . '.' . strtolower($extension);\n        $destination = rtrim($uploadDirectory, '\\/') . '/' . $newFileName;\n        if (!move_uploaded_file($file['tmp_name'], $destination)) {\n            $errors[] = 'Failed to move uploaded file.';\n        }\n    }\n    return ['success' => empty($errors), 'errors' => $errors];\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_62": {
        "input": "<?php\nfunction processUserInput($input) {\n    if (filter_var($input, FILTER_VALIDATE_EMAIL)) {\n        // Safe to use the email address\n        $safeEmail = filter_var($input, FILTER_SANITIZE_EMAIL);\n        echo \"Processed Email: \" . htmlspecialchars($safeEmail);\n    } else {\n        throw new InvalidArgumentException('Invalid email format');\n    }\n}\ntry {\n    processUserInput($_POST['user_email']);\n} catch (InvalidArgumentException $e) {\n    error_log('Error: ' . $e->getMessage());\n    echo htmlspecialchars($e->getMessage(), ENT_QUOTES, 'UTF-8');\n}\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_63": {
        "input": "class SecureUser {\\n    private $db;\\n    public function __construct($host, $dbname, $username, $password) {\\n        try {\\n            $this->db = new PDO(\"mysql:host=$host;dbname=$dbname;charset=utf8mb4\", $username, $password);\\n            $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\\n        } catch (PDOException $e) {\\n            throw new Exception('Database connection failed: ' . $e->getMessage());\\n        }\\n    }\\n    public function getUserById($id) {\\n        if (!is_numeric($id)) {\\n            throw new InvalidArgumentException('ID must be numeric.');\\n        }\\n        $stmt = $this->db->prepare(\"SELECT * FROM users WHERE id = :id\");\\n        $stmt->bindParam(':id', $id, PDO::PARAM_INT);\\n        $stmt->execute();\\n        return $stmt->fetch(PDO::FETCH_ASSOC);\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_64": {
        "input": "<?php\\nclass SecureUser {\\n    private $username;\\n    private $email;\\n\\n    public function __construct($username, $email) {\\n        $this->setUsername($username);\\n        $this->setEmail($email);\\n    }\\n\\n    public function setUsername($username) {\\n        if (!is_string($username) || empty(trim($username))) {\\n            throw new InvalidArgumentException('Invalid username');\\n        }\\n        $this->username = htmlspecialchars(trim($username), ENT_QUOTES, 'UTF-8');\\n    }\\n\\n    public function setEmail($email) {\\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\\n            throw new InvalidArgumentException('Invalid email address');\\n        }\\n        $this->email = htmlspecialchars(trim($email), ENT_QUOTES, 'UTF-8');\\n    }\\n\\n    public function getUsername() {\\n        return $this->username;\\n    }\\n\\n    public function getEmail() {\\n        return $this->email;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_65": {
        "input": "class SecureUserInput {\\n    public function validateEmail($email) {\\n        if (filter_var($email, FILTER_VALIDATE_EMAIL)) {\\n            return true;\\n        } else {\\n            throw new InvalidArgumentException('Invalid email format');\\n        }\\n    }\\n\\n    public function sanitizeString($input) {\\n        return htmlspecialchars(strip_tags(trim($input)), ENT_QUOTES, 'UTF-8');\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_66": {
        "input": "<?php\nfunction secureFunction() {\n    $pdo = new PDO('mysql:host=localhost;dbname=testdb', 'username', 'password');\n    $stmt = $pdo->prepare('SELECT * FROM users WHERE id = :id');\n    $stmt->bindParam(':id', $_GET['id'], PDO::PARAM_INT);\n    if ($stmt->execute()) {\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            echo htmlspecialchars($row['name']);\n        }\n    } else {\n        error_log('Query failed: ' . implode(', ', $stmt->errorInfo()));\n    }\n}\nsecureFunction();",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_67": {
        "input": "<?php\nfunction processUserInput($input) {\n    $filteredInput = filter_input(INPUT_POST, 'userInput', FILTER_SANITIZE_STRING);\n    if ($filteredInput === false || $filteredInput === null) {\n        throw new Exception('Invalid input provided');\n    }\n    // Example safe processing of the input\n    return htmlspecialchars($filteredInput, ENT_QUOTES, 'UTF-8');\n}\ntry {\n    echo processUserInput($_POST['userInput']);\n} catch (Exception $e) {\n    error_log('Error: ' . $e->getMessage());\n    http_response_code(400);\n    echo 'An error occurred.';\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_68": {
        "input": "<?php\nsession_start();\ninclude 'config.php';\n\nfunction validate_input($data) {\n    return htmlspecialchars(trim($data));\n}\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $username = validate_input($_POST['username']);\n    $password = $_POST['password'];\n\n    try {\n        $pdo = new PDO(\"mysql:host=$host;dbname=$dbname\", $dbUser, $dbPassword);\n        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        $stmt = $pdo->prepare('SELECT password FROM users WHERE username = :username');\n        $stmt->execute(['username' => $username]);\n        $user = $stmt->fetch();\n\n        if ($user && password_verify($password, $user['password'])) {\n            $_SESSION['loggedin'] = true;\n            $_SESSION['username'] = $username;\n            header('Location: welcome.php');\n            exit;\n        } else {\n            echo 'Invalid username or password.';\n        }\n    } catch (PDOException $e) {\n        echo 'Connection failed: ' . $e->getMessage();\n    }\n}\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_69": {
        "input": "<?php\nini_set('display_errors', 0);\nerror_reporting(E_ALL);\n\nclass SecureExample {\n    private $pdo;\n\n    public function __construct() {\n        try {\n            $this->pdo = new PDO('mysql:host=localhost;dbname=secure_db;charset=utf8', 'username', 'password');\n            $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n        } catch (PDOException $e) {\n            error_log($e->getMessage());\n            http_response_code(500);\n            echo json_encode(['error' => 'Internal Server Error']);\n            exit;\n        }\n    }\n\n    public function getUserById($id) {\n        if (!filter_var($id, FILTER_VALIDATE_INT)) {\n            http_response_code(400);\n            echo json_encode(['error' => 'Invalid input']);\n            return;\n        }\n\n        $stmt = $this->pdo->prepare('SELECT * FROM users WHERE id = :id');\n        $stmt->bindParam(':id', $id, PDO::PARAM_INT);\n        $stmt->execute();\n\n        $user = $stmt->fetch(PDO::FETCH_ASSOC);\n        if ($user) {\n            echo json_encode(['user' => $user]);\n        } else {\n            http_response_code(404);\n            echo json_encode(['error' => 'User not found']);\n        }\n    }\n}\n\n$example = new SecureExample();\nif (isset($_GET['id'])) {\n    $example->getUserById($_GET['id']);\n} else {\n    http_response_code(400);\n    echo json_encode(['error' => 'ID parameter is required']);\n}\n",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_70": {
        "input": "<?php\nfunction safeUserInput() {\n    if (isset($_GET['user_input'])) {\n        $user_input = filter_input(INPUT_GET, 'user_input', FILTER_SANITIZE_STRING);\n        if (!empty($user_input)) {\n            echo htmlspecialchars($user_input, ENT_QUOTES, 'UTF-8');\n        } else {\n            echo \"No input provided.\";\n        }\n    } else {\n        echo \"Input parameter is missing.\";\n    }\n}\nsafeUserInput();\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_71": {
        "input": "<?php\nfunction updateUserEmail($userId, $newEmail) {\n    if (!filter_var($newEmail, FILTER_VALIDATE_EMAIL)) {\n        throw new InvalidArgumentException('Invalid email format');\n    }\n\n    try {\n        $pdo = new PDO('mysql:host=localhost;dbname=appdb', 'username', 'password');\n        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        $stmt = $pdo->prepare(\"UPDATE users SET email = :email WHERE id = :id\");\n        $stmt->bindParam(':email', $newEmail);\n        $stmt->bindParam(':id', $userId, PDO::PARAM_INT);\n        $stmt->execute();\n    } catch (PDOException $e) {\n        error_log('Database error: ' . $e->getMessage());\n        throw new RuntimeException('Failed to update user email');\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_72": {
        "input": "<?php\nsession_start();\n\nfunction validateInput($data) {\n    $data = trim($data);\n    $data = stripslashes($data);\n    $data = htmlspecialchars($data);\n    return $data;\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $username = validateInput($_POST['username']);\n    $password = $_POST['password'];\n\n    // Dummy authentication logic, replace with actual database check\n    if ($username === 'admin' && password_verify($password, '$2y$10$examplehash')) {\n        $_SESSION['user'] = $username;\n        header('Location: dashboard.php');\n        exit();\n    } else {\n        echo '<p>Invalid username or password.</p>';\n    }\n}\n\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Login</title>\n</head>\n<body>\n    <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>\">\n        Username: <input type=\"text\" name=\"username\" required><br>\n        Password: <input type=\"password\" name=\"password\" required><br>\n        <input type=\"submit\" value=\"Login\">\n    </form>\n</body>\n</html>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_73": {
        "input": "<?php\nfunction safe() {\n    $userInput = filter_input(INPUT_GET, 'number', FILTER_SANITIZE_NUMBER_INT);\n    if (filter_var($userInput, FILTER_VALIDATE_INT) !== false) {\n        echo intval($userInput);\n    } else {\n        error_log('Invalid input provided: ' . $userInput);\n        http_response_code(400);\n        echo json_encode(['error' => 'Invalid input']);\n    }\n}\nsafe();\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_74": {
        "input": "<?php\nfunction safeDatabaseQuery($pdo, $username) {\n    if (!filter_var($username, FILTER_VALIDATE_REGEXP, array(\"options\"=>array(\"regexp\"=>\"/^[a-zA-Z0-9_]+$/\")))) {\n        throw new InvalidArgumentException('Invalid username format');\n    }\n    $stmt = $pdo->prepare('SELECT * FROM users WHERE username = :username');\n    $stmt->execute(['username' => $username]);\n    return $stmt->fetchAll();\n}\ntry {\n    $pdo = new PDO('mysql:host=localhost;dbname=testdb', 'user', 'password');\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    $results = safeDatabaseQuery($pdo, $_GET['username']);\n    print_r($results);\n} catch (PDOException $e) {\n    error_log('Connection failed: ' . $e->getMessage());\n    http_response_code(500);\n} catch (InvalidArgumentException $e) {\n    error_log('Invalid input: ' . $e->getMessage());\n    http_response_code(400);\n}\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_75": {
        "input": "<?php\nnamespace SecureApp;\n\nclass DatabaseHandler {\n    private $pdo;\n\n    public function __construct($dsn, $username, $password) {\n        try {\n            $this->pdo = new \\PDO($dsn, $username, $password);\n            $this->pdo->setAttribute(\\PDO::ATTR_ERRMODE, \\PDO::ERRMODE_EXCEPTION);\n        } catch (\\PDOException $e) {\n            error_log('Connection failed: ' . $e->getMessage());\n        }\n    }\n\n    public function getUserByUsername($username) {\n        if (!is_string($username)) {\n            throw new \\InvalidArgumentException('Username must be a string.');\n        }\n\n        $stmt = $this->pdo->prepare('SELECT * FROM users WHERE username = :username');\n        $stmt->execute([':username' => $username]);\n        return $stmt->fetch();\n    }\n}\n\n$username = filter_input(INPUT_GET, 'username', FILTER_SANITIZE_STRING);\nif ($username) {\n    try {\n        $dbHandler = new DatabaseHandler('mysql:host=localhost;dbname=secure_db', 'user', 'password');\n        $user = $dbHandler->getUserByUsername($username);\n        if ($user) {\n            echo htmlspecialchars(json_encode($user), ENT_QUOTES, 'UTF-8');\n        } else {\n            http_response_code(404);\n            echo json_encode(['error' => 'User not found.']);\n        }\n    } catch (\\Exception $e) {\n        error_log('Error: ' . $e->getMessage());\n        http_response_code(500);\n        echo json_encode(['error' => 'Internal Server Error.']);\n    }\n}\n",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_76": {
        "input": "<?php\n// Secure PHP code example\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'user');\ndefine('DB_PASS', 'password');\ndefine('DB_NAME', 'database');\n\ntry {\n    $pdo = new PDO(\"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME, DB_USER, DB_PASS);\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die('Database error: ' . $e->getMessage());\n}\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    if (!empty($_POST['email']) && filter_var($_POST['email'], FILTER_VALIDATE_EMAIL)) {\n        $stmt = $pdo->prepare(\"SELECT * FROM users WHERE email = :email LIMIT 1\");\n        $stmt->execute(['email' => $_POST['email']]);\n        $user = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        if ($user) {\n            echo 'User found.';\n        } else {\n            echo 'No user found.';\n        }\n    } else {\n        echo 'Invalid email format.';\n    }\n}\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_77": {
        "input": "<?php\nclass SecureUser {\n    private $db;\n\n    public function __construct($pdo) {\n        if (!($pdo instanceof PDO)) {\n            throw new InvalidArgumentException('Invalid PDO instance.');\n        }\n        $this->db = $pdo;\n    }\n\n    public function getUserById($id) {\n        if (!filter_var($id, FILTER_VALIDATE_INT)) {\n            throw new InvalidArgumentException('User ID must be an integer.');\n        }\n\n        $stmt = $this->db->prepare(\"SELECT * FROM users WHERE id = :id LIMIT 1\");\n        $stmt->bindParam(':id', $id, PDO::PARAM_INT);\n        if ($stmt->execute()) {\n            return $stmt->fetch(PDO::FETCH_ASSOC);\n        }\n\n        throw new RuntimeException('Failed to fetch user.');\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_78": {
        "input": "class SecureDatabaseConnection {\\n    private $pdo;\\n\\n    public function __construct($dsn, $username, $password) {\\n        try {\\n            $this->pdo = new \\PDO($dsn, $username, $password, [\\PDO::ATTR_ERRMODE => \\PDO::ERRMODE_EXCEPTION]);\\n        } catch (\\PDOException $e) {\\n            error_log('Connection failed: ' . $e->getMessage());\\n            throw new Exception('Database connection failed.');\\n        }\\n    }\\n\\n    public function query($sql, $params = []) {\\n        try {\\n            $stmt = $this->pdo->prepare($sql);\\n            $stmt->execute($params);\\n            return $stmt->fetchAll(\\PDO::FETCH_ASSOC);\\n        } catch (\\PDOException $e) {\\n            error_log('Query failed: ' . $e->getMessage());\\n            throw new Exception('Database query failed.');\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_79": {
        "input": "<?php\n$pdo = new PDO('mysql:host=localhost;dbname=example', 'user', 'password');\n$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n$userInput = filter_input(INPUT_GET, 'id', FILTER_SANITIZE_NUMBER_INT);\nif ($userInput !== null) {\n    $stmt = $pdo->prepare('SELECT * FROM users WHERE id = :id');\n    $stmt->execute(['id' => $userInput]);\n    $user = $stmt->fetch(PDO::FETCH_ASSOC);\n    if ($user) {\n        echo htmlspecialchars($user['name'], ENT_QUOTES, 'UTF-8');\n    } else {\n        echo 'User not found.';\n    }\n} else {\n    echo 'Invalid input.';\n}\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_80": {
        "input": "<?php\nsession_start();\nrequire_once 'database.php'; // Assume this handles database connections securely\n\nfunction validateInput($data) {\n    return htmlspecialchars(strip_tags(trim($data)));\n}\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $username = validateInput($_POST['username']);\n    $password = $_POST['password']; // Password should not be trimmed or altered\n\n    if (empty($username) || empty($password)) {\n        die(json_encode(['status' => 'error', 'message' => 'All fields are required.']));\n    }\n\n    try {\n        $stmt = $pdo->prepare('SELECT * FROM users WHERE username = :username');\n        $stmt->execute(['username' => $username]);\n        $user = $stmt->fetch();\n\n        if ($user && password_verify($password, $user['password'])) {\n            $_SESSION['user_id'] = $user['id'];\n            echo json_encode(['status' => 'success', 'message' => 'Login successful.']);\n        } else {\n            echo json_encode(['status' => 'error', 'message' => 'Invalid credentials.']);\n        }\n    } catch (PDOException $e) {\n        error_log($e->getMessage());\n        echo json_encode(['status' => 'error', 'message' => 'Database error. Please try again later.']);\n    }\n} else {\n    http_response_code(405);\n    echo json_encode(['status' => 'error', 'message' => 'Method not allowed.']);\n}\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_81": {
        "input": "class SecureUser {\\n    private $username;\\n    private $email;\\n\\n    public function __construct($username, $email) {\\n        $this->setUsername($username);\\n        $this->setEmail($email);\\n    }\\n\\n    public function setUsername($username) {\\n        if (!preg_match('/^[a-zA-Z0-9_]{3,16}$/', $username)) {\\n            throw new InvalidArgumentException('Invalid username. Must be 3-16 alphanumeric characters.');\\n        }\\n        $this->username = htmlspecialchars($username, ENT_QUOTES, 'UTF-8');\\n    }\\n\\n    public function getEmail() {\\n        return $this->email;\\n    }\\n\\n    public function setEmail($email) {\\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\\n            throw new InvalidArgumentException('Invalid email format.');\\n        }\\n        $this->email = htmlspecialchars($email, ENT_QUOTES, 'UTF-8');\\n    }\\n\\n    public function getUsername() {\\n        return $this->username;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_82": {
        "input": "class SecureUserInput {\n    private $mysqli;\n\n    public function __construct($host, $user, $password, $database) {\n        $this->mysqli = new mysqli($host, $user, $password, $database);\n        if ($this->mysqli->connect_error) {\n            throw new Exception(\"Connection failed: \" . $this->mysqli->connect_error);\n        }\n    }\n\n    public function getUserEmail($userId) {\n        if (!filter_var($userId, FILTER_VALIDATE_INT)) {\n            throw new InvalidArgumentException('User ID must be an integer.');\n        }\n\n        $stmt = $this->mysqli->prepare(\"SELECT email FROM users WHERE id = ?\");\n        if (!$stmt) {\n            throw new Exception(\"Prepare failed: \" . $this->mysqli->error);\n        }\n\n        $stmt->bind_param(\"i\", $userId);\n        $stmt->execute();\n        $result = $stmt->get_result();\n        $user = $result->fetch_assoc();\n        $stmt->close();\n\n        if ($user) {\n            return htmlspecialchars($user['email'], ENT_QUOTES, 'UTF-8');\n        } else {\n            throw new Exception('User not found.');\n        }\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_83": {
        "input": "class SecureUser {\\n    private $username;\\n    private $email;\\n    public function __construct($username, $email) {\\n        $this->setUsername($username);\\n        $this->setEmail($email);\\n    }\\n    public function setUsername($username) {\\n        if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {\\n            throw new InvalidArgumentException('Invalid username');\\n        }\\n        $this->username = htmlspecialchars($username, ENT_QUOTES, 'UTF-8');\\n    }\\n    public function setEmail($email) {\\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\\n            throw new InvalidArgumentException('Invalid email address');\\n        }\\n        $this->email = filter_var($email, FILTER_SANITIZE_EMAIL);\\n    }\\n    public function getUsername() {\\n        return $this->username;\\n    }\\n    public function getEmail() {\\n        return $this->email;\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_84": {
        "input": "<?php\nclass SecureUser {\n    private $db;\n\n    public function __construct($pdo) {\n        if (!$pdo instanceof PDO) {\n            throw new InvalidArgumentException('PDO instance is required');\n        }\n        $this->db = $pdo;\n    }\n\n    public function getUserById($id) {\n        if (!filter_var($id, FILTER_VALIDATE_INT)) {\n            throw new InvalidArgumentException('Invalid user ID');\n        }\n\n        $stmt = $this->db->prepare('SELECT * FROM users WHERE id = :id');\n        $stmt->bindParam(':id', $id, PDO::PARAM_INT);\n        $stmt->execute();\n\n        return $stmt->fetch(PDO::FETCH_ASSOC) ?: null;\n    }\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_85": {
        "input": "<?php\nsession_start();\ninclude 'config.php';\n\nfunction validateInput($data) {\n    return htmlspecialchars(trim($data));\n}\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $username = validateInput($_POST['username']);\n    $password = $_POST['password'];\n\n    if (empty($username) || empty($password)) {\n        die('Username and password are required.');\n    }\n\n    try {\n        $stmt = $pdo->prepare('SELECT * FROM users WHERE username = :username');\n        $stmt->execute(['username' => $username]);\n        $user = $stmt->fetch();\n\n        if ($user && password_verify($password, $user['password'])) {\n            $_SESSION['user_id'] = $user['id'];\n            header('Location: dashboard.php');\n            exit;\n        } else {\n            echo 'Invalid username or password.';\n        }\n    } catch (PDOException $e) {\n        error_log($e->getMessage());\n        die('Database error.');\n    }\n}\n\n?><!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Login</title>\n</head>\n<body>\n    <form method=\"post\" action=\"login.php\">\n        Username: <input type=\"text\" name=\"username\" required><br>\n        Password: <input type=\"password\" name=\"password\" required><br>\n        <button type=\"submit\">Login</button>\n    </form>\n</body>\n</html>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_86": {
        "input": "class SecureDatabaseConnection {\\n    private $pdo;\\n\\n    public function __construct($dsn, $username, $password) {\\n        try {\\n            $this->pdo = new PDO($dsn, $username, $password);\\n            $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\\n        } catch (PDOException $e) {\\n            error_log('Connection failed: ' . $e->getMessage());\\n            throw new Exception('Database connection failed.');\\n        }\\n    }\\n\\n    public function query($sql, $params = []) {\\n        try {\\n            $stmt = $this->pdo->prepare($sql);\\n            $stmt->execute($params);\\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\\n        } catch (PDOException $e) {\\n            error_log('Query failed: ' . $e->getMessage());\\n            throw new Exception('Database query failed.');\\n        }\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_87": {
        "input": "<?php\nfunction safeUserInput() {\n    if (isset($_POST['username'])) {\n        $username = filter_input(INPUT_POST, 'username', FILTER_SANITIZE_STRING);\n        if (!empty($username)) {\n            echo htmlspecialchars(\"Hello, \" . $username);\n        } else {\n            echo \"Username is required.\";\n        }\n    }\n}\nsafeUserInput();\n?>",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_88": {
        "input": "<?php\nfunction secureEcho($userInput) {\n    if (!filter_var($userInput, FILTER_VALIDATE_STRING)) {\n        throw new InvalidArgumentException('Invalid input');\n    }\n    echo htmlspecialchars($userInput, ENT_QUOTES, 'UTF-8');\n}\n",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    },
    "php_89": {
        "input": "class SecureUser {\\n    private $pdo;\\n\\n    public function __construct($dsn, $username, $password) {\\n        try {\\n            $this->pdo = new PDO($dsn, $username, $password);\\n            $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\\n        } catch (PDOException $e) {\\n            error_log('Connection failed: ' . $e->getMessage());\\n            throw new Exception('Database connection error.');\\n        }\\n    }\\n\\n    public function addUser($username, $email) {\\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\\n            throw new InvalidArgumentException('Invalid email format.');\\n        }\\n\\n        $stmt = $this->pdo->prepare('INSERT INTO users (username, email) VALUES (:username, :email)');\\n        $stmt->bindParam(':username', $username);\\n        $stmt->bindParam(':email', $email);\\n        return $stmt->execute();\\n    }\\n}",
        "output": {
            "score": 0.0,
            "type": "Secure"
        }
    }
}